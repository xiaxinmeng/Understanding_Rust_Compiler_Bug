{"url": "https://api.github.com/repos/rust-lang/rust/issues/49537", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49537/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49537/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49537/events", "html_url": "https://github.com/rust-lang/rust/issues/49537", "id": 310231873, "node_id": "MDU6SXNzdWUzMTAyMzE4NzM=", "number": 49537, "title": "ICE with impl Generator: self.has_escaping_regions", "user": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 679846574, "node_id": "MDU6TGFiZWw2Nzk4NDY1NzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-generators", "name": "A-generators", "color": "f7e101", "default": false, "description": "Area: Generators"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-31T10:48:57Z", "updated_at": "2019-04-04T11:09:10Z", "closed_at": "2019-04-04T11:09:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```rust\r\n#![feature(generators, generator_trait)]\r\n\r\nuse std::ops::Generator;\r\n\r\nmacro_rules! yield_from {\r\n    ($e:expr) => {{\r\n        let mut gen = $e;\r\n        loop {\r\n            match unsafe { ::std::ops::Generator::resume(&mut gen) } {\r\n                ::std::ops::GeneratorState::Yielded(e) => yield e,\r\n                ::std::ops::GeneratorState::Complete(e) => break e,\r\n            }\r\n        }\r\n    }};\r\n}\r\n\r\npub fn unpinned<'a, T: 'a, F, G>(\r\n    data: &'a mut T,\r\n    f: F,\r\n) -> impl Generator<Yield = G::Yield, Return = G::Return> + 'a\r\nwhere\r\n    F: FnOnce(&'a mut T) -> G + 'a,\r\n    G: Generator + 'a,\r\n{\r\n    move || yield_from!(f(data))\r\n}\r\n\r\n#[derive(Debug)]\r\nstruct Foo;\r\n\r\nimpl Foo {\r\n    pub fn foo(&mut self) {\r\n        println!(\"{:?} at {:?}\", *self, &*self as *const Self);\r\n    }\r\n}\r\n\r\nfn bar<'a>(foo: &'a mut Foo) -> impl Generator<Yield = (), Return = ()> + 'a {\r\n    move || {\r\n        let inner = unpinned(foo, |foo| {\r\n            move || {\r\n                foo.foo();\r\n                yield ();\r\n                foo.foo();\r\n            }\r\n        });\r\n        yield_from!(inner)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut foo = Foo;\r\n    let mut baz = bar(&mut foo);\r\n    println!(\"{:?}\", unsafe { baz.resume() });\r\n    println!(\"{:?}\", unsafe { baz.resume() });\r\n}\r\n```\r\n\r\n([playground](https://play.rust-lang.org/?gist=9a9d9f9dd6a283969364dbd6a59c529d&version=nightly)), errors:\r\n\r\n```\r\nthread 'rustc' panicked at 'assertion failed: !self.has_escaping_regions()', librustc/ty/mod.rs:1165:9\r\n\r\nnote: rustc 1.26.0-nightly (80785a547 2018-03-30) running on x86_64-unknown-linux-gnu\r\nnote: compiler flags: -C codegen-units=1 -C debuginfo=2 --crate-type bin\r\nnote: some of the compiler flags provided by cargo are hidden\r\n```\r\n\r\n<details><summary>click to see original with <code>Pin</code> as well</summary>\r\n\r\nThrowing all the new features together is always the best idea, right?\r\n\r\n```rust\r\n#![feature(pin, generators, generator_trait, arbitrary_self_types)]\r\n\r\nuse std::mem::Pin;\r\nuse std::ops::Generator;\r\n\r\nmacro_rules! yield_from {\r\n    ($e:expr) => ({\r\n        let mut gen = $e;\r\n        loop {\r\n            let gen = &mut gen;\r\n            // The above is to force a borrow across yield point to ensure we're\r\n            // in an immovable generator, just in case $e is an immovable\r\n            // generator (hopefully we can detect this in the future somehow).\r\n            match unsafe { ::std::ops::Generator::resume(gen) } {\r\n                ::std::ops::GeneratorState::Yielded(e) => yield e,\r\n                ::std::ops::GeneratorState::Complete(e) => break e,\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\npub fn pinned<'a, T: 'a, F, G>(\r\n    data: T,\r\n    f: F,\r\n) -> impl Generator<Yield = G::Yield, Return = G::Return> + 'a\r\nwhere\r\n    F: FnOnce(Pin<'a, T>) -> G + 'a,\r\n    G: Generator + 'a,\r\n{\r\n    static move || {\r\n        let data = data;\r\n        yield_from!(f(unsafe { Pin::new_unchecked(&mut data) }))\r\n    }\r\n}\r\n\r\n#[derive(Debug)]\r\nstruct Foo;\r\n\r\nimpl Foo {\r\n    pub fn foo(self: Pin<Self>) {\r\n        println!(\"{:?} at {:?}\", *self, &*self as *const Self);\r\n    }\r\n}\r\n\r\nfn bar() -> impl Generator<Yield = (), Return = ()> {\r\n    static move || {\r\n        let inner = pinned(Foo, |foo| {\r\n            static move || {\r\n                foo.foo();\r\n                yield ();\r\n                foo.foo();\r\n            }\r\n        });\r\n        yield_from!(inner)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut baz = bar();\r\n    println!(\"{:?}\", unsafe { baz.resume() });\r\n    println!(\"{:?}\", unsafe { baz.resume() });\r\n}\r\n```\r\n\r\n([playground](https://play.rust-lang.org/?gist=ec315662727098c65d5864f4458f75ff&version=nightly)), error:\r\n\r\n```\r\nthread 'rustc' panicked at 'assertion failed: !self.has_escaping_regions()', librustc/ty/mod.rs:1165:9\r\n\r\nnote: rustc 1.26.0-nightly (80785a547 2018-03-30) running on x86_64-unknown-linux-gnu\r\nnote: compiler flags: -C codegen-units=1 -C debuginfo=2 --crate-type bin\r\nnote: some of the compiler flags provided by cargo are hidden\r\n```\r\n\r\nI'll try and simplify this down, presumably it should be reproducible with normal references instead of `Pin`s.\r\n\r\nEDIT: Updated playground for breaking `Pin` changes: https://play.rust-lang.org/?gist=4c62d656bec128a07ea2df1d12385b66&version=nightly&mode=debug\r\n\r\n</details>", "closed_by": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49537/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49537/timeline", "performed_via_github_app": null, "state_reason": "completed"}