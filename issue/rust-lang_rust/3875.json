{"url": "https://api.github.com/repos/rust-lang/rust/issues/3875", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3875/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3875/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3875/events", "html_url": "https://github.com/rust-lang/rust/issues/3875", "id": 7908396, "node_id": "MDU6SXNzdWU3OTA4Mzk2", "number": 3875, "title": "Can force segfault with basic features", "user": {"login": "pnathan", "id": 761056, "node_id": "MDQ6VXNlcjc2MTA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/761056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnathan", "html_url": "https://github.com/pnathan", "followers_url": "https://api.github.com/users/pnathan/followers", "following_url": "https://api.github.com/users/pnathan/following{/other_user}", "gists_url": "https://api.github.com/users/pnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnathan/subscriptions", "organizations_url": "https://api.github.com/users/pnathan/orgs", "repos_url": "https://api.github.com/users/pnathan/repos", "events_url": "https://api.github.com/users/pnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/pnathan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2012-10-27T04:40:31Z", "updated_at": "2012-10-29T20:49:18Z", "closed_at": "2012-10-29T20:49:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI am using\n\n```\n$ rustc --version\nrustc 0.4 (39c0d35 2012-10-11 21:01:16 -0700)\nhost: x86_64-apple-darwin\n```\n\nand when I create this program and compile/execute it, I get a segfault (code 11):\n\n```\nextern mod std;\nuse core::cmp::{Eq, Ord};\nuse core::option;\n\n\n// A binary tree node.\nenum MaybeNode<T>\n{\n    Empty,\n    // Data, parent, left, right\n    Node(@T, @MaybeNode<T>,@MaybeNode<T>, @MaybeNode<T>)\n}\n\n\nimpl<T: Ord Eq> MaybeNode<T>: Eq {\n\n    pure fn eq(other: &MaybeNode<T>)-> bool {\n        match (self, other) {\n          ( Empty, &Empty ) => { true }\n          ( Empty, _ )  => { false }\n          ( Node(_, _, _, _), &Empty ) => { false }\n          ( Node(selfdata, _, selfLeft, selfRight),\n           &Node(otherdata, _, otherLeft, otherRight) ) => {\n\n            // We don't check parent equality. If we did, we'd have to\n            // recurse into ourselves. Ungood.\n\n            if (selfdata == otherdata) {\n\n                // Note that this kicks out the equality question to\n                // T's specification. If that happens to be a\n                // MaybeNode, we just recurse and have done with\n                // it. :-)\n                return (true\n                        && (selfLeft == otherLeft)\n                        && (selfRight == otherRight))\n            }\n            else { false }\n          }\n        }\n    }\n\n    pure fn ne(other: &MaybeNode<T>)-> bool {\n        ! self.eq(other)\n    }\n}\n\nfn node_data<T> (node: @MaybeNode<T>) -> Option<@T> {\n    match node {\n      @Empty => {None}\n      @Node(data, _, _, _) => { Some(data) }\n    }\n}\n\n\nfn insert<T: Eq Ord> (newdata: @T,\n                      node: @MaybeNode<T>) -> @MaybeNode<T> {\n    // workaround to use @empty as the default argument\n    insert_under(newdata, node, @Empty)\n}\n\nfn insert_under<T: Eq Ord> (newdata: @T,\n                      node: @MaybeNode<T>,\n                      node_parent: @MaybeNode<T>) -> @MaybeNode<T> {\n    @match node {\n      @Empty => {\n        Node(newdata, node_parent, @Empty, @Empty)\n      }\n      @Node(data, parent, left, right) => {\n        if (data == newdata) {\n            // a bst doesn't have duplicates\n            Node(data, parent, left, right)\n        }\n        else if ( data > newdata ) {\n            Node(data, parent, insert_under(newdata, left, node), right)\n        }\n        else {\n            Node(data, parent, left, insert_under(newdata, right, node))\n        }\n      }\n    }\n}\n\n\n\nfn cause_segfault() {\n\n    let mut tree = insert(@0, @Empty);\n    tree = insert(@-10, tree);\n    tree = insert(@10, tree);\n    tree = insert(@11, tree);\n    tree = insert(@5, tree);\n\n    // After uncommenting this insert, we segfault\n    tree = insert(@-5, tree);\n/*    tree = insert(@-20, tree);\n    tree = insert(@-15, tree);\n    tree = insert(@-30, tree);*/\n    match node_data(tree) {\n      None => { fail(~\"Rong\") }\n      Some(data) => { assert data == @-30 }\n    }\n    // end segfault block\n}\n\nfn main(){\n    cause_segfault();\n}\n```\n", "closed_by": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3875/timeline", "performed_via_github_app": null, "state_reason": "completed"}