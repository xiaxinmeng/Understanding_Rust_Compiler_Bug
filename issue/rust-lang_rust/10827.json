{"url": "https://api.github.com/repos/rust-lang/rust/issues/10827", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10827/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10827/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10827/events", "html_url": "https://github.com/rust-lang/rust/issues/10827", "id": 23802966, "node_id": "MDU6SXNzdWUyMzgwMjk2Ng==", "number": 10827, "title": "The string API should be more generic.", "user": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-12-05T17:29:54Z", "updated_at": "2015-02-02T17:15:38Z", "closed_at": "2015-02-02T17:15:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "# Current situation\n\nRight now, many operation you can do with a string are hard coded to one specific type, like `&str` or `char`. For example:\n\n``` rust\nlet mut s = ~\"\";\n\ns.push_str(\"foo\");\ns.push_char('a');\n\ns.contains(\"foo\");\ns.contains_char('a');\n```\n# Improving the API\n\nUsing traits and generics, these two examples could get boiled down into one `contains` and one `push`, which would accept either type while still being just as efficient as before.\n\nThere are quite a few methods that would benefit from such genericy, and so far I've identified two different kinds of traits:\n1. `StrPushable` - Anything that can be pushed to a string. String slices and `char` would implement this, but also things like `Ascii` could.\n   Functions that would benefit from this include:  \n   \n   ``` rust\n   push()\n   replace()\n   ...\n   ```\n   \n   This might be implementable with `fmt::Default` instead, but I'm not sure if it's a good idea to do that, as it would mean you could push anything to a string that implements that trait.\n2. `StrMatcher` - Anything that could be used to find a string pattern in a string.\n   Again, string slices and `char` would implement it, as well as predicate functions like `|char| -> bool`, the `Ascii` type, or things like a regex type. \n   A trait like this already exists in a limited form with the `CharEq` trait, and would if properly extend be useful for a number of functions:\n   \n   ``` rust\n   split() // all variants\n   replace()\n   find()\n   contains()\n   ...\n   ```\n# How it could look like\n\n``` rust\nlet mut s = ~\"\";\n\ns.push(\"Hello\");\ns.push('!');\ns.push(\" aaa bbb ccc\".as_ascii().to_upper());\n\nassert_eq!(s, ~\"Hello! AAA BBB CCC\");\n\nassert!(s.contains('!'));\nassert!(s.contains(char::is_whitespace));\nassert!(s.contains(regex(\"AA+\")));\n\nassert_eq!(s.split('!').collect(), ~[\"Hello\", \" AAA BBB CCC\"]);\nassert_eq!(s.split(char::is_whitespace).collect(), ~[\"Hello!\", \"AAA\", \"BBB\", \"CCC\"]);\nassert_eq!(s.split(regex(\"AA+\")).collect(), ~[\"Hello! \", \"A BBB CCC\"]);\n\n```\n# Status\n\nI'm currently working on trying out this approach, to see if there are any rough edges or issues I haven't though of, but I think this would bring the string API a great step forward.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10827/timeline", "performed_via_github_app": null, "state_reason": "completed"}