{"url": "https://api.github.com/repos/rust-lang/rust/issues/56804", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56804/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56804/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56804/events", "html_url": "https://github.com/rust-lang/rust/issues/56804", "id": 390974174, "node_id": "MDU6SXNzdWUzOTA5NzQxNzQ=", "number": 56804, "title": "Is this on purpose? -- Conflicting Impl Check", "user": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-14T05:46:46Z", "updated_at": "2018-12-15T04:11:09Z", "closed_at": "2018-12-15T04:11:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This was stumbled across while trying to hack around the conflicting trait implementation checker. I can intuit why it's sound, but it was surprising to me that the compiler was this \"smart\". I wanted to put this up to make sure we intend things to work this way. \r\n\r\nSo here's a program that is desired to work:\r\n\r\n```rust\r\ntrait Backend {\r\n    type Metadata;\r\n}\r\n\r\nstruct SuperBackend<B: Backend> {\r\n    metadata: B::Metadata,\r\n}\r\n\r\nimpl<B: Backend> ::std::borrow::Borrow<B::Metadata> for SuperBackend<B> {\r\n    fn borrow(&self) -> &B::Metadata {\r\n        &self.metadata\r\n    }\r\n}\r\n\r\nfn main() { }\r\n```\r\n\r\nBut the borrow implementation is rejected as conflicting:\r\n\r\n```\r\nerror[E0119]: conflicting implementations of trait `std::borrow::Borrow<SuperBackend<_>>` for type `SuperBackend<_>`:\r\n --> src/main.rs:9:1\r\n  |\r\n9 | impl<B: Backend> ::std::borrow::Borrow<B::Metadata> for SuperBackend<B> {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: conflicting implementation in crate `core`:\r\n          - impl<T> std::borrow::Borrow<T> for T\r\n            where T: ?Sized;\r\n```\r\n\r\nThe issue raised is that the given impl can potentially allow for `B::Metadata=Self` which completely overlaps with the blanket implementation in core. And indeed we can write a Backend implementation that does this:\r\n\r\n```\r\nstruct EvilBackend { }\r\nimpl Backend for EvilBackend {\r\n    type Metadata = SuperBackend<EvilBackend>;\r\n}\r\n```\r\n\r\nAlthough we cannot actually instantiate the type `SuperBackend<EvilBackend>` for use in our `borrow` impl, because it has infinite size! Sadly the compiler doesn't acknowledge this fact, and refuses to let us proceed.\r\n\r\nNow here's the interesting part: if we tweak our code to make the associated type a generic that we default, it compiles!\r\n\r\n```rust\r\ntrait Backend {\r\n    type Metadata;\r\n}\r\n\r\nstruct SuperBackend<B: Backend, S=<B as Backend>::Metadata> {\r\n    metadata: S,\r\n    _boo: ::std::marker::PhantomData<B>,\r\n}\r\n\r\nimpl<B: Backend, S> ::std::borrow::Borrow<S> for SuperBackend<B, S> {\r\n    fn borrow(&self) -> &S {\r\n        &self.metadata\r\n    }\r\n}\r\n\r\nfn main() { }\r\n```\r\n\r\nAgain I can reason that this is correct, because the EvilBackend implementation is now inexpressable, leading to a compilation error:\r\n\r\n```\r\nstruct EvilBackend { }\r\nimpl Backend for EvilBackend {\r\n    type Metadata = SuperBackend<EvilBackend>;\r\n}\r\n```\r\n\r\nBecause `SuperBackend<EvilBackend>` is actually sugar for a type with infinite complexity: `SuperBackend<EvilBackend, SuperBackend<EvilBackend, SuperBackend< .................`\r\n\r\nIt's *a bit* surprising to me that this kind of reasoning is (apparently?) being applied now that the infinity is at the type-description level and not hidden inside a recursive associated type projection. I can imagine those are a bit different, as perhaps static members of the trait implementation could be invoked even if the implementation is unusable (due to infinite size_of)?\r\n\r\nAnyway, just wanted to check that this is all intentional.", "closed_by": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56804/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56804/timeline", "performed_via_github_app": null, "state_reason": "completed"}