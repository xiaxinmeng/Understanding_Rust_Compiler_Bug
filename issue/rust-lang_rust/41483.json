{"url": "https://api.github.com/repos/rust-lang/rust/issues/41483", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41483/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41483/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41483/events", "html_url": "https://github.com/rust-lang/rust/issues/41483", "id": 223637993, "node_id": "MDU6SXNzdWUyMjM2Mzc5OTM=", "number": 41483, "title": "Newtype doesn't transparently wrap integers when calling FFI from Emscripten", "user": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-04-23T14:03:09Z", "updated_at": "2017-04-24T16:32:16Z", "closed_at": "2017-04-24T14:24:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The newtype pattern is useful on FFI structs to have strongly-typed variations of a base integer type when calling FFI functions:\r\n\r\n```rust\r\n#[repr(C)]\r\nstruct MySpecialId(u32);\r\n\r\nextern {\r\n  fn get_special_id() -> MySpecialId;\r\n  fn do_smth_with_special_id(id: MySpecialId);\r\n}\r\n\r\npub fn main() {\r\n  unsafe {\r\n    let id = get_special_id();\r\n    do_smth_with_special_id(id); // passes\r\n    do_smth_with_special_id(100); // typecheck fails\r\n  }\r\n}\r\n```\r\n\r\nThis works well with native targets, where such calls get lowered to just passing inner value on the stack:\r\n\r\n```rust\r\n#[repr(C)]\r\nstruct MySpecialId(u32);\r\n\r\nextern {\r\n  fn do_smth_with_special_id(id: MySpecialId);\r\n}\r\n\r\npub fn main() {\r\n  unsafe {\r\n    do_smth_with_special_id(MySpecialId(100));\r\n  }\r\n}\r\n```\r\n\r\n```asm\r\nexample::main:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        mov     edi, 100\r\n        pop     rbp\r\n        jmp     do_smth_with_special_id@PLT\r\n```\r\n\r\nHowever, when targeting Emscripten (e.g. asmjs), it changes behaviour by stack-allocating the structure and passing a pointer to it:\r\n\r\n```js\r\nfunction __ZN4temp4main17h3462209f0fd3a45cE() {\r\n var $_2 = 0, $_2$byval_copy = 0, sp = 0;\r\n sp = STACKTOP;\r\n STACKTOP = STACKTOP + 16 | 0;\r\n $_2$byval_copy = sp + 4 | 0;\r\n $_2 = sp;\r\n HEAP32[$_2 >> 2] = 100;\r\n HEAP32[$_2$byval_copy >> 2] = HEAP32[$_2 >> 2];\r\n _do_smth_with_special_id($_2$byval_copy | 0);\r\n STACKTOP = sp;\r\n return;\r\n}\r\n```\r\n\r\nSo, for example, linking with a static library generated from the following C code:\r\n\r\n```c\r\n#include <stdio.h>\r\n\r\nextern void do_smth_with_special_id(unsigned id) {\r\n    printf(\"%u\\n\", id);\r\n}\r\n```\r\n\r\nresults in printing `100` on every other target, but prints the integer value of a stack pointer (e.g. `15812`) on Emscripten targets.\r\n\r\nSame happens when linking with Emscripten JS libraries (using `--js-library` or upcoming #41409).\r\n\r\nOf course, as a workaround, I can dereference pointer on callee side every time, but this is both inefficient, and also seems that this inconsistent behaviour is rather a bug that needs to be fixed.\r\n\r\nI can see that newtypes actually map to LLVM structures and not integers:\r\n\r\n```llvm\r\ndeclare void @do_smth_with_special_id({ i64 })\r\n```\r\n\r\nso this might be considered as a bug on Emscripten side which doesn't lower such structures, or lowering could happen on Rust side to ensure consistency - not sure which side is appropriate.\r\n\r\ncc @alexcrichton @kripken", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41483/timeline", "performed_via_github_app": null, "state_reason": "completed"}