{"url": "https://api.github.com/repos/rust-lang/rust/issues/93174", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93174/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93174/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93174/events", "html_url": "https://github.com/rust-lang/rust/issues/93174", "id": 1110941708, "node_id": "I_kwDOAAsO6M5CN6AM", "number": 93174, "title": "Rust's LLVM coverage map generation should not add an unused function that doesn't have counter regions", "user": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 2483744621, "node_id": "MDU6TGFiZWwyNDgzNzQ0NjIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-code-coverage", "name": "A-code-coverage", "color": "f7e101", "default": false, "description": "Area: Source-based code coverage (-Cinstrument-coverage)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-01-21T21:05:53Z", "updated_at": "2022-01-21T21:37:47Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#93144 addressed an issue where some uncallable functions could show up in the list of unused functions. The coverage map generator adds coverage regions for unused functions (so coverage reports show these functions are not covered) and generates a function stub required by LLVM, and associates the coverage regions computed from the MIR.\r\n\r\nCertain types of functions generate no coverage regions. This only seems to be the case for functions that are never called, so they are always in the unused function list.\r\n\r\n#93144 fixed the main issue, so we no longer include those functions in the coverage map, but we are still generating the unused function stub.\r\n\r\nWhat we should do, instead, is: In `add_unused_functions()` check if an unused function has `counter_regions`, and don't call `define_unused_fn()` if there are none.\r\n\r\nThen, in the `finalize()` loop on the function_coverage_map, we should never see unused functions with no coverage. If we do, that's an error. So we can change the `if coverage_mapping_buffer.is_empty()` block to just assert that it is never empty:\r\n\r\n```rust\r\n        assert!(\r\n            !coverage_mapping_buffer.is_empty(),\r\n            \"Every `FunctionCoverage` should have at least one counter\"\r\n        );\r\n```\r\n\r\nThe reason we chose not to do this in #93144 is, computing the `counter_regions` variable is a non-trivial process, implemented in the function `get_expressions_and_counter_regions()`. We don't want to perform that process more than once per function, and `add_unused_functions()` only needs to know if counter_regions *would be returned*, without actually returning them.\r\n\r\nI'd like to work out a clean way to find this out without duplicating too much of the decision logic used to generate that `counter_regions` iterator.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93174/timeline", "performed_via_github_app": null, "state_reason": null}