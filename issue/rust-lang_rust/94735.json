{"url": "https://api.github.com/repos/rust-lang/rust/issues/94735", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94735/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94735/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94735/events", "html_url": "https://github.com/rust-lang/rust/issues/94735", "id": 1162721004, "node_id": "I_kwDOAAsO6M5FTbbs", "number": 94735, "title": "Compiler", "user": {"login": "hummingly", "id": 31522351, "node_id": "MDQ6VXNlcjMxNTIyMzUx", "avatar_url": "https://avatars.githubusercontent.com/u/31522351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hummingly", "html_url": "https://github.com/hummingly", "followers_url": "https://api.github.com/users/hummingly/followers", "following_url": "https://api.github.com/users/hummingly/following{/other_user}", "gists_url": "https://api.github.com/users/hummingly/gists{/gist_id}", "starred_url": "https://api.github.com/users/hummingly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hummingly/subscriptions", "organizations_url": "https://api.github.com/users/hummingly/orgs", "repos_url": "https://api.github.com/users/hummingly/repos", "events_url": "https://api.github.com/users/hummingly/events{/privacy}", "received_events_url": "https://api.github.com/users/hummingly/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-03-08T14:25:46Z", "updated_at": "2022-03-09T23:26:58Z", "closed_at": "2022-03-09T23:26:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\nRust-analyzer as well as the compiler fail to emit an error for map_page_indices. It seems like the impl before makes the compiler ignore it. If I remove the first impl of SparseTreeSet, a compile error is output as usual. Also cargo clean does not solve the issue. However, I cannot test on a more recent nightly as the hospital wifi is too slow.\r\n\r\nEdit 1: Minimized the code more.\r\nEdit 2: Problems seems to be that the compiler does not see that I forgot to add parentheses around a pair values and it just assumes they are tuples.\r\n\r\n### Code\r\n\r\n```Rust\r\nuse std::{\r\n    collections::hash_map::DefaultHasher,\r\n    hash::{Hash, Hasher},\r\n    marker::PhantomData,\r\n};\r\n\r\npub struct SparseTreeSet<K, V> {\r\n    sparse: Vec<Bucket>,\r\n    dense: Vec<u64>,\r\n    relations: Vec<Relation>,\r\n    values: Vec<V>,\r\n    _key_marker: PhantomData<K>,\r\n}\r\n\r\npub struct Relation {\r\n    parent: u32,\r\n    prev_sibling: u32,\r\n    next_sibling: u32,\r\n    children_count: u32,\r\n}\r\n\r\ntype Bucket = Option<Box<Chunk>>;\r\n\r\n#[derive(Clone)]\r\nstruct Chunk([u32; PAGE_SIZE as usize]);\r\n\r\nconst PAGE_BITS: u32 = 5;\r\nconst PAGE_SIZE: u32 = 2u32.pow(PAGE_BITS);\r\n\r\nconst NULL: u32 = u32::MAX;\r\n\r\nimpl<K: Hash, V> SparseTreeSet<K, V> {\r\n    pub fn subtree(&self, key: &K) -> Option<(&[Relation], &[V])> {\r\n        let start = self.get_index(key)?;\r\n        let end = self.get_subtree_end(start).cast();\r\n        Some(\r\n            &self.relations[start.cast()..end],\r\n            &self.values[start.cast()..end],\r\n        )\r\n    }\r\n}\r\n\r\nimpl<K, V> SparseTreeSet<K, V> {\r\n    fn get_subtree_end(&self, index: u32) -> u32 {\r\n        let start = index.cast();\r\n        let next_sibling = self.relations[start].next_sibling;\r\n        let len = self.relations.len();\r\n        if next_sibling > index && next_sibling < len.truncate() {\r\n            self.relations[start].next_sibling\r\n        } else {\r\n            let mut offset = self.relations[start].children_count.cast() + 1;\r\n            while offset < len && !(self.relations[offset].prev_sibling <= index) {\r\n                offset += self.relations[offset].children_count.cast() + 1;\r\n            }\r\n            offset.truncate()\r\n        }\r\n    }\r\n\r\n    fn get_index(&self, key: &impl Hash) -> Option<u32> {\r\n        let key_index = hash_key(key);\r\n        let (page, page_index) = map_page_indices(key_index);\r\n        self.sparse.get(page).and_then(|bucket| {\r\n            bucket\r\n                .as_ref()\r\n                .and_then(|b| (b[page_index] != NULL).then(|| b[page_index]))\r\n        })\r\n    }\r\n}\r\n\r\nfn hash_key(key: &impl Hash) -> u64 {\r\n    let mut hasher = DefaultHasher::new();\r\n    key.hash(&mut hasher);\r\n    hasher.finish()\r\n}\r\n\r\nfn map_page_indices(key_index: u64) -> (usize, usize) {\r\n    let page = (key_index >> PAGE_BITS).cast();\r\n    let page_index = (key_index & (PAGE_SIZE - 1)).cast();\r\n    (page, page_index)\r\n}\r\n\r\ntrait SafeCast<T> {\r\n    fn cast(self) -> T;\r\n}\r\n\r\nimpl SafeCast<usize> for u32 {\r\n    fn cast(self) -> usize {\r\n        self as usize\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.60.0-nightly (71226d717 2022-02-04)\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: compiler\\rustc_typeck\\src\\check\\fn_ctxt\\_impl.rs:318:26: while adjusting Expr { hir_id: HirId { owner: DefId(0:338 ~ allusion_proto[9561]::tree::{impl#0}::subtree), local_id: 44 }, kind: Path(Resolved(None, Path { span: src\\tree.rs:37:14: 37:18 (#0), res: Local(HirId { \r\nowner: DefId(0:338 ~ allusion_proto[9561]::tree::{impl#0}::subtree), local_id: 2 }), segments: [PathSegment { ident: self#0, hir_id: Some(HirId { owner: DefId(0:338 ~ allusion_proto[9561]::tree::{impl#0}::subtree), local_id: 43 }), res: Some(Local(HirId { owner: DefId(0:338 ~ allusion_proto[9561]::tree::{impl#0}::subtree), local_id: 2 })), args: None, infer_args: true }] })), span: src\\tree.rs:37:14: 37:18 (#0) }, can't compose [Deref(None) -> SparseTreeSet<K, V>] and [Deref(None) -> SparseTreeSet<K, V>]\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', compiler\\rustc_errors\\src\\lib.rs:1160:9\r\nstack backtrace:\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.60.0-nightly (71226d717 2022-02-04) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: --crate-type lib -C embed-bitcode=no -C debuginfo=2 -C incremental\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [typeck] type-checking `tree::<impl at src\\tree.rs:32:1: 41:2>::subtree`\r\n#1 [typeck_item_bodies] type-checking all item bodies\r\n#2 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: could not compile `allusion-proto`\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nerror: internal compiler error: compiler\\rustc_typeck\\src\\check\\fn_ctxt\\_impl.rs:318:26: while adjusting Expr { hir_id: HirId { owner: DefId(0:338 ~ allusion_proto[9561]::tree::{impl#0}::subtree), local_id: 44 }, kind: Path(Resolved(None, Path { span: src\\tree.rs:37:14: 37:18 (#0), res: Local(HirId { \r\nowner: DefId(0:338 ~ allusion_proto[9561]::tree::{impl#0}::subtree), local_id: 2 }), segments: [PathSegment { ident: self#0, hir_id: Some(HirId { owner: DefId(0:338 ~ allusion_proto[9561]::tree::{impl#0}::subtree), local_id: 43 }), res: Some(Local(HirId { owner: DefId(0:338 ~ allusion_proto[9561]::tree::{impl#0}::subtree), local_id: 2 })), args: None, infer_args: true }] })), span: src\\tree.rs:37:14: 37:18 (#0) }, can't compose [Deref(None) -> SparseTreeSet<K, V>] and [Deref(None) -> SparseTreeSet<K, V>]\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', compiler\\rustc_errors\\src\\lib.rs:1160:9\r\nstack backtrace:\r\n   0:     0x7ff943e06ff0 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hb244e4499743fa60\r\n   1:     0x7ff943e3664a - core::fmt::write::he386a1321de23221\r\n   2:     0x7ff943df7ee8 - <std::io::IoSlice as core::fmt::Debug>::fmt::h9109705453d96e26\r\n   3:     0x7ff943e0a907 - std::panicking::default_hook::h1c664fc771e7229c\r\n   4:     0x7ff943e0a4c3 - std::panicking::default_hook::h1c664fc771e7229c\r\n   5:     0x7ff93012b1d6 - <rustc_middle[9de57e7aee5035b7]::ty::SymbolName as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n   6:     0x7ff943e0b1ec - std::panicking::rust_panic_with_hook::h99f63b579d29370e\r\n   7:     0x7ff9347a2d65 - <rustc_feature[54a509b25cc73755]::builtin_attrs::AttributeType as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n   8:     0x7ff9347a2d19 - <rustc_feature[54a509b25cc73755]::builtin_attrs::AttributeType as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n   9:     0x7ff934aa7f01 - rustc_query_system[4edc07398fadc0dc]::query::job::report_cycle\r\n  10:     0x7ff9347db830 - <rustc_errors[c875eb3d3ed35e22]::ErrorReported as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  11:     0x7ff9347d8267 - <rustc_errors[c875eb3d3ed35e22]::HandlerInner>::emit_diagnostic\r\n  12:     0x7ff9347d580e - <rustc_errors[c875eb3d3ed35e22]::Handler>::bug\r\n  13:     0x7ff9344b353f - <rustc_middle[9de57e7aee5035b7]::ty::vtable::VtblEntry as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  14:     0x7ff9344b3db9 - <rustc_middle[9de57e7aee5035b7]::ty::vtable::VtblEntry as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  15:     0x7ff934a9dca0 - rustc_middle[9de57e7aee5035b7]::util::bug::bug_fmt\r\n  16:     0x7ff932a0fcc5 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::apply_adjustments\r\n  17:     0x7ff9329bcfba - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_for_cast\r\n  18:     0x7ff932a09405 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_expr_with_expectation\r\n  19:     0x7ff9329b4518 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_for_cast\r\n  20:     0x7ff932a094a6 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_expr_with_expectation\r\n  21:     0x7ff9329b4518 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_for_cast\r\n  22:     0x7ff932a0bcd5 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_expr_with_expectation\r\n  23:     0x7ff9329b4518 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_for_cast\r\n  24:     0x7ff9329c92d1 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::structurally_resolved_type\r\n  25:     0x7ff93299bbe0 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_call\r\n  26:     0x7ff9329985f7 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_call\r\n  27:     0x7ff932a0902d - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_expr_with_expectation\r\n  28:     0x7ff9329b4518 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_for_cast\r\n  29:     0x7ff9329ceb57 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_block_no_value\r\n  30:     0x7ff9329b4518 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_for_cast\r\n  31:     0x7ff9329b5404 - <rustc_typeck[9523f0690178aed4]::check::fn_ctxt::FnCtxt>::check_for_cast\r\n  32:     0x7ff932c2aaa9 - <rustc_typeck[9523f0690178aed4]::variance::constraints::ConstraintContext as rustc_hir[33c483301c74e140]::itemlikevisit::ItemLikeVisitor>::visit_foreign_item\r\n  33:     0x7ff932af7964 - <rustc_typeck[9523f0690178aed4]::check::op::Op as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  34:     0x7ff932ab4818 - rustc_typeck[9523f0690178aed4]::check::provide\r\n  35:     0x7ff9338f6a0f - <rustc_query_impl[45d3f46ffcc7d851]::on_disk_cache::EncodedSourceFileId as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  36:     0x7ff93385dae0 - <rustc_query_impl[45d3f46ffcc7d851]::on_disk_cache::EncodedSourceFileId as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  37:     0x7ff93374eab0 - <rustc_query_impl[45d3f46ffcc7d851]::Queries>::as_dyn\r\n  38:     0x7ff9335b13d2 - <rustc_mir_dataflow[7dd8cfc28066c66d]::framework::engine::RustcMirAttrs>::output_path\r\n  39:     0x7ff9336f70d5 - <rustc_mir_dataflow[7dd8cfc28066c66d]::framework::engine::RustcMirAttrs>::output_path\r\n  40:     0x7ff932b49b8e - <<dyn rustc_typeck[9523f0690178aed4]::astconv::AstConv>::create_substs_for_ast_path::SubstsForAstPathCtxt as rustc_typeck[9523f0690178aed4]::astconv::CreateSubstsForGenericArgsCtxt>::inferred_kind\r\n  41:     0x7ff932aba7d3 - <rustc_typeck[9523f0690178aed4]::check::CheckItemTypesVisitor as rustc_hir[33c483301c74e140]::itemlikevisit::ItemLikeVisitor>::visit_item\r\n  42:     0x7ff9338f9644 - <rustc_query_impl[45d3f46ffcc7d851]::on_disk_cache::EncodedSourceFileId as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  43:     0x7ff93388900d - <rustc_query_impl[45d3f46ffcc7d851]::on_disk_cache::EncodedSourceFileId as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  44:     0x7ff933753d7a - <rustc_query_impl[45d3f46ffcc7d851]::Queries>::as_dyn\r\n  45:     0x7ff93364b8de - <rustc_mir_dataflow[7dd8cfc28066c66d]::framework::engine::RustcMirAttrs>::output_path\r\n  46:     0x7ff9336c8955 - <rustc_mir_dataflow[7dd8cfc28066c66d]::framework::engine::RustcMirAttrs>::output_path\r\n  47:     0x7ff932ac5aec - <rustc_typeck[9523f0690178aed4]::check::PlaceOp as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  48:     0x7ff932a7ae75 - rustc_typeck[9523f0690178aed4]::check_crate\r\n  49:     0x7ff93023cbbf - rustc_interface[feeab83c02a6685a]::passes::analysis\r\n  50:     0x7ff9338f9194 - <rustc_query_impl[45d3f46ffcc7d851]::on_disk_cache::EncodedSourceFileId as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  51:     0x7ff933880b7d - <rustc_query_impl[45d3f46ffcc7d851]::on_disk_cache::EncodedSourceFileId as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  52:     0x7ff933744ce1 - <rustc_query_impl[45d3f46ffcc7d851]::Queries>::as_dyn\r\n  53:     0x7ff93363a0ee - <rustc_mir_dataflow[7dd8cfc28066c66d]::framework::engine::RustcMirAttrs>::output_path\r\n  54:     0x7ff9336f7522 - <rustc_mir_dataflow[7dd8cfc28066c66d]::framework::engine::RustcMirAttrs>::output_path\r\n  55:     0x7ff9300e157e - <rustc_driver[95bf5c8e465c1fbc]::args::Error as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  56:     0x7ff9300dba3f - <md5[f98078c158afda2e]::Md5 as std[9b5ceeebf257efe9]::io::Write>::flush\r\n  57:     0x7ff9300e1ec5 - <rustc_driver[95bf5c8e465c1fbc]::args::Error as core[1bfa7175043acf8b]::fmt::Debug>::fmt\r\n  58:     0x7ff9300da371 - <md5[f98078c158afda2e]::Md5 as std[9b5ceeebf257efe9]::io::Write>::flush\r\n  59:     0x7ff9300c1b83 - <md5[f98078c158afda2e]::Md5 as std[9b5ceeebf257efe9]::io::Write>::flush\r\n  60:     0x7ff9300bbce8 - <md5[f98078c158afda2e]::Md5 as std[9b5ceeebf257efe9]::io::Write>::flush\r\n  61:     0x7ff943e1b06c - std::sys::windows::thread::Thread::new::h44896cc45d24b16e\r\n  62:     0x7ff987097034 - BaseThreadInitThunk\r\n  63:     0x7ff988982651 - RtlUserThreadStart\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.60.0-nightly (71226d717 2022-02-04) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: --crate-type lib -C embed-bitcode=no -C debuginfo=2 -C incremental\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [typeck] type-checking `tree::<impl at src\\tree.rs:32:1: 41:2>::subtree`\r\n#1 [typeck_item_bodies] type-checking all item bodies\r\n#2 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: could not compile `allusion-proto`\r\n```\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "hummingly", "id": 31522351, "node_id": "MDQ6VXNlcjMxNTIyMzUx", "avatar_url": "https://avatars.githubusercontent.com/u/31522351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hummingly", "html_url": "https://github.com/hummingly", "followers_url": "https://api.github.com/users/hummingly/followers", "following_url": "https://api.github.com/users/hummingly/following{/other_user}", "gists_url": "https://api.github.com/users/hummingly/gists{/gist_id}", "starred_url": "https://api.github.com/users/hummingly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hummingly/subscriptions", "organizations_url": "https://api.github.com/users/hummingly/orgs", "repos_url": "https://api.github.com/users/hummingly/repos", "events_url": "https://api.github.com/users/hummingly/events{/privacy}", "received_events_url": "https://api.github.com/users/hummingly/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94735/timeline", "performed_via_github_app": null, "state_reason": "completed"}