{"url": "https://api.github.com/repos/rust-lang/rust/issues/107208", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107208/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107208/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107208/events", "html_url": "https://github.com/rust-lang/rust/issues/107208", "id": 1552241318, "node_id": "I_kwDOAAsO6M5chVKm", "number": 107208, "title": "missed(?) optimization with a const array of same item", "user": {"login": "iximeow", "id": 4615790, "node_id": "MDQ6VXNlcjQ2MTU3OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4615790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iximeow", "html_url": "https://github.com/iximeow", "followers_url": "https://api.github.com/users/iximeow/followers", "following_url": "https://api.github.com/users/iximeow/following{/other_user}", "gists_url": "https://api.github.com/users/iximeow/gists{/gist_id}", "starred_url": "https://api.github.com/users/iximeow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iximeow/subscriptions", "organizations_url": "https://api.github.com/users/iximeow/orgs", "repos_url": "https://api.github.com/users/iximeow/repos", "events_url": "https://api.github.com/users/iximeow/events{/privacy}", "received_events_url": "https://api.github.com/users/iximeow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "open", "locked": false, "assignee": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2023-01-22T19:01:30Z", "updated_at": "2023-04-05T17:32:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "some example code:\r\n```rust\r\nconst LUT: [u8; 2] = [\r\n    1,\r\n    1,\r\n];\r\n\r\npub fn decode(i: u8) -> u8 {\r\n    if i < 2 {\r\n        LUT[i as usize]\r\n    } else {\r\n        2\r\n    }\r\n}\r\n```\r\n\r\ncompiles to (via 1.66.1, or 1.68.0-nightly from 2023-01-21):\r\n\r\n```\r\nexample::decode:\r\n        mov     al, 2\r\n        cmp     dil, 1\r\n        ja      .LBB0_2\r\n        movzx   eax, dil\r\n        lea     rcx, [rip + .L__unnamed_1]\r\n        movzx   eax, byte ptr [rax + rcx]\r\n.LBB0_2:\r\n        ret\r\n\r\n.L__unnamed_1:\r\n        .zero   2,1\r\n```\r\n\r\nrustc faithfully produces an array of `0x01, 0x01` in the resulting program and loads from it. it seems to me rustc ought to be able to tell that all entries in the array are identical, use that value, and avoid loading from the array in the first place.\r\n\r\ni'm not entirely sure if this should be an issue against `rust-lang/rust` or bug against LLVM, but i tried looking through `I-slow` for similar reports. so i think starting here is the right call :D thanks!\r\n\r\nedit: it does seem remarkable that the load is eliminated if there is only one item in the array. that looks to be handled somewhere before generating LLVM IR, so i _think_ this is the right place.\r\n\r\n<details>\r\n  <summary>i happened to notice this with LUT being an array of function pointers, included for completeness</summary>\r\n\r\n```rust\r\nconst LUT: [fn() -> u8; 2] = [\r\n    || { 1 },\r\n    || { 1 },\r\n];\r\n\r\npub fn decode(i: u8) -> u8 {\r\n    if i < 2 {\r\n        LUT[i as usize]()\r\n    } else {\r\n        2\r\n    }\r\n}\r\n```\r\n\r\ncompiles to (via 1.66.1, or 1.68.0-nightly from 2023-01-21):\r\n```\r\ncore::ops::function::FnOnce::call_once:\r\n\tmov\tal, 1\r\n\tret\r\n\r\nplayground::decode:\r\n\tcmp\tdil, 1\r\n\tja\t.LBB1_1\r\n\tmovzx\teax, dil\r\n\tlea\trcx, [rip + .L__unnamed_1]\r\n\tjmp\tqword ptr [rcx + 8*rax]\r\n\r\n.LBB1_1:\r\n\tmov\tal, 2\r\n\tret\r\n\r\n.L__unnamed_1:\r\n\t.quad\tcore::ops::function::FnOnce::call_once\r\n\t.quad\tcore::ops::function::FnOnce::call_once\r\n```\r\n\r\nsimilarly, the array is indexed regardless of the fact that the array's items are all identical. this, in turn, is a minimized form of the original code with dozens of entries in the array. in that case, `LUT` is an associated item on a trait where one implementation happens to result in all function pointers being the same nearly-no-op function.\r\n</details>", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107208/timeline", "performed_via_github_app": null, "state_reason": null}