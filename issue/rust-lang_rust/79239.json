{"url": "https://api.github.com/repos/rust-lang/rust/issues/79239", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79239/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79239/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79239/events", "html_url": "https://github.com/rust-lang/rust/issues/79239", "id": 747721282, "node_id": "MDU6SXNzdWU3NDc3MjEyODI=", "number": 79239, "title": "Consider providing an universal way to read (proc macro) dylib metadata.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 13242248, "node_id": "MDU6TGFiZWwxMzI0MjI0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-metadata", "name": "A-metadata", "color": "f7e101", "default": false, "description": "Area: crate metadata"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-11-20T18:52:02Z", "updated_at": "2020-11-21T01:59:29Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In https://github.com/EmbarkStudios/rust-gpu/pull/268, I used `rustc_codegen_llvm`'s implementation of `get_dylib_metadata`, in order to support proc macros, and also found out that `rustc_codegen_cranelift` uses the `object` crate for its `get_dylib_metadata`.\r\n(Both the LLVM and the `object`-based implementation extract the `.rustc` section of an `.so`, `.dll`, etc.)\r\n\r\nAFAICT, the codegen backend shouldn't really matter, for proc macros specifically, as the proc macro is compiled for the same (\"host\") platform executing `rustc`, and for which we have `dlopen` (or equivalent) support.\r\n\r\nSo if we trust the `object` crate to work for at least proc macros, we can attempt to access the dylib metadata using it (i.e. just like `rustc_codegen_cranelift` does), before we ask the codegen backend for a fallback implementation (which could specifically handle non-proc-macro *target* `dylib` crates).\r\n\r\ncc @bjorn3 @khyperia @nagisa ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79239/timeline", "performed_via_github_app": null, "state_reason": null}