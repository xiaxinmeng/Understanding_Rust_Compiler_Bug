{"url": "https://api.github.com/repos/rust-lang/rust/issues/110656", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110656/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110656/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110656/events", "html_url": "https://github.com/rust-lang/rust/issues/110656", "id": 1679110952, "node_id": "I_kwDOAAsO6M5kFTMo", "number": 110656, "title": "New \"infinite recursion\" error in latest nightly (2023-04-21)", "user": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2023-04-21T21:15:32Z", "updated_at": "2023-04-26T16:14:44Z", "closed_at": "2023-04-26T16:14:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I will spend a bit of time minimizing this, but I'm filing an issue now while the details are fresh in my head, since I might not have time until tomorrow.\r\n\r\nMy crate [has the following recursive function](https://github.com/rust-bitcoin/rust-miniscript/blob/34f77df/src/policy/concrete.rs#L666-L686) which takes a `FnMut` `pred` and then calls itself with `&mut pred`. This causes an infinite chain of `&mut &mut &mut ...` for the compiler when trying to resolve `F: FnMut`. This seems natural enough **except** that this code has been present for at least 2 years, and has worked fine until the 2023-04-21 nightly. The 2023-04-20 will accept it.\r\n\r\nSpecifically the error is\r\n```\r\nerror[E0275]: overflow evaluating the requirement `F: FnMut<(&Pk,)>`\r\n  |\r\n  = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`miniscript`)\r\n  = note: required for `&mut AAA` to implement `FnMut<(&Pk,)>`\r\n  = note: 128 redundant requirements hidden\r\n  = note: required for `&mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut ...` to implement `FnMut<(&Pk,)>`\r\n  = note: the full type name has been written to '/store/home/apoelstra/code/rust-bitcoin/miniscript/master/target/release/deps/miniscript-79ed028b5570a04b.long-type-1335565870067577868.txt'\r\n```\r\n\r\nThere is a workaround, which is to replace the offending `&mut pred` with `&mut |key| pred(key)`, but I don't understand exactly what type magic is going on here that makes one okay but not the other. It never occurred to me to use this form except that I showed this error to GPT4 and that's what it suggested I do.\r\n\r\nMy questions are then:\r\n* Is this a regression in the compiler?\r\n* Is my code at fault?\r\n* Why does `&mut |key| pred(key)` break the recursion? Thoughout my codebase, but not here for some reason, I have a number of functions that take `&mut F` with `F: FnMut` rather than directly taking `F`. I call these functions names like `real_for_each` and then call them from the API-exposed `for_each` which directly takes `F`. Is this closure trick an alternative solution to avoiding compiler errors?", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110656/timeline", "performed_via_github_app": null, "state_reason": "completed"}