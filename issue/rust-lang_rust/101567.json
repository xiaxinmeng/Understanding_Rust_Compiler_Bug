{"url": "https://api.github.com/repos/rust-lang/rust/issues/101567", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101567/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101567/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101567/events", "html_url": "https://github.com/rust-lang/rust/issues/101567", "id": 1365956481, "node_id": "I_kwDOAAsO6M5RateB", "number": 101567, "title": "Missed enum layout optimization with a NonZeroU64 + more space in an enum", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1944310735, "node_id": "MDU6TGFiZWwxOTQ0MzEwNzM1", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-layout", "name": "A-layout", "color": "f7e101", "default": false, "description": "Area: Memory layout of types"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2022-09-08T10:05:35Z", "updated_at": "2022-12-21T10:45:36Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The `Provenance` type defined here is [24 bytes in size](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=7a3f56a0785aa4888ca3109fa5831a41):\r\n```rust\r\nuse std::num::NonZeroU64;\r\n\r\npub enum Provenance {\r\n    Concrete {\r\n        alloc_id: NonZeroU64,\r\n        sb: NonZeroU64,\r\n    },\r\n    Wildcard,\r\n    None,\r\n}\r\n```\r\nHowever, it should be possible to encode `Provenance` in 16 bytes: e.g. `(0usize, 0suize)` could encode `None` and `(0usize, 1usize)` could encode `Wildcard`.\r\n\r\nIn Miri, a [slight variant of this](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=7a3f56a0785aa4888ca3109fa5831a41) would help reduce the size of a fairly common type from 32 bytes to 24 bytes.\r\n\r\nUnfortunately even https://github.com/rust-lang/rust/pull/94075 does not help here. The entire concept of reading a single field to determine the discriminant is not flexible enough to represent this layout.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101567/timeline", "performed_via_github_app": null, "state_reason": null}