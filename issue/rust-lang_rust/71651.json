{"url": "https://api.github.com/repos/rust-lang/rust/issues/71651", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71651/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71651/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71651/events", "html_url": "https://github.com/rust-lang/rust/issues/71651", "id": 608499951, "node_id": "MDU6SXNzdWU2MDg0OTk5NTE=", "number": 71651, "title": "Enabling `+crt-static` in a blanket way breaks dynamic libraries including proc macros", "user": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2020-04-28T17:47:15Z", "updated_at": "2023-01-13T19:33:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is pretty much https://github.com/rust-lang/cargo/issues/7563 generalized, which was fixed in https://github.com/rust-lang/rust/pull/69519, which I don't consider a correct or satisfactory solution.\r\nhttps://github.com/rust-lang/rust/pull/71586 may be a good preliminary reading.\r\n\r\n---\r\nIf you are building something with Cargo and set `-C target-feature=+crt-static` through `RUSTFLAGS`, or `crt-static` is enabled by default through a target specification, it will be set for all crates during the build, including proc macros and cdylibs (and build scripts?).\r\n\r\nIn most cases this is not an intention when we are enabling `crt-static`.\r\nIn most cases the intention is to enable it for executables only.\r\n\r\nSo if enabling `crt-static` for executables (via env var or a target spec) also enables it for libraries, it usually results only in \"collateral damage\".\r\nIf the target doesn't support `+crt-static` for libaries, we just get an error like https://github.com/rust-lang/cargo/issues/7563 reported.\r\nIf the target supports `+crt-static` for libraries, we get a very weird library which is unlikely to work when dynamically loaded as a proc macro crate (I didn't verify that though).\r\n\r\nAs a result, we need a way to enable `crt-static` for executables without collaterally damaging libaries.\r\nMoreover, this way should be the default.\r\n\r\n---\r\nhttps://github.com/rust-lang/rust/pull/71586#discussion_r416054543 lists some possible alternatives of doing this.\r\n\r\n- Automatically enable `-Ctarget-feature=-crt-static` for proc macro crates or all libraries in Cargo (cc @ehuss), modifying RUSTFLAGS. Question: how to opt-out?\r\n- Introduce a new options `-Ctarget-feature=+crt-static-dylib` controlling static linking of libraries instead of `-Ctarget-feature=-crt-static`. It would almost never be used on Unix-like targets (not sure about windows-msvc and wasm).\r\n- Keep the existing meaning of `crt-static`, but introduce a new option `-C disable-crt-static-for-dylibs` or something. Cargo would then use it for proc macro crates or all libraries. Question: how to opt-out?\r\n- Ignore `+crt-static` for libraries if the target doesn't support it. This is fragile, musl actually supports it despite the current value of the flag of the musl target spec. If the flag is enabled, proc macros will break.\r\n- Ignore `+crt-static` for libraries always. It is almost never used on Unix-like targets (not sure about windows-msvc and wasm). `+crt-static-dylib` looks strictly better.\r\n- Have two `crt-static` defaults in target specs - one for executables and one for libraries. Solves one half of the problem, but explicit `+crt-static` in `RUSTFLAGS` will still cause collateral damage.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71651/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71651/timeline", "performed_via_github_app": null, "state_reason": null}