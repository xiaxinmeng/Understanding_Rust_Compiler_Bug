{"url": "https://api.github.com/repos/rust-lang/rust/issues/9864", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9864/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9864/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9864/events", "html_url": "https://github.com/rust-lang/rust/issues/9864", "id": 21001494, "node_id": "MDU6SXNzdWUyMTAwMTQ5NA==", "number": 9864, "title": "RFC: Links to Rust items in documentation text", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-10-15T07:57:08Z", "updated_at": "2015-02-02T10:57:46Z", "closed_at": "2015-02-02T10:57:46Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "(The syntax should be decided on. `<<<>>>` is just a bad-by-design placeholder so that it gets changed.)\n\n``` rust\n/// Foo bar. See also <<<baz>>> or <<<qux::foo>>>\npub fn foo() { }\n\npub struct Thing {\n    /// Read by <<<Trait.read_x>>>\n    x: int\n}\n\npub trait Trait {\n    /// Something something <<<Thing.x>>>\n    fn use_x(&self) {}\n}\n\nimpl Thing {\n    /// For use with <<<Thing.gadgets>>>\n    pub fn stuff() -> Thing {}\n\n    /// Get things from <<<Thing::stuff>>>\n    pub fn gadgets(&self) {}\n}\n\npub enum Enum {\n    /// Is different to <<<VariantB>>>\n    VariantA,\n    /// Not the same as <<<VariantA>>>\n    VariantB\n}\n\n/// Blah blah <<<self::Enum>>>\npub fn bar() {}\n\n/// Designed for use with <<<::std::option::Option>>>\n/// or <<<::another::crate::Struct.field>>>\npub mod qux {\n    /// Maybe <<<super::foo>> is relevant too.\n    pub fn foo() {}\n}\n```\n\nThe text in `<<<...>>>` would be interpreted as a module-relative path (unless prefixed by `::` which makes it crate-relative), since I imagine intra-module links are the most common. And each `<<<foo::bar>>>` would get replaced by either `[`bar`](rustdoc generated link)` or `[`foo::bar`](rustdoc generated link)` or something (possibly/preferably linking each component of the path in the latter case).\n## Issues\n\nI'm very unsure about:\n- how to write a link static methods on traits/types in a way that can be implemented easily (since the `use` proposal below doesn't work with `use Trait::static_method` or with types either); \n- distinguishing between methods `<<<foo.method>>>` and fields `<<<foo.field>>>`.\n## Other tools\n- Haddock: `'Foo.Bar'`\n- Sphinx: `:py:mod:`foo``\n- Javadoc: `{@link #foo(type, type)}`\n- RDoc: `{text here][rdoc-ref:Foo::Bar]`\n\n(These aren't necessarily correct, and I'm sure there are many many more possible syntaxes.)\n## Implementation\n\nOne possibility for implementation by rustdoc just throwing the contents of each `<<<>>>` into a use statement in the current module like (from the top of the example above):\n\n``` rust\nuse unique_name_1 = self::bar;\nuse unique_name_2 = self::qux::foo;\nuse unique_name_3 = self::Trait;\nuse unique_name_4 = self::Thing;\n// ...\nuse unique_name_10 = std::option::Option;\nuse unique_name_11 = another::crate::Struct;\n\n// inside qux\nuse unique_name_1 = super::foo;\n```\n\nwhere `unique_name_...` would be designed in so that it can never occur in user code (e.g. containing non-ident characters). After running resolve, rustdoc could go in an extract the value of each name. Notably, the optional `.<ident>` gets stripped, and has to be extracted by the rustdoc code itself, and this would also mean that documentation could result in a compile error if any of these links doesn't resolve properly (which is quite sensible IMO).\n\nA nicer method would be if resolve could be queried for individual items after running as a whole.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9864/timeline", "performed_via_github_app": null, "state_reason": "completed"}