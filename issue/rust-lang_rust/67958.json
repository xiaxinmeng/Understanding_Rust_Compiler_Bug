{"url": "https://api.github.com/repos/rust-lang/rust/issues/67958", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67958/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67958/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67958/events", "html_url": "https://github.com/rust-lang/rust/issues/67958", "id": 546037898, "node_id": "MDU6SXNzdWU1NDYwMzc4OTg=", "number": 67958, "title": "Built-in derive macros require that all generics are bound to the derived trait even when not necessary", "user": {"login": "4lDO2", "id": 47702593, "node_id": "MDQ6VXNlcjQ3NzAyNTkz", "avatar_url": "https://avatars.githubusercontent.com/u/47702593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4lDO2", "html_url": "https://github.com/4lDO2", "followers_url": "https://api.github.com/users/4lDO2/followers", "following_url": "https://api.github.com/users/4lDO2/following{/other_user}", "gists_url": "https://api.github.com/users/4lDO2/gists{/gist_id}", "starred_url": "https://api.github.com/users/4lDO2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4lDO2/subscriptions", "organizations_url": "https://api.github.com/users/4lDO2/orgs", "repos_url": "https://api.github.com/users/4lDO2/repos", "events_url": "https://api.github.com/users/4lDO2/events{/privacy}", "received_events_url": "https://api.github.com/users/4lDO2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-07T02:08:57Z", "updated_at": "2020-01-07T10:11:02Z", "closed_at": "2020-01-07T10:11:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code fails to compile because all built-in derive macros seem to require that every generic type parameter is bound to the trait that the derive macro implements.\r\n\r\n```rust\r\nuse std::fmt::Debug;\r\n\r\ntrait Trait {\r\n    type AssociatedType: Debug;\r\n}\r\n\r\n#[derive(Debug)]\r\nenum Enum<T: Trait> {\r\n    A {\r\n        thing: T::AssociatedType,\r\n    }\r\n}\r\n\r\n// No Debug impl\r\nstruct S;\r\n\r\nimpl Trait for S {\r\n    type AssociatedType = u8;\r\n}\r\n\r\nfn main() {\r\n    let e = Enum::<S>::A { thing: 255u8 };\r\n    println!(\"{:?}\", e); // Enum<S> doesn't impl Debug because S doesn't\r\n}\r\n```\r\nIn this case, since a field of type `T` isn't stored directly in the enum, but simply an associated type from it, it would be logical for the impl to not require `T: Debug`. Instead, it seems like all built-in derive macro implementations require that every generic type parameter is also bound to the trait itself.\r\n\r\nThe same thing happens to structs as well, and for  `Clone` (and probably all of the other built-in derive macros).\r\n```rust\r\ntrait Trait {\r\n    type Type: Clone;\r\n}\r\n\r\n#[derive(Clone)]\r\nstruct Struct<T: Trait> {\r\n    field: T::Type,\r\n}\r\n\r\n// No Clone impl\r\nstruct Implementer;\r\nimpl Trait for Implementer {\r\n    type Type = u8;\r\n}\r\n\r\nfn main() {\r\n    let s = Struct::<Implementer> { field: 42u8 };\r\n    let s2 = s.clone(); // And hence no clone impl for Struct<Implementer>.\r\n}\r\n```\r\n\r\nIf I'm correct, the error seems to come from `rustc_builtin_macros::deriving::genric::TraitDef::create_derive_impl`, where\r\n```rust\r\n                    self.additional_bounds.iter().map(|p| {\r\n                        cx.trait_bound(p.to_path(cx, self.span, type_ident, generics))\r\n                    }).chain(\r\n                        // require the current trait\r\n                        iter::once(cx.trait_bound(trait_path.clone()))\r\n                    ).chain(\r\n                        // also add in any bounds from the declaration\r\n                        param.bounds.iter().cloned()\r\n                    ).collect();\r\n```\r\nwhere the current trait is required. The solution would probably be that a proof that `T` is actually used by directly by implementation is needed, before it is added as a trait bound in the implementation provided by the built-in derive macro.\r\n## Meta\r\n```\r\nrustc 1.40.0 (73528e339 2019-12-16)\r\nbinary: rustc\r\ncommit-hash: 73528e339aae0f17a15ffa49a8ac608f50c6cf14\r\ncommit-date: 2019-12-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.40.0\r\nLLVM version: 9.0\r\n```", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67958/timeline", "performed_via_github_app": null, "state_reason": "completed"}