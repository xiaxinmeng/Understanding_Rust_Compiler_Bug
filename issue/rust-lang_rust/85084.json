{"url": "https://api.github.com/repos/rust-lang/rust/issues/85084", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85084/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85084/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85084/events", "html_url": "https://github.com/rust-lang/rust/issues/85084", "id": 881099397, "node_id": "MDU6SXNzdWU4ODEwOTkzOTc=", "number": 85084, "title": "Make `std::fs::initial_buffer_size` a method, rename it and make it public", "user": {"login": "r00ster91", "id": 35064754, "node_id": "MDQ6VXNlcjM1MDY0NzU0", "avatar_url": "https://avatars.githubusercontent.com/u/35064754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r00ster91", "html_url": "https://github.com/r00ster91", "followers_url": "https://api.github.com/users/r00ster91/followers", "following_url": "https://api.github.com/users/r00ster91/following{/other_user}", "gists_url": "https://api.github.com/users/r00ster91/gists{/gist_id}", "starred_url": "https://api.github.com/users/r00ster91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r00ster91/subscriptions", "organizations_url": "https://api.github.com/users/r00ster91/orgs", "repos_url": "https://api.github.com/users/r00ster91/repos", "events_url": "https://api.github.com/users/r00ster91/events{/privacy}", "received_events_url": "https://api.github.com/users/r00ster91/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2021-05-08T17:41:19Z", "updated_at": "2021-10-06T19:04:37Z", "closed_at": "2021-05-09T14:20:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is cases where using `std::fs::read_to_string` or `std::fs::read` isn't the best thing to do or really cumbersome to do when your code is already shaped to actually create its own `String` and read a file into that. For instance imagine you have a file that you opened a while ago, did some processing on it like reading the metadata and now you decide to read it all into a `String`. `std::fs::read_to_string` would obviously be a very bad choice because it would open the file again. Instead it would be better to use `std::Read::read_to_string` which lets me read the content of an already existing `File` to a `String`. But then I wouldn't have the benefit that `std::fs::read_to_string` provides: an optimally allocated `String`.\r\nIn that case I would really like to use the private [`std::fs::initial_buffer_size`](https://doc.rust-lang.org/src/std/fs.rs.html#199) function that the `std` already provides and uses internally in `std::fs::read_to_string` and `std::fs::read` so that I can efficiently preallocate my very own `String` in order to be as efficient as `std::fs::read_to_string` would be.\r\nThe biggest reason that ultimately drove me to open this issue is the fact that `std::fs::read_to_string` doesn't let me keep my file that it opened. There might even be people that would open the file twice to solve this. It's obviously very bad and leads to inefficiencies.\r\n\r\nSo, in summary, there is definitely cases where you want to do this:\r\n```rust\r\nuse std::io::Read;\r\nuse std::fs;\r\n\r\nfn main() -> std::io::Result<()> {\r\n    let mut file = fs::File::open(\"hello\")?;\r\n    let mut string = String::new();\r\n    file.read_to_string(&mut string)?;\r\n    \r\n    Ok(())\r\n}\r\n```\r\nThe problem with this is that it's not efficient because `String` is not preallocating with the file's size. But as I mentioned the `std` already provides us with a function that lets us compute just that, the optimal size, but we can't use it because it's private.\r\n\r\nAll in all what I'm saying is that `initial_buffer_size` being private leads to inefficiency, inconvenience, restrictiveness and possible boilerplate code because you might just copy-paste `initial_buffer_size` into your code just to be able to preallocate efficiently. And with that, it can lead to error-proneness as well.\r\n\r\nI propose to\r\n* Make `initial_buffer_size` a method on `fs::File` taking `&self` because currently it takes `&fs::File` as its argument and I think it's just nicer like that.\r\n* Rename it to possibly `optimal_buffer_size` because I feel like that's going to be a bit clearer. Or `get_optimal_buffer_size` or `get_optimal_buffer_capacity` or `optimal_buffer_capacity`? I'm not 100% sure on which would be the most correct or appropriate here so I appreciate suggestions.\r\nIn those names `buffer` refers to whatever structure you want to optimally allocate, not just limited to `String` of course.\r\n* Make it public.\r\n\r\nIf this is accepted, I would be willing to work on it.", "closed_by": {"login": "r00ster91", "id": 35064754, "node_id": "MDQ6VXNlcjM1MDY0NzU0", "avatar_url": "https://avatars.githubusercontent.com/u/35064754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r00ster91", "html_url": "https://github.com/r00ster91", "followers_url": "https://api.github.com/users/r00ster91/followers", "following_url": "https://api.github.com/users/r00ster91/following{/other_user}", "gists_url": "https://api.github.com/users/r00ster91/gists{/gist_id}", "starred_url": "https://api.github.com/users/r00ster91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r00ster91/subscriptions", "organizations_url": "https://api.github.com/users/r00ster91/orgs", "repos_url": "https://api.github.com/users/r00ster91/repos", "events_url": "https://api.github.com/users/r00ster91/events{/privacy}", "received_events_url": "https://api.github.com/users/r00ster91/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85084/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85084/timeline", "performed_via_github_app": null, "state_reason": "completed"}