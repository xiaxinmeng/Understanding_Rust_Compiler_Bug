{"url": "https://api.github.com/repos/rust-lang/rust/issues/70453", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70453/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70453/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70453/events", "html_url": "https://github.com/rust-lang/rust/issues/70453", "id": 588822132, "node_id": "MDU6SXNzdWU1ODg4MjIxMzI=", "number": 70453, "title": "Should enum discriminants have generics in scope?", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2020-03-27T01:19:48Z", "updated_at": "2020-05-03T15:11:40Z", "closed_at": "2020-05-03T15:11:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### What are our options?\r\n1. we teach name resolution (`rustc_resolve`) to hide `enum` generic parameters from the discriminant expression\r\n    * this effectively enshrines that we don't want the parameterization to happen\r\n    * I'm not sure this can be backwards-compatible with 2.\r\n2. we keep the current name resolution support but error if we can't evaluate to concrete values\r\n    * the concrete values are necessary to check, at the definition site, that discriminants don't overlap\r\n      * there are special-cases (only the first variant having an explicit discriminant, while the rest keep counting up) where we could check w/o knowing the values\r\n      * long-term we could let more examples compile via explicit `!=` bounds\r\n    * note that expressions that use generics [can still evaluate to concrete values](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=ba0ae8e0eb712b342a61a776ac52c62f)\r\n    * we could make this work w/o `#![feature(const_generics)]` (see examples below) by using the same approach as in #70452, as `enum`s are in a similar situation that shouldn't cause query cycles\r\n    * **EDIT**: opened #70825 for this\r\n\r\n<hr/>\r\n\r\n### Examples of current behavior:\r\n\r\n**Note**: `#![feature(const_generics)]` is used below so that this special-case kicks in: https://github.com/rust-lang/rust/blob/62c6006450d8bd33a351673c1f969846d768aab4/src/librustc_typeck/collect.rs#L1183-L1185\r\n\r\nAlso, note that the reason for the uniform current treatment (which doesn't consider `enum` parameters as not in scope of discriminants), is because `rustc_resolve` treats surrounding generics as being in scope of `AnonConst`s, always - all the bugs later in compilation are due to the lack of lazy normalization (see #43408).\r\n\r\n<hr/>\r\n\r\nThis ICEs currently ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=35f8107d83236450ee805be54af9c56b)):\r\n```rust\r\n#![feature(const_generics)]\r\n\r\n#[repr(usize)]\r\nenum Foo<T> {\r\n    Zero = 0,\r\n    SizeOf = std::mem::size_of::<T>(),\r\n}\r\n```\r\nwith\r\n```\r\nerror: internal compiler error: src/librustc/ty/mod.rs:2538: enum discriminant depends on generic arguments\r\n --> src/lib.rs:6:14\r\n  |\r\n6 |     SizeOf = std::mem::size_of::<T>(),\r\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nSame thing happens if a `const` parameter is used instead of `size_of::<T>()`.\r\n\r\nIf we choose option 2, this ICE will turn into a regular error.\r\n\r\n<hr/>\r\n\r\n**EDIT**: and this currently compiles on nightly ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=1d143ce466dded9d7c6f5badc7438c7e)):\r\n```rust\r\n#![feature(const_generics, arbitrary_enum_discriminant)]\r\n\r\n#[repr(usize)]\r\nenum MyWeirdOption<T> {\r\n    None = 0,\r\n    Some(T) = std::mem::size_of::<*mut T>(),\r\n}\r\n```\r\nAnd using `*mut *mut T` instead of `*mut T` would make it work even when `T: Sized` isn't known.\r\n(If not for the substitution failure, you could remove `#![feature(const_generics)]`)\r\n\r\n\r\n<hr/>\r\n\r\n\r\n\r\ncc @rust-lang/compiler @rust-lang/lang ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70453/timeline", "performed_via_github_app": null, "state_reason": "completed"}