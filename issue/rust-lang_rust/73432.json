{"url": "https://api.github.com/repos/rust-lang/rust/issues/73432", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73432/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73432/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73432/events", "html_url": "https://github.com/rust-lang/rust/issues/73432", "id": 640154148, "node_id": "MDU6SXNzdWU2NDAxNTQxNDg=", "number": 73432, "title": "Add a pure Rust WASI target?", "user": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2020-06-17T05:32:18Z", "updated_at": "2020-12-13T01:13:13Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently `wasm32-wasi` target is tied to the [`libc`](https://github.com/WebAssembly/wasi-libc) implementation for compatibility with C/C++ code. But for pure-Rust applications C environment is unnecessary and causes a certain bloat of resulting binaries.\r\n\r\nFor example a very simple code like this:\r\n```rust\r\nfn main() {\r\n    let mut buf = [0u8; 4];\r\n    unsafe {\r\n        let _ = wasi::random_get(buf.as_mut_ptr(), buf.len());\r\n        let c = wasi::Ciovec { buf: buf.as_mut_ptr(), buf_len: buf.len() };\r\n        let _ = wasi::fd_write(1, &[c]);\r\n    }\r\n}\r\n```\r\nGets compiled into a 64 KB binary (after strip), I guess a significant amount of which has to do with correctly setting up and destroying C environment.\r\n\r\nThus it could be beneficial to add a target like `wasm32-wasi-rust` intended for pure-Rust WASI applications. Most of the preliminary work has been already done and dependence of `wasm32-wasi` on `libc` is minimal (allocator and environment functions, `abort`, `exit`, `__wasilibc_find_relpath`), so IIUC addition of such target should be relatively simple. Depending on the rate of WASI evolution, such addition could be postponed until a certain level of stabilization to reduce maintenance burden.\r\n\r\nPreviously it was proposed in #63676.\r\n\r\ncc @alexcrichton @sunfishcode", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73432/reactions", "total_count": 3, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73432/timeline", "performed_via_github_app": null, "state_reason": null}