{"url": "https://api.github.com/repos/rust-lang/rust/issues/78918", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78918/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78918/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78918/events", "html_url": "https://github.com/rust-lang/rust/issues/78918", "id": 739739585, "node_id": "MDU6SXNzdWU3Mzk3Mzk1ODU=", "number": 78918, "title": "Moving all elements out of a Vec generates worse assembly since 1.45", "user": {"login": "silverweed", "id": 7806878, "node_id": "MDQ6VXNlcjc4MDY4Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/7806878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/silverweed", "html_url": "https://github.com/silverweed", "followers_url": "https://api.github.com/users/silverweed/followers", "following_url": "https://api.github.com/users/silverweed/following{/other_user}", "gists_url": "https://api.github.com/users/silverweed/gists{/gist_id}", "starred_url": "https://api.github.com/users/silverweed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/silverweed/subscriptions", "organizations_url": "https://api.github.com/users/silverweed/orgs", "repos_url": "https://api.github.com/users/silverweed/repos", "events_url": "https://api.github.com/users/silverweed/events{/privacy}", "received_events_url": "https://api.github.com/users/silverweed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-11-10T09:27:18Z", "updated_at": "2021-10-16T20:17:06Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a regression report! \ud83d\udc1b A regression is something that changed between versions of Rust but was not supposed to.\r\n\r\nPlease provide a short summary of the regression, along with any information you feel is relevant to replicate it.\r\n-->\r\nI was looking for the best way to move all elements out of a Vec and returning them, basically what I'd write in C++ as:\r\n```c++\r\nstruct A {\r\n    std::vector<int> moveOutOfVec() {\r\n        return std::move(myV); // this empties the vector\r\n    }\r\n\r\n    std::vector<int> myV;\r\n};\r\n\r\nstd::vector<int> test(A& a) {\r\n    return a.moveOutOfVec();\r\n}\r\n```\r\n\r\nThis code generates very good assembly with clang ([link to Godbolt](https://godbolt.org/z/n41YTc))\r\n```asm\r\n        mov     rax, rdi\r\n        movups  xmm0, xmmword ptr [rsi]\r\n        movups  xmmword ptr [rdi], xmm0\r\n        mov     rcx, qword ptr [rsi + 16]\r\n        mov     qword ptr [rdi + 16], rcx\r\n        xorps   xmm0, xmm0\r\n        movups  xmmword ptr [rsi], xmm0\r\n        mov     qword ptr [rsi + 16], 0\r\n        ret\r\n```\r\n\r\nso I tried to do the equivalent with Rust.\r\n\r\n### Code\r\n\r\n**NOTE**: I always used `rustc -O` for all the following tests.\r\n\r\nI tried this code:\r\n\r\n```rust\r\npub struct A {\r\n    v: Vec<i32>\r\n}\r\n\r\nimpl A {\r\n    #[inline]\r\n    pub fn move_out_of_vec(&mut self) -> Vec<i32> {\r\n        let mut v = Vec::default();\r\n        std::mem::swap(&mut v, &mut self.v);\r\n        v\r\n    }\r\n}\r\n\r\npub fn test(a: &mut A) -> Vec<i32> {\r\n    a.move_out_of_vec()\r\n}\r\n```\r\n\r\nI expected to see similar assembly as C++.\r\n\r\nInstead, this was the output: ([link to Godbolt](https://godbolt.org/z/MohdhK))\r\n```asm\r\nexample::foo:\r\n        sub     rsp, 24\r\n        mov     rax, rdi\r\n        mov     qword ptr [rdi], 4\r\n        xorps   xmm0, xmm0\r\n        movups  xmmword ptr [rdi + 8], xmm0\r\n        mov     rcx, qword ptr [rdi + 16]\r\n        mov     qword ptr [rsp + 16], rcx\r\n        mov     rcx, qword ptr [rdi]\r\n        mov     qword ptr [rsp], rcx\r\n        mov     rcx, qword ptr [rdi + 8]\r\n        mov     qword ptr [rsp + 8], rcx\r\n        mov     rcx, qword ptr [rsi + 16]\r\n        mov     qword ptr [rdi + 16], rcx\r\n        movups  xmm0, xmmword ptr [rsi]\r\n        movups  xmmword ptr [rdi], xmm0\r\n        mov     rcx, qword ptr [rsp + 16]\r\n        mov     qword ptr [rsi + 16], rcx\r\n        mov     rcx, qword ptr [rsp]\r\n        mov     qword ptr [rsi], rcx\r\n        mov     rcx, qword ptr [rsp + 8]\r\n        mov     qword ptr [rsi + 8], rcx\r\n        add     rsp, 24\r\n        ret\r\n```\r\n\r\n### Version it worked on\r\n\r\nThe same code in 1.44.0 generates much better assembly (only if you mark the method as `inline`): ([link to Godbolt](https://godbolt.org/z/87ev6n))\r\n\r\n```asm\r\nexample::foo:\r\n        sub     rsp, 24\r\n        mov     rax, rdi\r\n        mov     rcx, qword ptr [rsi]\r\n        movups  xmm0, xmmword ptr [rsi + 8]\r\n        movaps  xmmword ptr [rsp], xmm0\r\n        mov     qword ptr [rsi], 4\r\n        xorps   xmm0, xmm0\r\n        movups  xmmword ptr [rsi + 8], xmm0\r\n        mov     qword ptr [rdi], rcx\r\n        movaps  xmm0, xmmword ptr [rsp]\r\n        movups  xmmword ptr [rdi + 8], xmm0\r\n        add     rsp, 24\r\n        ret\r\n```\r\n\r\n### Version with regression\r\n\r\nFrom 1.45.0 until current nightly, the generated code is worse (`inline` doesn't affect the output).\r\n\r\n### Notes\r\n\r\nI also tried using `drain` and `split_off` to achieve the same thing, but they both generate _far_ worse assembly, with jumps and all.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78918/timeline", "performed_via_github_app": null, "state_reason": null}