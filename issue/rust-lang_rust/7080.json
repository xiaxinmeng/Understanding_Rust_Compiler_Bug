{"url": "https://api.github.com/repos/rust-lang/rust/issues/7080", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/7080/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/7080/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/7080/events", "html_url": "https://github.com/rust-lang/rust/issues/7080", "id": 15434797, "node_id": "MDU6SXNzdWUxNTQzNDc5Nw==", "number": 7080, "title": "RFC: Consider turning `as` into a user-implementable Cast trait ", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2013-06-12T04:48:20Z", "updated_at": "2015-08-14T19:33:47Z", "closed_at": "2013-09-05T16:47:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@cmr, @huonw and I were talking in irc about how to name functions that allow you to convert from one type to another. For example, consider these str methods:\n\n```\nfn to_bytes(&str) -> ~[u8];\nfn as_bytes<'a>(&'a str) -> &'a [u8]\n```\n\nThese implement a common pattern, where in the `to` case, we are copying the string into the new vec. In the `as` case, we are making a no-copy cast from a string to a vector. \n\nIt'd be nice if we could standardize this pattern, and one way we could do this is to turn the `as` operator into a trait a user can implement, like the `Neg` trait. We can do this if we follow the pattern @nikomatsakis laid out on [his blog](http://smallcultfollowing.com/babysteps/blog/2012/10/04/refining-traits-slash-impls/). Here's a working example implementation:\n\n```\nuse std::io;\n\ntrait Cast<LHS> {\n    fn cast(LHS) -> Self;\n}\n\n////\n\ntrait IntCast {\n    fn cast_int(&self) -> int;\n}\n\nimpl<LHS: IntCast> Cast<LHS> for int {\n    fn cast(x: LHS) -> int { x.cast_int() }\n}\n\nimpl IntCast for i8 {\n    fn cast_int(&self) -> int { *self as int }\n}\n\nimpl IntCast for i16 {\n    fn cast_int(&self) -> int { *self as int }\n}\n\n////\n\ntrait StrCast {\n    fn cast_str(&self) -> ~str;\n}\n\nimpl<LHS: StrCast> Cast<LHS> for ~str {\n    fn cast(x: LHS) -> ~str { x.cast_str() }\n}\n\nimpl<'self> StrCast for &'self [u8] {\n    fn cast_str(&self) -> ~str { self.to_str() }\n}\n\n\n////\n\ntrait StrSliceCast<'self> {\n    fn cast_str_slice(&self) -> &'self str;\n}\n\nimpl<'self, LHS: StrSliceCast<'self>> Cast<LHS> for &'self str {\n    fn cast(x: LHS) -> &'self str { x.cast_str_slice() }\n}\n\nimpl<'self> StrSliceCast<'self> for &'self [u8] {\n    fn cast_str_slice(&self) -> &'self str {\n        unsafe {\n            assert!(std::str::is_utf8(*self));\n            let (ptr, len): (*u8, uint) = std::cast::transmute(*self);\n            std::cast::transmute((ptr, len + 1))\n        }\n    }\n}\n\nfn main() {\n    io::println(fmt!(\"%?\", Cast::cast::<i8, int>(5_i8)));\n    io::println(fmt!(\"%?\", Cast::cast::<i16, int>(5_i16)));\n\n    io::println(fmt!(\"%?\", Cast::cast::<&[u8], ~str>(bytes!(\"hello world\"))));\n    io::println(fmt!(\"%?\", Cast::cast::<&[u8], &str>(bytes!(\"hello world\"))));\n}\n```\n\nWhile it's a bit wordy, it does work.\n\nUnfortunately there's a third conversion option that I couldn't figure out how to fit into this paradigm, where we consume the input to produce the output:\n\n```\nfn to_option<T, U>(r: Result<T, U>) -> Option<T> {\n    match r {\n        Ok(x) => Some(x),\n        Err(_) => None,\n    }\n}\n```\n\nOther places this would be useful is when we can cheaply transform `~str` into `~[u8]`, or consume all the elements from a `HashMap` and move them into a `~[T]`. Perhaps a separate function would be best to capture this case. Or we do the reverse, and say `Cast` consumes the input, but since going from one reference type to another is cheap, we optimize that specific case. I'm not sure.\n", "closed_by": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/7080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/7080/timeline", "performed_via_github_app": null, "state_reason": "completed"}