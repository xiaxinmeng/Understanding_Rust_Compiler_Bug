{"url": "https://api.github.com/repos/rust-lang/rust/issues/61537", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61537/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61537/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61537/events", "html_url": "https://github.com/rust-lang/rust/issues/61537", "id": 452366541, "node_id": "MDU6SXNzdWU0NTIzNjY1NDE=", "number": 61537, "title": "Const generics cannot be used to implement type-level if-then-else", "user": {"login": "HadrienG2", "id": 1305080, "node_id": "MDQ6VXNlcjEzMDUwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1305080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HadrienG2", "html_url": "https://github.com/HadrienG2", "followers_url": "https://api.github.com/users/HadrienG2/followers", "following_url": "https://api.github.com/users/HadrienG2/following{/other_user}", "gists_url": "https://api.github.com/users/HadrienG2/gists{/gist_id}", "starred_url": "https://api.github.com/users/HadrienG2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HadrienG2/subscriptions", "organizations_url": "https://api.github.com/users/HadrienG2/orgs", "repos_url": "https://api.github.com/users/HadrienG2/repos", "events_url": "https://api.github.com/users/HadrienG2/events{/privacy}", "received_events_url": "https://api.github.com/users/HadrienG2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 1089771154, "node_id": "MDU6TGFiZWwxMDg5NzcxMTU0", "url": "https://api.github.com/repos/rust-lang/rust/labels/needs-rfc", "name": "needs-rfc", "color": "fceb9f", "default": false, "description": "This change is large or controversial enough that it should have an (e-)RFC accepted before doing it"}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-06-05T08:08:18Z", "updated_at": "2022-06-24T16:40:51Z", "closed_at": "2022-06-24T16:40:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "So, as part of a [mad science experiment](https://internals.rust-lang.org/t/collecting-iterators-into-arrays/10330/), I am trying to define the following trait in Rust:\r\n\r\n```rust\r\n// This is Rust-ish pseudocode, not valid Rust\r\ntrait ConstLenIterator<const LEN: usize> {\r\n    type Item;\r\n    fn next(self) -> if LEN > 0 {\r\n        (Self::Item, impl ConstLenIterator<{LEN-1}, Item=Self::Item>)\r\n    } else\r\n        ()\r\n    };\r\n}\r\n```\r\n\r\nNow, Rust would clearly need new language features such as type-level `if` and `impl Trait` in trait `fn`s for this pseudocode to actually work as-is. But [as discussed in this internals thread](https://internals.rust-lang.org/t/fixed-size-lazy-iterators/7129/4), it seems that const generics could enable a decent library-based approximation of the desired behavior:\r\n\r\n```rust\r\n#![feature(const_generics)]\r\n#![feature(const_saturating_int_methods)]\r\n\r\n// Machinery for type level if-then-else\r\nstruct Bool<const B: bool>;\r\ntrait Select<T, F> { type Out; }\r\nimpl<T, F> Select<T, F> for Bool<{true }> { type Out = T; }\r\nimpl<T, F> Select<T, F> for Bool<{false}> { type Out = F; }\r\n\r\n// if B then T, else F.\r\ntype If<T, F, const B: bool> = <Bool<{B}> as Select<T, F>>::Out;\r\n\r\ntrait ConstLenIterator<const LEN: usize> {\r\n    type Item;\r\n    type Next: ConstLenIterator<{LEN.saturating_sub(1)}, Item = Self::Item>;\r\n    fn next(self) -> If<(Self::Item, Self::Next), (), {LEN > 0}>;\r\n}\r\n```\r\n\r\nUnfortunately, this does not compile:\r\n\r\n```\r\nerror[E0277]: the trait bound `Bool<{LEN > 0}>: Select<(<Self as ConstLenIterator<LEN>>::Item, <Self as ConstLenIterator<LEN>>::Next), ()>` is not satisfied\r\n  --> src/lib.rs:16:5\r\n   |\r\n16 |     fn next(self) -> If<(Self::Item, Self::Next), (), {LEN > 0}>;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Select<(<Self as ConstLenIterator<LEN>>::Item, <Self as ConstLenIterator<LEN>>::Next), ()>` is not implemented for `Bool<{LEN > 0}>`\r\n   |\r\n   = help: the following implementations were found:\r\n             <Bool<false> as Select<T, F>>\r\n             <Bool<true> as Select<T, F>>\r\n```\r\n\r\nI have managed to reduce it to the following, admittedly silly, test case...\r\n\r\n```rust\r\n#![feature(const_generics)]\r\n\r\nstruct Bool<const B: bool>;\r\ntrait Identity { const B: bool; }\r\nimpl Identity for Bool<{true }> { const B: bool = true; }\r\nimpl Identity for Bool<{false}> { const B: bool = false; }\r\n\r\nfn should_work<const B: bool>() -> bool {\r\n    <Bool<{B}> as Identity>::B\r\n}\r\n```\r\n\r\n...which fails with...\r\n\r\n```\r\nerror[E0277]: the trait bound `Bool<B>: Identity` is not satisfied\r\n --> src/lib.rs:9:5\r\n  |\r\n9 |     <Bool<{B}> as Identity>::B\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Identity` is not implemented for `Bool<B>`\r\n  |\r\n  = help: the following implementations were found:\r\n            <Bool<false> as Identity>\r\n            <Bool<true> as Identity>\r\nnote: required by `Identity::B`\r\n --> src/lib.rs:4:18\r\n  |\r\n4 | trait Identity { const B: bool; }\r\n  |                  ^^^^^^^^^^^^^^\r\n```\r\n\r\nIt seems to me that this could be resolved by introducing some kind of impl exhaustiveness checking so that the compiler can prove that the `Identity` trait is implemented for all variants of Bool.", "closed_by": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61537/reactions", "total_count": 5, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61537/timeline", "performed_via_github_app": null, "state_reason": "completed"}