{"url": "https://api.github.com/repos/rust-lang/rust/issues/76490", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76490/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76490/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76490/events", "html_url": "https://github.com/rust-lang/rust/issues/76490", "id": 696114142, "node_id": "MDU6SXNzdWU2OTYxMTQxNDI=", "number": 76490, "title": "format_args! is slow", "user": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 2238476604, "node_id": "MDU6TGFiZWwyMjM4NDc2NjA0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-fmt", "name": "A-fmt", "color": "f7e101", "default": false, "description": "Area: std::fmt"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-09-08T19:15:39Z", "updated_at": "2022-08-10T21:15:20Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Like molasses in the Antarctic.\r\n\r\nAs a consequence, so is any method which depends on its Arguments, like `{fmt, io}::Write::write_fmt`. The microbenchmarks in [this issue about `write!`'s speed][slow_write_macro] demonstrate that merely running the same arguments through `format_args!` and then `write_fmt`, even if it's just a plain string literal without any formatting required, produces a massive slowdown next to just feeding the same through `fmt::Write::write_str` or `io::Write::write_all`.\r\n\r\nUnfortunately, `write!`, `format!`, `println!`, and other such macros are a common feature of fluent Rust code. Rust promises a lot of zero-cost abstractions, and on a scale from \"even better than you could handwrite the asm\" to \"technically, booting an entire virtual machine is zero cost if you define the expression as booting a virtual machine...\" this is currently \"not very\". Validating and formatting strings correctly can be surprisingly complex, which is going to increase with features like [implicit named arguments in format_args!][implicit_args], so we can expect increasing speed here may be challenging. However, this should be possible, even if it might require extensive redesign.\r\n\r\n### Multiple Problems, Multiple Solutions\r\n- `format_args!`'s internal machinery in the Rust compiler can likely be improved.\r\n- Consumers of Arguments, such as `fmt::{format, write}` and `{fmt, io}::Write::write_fmt`, can be reviewed for runtime performance.\r\n- Macros downstream of `format_args!` often are invoked to do something simple that does not require extensive formatting and can [use the pattern-matching feature of `macro_rules!` to special-case simple patterns][special_case_format] to side-step `format_args!` when it's not needed. This will increase the complexity of those macros and risks breakage if done incautiously, but could be a big gain in itself.\r\n\r\nUnfortunately some of these cases may run up against complex situations with types, trait bounds, and method resolutions, because e.g. both `io::Write` and `fmt::Write` both exist and `write!` needs to \"serve\" both. Fortunately, this is exactly the sort of thing that can benefit from the recent advances in const generics, since it's a lot of compile-time evaluation that could benefit from interacting with types (as opposed to being purely syntactic like macros), and in the future generic associated types and specialization may be able to minimize breakage from type issues as those features come online, so it's a good time to begin reviewing this code.\r\n\r\n### Related issues and PRs\r\n- #75742 (and #75894)\r\n- #75301 (and #75358)\r\n- #52804\r\n- #10761 \r\n\r\n[slow_write_macro]: https://github.com/rust-lang/rust/issues/10761\r\n[implicit_args]: https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html\r\n[special_case_format]: https://github.com/rust-lang/rust/issues/52804#issuecomment-408628574", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76490/reactions", "total_count": 30, "+1": 15, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 7, "rocket": 7, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76490/timeline", "performed_via_github_app": null, "state_reason": null}