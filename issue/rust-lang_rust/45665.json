{"url": "https://api.github.com/repos/rust-lang/rust/issues/45665", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45665/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45665/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45665/events", "html_url": "https://github.com/rust-lang/rust/issues/45665", "id": 270093869, "node_id": "MDU6SXNzdWUyNzAwOTM4Njk=", "number": 45665, "title": "NLL: refine liveness with \"maybe initialized\" analysis", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693664741, "node_id": "MDU6TGFiZWw2OTM2NjQ3NDE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mentor", "name": "E-needs-mentor", "color": "02e10c", "default": false, "description": "Call for participation: This issue is in need of a mentor."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/42", "html_url": "https://github.com/rust-lang/rust/milestone/42", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/42/labels", "id": 2915417, "node_id": "MDk6TWlsZXN0b25lMjkxNTQxNw==", "number": 42, "title": "NLL prototype", "description": "NLL prototype for All-Hands", "creator": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 27, "state": "closed", "created_at": "2017-11-15T20:57:55Z", "updated_at": "2018-08-04T03:41:20Z", "due_on": "2017-12-08T08:00:00Z", "closed_at": "2018-01-03T19:04:26Z"}, "comments": 5, "created_at": "2017-10-31T19:40:58Z", "updated_at": "2017-11-16T14:46:42Z", "closed_at": "2017-11-16T14:46:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As part of https://github.com/rust-lang/rust/pull/45538, we are incorporating knowledge of which variables are live (i.e., may be used later). We also distinguish \"drop-live\", which means that they may be **dropped** later.\r\n\r\nHowever, in MIR, we sometimes generate drops that we can see statically will be a no-op. For example, consider this program:\r\n\r\n```\r\n// compile-flags:-Znll\r\nfn main() {\r\n    let mut v = 1;\r\n    let p = Wrap { value: &v }; // freezes `v` so long as `p` is in use\r\n    ignore(p); // moves `p`\r\n    v += 1; // Errors, even in NLL! (At least as implemented now.)\r\n} // <-- p is dropped here, but we **know** this to be a no-op\r\n\r\nfn ignore<T>(x: T) { }\r\n\r\nstruct Wrap<T> { value: T }\r\n\r\nimpl<T> Drop for Wrap<T> {\r\n    fn drop(&mut self) { }\r\n}\r\n```\r\n\r\nThe problem is that `p` is considered \"drop-live\" at the point where `v += 1`, because there is a DROP in the MIR, even though we know that `p` must have been moved (and hence will not be dropped) at that point.\r\n\r\nOne way to account for this is to do a **maybe initialized** analysis. This is a forwards analysis that tells you, at any given point, whether a given value could possibly be initialized that this point. The idea then would be to [change the code which invokes the `add_drop_live_constraint` function](https://github.com/nikomatsakis/rust/blob/nll-liveness/src/librustc_mir/transform/nll/constraint_generation.rs#L81-L84) to take the \"maybe initialized\" state into account. In particular, if the local variable that is being dropped cannot be initialized (i.e., maybe initialized is false), then we can ignore the fact that it is drop live and just not invoke `add_drop_live_constraint` with its type.\r\n\r\nWe are already computing a \"maybe initialized\" in the borrow checker ([the variable `flow_inits`](https://github.com/nikomatsakis/rust/blame/nll-liveness/src/librustc_mir/borrow_check.rs#L126)). However, this analysis works a bit differently than the NLL code. For example, it is computed at the level of **fragments**, which are paths like `a.b.c`. This is done because it is possible that `a` was initialized, but some subpart of it (e.g., `a.b.c`) was moved, while the rest remains intact. \r\n\r\nHonestly, all the data structures are a bit out of cache for me, but the high-level idea then is that, when we know that a variable `X` is drop-live, we want to iterate over all of the subpaths of `a` that may be initialized (which the existing data structures should be able to tell us) and then invoke the existing `add_drop_live_constraint` function on the types of those fragments.\r\n\r\ncc @arielb1 @pnkfelix -- any notes you care to leave on how to find the maybe initialized fragments given a `mir::Local` would be appreciated. Else I will dig into the data structures at some point.", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45665/timeline", "performed_via_github_app": null, "state_reason": "completed"}