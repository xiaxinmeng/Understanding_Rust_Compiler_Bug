{"url": "https://api.github.com/repos/rust-lang/rust/issues/82956", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82956/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82956/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82956/events", "html_url": "https://github.com/rust-lang/rust/issues/82956", "id": 827000103, "node_id": "MDU6SXNzdWU4MjcwMDAxMDM=", "number": 82956, "title": "ICE using `const_generics` feature", "user": {"login": "AuroransSolis", "id": 25749440, "node_id": "MDQ6VXNlcjI1NzQ5NDQw", "avatar_url": "https://avatars.githubusercontent.com/u/25749440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AuroransSolis", "html_url": "https://github.com/AuroransSolis", "followers_url": "https://api.github.com/users/AuroransSolis/followers", "following_url": "https://api.github.com/users/AuroransSolis/following{/other_user}", "gists_url": "https://api.github.com/users/AuroransSolis/gists{/gist_id}", "starred_url": "https://api.github.com/users/AuroransSolis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AuroransSolis/subscriptions", "organizations_url": "https://api.github.com/users/AuroransSolis/orgs", "repos_url": "https://api.github.com/users/AuroransSolis/repos", "events_url": "https://api.github.com/users/AuroransSolis/events{/privacy}", "received_events_url": "https://api.github.com/users/AuroransSolis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-03-10T03:01:28Z", "updated_at": "2021-09-06T16:01:16Z", "closed_at": "2021-09-06T16:01:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\nhi its me again with another ice\r\n\r\n### Code\r\n\r\nI encountered this error when working on a [library](https://gitlab.com/AuroransSolis/ordes) for treating arrays/tuples a bit more like vectors by providing `.push(val)` and `.pop()` methods through trait impls. I implemented this on stable using a mcschnasty proc macro, but for nightly I tried spicing things up a bit and implementing it using the `const_generics` feature (and `const_evaluatable_checked` and `array_map`). In short, though, the code boils down to this (only `OrdesDec` included since I dunno if `OrdesInc` causes an ICE or not):\r\n```rust\r\n#![feature(const_generics, const_evaluatable_checked, array_map)]\r\n\r\npub struct ConstCheck<const CHECK: bool>;\r\n\r\npub trait True {}\r\nimpl True for ConstCheck<true> {}\r\n\r\npub trait OrdesDec {\r\n    type Newlen;\r\n    type Output;\r\n\r\n    fn pop(self) -> (Self::Newlen, Self::Output);\r\n}\r\n\r\nimpl<T, const N: usize> OrdesDec for [T; N]\r\nwhere\r\n    ConstCheck<{N > 1}>: True,\r\n    [T; N - 1]: Sized,\r\n{\r\n    type Newlen = [T; N - 1];\r\n    type Output = T;\r\n\r\n    fn pop(self) -> (Self::Newlen, Self::Output) {\r\n        let mut iter = IntoIter::new(self);\r\n        let end = iter.next_back().unwrap();\r\n        let new = [(); N - 1].map(move |()| iter.next().unwrap());\r\n        (new, end)\r\n    }\r\n}\r\n```\r\nThe issue occurs specifically when `.pop()` is used in doc tests or another crate _and_ when it's called in a manner similar to this:\r\n```rust\r\nuse ordes::OrdesDec;\r\n\r\nfn main() {\r\n    let foo = [0u8, 1, 2, 3, 4];\r\n    let (foo, pop) = foo.pop();\r\n}\r\n```\r\nThe ICE also occurs when `foo` is defined like `let foo = ['a', 'b', 'c', 'd', 'e'];` etc. However, it works just fine in `#[test]` functions in the crate it's defined in.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.52.0-nightly (35dbef235 2021-03-02)\r\nbinary: rustc\r\ncommit-hash: 35dbef235048f9a2939dc20effe083ca483c37ff\r\ncommit-date: 2021-03-02\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.52.0-nightly\r\nLLVM version: 11.0.1\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: constant expression depends on a generic parameter\r\n  |\r\n  = note: this may fail depending on what value the parameter takes\r\n\r\nerror: internal compiler error: compiler/rustc_traits/src/normalize_erasing_regions.rs:43:32: could not fully normalize `(<[T; N] as ordes::OrdesDec>::Newlen, <[T; N] as ordes::OrdesDec>::Output)`\r\n\r\nthread 'rustc' panicked at 'Box<Any>', /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/panic.rs:59:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.52.0-nightly (35dbef235 2021-03-02) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C codegen-units=1 -C embed-bitcode=no --crate-type bin\r\n\r\nquery stack during panic:\r\n#0 [normalize_generic_arg_after_erasing_regions] normalizing `(<[T; N] as ordes::OrdesDec>::Newlen, <[T; N] as ordes::OrdesDec>::Output)`\r\nend of query stack\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\nHere, I even did `RUST_BACKTRACE=full cargo test` for this one:\r\n\r\n```\r\nerror: constant expression depends on a generic parameter\r\n  |\r\n  = note: this may fail depending on what value the parameter takes\r\n\r\nerror: internal compiler error: compiler/rustc_traits/src/normalize_erasing_regions.rs:43:32: could not fully normalize `(<[T; N] as ordes::OrdesDec>::Newlen, <[T; N] as ordes::OrdesDec>::Output)`\r\n\r\nthread 'rustc' panicked at 'Box<Any>', /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/panic.rs:59:5\r\nstack backtrace:\r\n   0:     0x7f4cd4c2eeb0 - std::backtrace_rs::backtrace::libunwind::trace::h9d49145f95eb5894\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/../../backtrace/src/backtrace/libunwind.rs:90:5\r\n   1:     0x7f4cd4c2eeb0 - std::backtrace_rs::backtrace::trace_unsynchronized::hab1d020365bb6864\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   2:     0x7f4cd4c2eeb0 - std::sys_common::backtrace::_print_fmt::h7659588431e304bd\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/sys_common/backtrace.rs:67:5\r\n   3:     0x7f4cd4c2eeb0 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h09f4a9e3befae3c7\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/sys_common/backtrace.rs:46:22\r\n   4:     0x7f4cd4c9f5dc - core::fmt::write::hf3fdfde304b9a088\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/core/src/fmt/mod.rs:1092:17\r\n   5:     0x7f4cd4c221f2 - std::io::Write::write_fmt::h1cb850689c7116f0\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/io/mod.rs:1567:15\r\n   6:     0x7f4cd4c32d55 - std::sys_common::backtrace::_print::hdbccd5aa093ba544\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/sys_common/backtrace.rs:49:5\r\n   7:     0x7f4cd4c32d55 - std::sys_common::backtrace::print::hc639c4f320222558\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/sys_common/backtrace.rs:36:9\r\n   8:     0x7f4cd4c32d55 - std::panicking::default_hook::{{closure}}::hdb012dd7a485bb5d\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/panicking.rs:208:50\r\n   9:     0x7f4cd4c32803 - std::panicking::default_hook::h75facbce77b6ba91\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/panicking.rs:225:9\r\n  10:     0x7f4cd5425d4b - rustc_driver::report_ice::h01b4629c250edc77\r\n  11:     0x7f4cd4c33656 - std::panicking::rust_panic_with_hook::hbcaa5de2cb5e22d5\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/panicking.rs:595:17\r\n  12:     0x7f4cd663dede - std::panicking::begin_panic::{{closure}}::h63e7681549a10239\r\n  13:     0x7f4cd663de39 - std::sys_common::backtrace::__rust_end_short_backtrace::h55cc8bd5fcc0db45\r\n  14:     0x7f4cd663de82 - std::panicking::begin_panic::h86a3b23efd0bb448\r\n  15:     0x7f4cd661f100 - std::panic::panic_any::hb1b2c5d1a3cfa2c4\r\n  16:     0x7f4cd662244a - rustc_errors::HandlerInner::bug::hcfa29b039dbceeb3\r\n  17:     0x7f4cd6621f23 - rustc_errors::Handler::bug::h42757b5aa01edd2a\r\n  18:     0x7f4cd6565d1c - rustc_middle::ty::context::tls::with_opt::h2f706dbac3fd19ed\r\n  19:     0x7f4cd7bb7370 - rustc_middle::util::bug::opt_span_bug_fmt::h877f93abd5e75e9d\r\n  20:     0x7f4cd6565ec6 - rustc_middle::util::bug::bug_fmt::h8668d235609a7e98\r\n  21:     0x7f4cd67e47f2 - rustc_infer::infer::InferCtxtBuilder::enter::h941ddd8cd42a23f3\r\n  22:     0x7f4cd67e946a - rustc_traits::normalize_erasing_regions::normalize_generic_arg_after_erasing_regions::h2f2bca8f8f195236\r\n  23:     0x7f4cd6ab8387 - rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl::h78ffdcf789152c46\r\n  24:     0x7f4cd6a9a1b1 - rustc_data_structures::stack::ensure_sufficient_stack::ha5c2c6bf605d7ba3\r\n  25:     0x7f4cd6a73d4e - rustc_query_system::query::plumbing::force_query_with_job::h2ef22bfd2f0dd140\r\n  26:     0x7f4cd6a63b6c - rustc_query_system::query::plumbing::get_query_impl::hc0e55cbf7636eade\r\n  27:     0x7f4cd6acd1c9 - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::normalize_generic_arg_after_erasing_regions::h6a1e8c2a1ab72f4a\r\n  28:     0x7f4cd709cc52 - <rustc_middle::ty::normalize_erasing_regions::NormalizeAfterErasingRegionsFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty::h997f94575c7076ec\r\n  29:     0x7f4cd702fe2b - rustc_middle::ty::fold::TypeFoldable::fold_with::hd3808b12bd935bb9\r\n  30:     0x7f4cd709bd1e - rustc_middle::ty::layout::<impl rustc_middle::ty::instance::Instance>::fn_sig_for_fn_abi::h05e54f8e6b014b8a\r\n  31:     0x7f4cd67a7c12 - <rustc_target::abi::call::FnAbi<&rustc_middle::ty::TyS> as rustc_middle::ty::layout::FnAbiExt<C>>::of_instance::hb5a6d4852d31ff73\r\n  32:     0x7f4cd679d63e - rustc_codegen_llvm::mono_item::<impl rustc_codegen_ssa::traits::declare::PreDefineMethods for rustc_codegen_llvm::context::CodegenCx>::predefine_fn::hdecae27e6d220717\r\n  33:     0x7f4cd67a4a16 - rustc_codegen_llvm::base::compile_codegen_unit::module_codegen::h7eaf0dacc0c82f75\r\n  34:     0x7f4cd71d968d - rustc_query_system::dep_graph::graph::DepGraph<K>::with_task::hcef8469810a45dd1\r\n  35:     0x7f4cd7213784 - rustc_codegen_llvm::base::compile_codegen_unit::hed73fb3f05d56057\r\n  36:     0x7f4cd71e785f - <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate::h3fe294a8f0735589\r\n  37:     0x7f4cd7177ac9 - rustc_interface::queries::Queries::ongoing_codegen::hea0e157f127bf881\r\n  38:     0x7f4cd712b72e - rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter::h0f61eb416f22a566\r\n  39:     0x7f4cd715c621 - rustc_span::with_source_map::h4a0dc647038ad76f\r\n  40:     0x7f4cd712c6da - rustc_interface::interface::create_compiler_and_run::h4b294c33113a1bc7\r\n  41:     0x7f4cd712a888 - scoped_tls::ScopedKey<T>::set::h3d50179f272e16d1\r\n  42:     0x7f4cd712aee4 - std::sys_common::backtrace::__rust_begin_short_backtrace::h7cf87b5fc59a6baa\r\n  43:     0x7f4cd714a0fa - core::ops::function::FnOnce::call_once{{vtable.shim}}::h8b483ac32d974368\r\n  44:     0x7f4cd4c4383a - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::hdc51fe7e73bc86bf\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/alloc/src/boxed.rs:1546:9\r\n  45:     0x7f4cd4c4383a - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::he605738a76b56d9d\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/alloc/src/boxed.rs:1546:9\r\n  46:     0x7f4cd4c4383a - std::sys::unix::thread::Thread::new::thread_start::he44b12fd83e74919\r\n                               at /rustc/35dbef235048f9a2939dc20effe083ca483c37ff/library/std/src/sys/unix/thread.rs:71:17\r\n  47:     0x7f4cd4b3df5e - start_thread\r\n  48:     0x7f4cd4a631ef - clone\r\n  49:                0x0 - <unknown>\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.52.0-nightly (35dbef235 2021-03-02) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C codegen-units=1 -C embed-bitcode=no --crate-type bin\r\n\r\nquery stack during panic:\r\n#0 [normalize_generic_arg_after_erasing_regions] normalizing `(<[T; N] as ordes::OrdesDec>::Newlen, <[T; N] as ordes::OrdesDec>::Output)`\r\nend of query stack\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Notes\r\n\r\nI believe this may be somewhat related to [#79018](https://github.com/rust-lang/rust/issues/79018) or [#82835](https://github.com/rust-lang/rust/issues/82835), but I'm not certain, since the issue I'm having _only_ occurs when `OrdesDec::pop()` is used outside of the `ordes` crate.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82956/timeline", "performed_via_github_app": null, "state_reason": "completed"}