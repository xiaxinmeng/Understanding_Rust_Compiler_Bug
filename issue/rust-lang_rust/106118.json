{"url": "https://api.github.com/repos/rust-lang/rust/issues/106118", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106118/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106118/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106118/events", "html_url": "https://github.com/rust-lang/rust/issues/106118", "id": 1510070977, "node_id": "I_kwDOAAsO6M5aAdrB", "number": 106118, "title": "Include macro should link to modules", "user": {"login": "coastalwhite", "id": 6944009, "node_id": "MDQ6VXNlcjY5NDQwMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/6944009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coastalwhite", "html_url": "https://github.com/coastalwhite", "followers_url": "https://api.github.com/users/coastalwhite/followers", "following_url": "https://api.github.com/users/coastalwhite/following{/other_user}", "gists_url": "https://api.github.com/users/coastalwhite/gists{/gist_id}", "starred_url": "https://api.github.com/users/coastalwhite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coastalwhite/subscriptions", "organizations_url": "https://api.github.com/users/coastalwhite/orgs", "repos_url": "https://api.github.com/users/coastalwhite/repos", "events_url": "https://api.github.com/users/coastalwhite/events{/privacy}", "received_events_url": "https://api.github.com/users/coastalwhite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-12-24T12:13:15Z", "updated_at": "2023-01-06T13:55:27Z", "closed_at": "2023-01-06T13:55:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\n\r\nThank you for finding a documentation problem! \ud83d\udcda\r\n\r\nDocumentation problems might be grammatical issues, typos, or unclear wording, please provide details regarding the documentation including where it is present.\r\n\r\nNote: If your issue is for one of these, please use their dedicated issue tracker instead:\r\n\r\n- The Rust Book: https://github.com/rust-lang/book/issues\r\n- Rust by Example: https://github.com/rust-lang/rust-by-example/issues\r\n- The Edition Guide: https://github.com/rust-lang/edition-guide/issues\r\n- The Cargo Book: https://github.com/rust-lang/cargo/issues\r\n- The Clippy Book: https://github.com/rust-lang/rust-clippy/issues\r\n- The Reference: https://github.com/rust-lang/reference/issues\r\n- The Rustonomicon: https://github.com/rust-lang/nomicon/issues\r\n- The Embedded Book: https://github.com/rust-embedded/book/issues\r\n\r\nAll other documentation issues should be filed here.\r\n\r\nOr, if you find an issue related to rustdoc (e.g. doctest, rustdoc UI), please use the bug report or blank issue template instead.\r\n\r\n-->\r\n\r\n### Location\r\n\r\n[`include!` macro](https://doc.rust-lang.org/core/macro.include.html)\r\n\r\n### Summary\r\n\r\nHaving talked to some new people who are learning rust, the module system is something people often take some time to understand. People coming from `C` may search `rust include file` and find the `include!` macro. I feel like this should clearly link to the [modules documentation](https://doc.rust-lang.org/reference/items/modules.html). \r\n\r\nCurrently, there is a small part on include being something that usually a bad idea:\r\n\r\n> Using this macro is often a bad idea, because if the file is parsed as an expression, it is going to be placed in the surrounding code unhygienically. This could result in variables or functions being different from what the file expected if there are variables or functions that have the same name in the current file.\r\n\r\nI feel like this part of the documentation should very directly and plainly reference resources about the module system and how that is what they should probably be using. This can link to one or multiple official resources (e.g. [The Reference](https://doc.rust-lang.org/reference/items/modules.html), [Rust-by-Example - Modules: File Hierarchy](https://doc.rust-lang.org/rust-by-example/mod/split.html) or [The Book](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html)). Possibly, we can refer to all these resources, although that might be overwhelming to the reader. I would say to add this after the first line as a sort of warning.\r\n\r\nIt would also be interesting to add where you might then actually use `include!` macro similar to the `Uses` header in the [assert macro](https://doc.rust-lang.org/core/macro.assert.html). From my experience, the include macro has two primary uses:\r\n\r\n- Including large parts of documentation\r\n- Including build artifacts from the `OUT_DIR` of build scripts\r\n\r\nA very primitive draft of the adjusted documentation would be:\r\n\r\n> Parses a file as an expression or an item according to the context.\r\n>\r\n> > For multi-file Rust projects, the `include!` macro is probably not what you are looking for. Usually, multi-file Rust projects use [modules](https://doc.rust-lang.org/reference/items/modules.html). Multi-file projects and modules are explained in the Rust-by-Example book [here](https://doc.rust-lang.org/rust-by-example/mod/split.html) and the module system is explained in the Rust Book [here](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html).\r\n> \r\n> The included file is parsed as an expression, it is going to be placed in the surrounding code [unhygienically](https://doc.rust-lang.org/reference/macros-by-example.html#hygiene). This could result in variables or functions being different from what the file expected if there are variables or functions that have the same name in the current file.\r\n> \r\n> The file is located relative to the current file (similarly to how modules are found). The provided path is interpreted in a platform-specific way at compile time. So, for instance, an invocation with a Windows path containing backslashes `\\` would not compile correctly on Unix.\r\n>\r\n> # Uses\r\n> \r\n> The `include!` macro is primarily used for two purposes. The macro can be used to include long stretches of documentation. This can also be done with `#![doc = include_str!(\"...\")]`. The second common use-case for the `include!` macro is when including the [output artifacts of the build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html#outputs-of-the-build-script).\r\n> \r\n> # Examples\r\n> \r\n> Assume there are two files in the same directory with the following contents:\r\n> \r\n> File 'monkeys.in':\r\n> \r\n> ```ignore (only-for-syntax-highlight)\r\n> ['\ud83d\ude48', '\ud83d\ude4a', '\ud83d\ude49']\r\n>     .iter()\r\n>     .cycle()\r\n>     .take(6)\r\n>     .collect::<String>()\r\n> ```\r\n> \r\n> File 'main.rs':\r\n> \r\n> ```ignore (cannot-doctest-external-file-dependency)\r\n> fn main() {\r\n>     let my_string = include!(\"monkeys.in\");\r\n>     assert_eq!(\"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\", my_string);\r\n>     println!(\"{my_string}\");\r\n> }\r\n> ```\r\n> \r\n> Compiling 'main.rs' and running the resulting binary will print\r\n> \"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\".\r\n\r\nI can create a PR if that is wanted.", "closed_by": {"login": "coastalwhite", "id": 6944009, "node_id": "MDQ6VXNlcjY5NDQwMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/6944009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coastalwhite", "html_url": "https://github.com/coastalwhite", "followers_url": "https://api.github.com/users/coastalwhite/followers", "following_url": "https://api.github.com/users/coastalwhite/following{/other_user}", "gists_url": "https://api.github.com/users/coastalwhite/gists{/gist_id}", "starred_url": "https://api.github.com/users/coastalwhite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coastalwhite/subscriptions", "organizations_url": "https://api.github.com/users/coastalwhite/orgs", "repos_url": "https://api.github.com/users/coastalwhite/repos", "events_url": "https://api.github.com/users/coastalwhite/events{/privacy}", "received_events_url": "https://api.github.com/users/coastalwhite/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106118/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106118/timeline", "performed_via_github_app": null, "state_reason": "completed"}