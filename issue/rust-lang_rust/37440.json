{"url": "https://api.github.com/repos/rust-lang/rust/issues/37440", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37440/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37440/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37440/events", "html_url": "https://github.com/rust-lang/rust/issues/37440", "id": 185818274, "node_id": "MDU6SXNzdWUxODU4MTgyNzQ=", "number": 37440, "title": "Unexpected behavior using std::thread::park_timeout on OSX", "user": {"login": "nastevens", "id": 1500008, "node_id": "MDQ6VXNlcjE1MDAwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1500008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nastevens", "html_url": "https://github.com/nastevens", "followers_url": "https://api.github.com/users/nastevens/followers", "following_url": "https://api.github.com/users/nastevens/following{/other_user}", "gists_url": "https://api.github.com/users/nastevens/gists{/gist_id}", "starred_url": "https://api.github.com/users/nastevens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nastevens/subscriptions", "organizations_url": "https://api.github.com/users/nastevens/orgs", "repos_url": "https://api.github.com/users/nastevens/repos", "events_url": "https://api.github.com/users/nastevens/events{/privacy}", "received_events_url": "https://api.github.com/users/nastevens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-28T01:23:22Z", "updated_at": "2017-06-17T23:07:53Z", "closed_at": "2017-06-17T23:07:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have encountered what I think is unexpected behavior from `std::thread::park_timeout` on OSX: when called with \"large\" values the `park_timeout` call will return immediately, instead of waiting for an `unpark` call. What constitutes \"large\" is variable, and appears to correspond to the current value in the system monotonic clock source.\n\nThe following code reproduces the issue:\n\n``` rust\nuse std::thread;\nuse std::time::Duration;\nuse std::sync::Arc;\nuse std::sync::atomic::{AtomicBool, Ordering};\nuse std::u64;\n\n// \"Small\" value that will properly sleep until `unpark` is called.\nconst TEST_VALUE: u64 = 10_000u64;\n\n// \"Large\" value that will return almost immediately.\n// const TEST_VALUE: u64 = u64::MAX;\n\nfn main() {\n    let stop = Arc::new(AtomicBool::new(false));\n    let stop2 = stop.clone();\n\n    let handle = thread::spawn(move || {\n        loop {\n            if stop2.load(Ordering::Relaxed) { break }\n            println!(\"Parking for 0x{:08x} millis\", TEST_VALUE);\n            thread::park_timeout(Duration::from_millis(TEST_VALUE));\n        }\n    });\n\n    thread::sleep(Duration::new(1, 0));\n    stop.store(true, Ordering::Relaxed);\n    handle.thread().unpark();\n    handle.join().unwrap();\n}\n```\n\nIf you run the code above with the \"small\" value uncommented the internal loop only runs once, waiting for the 1-second sleep to expire before `unpark` is called. But if you run with the \"large\" value uncommented, the internal loop runs a very large number of times as each call to `thread::park_timeout` returns almost immediately.\n\nAs noted above, the actual value of \"large\" decreases over time, I believe based on `u64::MAX - (current_monotonic_time)`. I unfortunately couldn't come up with a way to prove this is the case.\n\nI've seen this behavior on OSX Yosemite and Sierra.\n\nEdit: this happens on 1.11, 1.12, beta, and nightly.\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37440/timeline", "performed_via_github_app": null, "state_reason": "completed"}