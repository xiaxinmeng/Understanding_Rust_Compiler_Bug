{"url": "https://api.github.com/repos/rust-lang/rust/issues/110764", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110764/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110764/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110764/events", "html_url": "https://github.com/rust-lang/rust/issues/110764", "id": 1681358927, "node_id": "I_kwDOAAsO6M5kN4BP", "number": 110764, "title": "function performance seems to be affected by a match arm which is not evaluated. ", "user": {"login": "alexshagiev", "id": 24636886, "node_id": "MDQ6VXNlcjI0NjM2ODg2", "avatar_url": "https://avatars.githubusercontent.com/u/24636886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexshagiev", "html_url": "https://github.com/alexshagiev", "followers_url": "https://api.github.com/users/alexshagiev/followers", "following_url": "https://api.github.com/users/alexshagiev/following{/other_user}", "gists_url": "https://api.github.com/users/alexshagiev/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexshagiev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexshagiev/subscriptions", "organizations_url": "https://api.github.com/users/alexshagiev/orgs", "repos_url": "https://api.github.com/users/alexshagiev/repos", "events_url": "https://api.github.com/users/alexshagiev/events{/privacy}", "received_events_url": "https://api.github.com/users/alexshagiev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-04-24T14:06:33Z", "updated_at": "2023-04-25T21:00:47Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "so I am very new to rust and perhaps missing a trick here but I figured I will raise the question here because I am puzzled by this behavior.\r\n\r\nI have a function lets call it serialize which takes a slice of u8 bytes and writes it to the u8 fixed size array allocated on stack. Because the pre-allocated fixed size array can over flow I have to do a check in the function prior to writing if there are enough bytes available on that stack allocated array. In my bench mark I then check performance of this serialize function and I know that in the scenario I had setup there is always sufficient room to write into. However, I have to do a mach to test for this and it seems that some of the code in the match arm which is never executed still gets evaluated.\r\n\r\n\r\nHere is the actual function, so essentially it seem that the format! block of the first match arm is affecting performance characteristics of the function. If I for example simply add panic! on top of Result::Err I get 2x performance improvement and the bench completes with out panicking. I get similar effect If I simply put a empty string into the format! macro like so format!(\"\") what am I doing wrong?\r\n\r\nIs format! macro gets expanded into something outside of the match arm? and always runs regardless of the condition ?\r\n\r\n```rust\r\n    pub fn serialize_bytes(&mut self, bytes: &[u8]) -> Result<&mut Self> {\r\n        let input_len = bytes.len();\r\n        let avail = self.avail();\r\n        match input_len > avail {\r\n            true => {\r\n                // panic!(\"blah\"); // TODO this also seems to improve the bench mark which is technically never evaluating panic!\r\n                Result::Err(SerDeError {\r\n                    message: format!(\r\n                        \"adding {input_len} bytes, {avail} slots available. input: {bytes:?} buffer: {self:x}\",\r\n                    ),\r\n                })\r\n            }\r\n            false => {\r\n                // T.serialize(&serializer) - reuse serializer each iter\r\n                //         time:   [62.164 ns 64.446 ns 67.565 ns]\r\n                // self.bytes[self.len..self.len+input_len].copy_from_slice(&bytes);\r\n                // 50% improvement using unsafe\r\n                // T.serialize(&serializer) - reuse serializer each iter\r\n                //         time:   [29.611 ns 30.166 ns 30.881 ns]\r\n                unsafe {\r\n                    std::ptr::copy_nonoverlapping(\r\n                        bytes.as_ptr(),\r\n                        self.bytes.as_mut_ptr().add(self.len),\r\n                        bytes.len(),\r\n                    );\r\n                }\r\n\r\n                self.len += bytes.len();\r\n                Result::Ok(self)\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n- bench mark results  with format! of blank string even thought this march arm is never executed. performance is similar to when simply adding panic! on top of the Result::Err(...\r\n\r\n``` \r\n                Result::Err(SerDeError {\r\n                    message: format!(\r\n                        \"\",\r\n                    ),\r\n                })\r\n\r\nto_serializer           time:   [14.396 ns 15.042 ns 15.750 ns]\r\n                        change: [-65.368% -63.455% -61.474%] (p = 0.00 < 0.05)\r\n                        Performance has improved.\r\nFound 2 outliers among 100 measurements (2.00%)\r\n  2 (2.00%) high mild\r\n```\r\n\r\n- bench mark results with format! that has to expand a number of variables, however this match arm is not evaluated under the test scenario\r\n```\r\n\r\n                Result::Err(SerDeError {\r\n                    message: format!(\r\n                        \"adding {input_len} bytes, {avail} slots available. input: {bytes:?} buffer: {self:x}\",\r\n                    ),\r\n                })\r\n\r\nto_serializer           time:   [34.094 ns 34.780 ns 35.582 ns]\r\n                        change: [+137.94% +149.42% +161.38%] (p = 0.00 < 0.05)\r\n                        Performance has regressed.\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110764/timeline", "performed_via_github_app": null, "state_reason": null}