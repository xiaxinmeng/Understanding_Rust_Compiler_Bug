{"url": "https://api.github.com/repos/rust-lang/rust/issues/96897", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96897/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96897/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96897/events", "html_url": "https://github.com/rust-lang/rust/issues/96897", "id": 1231093143, "node_id": "I_kwDOAAsO6M5JYP2X", "number": 96897, "title": "OPENSSL error: could not find native static library `C`, perhaps an -L flag is missing?", "user": {"login": "aishwaryagm1999", "id": 55407808, "node_id": "MDQ6VXNlcjU1NDA3ODA4", "avatar_url": "https://avatars.githubusercontent.com/u/55407808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aishwaryagm1999", "html_url": "https://github.com/aishwaryagm1999", "followers_url": "https://api.github.com/users/aishwaryagm1999/followers", "following_url": "https://api.github.com/users/aishwaryagm1999/following{/other_user}", "gists_url": "https://api.github.com/users/aishwaryagm1999/gists{/gist_id}", "starred_url": "https://api.github.com/users/aishwaryagm1999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aishwaryagm1999/subscriptions", "organizations_url": "https://api.github.com/users/aishwaryagm1999/orgs", "repos_url": "https://api.github.com/users/aishwaryagm1999/repos", "events_url": "https://api.github.com/users/aishwaryagm1999/events{/privacy}", "received_events_url": "https://api.github.com/users/aishwaryagm1999/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-05-10T12:38:16Z", "updated_at": "2022-05-10T21:44:40Z", "closed_at": "2022-05-10T21:44:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get the following error when I try to run the below code for a DTLS client server program using rust through visual studio code and its terminal. I have already installed openssl libraries using vcpkg and set the environment variables. I have also installed the c/c++ extensions for vscode.\r\n\r\nError: error: could not find native static library C, perhaps an -L flag is missing?\r\nHow do I resolve this error? My DTLS code is given below along with build.rs and cargo.toml. I get the same error when I try to run any openssl-dependant codes in C/C++/Rust.\r\n\r\n[MAIN.rs](https://main.rs/)\r\n\r\n    use openssl::ssl::SslMethod;\r\n    use std::{ io::{Read, Write},\r\n    net::UdpSocket, thread, time::Duration, };\r\n    use udp_dtls::{Certificate, DtlsAcceptor, DtlsConnector, Identity, SrtpProfile};\r\n    use udp_dtls::{DtlsAcceptorBuilder, UdpChannel};\r\n    fn main() { let buffer = include_bytes!(\"../test/identity.p12\");\r\n    let identity = Identity::from_pkcs12(buffer, \"mypass\").unwrap();\r\n    let root_ca = include_bytes!(\"../test/root-ca.der\"); let root_ca = Certificate::from_der(root_ca).unwrap();\r\n    let acceptor = DtlsAcceptor::builder(identity).build().unwrap();\r\n   let connector = DtlsConnector::builder() .add_srtp_profile(SrtpProfile::Aes128CmSha180) .add_srtp_profile(SrtpProfile::AeadAes256Gcm) .add_root_certificate(root_ca) .build() .unwrap();\r\n    let server = UdpSocket::bind(\"127.0.0.1:0\").unwrap();\r\n    let client = UdpSocket::bind(\"127.0.0.1:0\").unwrap();\r\n    let server_addr = server.local_addr().unwrap(); let client_addr = client.local_addr().unwrap();\r\n    let server_channel = UdpChannel { socket: server, remote_addr: client_addr, };\r\n    let client_channel = UdpChannel { socket: client, remote_addr: server_addr, };\r\n    let guard = thread::spawn(move || { let mut dtls_server = acceptor.accept(server_channel).unwrap(); let mut count = 0;\r\n    while true { let mut received = [0; 5];\r\n    dtls_server.read_exact(&mut received);\r\n    println!( \"{:?} {:?}\", count, String::from_utf8_lossy(received.as_ref()) );\r\n    count = count + 1; thread::sleep(Duration::from_millis(2)); } });\r\n    let mut dtls_client = connector.connect(\"foobar.com\", client_channel).unwrap();\r\n    while true { let mut buf = [0; 5];\r\n     let buf = b\"hello\";\r\n    dtls_client.write_all(buf);\r\n    thread::sleep(Duration::from_millis(30)); } }\r\nCARGO.toml\r\n\r\n    [package]\r\n    name = \"udp-dtls\"\r\n    version = \"0.1.0\"\r\n    authors = [\"Timon Post <https://github.com/TimonPost>\"]\r\n    edition = \"2018\"\r\n    description = \"DTLS abstraction ontop of UDP\"\r\n    repository = \"https://github.com/TimonPost/udp-dtls\"\r\n    documentation = \"https://docs.rs/udp-dtls/\"\r\n    license = \"MIT\"\r\n    keywords = [\"DTLS\", \"UDP\", \"connection\", \"openssl\", \"ssl\"] exclude = [\"target\", \"Cargo.lock\"] readme = \"README.md\" [dependencies] openssl = \"0.10.19\" openssl-probe = \"0.1.2\" log = \"0.4.6\" bytes = \"0.4.11\" [features] vendored = [\"openssl/vendored\"]\r\nBUILD.rs\r\n\r\nBUILD.rs\r\n    use std::fs::File;\r\n    use std::io::Write;\r\n    use std::process::Command;\r\n    use std::env;\r\n    fn main() -> std::io::Result<()> {\r\n\r\n\r\n    if let Ok(v) = env::var(\"DEP_OPENSSL_VERSION_NUMBER\") {\r\n        let version = u64::from_str_radix(&v, 16).unwrap();\r\n\r\n        if version >= 0x1_01_01_00_0 {\r\n            println!(\"cargo:rustc-cfg=openssl111\");\r\n        }\r\n    }\r\n\r\n    let certs_dir = \"src/certs\";\r\n    let keys_dir = \"src/keys\";\r\n    let scratch_dir = \"openssl-temp\";\r\n    let server_ext = &format!(\"{}/server_ext\", scratch_dir);\r\n    let client_ext = &format!(\"{}/client_ext\", scratch_dir);\r\n\r\n    for dir in &[certs_dir, keys_dir, scratch_dir] {\r\n        // create if dir does not exist\r\n        match std::fs::create_dir(dir) {\r\n            _ => {}\r\n        }\r\n    }\r\n\r\n    let mut file = File::create(server_ext).unwrap();\r\n    file.write(b\"basicConstraints=CA:false\\nkeyUsage=critical,keyEncipherment\")?;\r\n\r\n    let mut file = File::create(client_ext).unwrap();\r\n    file.write(b\"basicConstraints=CA:false\\nkeyUsage=critical,digitalSignature\")?;\r\n\r\n    // Generate self-signed CA\r\n    Command::new(\"openssl\")\r\n        .args(&[\r\n            \"req\",\r\n            \"-x509\",\r\n            \"-newkey\",\r\n            \"rsa:2048\",\r\n            \"-subj\",\r\n            \"/CN=ca\",\r\n            \"-nodes\",\r\n            \"-keyout\",\r\n            &format!(\"{}/ca-key.pem\", keys_dir),\r\n            \"-out\",\r\n            &format!(\"{}/ca-cert.pem\", certs_dir),\r\n            \"-addext\",\r\n            \"keyUsage=critical,keyCertSign\",\r\n        ])\r\n        .output()?;\r\n\r\n    // Generate server key and CSR\r\n    Command::new(\"openssl\")\r\n        .args(&[\r\n            \"req\",\r\n            \"-newkey\",\r\n            \"rsa:2048\",\r\n            \"-subj\",\r\n            \"/CN=server\",\r\n            \"-nodes\",\r\n            \"-keyout\",\r\n            &format!(\"{}/server-key.pem\", keys_dir),\r\n            \"-out\",\r\n            &format!(\"{}/server-csr.pem\", scratch_dir),\r\n        ])\r\n        .output()?;\r\n\r\n    // Sign server CSR\r\n    Command::new(\"openssl\")\r\n        .args(&[\r\n            \"x509\",\r\n            \"-req\",\r\n            \"-CAcreateserial\",\r\n            \"-CA\",\r\n            &format!(\"{}/ca-cert.pem\", certs_dir),\r\n            \"-CAkey\",\r\n            &format!(\"{}/ca-key.pem\", keys_dir),\r\n            \"-in\",\r\n            &format!(\"{}/server-csr.pem\", scratch_dir),\r\n            \"-out\",\r\n            &format!(\"{}/server-cert.pem\", certs_dir),\r\n            \"-extfile\",\r\n            server_ext,\r\n        ])\r\n        .output()?;\r\n\r\n    // Generate client key and CSR\r\n    Command::new(\"openssl\")\r\n        .args(&[\r\n            \"req\",\r\n            \"-newkey\",\r\n            \"rsa:2048\",\r\n            \"-subj\",\r\n            \"/CN=client\",\r\n            \"-nodes\",\r\n            \"-keyout\",\r\n            &format!(\"{}/client-key.pem\", keys_dir),\r\n            \"-out\",\r\n            &format!(\"{}/client-csr.pem\", scratch_dir),\r\n        ])\r\n        .output()?;\r\n\r\n    // Sign client CSR\r\n    Command::new(\"openssl\")\r\n        .args(&[\r\n            \"x509\",\r\n            \"-req\",\r\n            \"-CAcreateserial\",\r\n            \"-CA\",\r\n            &format!(\"{}/ca-cert.pem\", certs_dir),\r\n            \"-CAkey\",\r\n            &format!(\"{}/ca-key.pem\", keys_dir),\r\n            \"-in\",\r\n            &format!(\"{}/client-csr.pem\", scratch_dir),\r\n            \"-out\",\r\n            &format!(\"{}/client-cert.pem\", certs_dir),\r\n            \"-extfile\",\r\n            client_ext,\r\n        ])\r\n        .output()?;\r\n\r\n    std::fs::remove_dir_all(scratch_dir)?;\r\n\r\n    Ok(())\r\n}\r\nFor further reference please check this link for full code: https://github.com/TimonPost/udp-dtls", "closed_by": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96897/timeline", "performed_via_github_app": null, "state_reason": "completed"}