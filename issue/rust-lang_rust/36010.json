{"url": "https://api.github.com/repos/rust-lang/rust/issues/36010", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36010/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36010/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36010/events", "html_url": "https://github.com/rust-lang/rust/issues/36010", "id": 173371219, "node_id": "MDU6SXNzdWUxNzMzNzEyMTk=", "number": 36010, "title": "LLVM doesn't understand Some(Box<u32>) is always some", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-08-26T05:09:55Z", "updated_at": "2023-04-05T17:38:43Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "[playground](https://play.rust-lang.org/?gist=4eafc9285fd5d642c94e1e92f5b6f7d1&version=nightly&mode=release)\r\n\r\nFor the following code:\r\n\r\n``` rust\r\nuse std::mem;\r\n\r\nfn foo<T>(a: &mut T, b: T) -> bool {\r\n    let b = Some(mem::replace(a, b));\r\n    let ret = b.is_some();\r\n    mem::forget(b);\r\n    return ret\r\n}\r\n\r\npub fn foo_u32(a: &mut u32, b: u32) -> bool {\r\n    foo(a, b)\r\n}\r\n\r\npub fn foo_box(a: &mut Box<u32>, b: Box<u32>) -> bool {\r\n    foo(a, b)\r\n}\r\n```\r\n\r\nThis compiles down to the IR (optimized)\r\n\r\n``` ll\r\n; Function Attrs: norecurse uwtable\r\ndefine zeroext i1 @_ZN3foo7foo_u3217h93ddaaeb1c2cc2b2E(i32* nocapture dereferenceable(4), i32) unnamed_addr #0  {\r\nentry-block:\r\n  store i32 %1, i32* %0, align 4\r\n  ret i1 true\r\n}\r\n\r\n; Function Attrs: norecurse uwtable\r\ndefine zeroext i1 @_ZN3foo7foo_box17hd05578023690d1faE(i32** nocapture dereferenceable(8), i32* noalias dereferenceable(4)) unnamed_addr #0  {\r\nentry-block:\r\n  %2 = ptrtoint i32* %1 to i64\r\n  %3 = bitcast i32** %0 to i64*\r\n  %4 = bitcast i32** %0 to i8**\r\n  %5 = load i8*, i8** %4, align 8, !noalias !0\r\n  store i64 %2, i64* %3, align 8, !noalias !0\r\n  %not.switchtmp.i.i = icmp ne i8* %5, null\r\n  ret i1 %not.switchtmp.i.i\r\n}\r\n\r\nattributes #0 = { norecurse uwtable }\r\nattributes #1 = { nounwind }\r\n```\r\n\r\nIt seems odd that the `Box` case is not as optimized as the `u32` case? This seems due to the null-pointer optimization of the `Option<Box>` itself. I wonder if there's more metadata we can attach to tell LLVM the loads aren't null?\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36010/timeline", "performed_via_github_app": null, "state_reason": null}