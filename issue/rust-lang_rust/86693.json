{"url": "https://api.github.com/repos/rust-lang/rust/issues/86693", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86693/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86693/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86693/events", "html_url": "https://github.com/rust-lang/rust/issues/86693", "id": 931793875, "node_id": "MDU6SXNzdWU5MzE3OTM4NzU=", "number": 86693, "title": "64-bit Array Pointer Misalignment on riscv32i", "user": {"login": "bunnie", "id": 1168375, "node_id": "MDQ6VXNlcjExNjgzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1168375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bunnie", "html_url": "https://github.com/bunnie", "followers_url": "https://api.github.com/users/bunnie/followers", "following_url": "https://api.github.com/users/bunnie/following{/other_user}", "gists_url": "https://api.github.com/users/bunnie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bunnie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bunnie/subscriptions", "organizations_url": "https://api.github.com/users/bunnie/orgs", "repos_url": "https://api.github.com/users/bunnie/repos", "events_url": "https://api.github.com/users/bunnie/events{/privacy}", "received_events_url": "https://api.github.com/users/bunnie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1210355734, "node_id": "MDU6TGFiZWwxMjEwMzU1NzM0", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-riscv", "name": "O-riscv", "color": "6e6ec0", "default": false, "description": "Target: RISC-V architecture"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2021-06-28T17:22:06Z", "updated_at": "2021-07-11T13:54:44Z", "closed_at": "2021-07-11T13:54:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think this is a bug, which is exhibited in a riscv32imac, but not an x86 target.\r\n\r\nI tried this code (see it on [goldbolt](https://godbolt.org/z/K8MK1v6f9) / [playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=66f078fdf69a3cf2a578261740326f09) ); the version below has the `log` statements in there so you can line up the code against log data I provide later in this bug:\r\n\r\n```rust\r\n\r\n#[derive(Copy, Clone, Hash)]\r\npub struct Scalar {\r\n    pub bytes: [u8; 32],\r\n}\r\nimpl Scalar {\r\n    pub fn non_adjacent_form(&self, w: usize) -> [i8; 256] {\r\n\r\n        let mut naf = [0i8; 256];\r\n\r\n        let mut x_u64 = [0u64; 5];\r\n        LittleEndian::read_u64_into(&self.bytes, &mut x_u64[0..4]);\r\n\r\n        log::info!(\"x_u64: {:x?}\", x_u64);\r\n\r\n        let width = 1 << w;\r\n        let window_mask = width - 1;\r\n\r\n        let mut pos = 0;\r\n        let mut carry = 0;\r\n        while pos < 256 {\r\n            // Construct a buffer of bits of the scalar, starting at bit `pos`\r\n            let u64_idx = pos / 64;\r\n            let bit_idx = pos % 64;\r\n            let bit_buf: u64;\r\n            if bit_idx < 64 - w {\r\n                // This window's bits are contained in a single u64\r\n                bit_buf = x_u64[u64_idx] >> bit_idx;   ///////////////////////////////////// <------- this does not work right\r\n                log::info!(\"bit_buf: {:x}\", bit_buf);\r\n            } else {\r\n                // Combine the current u64's bits with the bits from the next u64\r\n                bit_buf = (x_u64[u64_idx] >> bit_idx) | (x_u64[1+u64_idx] << (64 - bit_idx));\r\n            }\r\n\r\n            let window = carry + (bit_buf & window_mask);\r\n\r\n            if window & 1 == 0 {\r\n                pos += 1;\r\n                continue;\r\n            }\r\n\r\n            if window < width/2 {\r\n                log::info!(\"carry 0 width {} naf[{}] = {}; c.{} bb.{:x} wm.{} idx64.{} idxbit.{} xu64[0].{:x}\", width, pos, window,\r\n                    carry, bit_buf, window_mask, u64_idx, bit_idx, x_u64[0],\r\n                );\r\n                carry = 0;\r\n                naf[pos] = window as i8;\r\n            } else {\r\n                log::info!(\"carry 1 width {} naf[{}] = {}/{}; c.{} bb.{:x} wm.{} idx64.{} idxbit.{} xu64[0].{:x}\", width, pos, window, (window as i8).wrapping_sub(width as i8),\r\n                    carry, bit_buf, window_mask, u64_idx, bit_idx, x_u64[0]\r\n                );\r\n                carry = 1;\r\n                naf[pos] = (window as i8).wrapping_sub(width as i8);\r\n            }\r\n\r\n            pos += w;\r\n        }\r\n\r\n        naf\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: \r\n\r\nThis is a snippet from the `curve25519-dalek` crate's `scalar.rs` module, which is used in `ed25519` signatures. Fortunately, there are well-known test vectors for curve25519, so I'm able to give you expected inputs and outputs.\r\n\r\n```Rust\r\n    let scalar = Scalar {\r\n        bytes: [189, 59, 214, 8, 77, 86, 240, 50, 111, 170, 86, 37, 124, 154, 209, 79, 102, 72, 93, 53, 130, 157, 102, 200, 60, 240, 215, 104, 246, 58, 214, 13],\r\n    };\r\n    let a_naf = scalar.non_adjacent_form(5);\r\n\r\n    let expected_result = [-3, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, -7, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, -11, 0, 0, 0, 0, -5, 0, 0, 0, 0, 11, 0, 0, 0, 0, 5, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -11, 0, 0, 0, 0, 15, 0, 0, 0, 0, -11, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 9, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0];\r\n\r\n    assert!(expected_result ==  a_naf, \"something went wrong!\");\r\n```\r\nInstead, this happened: \r\n- On x86, this code produces the expected result.\r\n- On a RISCV32-IMAC target (seen both in renode emulation and on live hardware), we get this (with emphasis on the first salient evidence of an error):\r\n\r\n```\r\n                          vvvvvvvvvvvvvv\r\nINFO:test_stub: x_u64: [32f0564d08d63bbd, 4fd19a7c2556aa6f, c8669d82355d4866, dd63af668d7f03c, 0] (services\\test-stub\\src\\main.rs:55)\r\nINFO:ticktimer_server: Server started with SID SID([1801677172, 1701669236, 1702047090, 1919252082]) (services\\ticktimer-server\\src\\main.rs:503)\r\nINFO:test_stub: bit_buf: 8d63bbd08d63bbd (services\\test-stub\\src\\main.rs:78)\r\n                         ^^^^^^^^^^^^^^^\r\nINFO:test_stub: carry 1 width 32 naf[0] = 29/-3; c.0 bb.8d63bbd08d63bbd wm.31 idx64.0 idxbit.0 xu64[0].32f0564d08d63bbd (services\\test-stub\\src\\main.rs:103)\r\nINFO:test_stub: bit_buf: 46b1dde846b1dd (services\\test-stub\\src\\main.rs:78)\r\nINFO:test_stub: bit_buf: 2358eef42358ee (services\\test-stub\\src\\main.rs:78)\r\nINFO:test_stub: carry 0 width 32 naf[6] = 15; c.1 bb.2358eef42358ee wm.31 idx64.0 idxbit.6 xu64[0].32f0564d08d63bbd (services\\test-stub\\src\\main.rs:97)\r\nINFO:test_stub: bit_buf: 11ac777a11ac7 (services\\test-stub\\src\\main.rs:78)\r\nINFO:test_stub: carry 0 width 32 naf[11] = 7; c.0 bb.11ac777a11ac7 wm.31 idx64.0 idxbit.11 xu64[0].32f0564d08d63bbd (services\\test-stub\\src\\main.rs:97)\r\n\r\n.... much spew ....\r\n\r\nINFO:test_stub: a_naf: [-3, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, ***-3***, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, -13, 0, 0, 0, 0, 11, 0, 0, 0, 0, 13, 0, 0, 0, 0, -11, 0, 0, 0, 0, -13, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, -11, 0, 0, 0, 0, -5, 0, 0, 0, 0, 11, 0, 0, 0, 0, 5, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, -3, 0, 0, 0, 0, 11, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -11, 0, 0, 0, 0, 15, 0, 0, 0, 0, -11, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 9, 0, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 9, 0, 0, 0, 0, 3, 0, 0] (services\\test-stub\\src\\main.rs:131)\r\nINFO:test_stub: expected_result: [-3, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, ***13***, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, -7, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, -11, 0, 0, 0, 0, -5, 0, 0, 0, 0, 11, 0, 0, 0, 0, 5, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -11, 0, 0, 0, 0, 15, 0, 0, 0, 0, -11, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 9, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0] (services\\test-stub\\src\\main.rs:132)\r\n\r\n(emphasis mine on the first mismatching index from the result)\r\n```\r\n\r\nBasically, on the first iteration of the loop, `bit_buf` should be loaded with the value of `x_u64[0] >> bit_idx`, and because `bit_idx` is 0, `bit_buf` should be exactly `x_u64[0]`.\r\n\r\nInstead, I find that the value of `x_u64[0]` is 32f0564d_08d63bbd, and the value of `bit_buf` is 8d63bbd_08d63bbd. The key symptom is that instead of representing a whole 64-bit value, `bit_buf` seems to be just the lower 32 bits of the 64-bit value, replicated up to the upper 32 bits. \r\n\r\nThis problem continues in later iterations of the loop, with the upper 32 bits taking a copy of the lower 32 bits. \r\n\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc --version --verbose\r\nrustc 1.52.1 (9bc8c42bb 2021-05-09)\r\nbinary: rustc\r\ncommit-hash: 9bc8c42bb2f19e745a63f3445f1ac248fb015e53\r\ncommit-date: 2021-05-09\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.52.1\r\nLLVM version: 12.0.0\r\n```\r\nI feel like there should be some mention of the RISCV target toolchain version as well, but the bug template does not include an instruction on how to extract that. To wit, I was able to reproduce the bug using a Linux-based toolchain running Renode, as well as using a Windows-based toolchain running on live hardware (using the VexRISCV implementation on an FPGA).\r\n\r\nUnfortunately, because our embedded target does not have a functional BACKTRACE facility, I'm unable to include a backtrace, but hopefully the print-logs above are helpful enough.\r\n\r\nI'll continue to poke at this some and if I can find a simpler test case, I'll add a follow-up note here.\r\n", "closed_by": {"login": "bunnie", "id": 1168375, "node_id": "MDQ6VXNlcjExNjgzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1168375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bunnie", "html_url": "https://github.com/bunnie", "followers_url": "https://api.github.com/users/bunnie/followers", "following_url": "https://api.github.com/users/bunnie/following{/other_user}", "gists_url": "https://api.github.com/users/bunnie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bunnie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bunnie/subscriptions", "organizations_url": "https://api.github.com/users/bunnie/orgs", "repos_url": "https://api.github.com/users/bunnie/repos", "events_url": "https://api.github.com/users/bunnie/events{/privacy}", "received_events_url": "https://api.github.com/users/bunnie/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86693/timeline", "performed_via_github_app": null, "state_reason": "completed"}