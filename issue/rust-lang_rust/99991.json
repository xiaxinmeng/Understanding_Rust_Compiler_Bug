{"url": "https://api.github.com/repos/rust-lang/rust/issues/99991", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99991/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99991/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99991/events", "html_url": "https://github.com/rust-lang/rust/issues/99991", "id": 1323544178, "node_id": "I_kwDOAAsO6M5O465y", "number": 99991, "title": "Rustc fails to infer appropriately general `Fn*` trait implementation in the face of complex HRTBs with GATs", "user": {"login": "Aiden2207", "id": 57577488, "node_id": "MDQ6VXNlcjU3NTc3NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/57577488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aiden2207", "html_url": "https://github.com/Aiden2207", "followers_url": "https://api.github.com/users/Aiden2207/followers", "following_url": "https://api.github.com/users/Aiden2207/following{/other_user}", "gists_url": "https://api.github.com/users/Aiden2207/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aiden2207/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aiden2207/subscriptions", "organizations_url": "https://api.github.com/users/Aiden2207/orgs", "repos_url": "https://api.github.com/users/Aiden2207/repos", "events_url": "https://api.github.com/users/Aiden2207/events{/privacy}", "received_events_url": "https://api.github.com/users/Aiden2207/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-07-31T18:45:55Z", "updated_at": "2022-07-31T19:46:16Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\npub trait Func<'a, T> {\r\n    type Output;\r\n    fn invoke(&mut self, x: T) -> Self::Output;\r\n}\r\nimpl<'a, T, U, F> Func<'a, T> for &'a mut F\r\nwhere\r\n    F: FnMut(T) -> U,\r\n{\r\n    type Output = U;\r\n    fn invoke(&mut self, x: T) -> Self::Output {\r\n        self(x)\r\n    }\r\n}\r\ntrait Foo {\r\n    type Bar<'a>\r\n    where\r\n        Self: 'a;\r\n    fn test<F>(f: F)\r\n    where\r\n        for<'a> &'a mut F: Func<'a, Self::Bar<'a>>;\r\n}\r\n\r\nimpl Foo for () {\r\n    type Bar<'a> = &'a ();\r\n    fn test<F>(mut f: F)\r\n    where\r\n        for<'a> &'a mut F: Func<'a, Self::Bar<'a>>,\r\n    {\r\n        (&mut f).invoke(&());\r\n    }\r\n}\r\nfn main() {\r\n    let f: fn(&()) -> &() = |t| t;\r\n    <()>::test(f); //works\r\n    <()>::test(|t| t); //error\r\n}\r\n```\r\n\r\nI expected to see this happen: Code compiles without errors.\r\n\r\nInstead, this happened: \r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: implementation of `FnOnce` is not general enough\r\n  --> src/main.rs:33:5\r\n   |\r\n33 |     <()>::test(|t|t);  //error\r\n   |     ^^^^^^^^^^ implementation of `FnOnce` is not general enough\r\n   |\r\n   = note: closure with signature `fn(&'2 ()) -> &()` must implement `FnOnce<(&'1 (),)>`, for any lifetime `'1`...\r\n   = note: ...but it actually implements `FnOnce<(&'2 (),)>`, for some specific lifetime `'2`\r\n\r\nerror: could not compile `playground` due to previous error\r\n```\r\n[Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=a37e7a432f252b749abc561ead74e4f7)\r\n\r\nThe compiler needs closures to be explicitly coerced into a general enough type for the provided trait bounds to work. It's not the end of the world, because I can always use trait objects, but it's definitely an ergonomic issue. Also, it works [just fine](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=d8513f9ede5cdb2811386e7fa4608163) if you use a non-generic associated type.\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nPlayground version:\r\n```\r\n1.64.0-nightly\r\n\r\n(2022-07-30 0f4bcadb46006bc484da)\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99991/timeline", "performed_via_github_app": null, "state_reason": null}