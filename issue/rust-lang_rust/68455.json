{"url": "https://api.github.com/repos/rust-lang/rust/issues/68455", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68455/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68455/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68455/events", "html_url": "https://github.com/rust-lang/rust/issues/68455", "id": 553546171, "node_id": "MDU6SXNzdWU1NTM1NDYxNzE=", "number": 68455, "title": "SIMD-enabled utf-8 validation", "user": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 46311113, "node_id": "MDU6TGFiZWw0NjMxMTExMw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-unicode", "name": "A-unicode", "color": "f7e101", "default": false, "description": "Area: unicode related"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 5223550385, "node_id": "LA_kwDOAAsO6M8AAAABN1kNsQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-target-feature", "name": "A-target-feature", "color": "f7e101", "default": false, "description": "Area: Enabling/disabling target features like AVX, Neon, etc."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 57, "created_at": "2020-01-22T13:36:37Z", "updated_at": "2023-03-03T22:45:27Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "## Introduction\r\n\r\nThe [\"Parsing Gigabytes of JSON per second\"](https://branchfree.org/2019/02/25/paper-parsing-gigabytes-of-json-per-second/) post ([ArXiv - langdale, lemire](https://t.co/MgQINMJlNB?amp=1)) proposes a novel approach for parsing JSON that is fast enough that on many systems it moves the bottleneck to the disk and network instead of the parser. This is done through the clever use of SIMD instructions.\r\n\r\nSomething that stood out to me from the post is that JSON is required to be valid utf-8, and they had come up with new algorithms to validate utf-8 using SIMD instructions that function *much* faster than conventional approaches.\r\n\r\nSince rustc does a *lot* of utf-8 validation (each `.rs` source file needs to be valid utf-8), it \r\ngot me curious about what rustc currently does. Validation seems to be done by the following routine:\r\n\r\nhttps://github.com/rust-lang/rust/blob/2f688ac602d50129388bb2a5519942049096cbff/src/libcore/str/mod.rs#L1500-L1618\r\n\r\nThis doesn't appear to use SIMD anywhere, not even conditionally. But it's run a *lot*, so I figured it might be interesting to use a more efficient algorithm for.\r\n\r\n## Performance improvements\r\n\r\nThe post [\"Validating UTF-8 strings using as little as 0.7 cycles per byte\"](https://lemire.me/blog/2018/05/16/validating-utf-8-strings-using-as-little-as-0-7-cycles-per-byte/) shows about an order of magnitude performance improvement on validating utf-8, going from `8` cycles per byte parsed to `0.7` cycles per byte parsed.\r\n\r\nWhen passing Rust's validation code through the godbolt decompiler, `from_utf8_unchecked` outputs 7 instructions, and `from_utf8` outputs 57 instructions. In the case of `from_utf8` most instructions seem to occur inside a loop. Which makes it likely we'll be able to observe a performance improvement by using a SIMD-enabled utf-8 parsing algorithm. Especially since economies of scale would apply here -- it's not uncommon for the compiler to parse several million bytes of input in a run. Any improvements here would quickly add up.\r\n\r\n- [assembly for str::from_utf8_unchecked (godbolt) - 7 lines](https://godbolt.org/z/Y9mwfd)\r\n- [assembly for str::from_utf8 (godbolt) - 57 lines](https://godbolt.org/z/ZJk8mL)\r\n- [assembly for run_utf8_validation routine (godbolt) - 183 lines](https://godbolt.org/z/sQteLm)\r\n\r\n_All examples linked have been compiled with `-O -C target-cpu=native`._\r\n\r\nAlso ecosystem libraries such as `serde_json` perform utf-8 [validation in several locations](https://github.com/serde-rs/json/search?q=utf8&unscoped_q=utf8), so would likely also benefit from performance improvements to Rust's utf-8 validation routines.\r\n\r\n## Implementation\r\n\r\nThere are two known Rust implementations of lemire's algorithm available in Rust today:\r\n\r\n- [simd-lite/simdjson-rs](https://github.com/simd-lite/simdjson-rs)\r\n- [argnidagur/rust-isutf8](https://github.com/ArniDagur/rust-isutf8)\r\n\r\nThe latter even includes benchmarks against the compiler's algorithm (which makes it probable I'm not be the first person to think of this). But I haven't been able to successfully compile the benches, so I don't know how they stack up against the current implementation.\r\n\r\nI'm not overly familiar with rustc's internals. But it seems we would likely want to keep the current algorithm, and through feature detection enable SIMD algorithms. The `simdjson` library has different algorithms for different architectures, but we could probably start with instructions that are widely available and supported on tier-1 targets (such as `AVX2`).\r\n\r\nThese changes wouldn't require an RFC because no APIs would change. The only outcome would be a performance improvement.\r\n\r\n## Future work\r\n\r\n[Lemire's post](https://lemire.me/blog/2018/05/16/validating-utf-8-strings-using-as-little-as-0-7-cycles-per-byte/) also covers parsing ASCII in as little as 0.1 cycles per byte parsed. Rust's current ASCII validation algorithm validates bytes one at the time, and could likely benefit from similar optimizations.\r\n\r\nhttps://github.com/rust-lang/rust/blob/2f688ac602d50129388bb2a5519942049096cbff/src/libcore/str/mod.rs#L4136-L4141\r\n\r\nSpeeding this up would likely have ecosystem implications as well. For example HTTP headers must be valid ASCII, and are often performance sensitive. If the stdlib sped up ASCII validation, it would likely benefit the wider ecosystem as well.\r\n\r\n## Conclusion\r\n\r\nIn this issue I propose to use a SIMD-enabled algorithm for utf-8 validation in rustc. This seems like an interesting avenue to explore since there's a reasonable chance it might yield a performance improvement for many rust programs.\r\n\r\nI'm somewhat excited to have stumbled upon this, but was also surprised no issue had been filed for this yet. I'm a bit self-aware posting this since I'm not a rustc compiler engineer; but I hope this proves to be useful!\r\n\r\ncc/ @jonas-schievink @nnethercote \r\n\r\n## References\r\n- [Parsing Gigabytes of JSON per second](https://branchfree.org/2019/02/25/paper-parsing-gigabytes-of-json-per-second/)\r\n- [simd-lite/simdjson-rs](https://github.com/simd-lite/simdjson-rs)\r\n- [argnidagur/rust-isutf8](https://github.com/ArniDagur/rust-isutf8)\r\n- [lemire/simdjson](https://github.com/lemire/simdjson)\r\n- [Validating UTF-8 strings using as little as 0.7 cycles per byte](https://lemire.me/blog/2018/05/16/validating-utf-8-strings-using-as-little-as-0-7-cycles-per-byte/)\r\n- [assembly for str::from_utf8_unchecked (godbolt) - 7 lines](https://godbolt.org/z/Y9mwfd)\r\n- [assembly for str::from_utf8 (godbolt) - 57 lines](https://godbolt.org/z/ZJk8mL)\r\n- [assembly for run_utf8_validation routine (godbolt) - 183 lines](https://godbolt.org/z/sQteLm)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68455/reactions", "total_count": 47, "+1": 26, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 20, "rocket": 1, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68455/timeline", "performed_via_github_app": null, "state_reason": null}