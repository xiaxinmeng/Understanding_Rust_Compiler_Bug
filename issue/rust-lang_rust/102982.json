{"url": "https://api.github.com/repos/rust-lang/rust/issues/102982", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102982/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102982/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102982/events", "html_url": "https://github.com/rust-lang/rust/issues/102982", "id": 1406701783, "node_id": "I_kwDOAAsO6M5T2JDX", "number": 102982, "title": "Minimal support for implicit lifetime bounds on GATs", "user": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-12T19:25:28Z", "updated_at": "2022-10-12T20:01:16Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following Rust code fails to compile:\r\n\r\n```rust\r\n// Here we encode the following implicit lifetime bounds:\r\n// - `Long` must live for at least as long as the 'long lifetime.\r\n// - `Self` must live for at least as long as the 'short lifetime.\r\n// - The 'long lifetime must outlive the 'short lifetime,\r\n//   which in turn implies that `Long` must outlive `Self`.\r\npub trait ImplicitLifetimeBounds<\r\n    'long,\r\n    'short,\r\n    Long: ?Sized,\r\n    _Witnesses = (&'short Self, &'short &'long Long),\r\n> {}\r\n\r\nimpl<'long, 'short, Long, Short> ImplicitLifetimeBounds<'long, 'short, Long> for Short\r\nwhere\r\n    Long: ?Sized,\r\n    Short: ?Sized,\r\n{}\r\n\r\npub trait Long<'long>: 'long {\r\n    // when uncommenting the `where` clause it will compile, but the same explicit\r\n    // lifetime bounds are also implied by the `ImplicitLifetimeBounds` trait bound.\r\n    type Short<'short>: ImplicitLifetimeBounds<'long, 'short, Self> /* where 'long: 'short */ ;\r\n\r\n    fn use_gat(&self) -> Self::Short<'_>;\r\n}\r\n```\r\n\r\nThe error message is:\r\n\r\n```quote\r\nerror: missing required bound on `Short`\r\n  --> examples/implicit2.rs:25:5\r\n   |\r\n25 |     type Short<'short>: ImplicitLifetimeBounds<'long, 'short, Self>;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\r\n   |                                                                    |\r\n   |                                                                    help: add the required where clause: `where Self: 'short`\r\n   |\r\n   = note: this bound is currently required to ensure that impls have maximum flexibility\r\n   = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\r\n\r\nerror[E0491]: in type `&'short &'long Self`, reference has a longer lifetime than the data it references\r\n  --> examples/implicit2.rs:25:25\r\n   |\r\n25 |     type Short<'short>: ImplicitLifetimeBounds<'long, 'short, Self>;\r\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: the pointer is valid for the lifetime `'short` as defined here\r\n  --> examples/implicit2.rs:25:16\r\n   |\r\n25 |     type Short<'short>: ImplicitLifetimeBounds<'long, 'short, Self>;\r\n   |                ^^^^^^\r\nnote: but the referenced data is only valid for the lifetime `'long` as defined here\r\n  --> examples/implicit2.rs:22:16\r\n   |\r\n22 | pub trait Long<'long>: 'long {\r\n   |                ^^^^^\r\n\r\nFor more information about this error, try `rustc --explain E0491`.\r\n\r\n```\r\n\r\nThe error message could be clearer if it would suggest to add a `where 'long: 'short` bound on the GAT instead of the suggested `where Self: 'short`. because adding `where Self: 'short` solves the first error, but not the second error. Besides that it would be nice if Rust could support defining implicit lifetime bounds on GATs this way.\r\n\r\nThe main reason for this second ask, is that this technique could potentially be used to work-around various HRTB issues that occur with GATs that have explicit lifetime bounds (as a kind of \"opt-out\" for explicit GAT lifetime bounds, but while still providing implicit GAT lifetime bounds). What I'm referring to is that it's currently not (yet) possible to write `for<'a where 'a: 'b>` clauses in HRTBs, but members of the community have pointed out that these can be emulated with implicit lifetime bounds and then still have your cake with HRTBs, too - however, this won't work for many GATs because these always require explicit lifetime bounds for the moment and this somehow blocks the use of implicit lifetimes for this purpose. Here is a post with [more details](https://users.rust-lang.org/t/dynamic-trait-objects-with-gat-lifetimes-using-work-around-on-stable-rust-1-65/82511) as an example of what I mean. The only other existing work-around for HRTBs +  \"GATs in their intended form\" (i.e. no [super traits](https://sabrinajewson.org/blog/the-better-alternative-to-lifetime-gats#hrtb-supertrait), [dynamic trait objects](https://sabrinajewson.org/blog/the-better-alternative-to-lifetime-gats#dyn-trait-as-a-hkt) or [helper traits](https://sabrinajewson.org/blog/the-better-alternative-to-lifetime-gats#the-better-gats), just GATs as these are currently being stabilized) at the moment is to use a [super-trait](https://sabrinajewson.org/blog/the-better-alternative-to-lifetime-gats#hrtb-supertrait), but imho this is an obstacle for crates in the ecosystem to widely adopt GATs, because having to implement 2 traits instead of 1 trait is not a very ergonomic API design towards end-users. I am aware that there are plans to improve Rust to be able to infer GAT lifetime bounds implicitly and that this is still a significant jump away from stabilization, maybe this proposed approach can be an alternative way to \"explicitly\" provide \"implicit lifetime bounds\" for the time being, without the need for chalk in the short term.\r\n\r\nI suspect this is probably a very big ask, but wanted to provide this feedback in case it helps somehow for making GATs better. Thanks for all the hard made efforts towards bringing GATs to stable Rust, I am really looking forward to using them!\r\n\r\n<details>\r\n<summary>p.s. I am on this Rust version</summary>\r\n\r\n```quote\r\nrustc 1.66.0-nightly (0ca356586 2022-10-06)\r\nbinary: rustc\r\ncommit-hash: 0ca356586fed56002b10920fd21ddf6fb12de797\r\ncommit-date: 2022-10-06\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.66.0-nightly\r\nLLVM version: 15.0.2\r\n```\r\n\r\n</details>", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102982/timeline", "performed_via_github_app": null, "state_reason": null}