{"url": "https://api.github.com/repos/rust-lang/rust/issues/86292", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86292/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86292/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86292/events", "html_url": "https://github.com/rust-lang/rust/issues/86292", "id": 920446725, "node_id": "MDU6SXNzdWU5MjA0NDY3MjU=", "number": 86292, "title": "Tracking Issue for implementig addition between ranges and index", "user": {"login": "DPDmancul", "id": 3186857, "node_id": "MDQ6VXNlcjMxODY4NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/3186857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DPDmancul", "html_url": "https://github.com/DPDmancul", "followers_url": "https://api.github.com/users/DPDmancul/followers", "following_url": "https://api.github.com/users/DPDmancul/following{/other_user}", "gists_url": "https://api.github.com/users/DPDmancul/gists{/gist_id}", "starred_url": "https://api.github.com/users/DPDmancul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DPDmancul/subscriptions", "organizations_url": "https://api.github.com/users/DPDmancul/orgs", "repos_url": "https://api.github.com/users/DPDmancul/repos", "events_url": "https://api.github.com/users/DPDmancul/events{/privacy}", "received_events_url": "https://api.github.com/users/DPDmancul/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-06-14T14:03:13Z", "updated_at": "2021-06-14T14:11:51Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(collections_range_add)]`\r\n\r\nThis is a tracking issue for implementing `Add<RangeBouds<T>>` for `T`\r\n\r\n<!--\r\nInclude a short description of the feature.\r\n-->\r\nAs described in [this tweet and following comments](https://twitter.com/yoshuawuyts/status/1404151331120615424?s=09) the usual way to slice with a starting point and a length is: `buf[start .. start + len]`. An alternative way which avoids `start` repetition is to double slicing: `buf[start..][..len]`. This is not so intuitive, and so the following was proposed `buf[start+..len]`\r\n\r\nThis can be easily implemented in the standard library. Here i put a simple na\u00efve implementation which generalizes on all cases of RangeBounds.\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\n// core::ops\r\nimpl<T: Add<Output = T> + Copy, Rhs: RangeBounds<T>> Add<Rhs> for T {\r\n    type Output = (Bound<T>, Bound<T>);\r\n\r\n    /// Shifts a left-bounded range or fixes a start for a left-unbounded range.\r\n    ///\r\n    /// ```compile_fail,E0277\r\n    /// start +       ..  len   = start         ..  start+len\r\n    /// start +       ..= len   = start         ..= start+len\r\n    /// shift + (start ..  end) = (start+shift) ..  end+shift\r\n    /// shift + (start ..= end) = (start+shift) ..= end+shift\r\n    /// shift + (start .. )     = (start+shift) ..\r\n    /// start +       ..        = start         ..\r\n    /// ```\r\n    ///\r\n    /// # Examples\r\n    ///\r\n    /// ```\r\n    /// # fn main() {\r\n    /// use std::ops::RangeBounds;\r\n    ///\r\n    /// let a = 5+..10;\r\n    /// let b = 5..5+10;\r\n    /// assert_eq!(a.start_bound(), b.start_bound());\r\n    /// assert_eq!(a.end_bound(), b.end_bound());\r\n    /// # }\r\n    /// ```\r\n    fn add(self, other: Rhs) -> Self::Output {\r\n        let start = match other.start_bound() {\r\n            Unbounded => Included(self),\r\n            Included(&s) => Included(self + s),\r\n            Excluded(&s) => Excluded(self + s),\r\n        };\r\n        let end = match other.end_bound() {\r\n            Unbounded => Unbounded,\r\n            Included(&e) => Included(self + e),\r\n            Excluded(&e) => Excluded(self + e),\r\n        };\r\n        (start, end)\r\n    }\r\n}\r\n```\r\n\r\n```rs\r\n#[test]\r\nfn test_range_add() {\r\n    let (a, b) = (5 + ..10, 5..(5 + 10));\r\n    assert_eq!(a.start_bound(), b.start_bound());\r\n    assert_eq!(a.end_bound(), b.end_bound());\r\n\r\n    let (a, b) = (5 + ..=10, 5..=(5 + 10));\r\n    assert_eq!(a.start_bound(), b.start_bound());\r\n    assert_eq!(a.end_bound(), b.end_bound());\r\n\r\n    let (a, b) = (5 + (6..10), (6 + 5)..(10 + 5));\r\n    assert_eq!(a.start_bound(), b.start_bound());\r\n    assert_eq!(a.end_bound(), b.end_bound());\r\n\r\n    let (a, b) = (5 + (6..=10), (6 + 5)..=(10 + 5));\r\n    assert_eq!(a.start_bound(), b.start_bound());\r\n    assert_eq!(a.end_bound(), b.end_bound());\r\n\r\n    let (a, b) = (5 + (6..), (6 + 5)..);\r\n    assert_eq!(a.start_bound(), b.start_bound());\r\n    assert_eq!(a.end_bound(), b.end_bound());\r\n\r\n    let (a, b) = (5 + .., 5..);\r\n    assert_eq!(a.start_bound(), b.start_bound());\r\n    assert_eq!(a.end_bound(), b.end_bound());\r\n\r\n    let x = [1,8,4,7,10,-2,5];\r\n    assert_eq!(&x[3usize + ..2usize], &x[3..5]);\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [ ] Finalize implementation\r\n- [ ] Final commenting period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final commenting period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncommenting period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- With standard slices the `usize` type is automatic inferred, but with this implementation it is not.\r\n- The trait `SliceIndex<str>` is not implemented for `(Bound<usize>, Bound<usize>)`: only `SliceIndex<[T]>` is implemented.\r\n- Even if bounds are constants the range would not result constant and so the size of the slice is not known at compile time.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86292/timeline", "performed_via_github_app": null, "state_reason": null}