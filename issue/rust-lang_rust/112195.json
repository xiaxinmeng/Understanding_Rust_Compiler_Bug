{"url": "https://api.github.com/repos/rust-lang/rust/issues/112195", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112195/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112195/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112195/events", "html_url": "https://github.com/rust-lang/rust/issues/112195", "id": 1737362282, "node_id": "I_kwDOAAsO6M5njgtq", "number": 112195, "title": "Support wasm exception handling for Emscripten target", "user": {"login": "hoodmane", "id": 8739626, "node_id": "MDQ6VXNlcjg3Mzk2MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hoodmane", "html_url": "https://github.com/hoodmane", "followers_url": "https://api.github.com/users/hoodmane/followers", "following_url": "https://api.github.com/users/hoodmane/following{/other_user}", "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}", "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions", "organizations_url": "https://api.github.com/users/hoodmane/orgs", "repos_url": "https://api.github.com/users/hoodmane/repos", "events_url": "https://api.github.com/users/hoodmane/events{/privacy}", "received_events_url": "https://api.github.com/users/hoodmane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2023-06-02T02:31:12Z", "updated_at": "2023-06-03T00:21:10Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently the Rust Emscripten target supports js exception handling. I've been trying to get it to support also wasm exception handling. The patch to get it to exclusively use wasm exception handling is quite small. The following suffices:\r\n\r\n<details>\r\n<summary>Patch</summary>\r\n\r\n```patch\r\ndiff --git a/compiler/rustc_codegen_llvm/src/llvm_util.rs b/compiler/rustc_codegen_llvm/src/llvm_util.rs\r\nindex a0a640473eb..cd88648911a 100644\r\n--- a/compiler/rustc_codegen_llvm/src/llvm_util.rs\r\n+++ b/compiler/rustc_codegen_llvm/src/llvm_util.rs\r\n@@ -110,7 +110,7 @@ fn llvm_arg_to_arg_name(full_arg: &str) -> &str {\r\n         }\r\n \r\n         if sess.target.os == \"emscripten\" && sess.panic_strategy() == PanicStrategy::Unwind {\r\n-            add(\"-enable-emscripten-cxx-exceptions\", false);\r\n+            add(\"-wasm-enable-sjlj\", false);\r\n         }\r\n \r\n         // HACK(eddyb) LLVM inserts `llvm.assume` calls to preserve align attributes\r\ndiff --git a/compiler/rustc_codegen_ssa/src/back/link.rs b/compiler/rustc_codegen_ssa/src/back/link.rs\r\nindex 94acdea894b..2909401836d 100644\r\n--- a/compiler/rustc_codegen_ssa/src/back/link.rs\r\n+++ b/compiler/rustc_codegen_ssa/src/back/link.rs\r\n@@ -2057,12 +2057,11 @@ fn add_order_independent_options(\r\n     }\r\n \r\n     if sess.target.os == \"emscripten\" {\r\n-        cmd.arg(\"-s\");\r\n-        cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\r\n-            \"DISABLE_EXCEPTION_CATCHING=1\"\r\n+        if sess.panic_strategy() == PanicStrategy::Abort {\r\n+            cmd.arg(\"-sDISABLE_EXCEPTION_CATCHING=1\");\r\n         } else {\r\n-            \"DISABLE_EXCEPTION_CATCHING=0\"\r\n-        });\r\n+            cmd.arg(\"-fwasm-exceptions\");\r\n+        }\r\n     }\r\n \r\n     if flavor == LinkerFlavor::PtxLinker {\r\n```\r\n\r\n</details>\r\n\r\nI'm not sure what the best way is to add support for a choice between these two options.\r\n\r\n@aheejin Is there any way to turn `-enable-emscripten-cxx-exceptions` back off by adding another argument? It would be convenient to be able to inject `-mllvm -disable-emscripten-cxx-exceptions -mllvm -wasm-enable-sjlj` and get wasm exceptions to work...", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112195/timeline", "performed_via_github_app": null, "state_reason": null}