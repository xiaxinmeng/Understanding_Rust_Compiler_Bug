{"url": "https://api.github.com/repos/rust-lang/rust/issues/8841", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/8841/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/8841/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/8841/events", "html_url": "https://github.com/rust-lang/rust/issues/8841", "id": 18712007, "node_id": "MDU6SXNzdWUxODcxMjAwNw==", "number": 8841, "title": "Trait methods can return &T types without lifetimes", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-08-29T04:55:53Z", "updated_at": "2014-08-25T12:15:49Z", "closed_at": "2014-08-25T12:15:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It doesn't seem to matter whether or not an abstract trait method returns a `&T` type without a region:\n\n```\ntrait A {\n    fn foo(&self) -> &int;\n}\n\nstruct B {\n    x: int,\n}\n\n/*\nimpl A for B {\n    fn foo(&self) -> &int { &self.x }\n}\n*/\n\nfn main() {\n}\n```\n\nCompiles fine. However, once `impl A for B` is uncommented, it properly errors with:\n\n```\nfoo.rs:2:28: 2:40 error: cannot infer an appropriate lifetime due to conflicting requirements\nfoo.rs:2     fn foo(&self) -> &int { self.bar() }\n                                     ^~~~~~~~~~~~\nfoo.rs:2:26: 2:40 note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the block at 2:26...\nfoo.rs:2     fn foo(&self) -> &int { self.bar() }\n                                   ^~~~~~~~~~~~~~\nfoo.rs:2:28: 2:33 note: ...due to the following expression\nfoo.rs:2     fn foo(&self) -> &int { self.bar() }\n                                     ^~~~~\nfoo.rs:2:26: 2:40 note: but, the lifetime must be valid for the anonymous lifetime #2 defined on the block at 2:26...\nfoo.rs:2     fn foo(&self) -> &int { self.bar() }\n                                   ^~~~~~~~~~~~~~\nfoo.rs:2:28: 2:40 note: ...due to the following expression\nfoo.rs:2     fn foo(&self) -> &int { self.bar() }\n                                     ^~~~~~~~~~~~\n```\n\nWhat's interesting is that the impl cannot correct for the error in the trait. Changing it to this:\n\n```\nimpl A for B {\n    fn foo<'a>(&'a self) -> &'a int { &self.x }\n}\n```\n\nResults in this error:\n\n```\nfoo.rs:10:4: 10:47 error: method `foo` has an incompatible type: expected concrete lifetime, but found bound lifetime parameter &\nfoo.rs:10     fn foo<'a>(&'a self) -> &'a int { &self.x }\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nI feel we should error out on the trait method or else we risk someone creating an unimplementable trait.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/8841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/8841/timeline", "performed_via_github_app": null, "state_reason": "completed"}