{"url": "https://api.github.com/repos/rust-lang/rust/issues/44345", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44345/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44345/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44345/events", "html_url": "https://github.com/rust-lang/rust/issues/44345", "id": 255347360, "node_id": "MDU6SXNzdWUyNTUzNDczNjA=", "number": 44345, "title": "Updating dependency caused type inference to fail on unrelated code", "user": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-05T17:10:33Z", "updated_at": "2021-06-03T02:40:29Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Note: This is not a bug. This is a case that I ran into that was difficult to debug, and extremely confusing. In the interest of the ergonomics initiative, I wanted to report it. However, rustc is behaving as expected. Feel free to close this at your leisure. \r\n\r\nAt some point last night, Diesel's builds suddenly started failing for no apparent reason. [This line](https://github.com/diesel-rs/diesel/blob/8b9326511100334b48ee73d300633535f2c9b8f7/diesel_tests/tests/select.rs#L99) was failing to infer that the `_` there is `bool` (the `Vec` annotation is cruft from back when there needed to be a `collect` call as well). It was especially baffling, because the test above it is nearly identical, and [this line](https://github.com/diesel-rs/diesel/blob/8b9326511100334b48ee73d300633535f2c9b8f7/diesel_tests/tests/select.rs#L84) was compiling just fine.\r\n\r\nEventually after cleaning up some build output and diffing it, we found that the only thing that had changed was a new version of `serde_json` being released. That led us to [this commit](https://github.com/serde-rs/json/commit/7fbf18e95e1f85a8654534385931818d5135db7b), which made the reason for the failure much more obvious.\r\n\r\nNobody really did anything wrong here. Implementing a non-fundamental trait is defined as a minor breaking change in [RFC #1105](https://github.com/rust-lang/rfcs/blob/master/text/1105-api-evolution.md). However, the failure was extremely non-local and confusing. We were convinced this was a bug in rustc for a few hours until we finally tracked it down.\r\n\r\nWhile there is no bug, I think two things could have improved this situation. First, I think we should consider amending that RFC so that implementing a trait which is not part of your crate for a type which is not part of your crate to be considered a major breaking change, as any code it breaks will be code which does not interact with that crate.\r\n\r\nSecondly, I wonder if the error message could give some more diagnostic output here. If the message listed the impls of `PartialEq` for `bool`, this would have been immediately clear what had happened.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44345/timeline", "performed_via_github_app": null, "state_reason": null}