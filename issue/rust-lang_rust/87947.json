{"url": "https://api.github.com/repos/rust-lang/rust/issues/87947", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87947/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87947/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87947/events", "html_url": "https://github.com/rust-lang/rust/issues/87947", "id": 968034434, "node_id": "MDU6SXNzdWU5NjgwMzQ0MzQ=", "number": 87947, "title": "Rust 1.54.0 optimized compilation overwrites stack variable, causing segfault", "user": {"login": "indygreg", "id": 342993, "node_id": "MDQ6VXNlcjM0Mjk5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/342993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/indygreg", "html_url": "https://github.com/indygreg", "followers_url": "https://api.github.com/users/indygreg/followers", "following_url": "https://api.github.com/users/indygreg/following{/other_user}", "gists_url": "https://api.github.com/users/indygreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/indygreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/indygreg/subscriptions", "organizations_url": "https://api.github.com/users/indygreg/orgs", "repos_url": "https://api.github.com/users/indygreg/repos", "events_url": "https://api.github.com/users/indygreg/events{/privacy}", "received_events_url": "https://api.github.com/users/indygreg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2021-08-12T04:45:58Z", "updated_at": "2022-03-10T12:31:52Z", "closed_at": "2021-08-14T03:37:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am able to reliably reproduce a crash on x86_64-unknown-linux-gnu when building in `--release` mode with 1.54.0. The same code and build configuration works properly on 1.53.0.\r\n\r\nI'm not a great assembly-level debugger, but I believe the compiler is confused about register/variable aliasing and this effectively leads to corruption of a variable on the stack, which leads to a segfault.\r\n\r\n# Rust 1.54.0 Analysis\r\n\r\nWe're about to return from `_PyArgv_AsWstrList` (from the CPython 3.9 internals):\r\n\r\n```\r\n105     in Python/preconfig.c\r\n   0x0000555555ae1456 <+54>:    mov    %r14,%rdi\r\n   0x0000555555ae1459 <+57>:    call   0x555555ad9020 <_PyWideStringList_Copy>\r\n   0x0000555555ae145e <+62>:    test   %eax,%eax\r\n   0x0000555555ae1460 <+64>:    js     0x555555ae14dc <_PyArgv_AsWstrList+188>\r\n\r\n106     in Python/preconfig.c\r\n107     in Python/preconfig.c\r\n108     in Python/preconfig.c\r\n109     in Python/preconfig.c\r\n=> 0x0000555555ae1462 <+66>:    xorps  %xmm0,%xmm0\r\n   0x0000555555ae1465 <+69>:    movups %xmm0,0x10(%r15)\r\n   0x0000555555ae146a <+74>:    movups %xmm0,(%r15)\r\n\r\n110     in Python/preconfig.c\r\n   0x0000555555ae146e <+78>:    mov    %r15,%rax\r\n   0x0000555555ae1471 <+81>:    add    $0x20,%rsp\r\n   0x0000555555ae1475 <+85>:    pop    %rbx\r\n   0x0000555555ae1476 <+86>:    pop    %r12\r\n   0x0000555555ae1478 <+88>:    pop    %r13\r\n   0x0000555555ae147a <+90>:    pop    %r14\r\n   0x0000555555ae147c <+92>:    pop    %r15\r\n   0x0000555555ae147e <+94>:    ret\r\n\r\n```\r\n\r\n```\r\n(gdb) info registers\r\nrax            0x5555559e8ae0      93824997034720\r\nrbx            0x7fffffffc530      140737488340272\r\nrcx            0x7ffff7808008      140737345781768\r\nrdx            0x0                 0\r\nrsi            0x0                 0\r\nrdi            0x0                 0\r\nrbp            0x1                 0x1\r\nrsp            0x7fffffffc4c0      0x7fffffffc4c0\r\nr8             0x1                 1\r\nr9             0x0                 0\r\nr10            0x0                 0\r\nr11            0x7ffff7809000      140737345785856\r\nr12            0x7fffffffc4d8      140737488340184\r\nr13            0x1                 1\r\nr14            0x7fffffffc848      140737488341064\r\nr15            0x7fffffffc600      140737488340480\r\nrip            0x555555ae1462      0x555555ae1462 <_PyArgv_AsWstrList+66>\r\neflags         0x202               [ IF ]\r\ncs             0x33                51\r\nss             0x2b                43\r\nds             0x0                 0\r\nes             0x0                 0\r\nfs             0x0                 0\r\ngs             0x0                 0\r\n```\r\n\r\nAnd here's the  last few frame pointers.\r\n\r\n```\r\n(gdb) info frame 0\r\nStack frame at 0x7fffffffc510:\r\n rip = 0x555555ae1462 in _PyArgv_AsWstrList (Python/preconfig.c:109); saved rip = 0x5555558733f2\r\n called by frame at 0x7fffffffc570\r\n source language c.\r\n Arglist at 0x7fffffffc4b8, args: args=0x7fffffffc530, list=0x7fffffffc848\r\n Locals at 0x7fffffffc4b8, Previous frame's sp is 0x7fffffffc510\r\n Saved registers:\r\n  rbx at 0x7fffffffc4e0, r12 at 0x7fffffffc4e8, r13 at 0x7fffffffc4f0, r14 at 0x7fffffffc4f8, r15 at 0x7fffffffc500, rip at 0x7fffffffc508\r\n\r\n(gdb) info frame 1\r\nStack frame at 0x7fffffffc570:\r\n rip = 0x5555558733f2 in _PyConfig_SetPyArgv (./Python/initconfig.c:2448); saved rip = 0x555555a4c92c\r\n inlined into frame 2, caller of frame at 0x7fffffffc510\r\n source language c.\r\n Arglist at unknown address.\r\n Locals at unknown address, Previous frame's sp is 0x7fffffffc510\r\n Saved registers:\r\n  rbx at 0x7fffffffc4e0, r12 at 0x7fffffffc4e8, r13 at 0x7fffffffc4f0, r14 at 0x7fffffffc4f8, r15 at 0x7fffffffc500, rip at 0x7fffffffc508\r\n\r\n(gdb) info frame 2\r\nStack frame at 0x7fffffffc570:\r\n rip = 0x5555558733f2 in PyConfig_SetBytesArgv (./Python/initconfig.c:2462); saved rip = 0x555555a4c92c\r\n called by frame at 0x7fffffffc650, caller of frame at 0x7fffffffc570\r\n source language c.\r\n Arglist at 0x7fffffffc508, args: config=<optimized out>, argc=<optimized out>, argv=<optimized out>\r\n Locals at 0x7fffffffc508, Previous frame's sp is 0x7fffffffc570\r\n Saved registers:\r\n  rbx at 0x7fffffffc550, r14 at 0x7fffffffc558, r15 at 0x7fffffffc560, rip at 0x7fffffffc568\r\n\r\n(gdb) info frame 3\r\nStack frame at 0x7fffffffc650:\r\n rip = 0x555555a4c92c in pyembed::interpreter_config::set_argv (/home/gps/src/pyoxidizer.git/pyembed/src/interpreter_config.rs:215);\r\n    saved rip = 0x555555a04e1d\r\n called by frame at 0x7fffffffcb20, caller of frame at 0x7fffffffc570\r\n source language rust.\r\n Arglist at 0x7fffffffc570, args: config=0x0, args=...\r\n Locals at 0x7fffffffc570, Previous frame's sp is 0x7fffffffc650\r\n Saved registers:\r\n  rbx at 0x7fffffffc618, rbp at 0x7fffffffc640, r12 at 0x7fffffffc620, r13 at 0x7fffffffc628, r14 at 0x7fffffffc630, r15 at 0x7fffffffc638,\r\n  rip at 0x7fffffffc648\r\n\r\n(gdb) info frame 4\r\nStack frame at 0x7fffffffcb20:\r\n rip = 0x555555a04e1d in pyembed::interpreter_config::{{impl}}::try_into (/home/gps/src/pyoxidizer.git/pyembed/src/interpreter_config.rs:592);\r\n    saved rip = 0x555555a49736\r\n called by frame at 0x7fffffffd9e0, caller of frame at 0x7fffffffc650\r\n source language rust.\r\n Arglist at 0x7fffffffc648, args: self=0x7fffffffcff0\r\n Locals at 0x7fffffffc648, Previous frame's sp is 0x7fffffffcb20\r\n Saved registers:\r\n  rbx at 0x7fffffffcaf8, r12 at 0x7fffffffcb00, r14 at 0x7fffffffcb08, r15 at 0x7fffffffcb10, rip at 0x7fffffffcb18\r\n\r\n(gdb) info frame 5\r\nStack frame at 0x7fffffffd9e0:\r\n rip = 0x555555a49736 in pyembed::interpreter::MainPythonInterpreter::init (/home/gps/src/pyoxidizer.git/pyembed/src/interpreter.rs:169);\r\n    saved rip = 0x5555559dde78\r\n inlined into frame 6, caller of frame at 0x7fffffffcb20\r\n source language rust.\r\n Arglist at unknown address.\r\n Locals at unknown address, Previous frame's sp is 0x7fffffffcb20\r\n Saved registers:\r\n  rbx at 0x7fffffffcaf8, r12 at 0x7fffffffcb00, r14 at 0x7fffffffcb08, r15 at 0x7fffffffcb10, rip at 0x7fffffffcb18\r\n```\r\n\r\nWe eventually crash in frame 4. So let's look at it's state:\r\n\r\n```\r\n(gdb) f 4\r\n#4  0x0000555555a04e1d in pyembed::interpreter_config::{{impl}}::try_into (self=0x7fffffffcff0)\r\n    at /home/gps/src/pyoxidizer.git/pyembed/src/interpreter_config.rs:592\r\n592                 set_argv(&mut config, argv)?;\r\n(gdb) info registers\r\nrax            0x5555559e8ae0      93824997034720\r\nrbx            0x7fffffffcff0      140737488343024\r\nrcx            0x7ffff7808008      140737345781768\r\nrdx            0x0                 0\r\nrsi            0x0                 0\r\nrdi            0x0                 0\r\nrbp            0x7fffffffd308      0x7fffffffd308\r\nrsp            0x7fffffffc650      0x7fffffffc650\r\nr8             0x1                 1\r\nr9             0x0                 0\r\nr10            0x0                 0\r\nr11            0x7ffff7809000      140737345785856\r\nr12            0x7ffff7d9ff40      140737351647040\r\nr13            0x0                 0\r\nr14            0x7fffffffcc70      140737488342128\r\nr15            0x7fffffffc970      140737488341360\r\nrip            0x555555a04e1d      0x555555a04e1d <pyembed::interpreter_config::{{impl}}::try_into+173>\r\neflags         0x202               [ IF ]\r\ncs             0x33                51\r\nss             0x2b                43\r\nds             0x0                 0\r\nes             0x0                 0\r\nfs             0x0                 0\r\ngs             0x0                 0\r\n```\r\n\r\nHere are the important details:\r\n\r\nThe instructions we're about to execute are:\r\n\r\n```\r\n0x0000555555ae1462 <+66>:    xorps  %xmm0,%xmm0\r\n0x0000555555ae1465 <+69>:    movups %xmm0,0x10(%r15)\r\n0x0000555555ae146a <+74>:    movups %xmm0,(%r15)\r\n```\r\n\r\n`self` in frame 4 is `0x7fffffffcff0`, which appears to be inhabiting `rbx`.\r\n\r\nThe value of `r15` is `0x7fffffffc600`. This memory address is close to frame 4's arglist and locals (`0x7fffffffc648`). The value returned by this function is propagating through the intermediate frames to frame 4, which operates on it. So the compiler likely optimized things to a variable write directly into frame 4's locals space. Cool.\r\n\r\nBefore we execute that `movups %xmm0,0x10(%r15)`, here is the memory we're operating on:\r\n\r\n```\r\n0x7fffffffc600: 0x00000000      0x00000000      0x00000000      0x00000000\r\n0x7fffffffc610: 0x00000000      0x00000000      0xffffcff0      0x00007fff\r\n0x7fffffffc620: 0xf7d9ff40      0x00007fff      0x00000000      0x00000000\r\n0x7fffffffc630: 0xffffcc70      0x00007fff      0xffffc970      0x00007fff\r\n0x7fffffffc640: 0xffffd308      0x00007fff      0x55a04e1d      0x00005555\r\n0x7fffffffc650: 0xffffc8d0      0x00007fff      0x00000000      0x00000000\r\n0x7fffffffc660: 0x00000003      0x00000001      0x00000000      0x00000000\r\n```\r\n\r\nAnd after:\r\n\r\n```\r\n0x7fffffffc600: 0x00000000      0x00000000      0x00000000      0x00000000\r\n0x7fffffffc610: 0x00000000      0x00000000      0x00000000      0x00000000\r\n0x7fffffffc620: 0xf7d9ff40      0x00007fff      0x00000000      0x00000000\r\n0x7fffffffc630: 0xffffcc70      0x00007fff      0xffffc970      0x00007fff\r\n0x7fffffffc640: 0xffffd308      0x00007fff      0x55a04e1d      0x00005555\r\n0x7fffffffc650: 0xffffc8d0      0x00007fff      0x00000000      0x00000000\r\n0x7fffffffc660: 0x00000003      0x00000001      0x00000000      0x00000000\r\n```\r\n\r\nThe change there is:\r\n\r\n```\r\n 0x7fffffffc600: 0x00000000      0x00000000      0x00000000      0x00000000\r\n-0x7fffffffc610: 0x00000000      0x00000000      0xffffcff0      0x00007fff\r\n+0x7fffffffc610: 0x00000000      0x00000000      0x00000000      0x00000000\r\n 0x7fffffffc620: 0xf7d9ff40      0x00007fff      0x00000000      0x00000000\r\n```\r\n\r\nSo the 16 bytes between `0x7fffffffc610-0x7fffffffc61f` got cleared out. Makes sense: that's what the instructions told it to do.\r\n\r\nHowever, `0x7fffffffc618` contained the saved register value (`0x7fffffffcff0`) for `rbx`, holding the address of `self`. This value is now zeroed.\r\n\r\nWe confirm this from GDB:\r\n\r\n```\r\n(gdb) f 4\r\n#4  0x0000555555a04e1d in pyembed::interpreter_config::{{impl}}::try_into (self=0x0)\r\n    at /home/gps/src/pyoxidizer.git/pyembed/src/interpreter_config.rs:592\r\n592                 set_argv(&mut config, argv)?;\r\n(gdb) info registers\r\nrax            0x5555559e8ae0      93824997034720\r\nrbx            0x0                 0\r\nrcx            0x7ffff7808008      140737345781768\r\nrdx            0x0                 0\r\n```\r\n\r\nNote that `rbx` is `0x0` and `self=0x0`.\r\n\r\nSeveral instructions later, we return to frame 4 and execute assembly corresponding to the Rust code `if self.exe.is_none() {`. Since `self` is NULL, we get a segfault.\r\n\r\n# Rust 1.53.0 Analysis\r\n\r\nCompiling the same source code with Rust 1.53.0, things look similar:\r\n\r\n```\r\n105     in Python/preconfig.c\r\n   0x0000555555ae0886 <+54>:    mov    %r14,%rdi\r\n   0x0000555555ae0889 <+57>:    call   0x555555ad8450 <_PyWideStringList_Copy>\r\n   0x0000555555ae088e <+62>:    test   %eax,%eax\r\n   0x0000555555ae0890 <+64>:    js     0x555555ae090c <_PyArgv_AsWstrList+188>\r\n\r\n106     in Python/preconfig.c\r\n107     in Python/preconfig.c\r\n108     in Python/preconfig.c\r\n109     in Python/preconfig.c\r\n=> 0x0000555555ae0892 <+66>:    xorps  %xmm0,%xmm0\r\n   0x0000555555ae0895 <+69>:    movups %xmm0,0x10(%r15)\r\n   0x0000555555ae089a <+74>:    movups %xmm0,(%r15)\r\n\r\n110     in Python/preconfig.c\r\n   0x0000555555ae089e <+78>:    mov    %r15,%rax\r\n   0x0000555555ae08a1 <+81>:    add    $0x20,%rsp\r\n   0x0000555555ae08a5 <+85>:    pop    %rbx\r\n   0x0000555555ae08a6 <+86>:    pop    %r12\r\n   0x0000555555ae08a8 <+88>:    pop    %r13\r\n   0x0000555555ae08aa <+90>:    pop    %r14\r\n   0x0000555555ae08ac <+92>:    pop    %r15\r\n   0x0000555555ae08ae <+94>:    ret\r\n\r\n```\r\n\r\n```\r\n(gdb) info frame 0\r\nStack frame at 0x7fffffffc410:\r\n rip = 0x555555ae0892 in _PyArgv_AsWstrList (Python/preconfig.c:109); saved rip = 0x5555558724a2\r\n called by frame at 0x7fffffffc470\r\n source language c.\r\n Arglist at 0x7fffffffc3b8, args: args=0x7fffffffc430, list=0x7fffffffc8e0\r\n Locals at 0x7fffffffc3b8, Previous frame's sp is 0x7fffffffc410\r\n Saved registers:\r\n  rbx at 0x7fffffffc3e0, r12 at 0x7fffffffc3e8, r13 at 0x7fffffffc3f0, r14 at 0x7fffffffc3f8, r15 at 0x7fffffffc400, rip at 0x7fffffffc408\r\n\r\n(gdb) info frame 1\r\nStack frame at 0x7fffffffc470:\r\n rip = 0x5555558724a2 in _PyConfig_SetPyArgv (./Python/initconfig.c:2448); saved rip = 0x555555a42a6c\r\n inlined into frame 2, caller of frame at 0x7fffffffc410\r\n source language c.\r\n Arglist at unknown address.\r\n Locals at unknown address, Previous frame's sp is 0x7fffffffc410\r\n Saved registers:\r\n  rbx at 0x7fffffffc3e0, r12 at 0x7fffffffc3e8, r13 at 0x7fffffffc3f0, r14 at 0x7fffffffc3f8, r15 at 0x7fffffffc400, rip at 0x7fffffffc408\r\n\r\n(gdb) info frame 2\r\nStack frame at 0x7fffffffc470:\r\n rip = 0x5555558724a2 in PyConfig_SetBytesArgv (./Python/initconfig.c:2462); saved rip = 0x555555a42a6c\r\n called by frame at 0x7fffffffc550, caller of frame at 0x7fffffffc470\r\n source language c.\r\n Arglist at 0x7fffffffc408, args: config=<optimized out>, argc=<optimized out>, argv=<optimized out>\r\n Locals at 0x7fffffffc408, Previous frame's sp is 0x7fffffffc470\r\n Saved registers:\r\n  rbx at 0x7fffffffc450, r14 at 0x7fffffffc458, r15 at 0x7fffffffc460, rip at 0x7fffffffc468\r\n\r\n(gdb) info frame 3\r\nStack frame at 0x7fffffffc550:\r\n rip = 0x555555a42a6c in pyembed::interpreter_config::set_argv (/home/gps/src/pyoxidizer.git/pyembed/src/interpreter_config.rs:215);\r\n    saved rip = 0x5555559fe846\r\n called by frame at 0x7fffffffca30, caller of frame at 0x7fffffffc470\r\n source language rust.\r\n Arglist at 0x7fffffffc470, args: config=0x0, args=...\r\n Locals at 0x7fffffffc470, Previous frame's sp is 0x7fffffffc550\r\n Saved registers:\r\n  rbx at 0x7fffffffc518, rbp at 0x7fffffffc540, r12 at 0x7fffffffc520, r13 at 0x7fffffffc528, r14 at 0x7fffffffc530, r15 at 0x7fffffffc538,\r\n  rip at 0x7fffffffc548\r\n\r\n(gdb) info frame 4\r\nStack frame at 0x7fffffffca30:\r\n rip = 0x5555559fe846 in pyembed::interpreter_config::{{impl}}::try_into (/home/gps/src/pyoxidizer.git/pyembed/src/interpreter_config.rs:592);\r\n    saved rip = 0x555555a36692\r\n called by frame at 0x7fffffffd9e0, caller of frame at 0x7fffffffc550\r\n source language rust.\r\n Arglist at 0x7fffffffc548, args: self=0x7fffffffcff0\r\n Locals at 0x7fffffffc548, Previous frame's sp is 0x7fffffffca30\r\n Saved registers:\r\n  rbx at 0x7fffffffca08, r12 at 0x7fffffffca10, r14 at 0x7fffffffca18, r15 at 0x7fffffffca20, rip at 0x7fffffffca28\r\n```\r\n\r\n```\r\n(gdb) info registers\r\nrax            0x5555559e70a0      93824997028000\r\nrbx            0x7fffffffc430      140737488340016\r\nrcx            0x7ffff7808008      140737345781768\r\nrdx            0x0                 0\r\nrsi            0x0                 0\r\nrdi            0x0                 0\r\nrbp            0x1                 0x1\r\nrsp            0x7fffffffc3c0      0x7fffffffc3c0\r\nr8             0x1                 1\r\nr9             0x0                 0\r\nr10            0x0                 0\r\nr11            0x7ffff7809000      140737345785856\r\nr12            0x7fffffffc3d8      140737488339928\r\nr13            0x1                 1\r\nr14            0x7fffffffc8e0      140737488341216\r\nr15            0x7fffffffc500      140737488340224\r\nrip            0x555555ae0892      0x555555ae0892 <_PyArgv_AsWstrList+66>\r\neflags         0x202               [ IF ]\r\ncs             0x33                51\r\nss             0x2b                43\r\nds             0x0                 0\r\nes             0x0                 0\r\nfs             0x0                 0\r\ngs             0x0                 0\r\n```\r\n\r\n```\r\n(gdb) frame 4\r\n#4  0x00005555559fe846 in pyembed::interpreter_config::{{impl}}::try_into (self=0x7fffffffcff0)\r\n    at /home/gps/src/pyoxidizer.git/pyembed/src/interpreter_config.rs:592\r\n592                 set_argv(&mut config, argv)?;\r\n\r\n(gdb) info registers\r\nrax            0x5555559e70a0      93824997028000\r\nrbx            0x0                 0\r\nrcx            0x7ffff7808008      140737345781768\r\nrdx            0x0                 0\r\nrsi            0x0                 0\r\nrdi            0x0                 0\r\nrbp            0x7fffffffd308      0x7fffffffd308\r\nrsp            0x7fffffffc550      0x7fffffffc550\r\nr8             0x1                 1\r\nr9             0x0                 0\r\nr10            0x0                 0\r\nr11            0x7ffff7809000      140737345785856\r\nr12            0x7fffffffcff0      140737488343024\r\nr13            0x0                 0\r\nr14            0x7fffffffcb00      140737488341760\r\nr15            0x7fffffffcff0      140737488343024\r\nrip            0x5555559fe846      0x5555559fe846 <pyembed::interpreter_config::{{impl}}::try_into+166>\r\neflags         0x202               [ IF ]\r\ncs             0x33                51\r\nss             0x2b                43\r\nds             0x0                 0\r\nes             0x0                 0\r\nfs             0x0                 0\r\ngs             0x0                 0\r\n```\r\n\r\nThis time `r15` is `0x7fffffffc500`.\r\n\r\nAnd frame 4's arglist is at `0x7fffffffc548`. The offsets are the same here. So the assembly changes the same relative bytes.\r\n\r\nBut, the starting bytes that are nulled out start out as NULL, so the `movups` is effectively a no-op:\r\n\r\n```\r\n0x7fffffffc4f0: 0x00000001      0x00000000      0x00000001      0x00000000\r\n0x7fffffffc500: 0x00000000      0x00000000      0x00000000      0x00000000\r\n0x7fffffffc510: 0x00000000      0x00000000      0x00000000      0x00000000\r\n0x7fffffffc520: 0xffffcff0      0x00007fff      0x00000000      0x00000000\r\n0x7fffffffc530: 0xffffcb00      0x00007fff      0xffffcff0      0x00007fff\r\n0x7fffffffc540: 0xffffd308      0x00007fff      0x559fe846      0x00005555\r\n0x7fffffffc550: 0x00000038      0x00000000      0x00000000      0x00000000\r\n```\r\n\r\n**However, this version does not crash because `self` is not overwritten because its address isn't stored in `rbx`.** The address of `self` (`0x7fffffffcff0`) is stored in `r12` and `r15`. (I'm unsure how the memory address for `self` is calculated here.)\r\n\r\n# Hypothesis\r\n\r\nThis smells like a compiler optimization bug. Rust 1.54.0 seems to be emitting assembly that aliases 2 variables/registers to the same memory address.\r\n\r\n# Steps to Reproduce\r\n\r\n```\r\ngit clone https://github.com/indygreg/PyOxidizer.git\r\ncd PyOxidizer\r\ngit checkout rust-crash\r\ncargo run --bin pyoxidizer -- init-rust-project ~/tmp/crash\r\ncd ~/tmp/crash\r\n\r\ncat > Cargo.toml <<EOF\r\n[profile.release]\r\ndebug = true\r\nEOF\r\n\r\ncargo run --release --features allocator-jemalloc\r\n```\r\n\r\nIn a debugger, try setting a breakpoint at `preconfig.c:109`. This should stop just before `self` gets overwritten.\r\n\r\nThe Rust function call from the crashing frame is https://github.com/indygreg/PyOxidizer/blob/0ca3236bac944b63ea8506f273b064167e25f47b/pyembed/src/interpreter_config.rs#L592. This calls into another Rust function which calls into CPython C APIs. The crash occurs at https://github.com/indygreg/PyOxidizer/blob/0ca3236bac944b63ea8506f273b064167e25f47b/pyembed/src/interpreter_config.rs#L595 when dereferencing a NULL `self`.", "closed_by": {"login": "indygreg", "id": 342993, "node_id": "MDQ6VXNlcjM0Mjk5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/342993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/indygreg", "html_url": "https://github.com/indygreg", "followers_url": "https://api.github.com/users/indygreg/followers", "following_url": "https://api.github.com/users/indygreg/following{/other_user}", "gists_url": "https://api.github.com/users/indygreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/indygreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/indygreg/subscriptions", "organizations_url": "https://api.github.com/users/indygreg/orgs", "repos_url": "https://api.github.com/users/indygreg/repos", "events_url": "https://api.github.com/users/indygreg/events{/privacy}", "received_events_url": "https://api.github.com/users/indygreg/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87947/timeline", "performed_via_github_app": null, "state_reason": "completed"}