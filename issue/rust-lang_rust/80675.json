{"url": "https://api.github.com/repos/rust-lang/rust/issues/80675", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80675/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80675/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80675/events", "html_url": "https://github.com/rust-lang/rust/issues/80675", "id": 777793719, "node_id": "MDU6SXNzdWU3Nzc3OTM3MTk=", "number": 80675, "title": "Unexpected \"the parameter type `T` may not live long enough\" at a point where `T` is not relevant", "user": {"login": "SamRodri", "id": 449925, "node_id": "MDQ6VXNlcjQ0OTkyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/449925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamRodri", "html_url": "https://github.com/SamRodri", "followers_url": "https://api.github.com/users/SamRodri/followers", "following_url": "https://api.github.com/users/SamRodri/following{/other_user}", "gists_url": "https://api.github.com/users/SamRodri/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamRodri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamRodri/subscriptions", "organizations_url": "https://api.github.com/users/SamRodri/orgs", "repos_url": "https://api.github.com/users/SamRodri/repos", "events_url": "https://api.github.com/users/SamRodri/events{/privacy}", "received_events_url": "https://api.github.com/users/SamRodri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-01-04T03:45:47Z", "updated_at": "2023-03-26T19:27:19Z", "closed_at": "2023-03-26T19:27:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "This code fails to compile at the `Box::new(foo)` line with ``error[E0310]: the parameter type `B` may not live long enough``.\r\n\r\nMy understanding is that at that point we have a variable of type `{impl Foo}` and `Foo: 'static`.  If we move the boxing code \r\nto a function (`box_foo`) the code compiles.\r\n\r\n```rust\r\n#![allow(unused)]\r\n\r\ntrait Foo: 'static { }\r\n\r\nstruct FooImpl;\r\nimpl Foo for FooImpl { }\r\n\r\ntrait Bar { }\r\n\r\nstruct Zing<B> { bar: B }\r\nimpl<B: Bar> Zing<B> {\r\n    fn foo(self) -> impl Foo {\r\n        FooImpl\r\n    }\r\n\r\n    fn foo_boxed(self) -> Box<dyn Foo> {\r\n        let foo = self.foo();\r\n        Box::new(foo)\r\n        //box_foo(foo)\r\n    }\r\n}\r\n\r\nfn box_foo(foo: impl Foo) -> Box<dyn Foo> {\r\n    Box::new(foo)\r\n}\r\n```\r\n```\r\nerror[E0310]: the parameter type `B` may not live long enough\r\n  --> src/lib.rs:18:9\r\n   |\r\n11 | impl<B: Bar> Zing<B> {\r\n   |      -- help: consider adding an explicit lifetime bound...: `B: 'static +`\r\n...\r\n18 |         Box::new(foo)\r\n   |         ^^^^^^^^^^^^^ ...so that the type `impl Foo` will meet its required lifetime bounds\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=44581d550ee794c8fc8c96537977cbe8))\r\n\r\nThe compiler suggestion works, but adds an unwanted constrain on the `bar` field. The struct may want to build a `'static` value from a non-static reference.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.49.0 (e1884a8e3 2020-12-29)\r\nbinary: rustc\r\ncommit-hash: e1884a8e3c3e813aada8254edfa120e85bf5ffca\r\ncommit-date: 2020-12-29\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.49.0\r\n```\r\n", "closed_by": {"login": "SamRodri", "id": 449925, "node_id": "MDQ6VXNlcjQ0OTkyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/449925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamRodri", "html_url": "https://github.com/SamRodri", "followers_url": "https://api.github.com/users/SamRodri/followers", "following_url": "https://api.github.com/users/SamRodri/following{/other_user}", "gists_url": "https://api.github.com/users/SamRodri/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamRodri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamRodri/subscriptions", "organizations_url": "https://api.github.com/users/SamRodri/orgs", "repos_url": "https://api.github.com/users/SamRodri/repos", "events_url": "https://api.github.com/users/SamRodri/events{/privacy}", "received_events_url": "https://api.github.com/users/SamRodri/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80675/timeline", "performed_via_github_app": null, "state_reason": "completed"}