{"url": "https://api.github.com/repos/rust-lang/rust/issues/50041", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50041/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50041/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50041/events", "html_url": "https://github.com/rust-lang/rust/issues/50041", "id": 315327055, "node_id": "MDU6SXNzdWUzMTUzMjcwNTU=", "number": 50041, "title": "MIR inlining leads to LLVM error around box_free", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-18T04:28:48Z", "updated_at": "2018-04-19T03:53:51Z", "closed_at": "2018-04-19T03:53:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Context: In order to experiment with an `Alloc`-aware `Box`, I was preparing to modify the `box_free` lang item signature, and my first step was to ensure MIR passes the right type to begin with, as noted in https://github.com/rust-lang/rust/blob/b91e6a2672a6f69e404d87fa62a5900a390622cf/src/librustc_mir/transform/inline.rs#L465-L467\r\n\r\nLegitimately, I assumed that the MIR inline code was doing the right thing, so I mimicked it in `elaborate_drops.rs`. The resulting code actually works fine, as far as completing the 3 stages of rustc bootstrapping is involved.\r\n\r\nBut before going the `box_free` route for the `Alloc`-aware `Box`, I first tried removing the special handling of `Box`'s `Drop`, trying to leave it to `boxed.rs`, shortcutting the `box_free` lang item. This didn't go well, and produced a stage 1 compiler that would crash on a bad `free` in libsyntax's `ThinVec`. From which I derived a small test case that would exhibit the problem with my code. Anyways, I was going well over my head with this approach, thus switched to the `box_free` signature change.\r\n\r\nSo, what's the deal with this issue, will you ask? Well, it turns out that my MIR changes, essentially copied from MIR inlining, while they worked to produce an apparently working compiler, failed to compile that reduced testcase with an LLVM ERROR. I was wondering if I did something significantly different from what the MIT inlining pass was doing, so I tried to trigger it manually (since it's not enabled by default), and after some trial and error, got it to happen on a plain nightly compiler, with the following reduced testcase:\r\n```rust\r\n#![crate_type=\"lib\"]\r\n#![feature(lang_items)]\r\n#![no_std]\r\n\r\n#[lang = \"owned_box\"]\r\npub struct Box<T: ?Sized>(*mut T);\r\n\r\nimpl<T: ?Sized> Drop for Box<T> {\r\n    fn drop(&mut self) {\r\n    }\r\n}\r\n\r\n#[lang = \"box_free\"]\r\n#[inline(always)]\r\nunsafe fn box_free<T: ?Sized>(ptr: *mut T) {\r\n    dealloc(ptr)\r\n}\r\n\r\n#[inline(never)]\r\nfn dealloc<T: ?Sized>(_: *mut T) {\r\n}\r\n\r\npub struct Foo<T>(T);\r\n\r\npub fn foo(a: Option<Box<Foo<usize>>>) -> usize {\r\n    let f = match a {\r\n        None => Foo(0),\r\n        Some(vec) => *vec,\r\n    };\r\n    f.0\r\n}\r\n```\r\n\r\nBuilding with `rustc +nightly -Z mir_opt_level=2 test.rs` yields:\r\n```\r\nInstruction does not dominate all uses!\r\n  %14 = load i64*, i64** %13, align 8\r\n  call void @_ZN4test7dealloc17hb146efc385cf7afbE(i64* %14)\r\nLLVM ERROR: Broken function found, compilation aborted!\r\n```\r\n\r\n(Note the `#[inline(always)]` is only there to force MIR inlining to happen without having to go over the required threshold ; liballoc's `box_free` has `#[inline]` ; similarly, the `#[inline(never)]` on `dealloc` avoids inlining of dealloc, to limit the effects on the MIR)\r\n\r\nInterestingly enough, `--emit mir` and `--emit llvm-ir` fail with the same error. The former outputs a truncated MIR (truncated at the entry of the first basic block), and the latter outputs nothing.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50041/timeline", "performed_via_github_app": null, "state_reason": "completed"}