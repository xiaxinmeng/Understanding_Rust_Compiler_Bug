{"url": "https://api.github.com/repos/rust-lang/rust/issues/68667", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68667/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68667/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68667/events", "html_url": "https://github.com/rust-lang/rust/issues/68667", "id": 557461475, "node_id": "MDU6SXNzdWU1NTc0NjE0NzU=", "number": 68667, "title": "Rustc fails to optimize a common option usage pattern", "user": {"login": "Pzixel", "id": 11201122, "node_id": "MDQ6VXNlcjExMjAxMTIy", "avatar_url": "https://avatars.githubusercontent.com/u/11201122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pzixel", "html_url": "https://github.com/Pzixel", "followers_url": "https://api.github.com/users/Pzixel/followers", "following_url": "https://api.github.com/users/Pzixel/following{/other_user}", "gists_url": "https://api.github.com/users/Pzixel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pzixel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pzixel/subscriptions", "organizations_url": "https://api.github.com/users/Pzixel/orgs", "repos_url": "https://api.github.com/users/Pzixel/repos", "events_url": "https://api.github.com/users/Pzixel/events{/privacy}", "received_events_url": "https://api.github.com/users/Pzixel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}, {"id": 1944310735, "node_id": "MDU6TGFiZWwxOTQ0MzEwNzM1", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-layout", "name": "A-layout", "color": "f7e101", "default": false, "description": "Area: Memory layout of types"}, {"id": 2019962432, "node_id": "MDU6TGFiZWwyMDE5OTYyNDMy", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt-inlining", "name": "A-mir-opt-inlining", "color": "f7e101", "default": false, "description": "Area: MIR inlining"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-30T12:28:57Z", "updated_at": "2022-08-09T13:51:59Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider following functions\r\n\r\n```rust\r\npub fn unwrap_combinators(a: Option<i32>, b: i32) -> bool {\r\n    a.map(|t| t >= b)\r\n     .unwrap_or(false)\r\n}\r\n\r\npub fn unwrap_manual(a: Option<i32>, b: i32) -> bool {\r\n    match a {\r\n        Some(t) => t >= b,\r\n        None => false\r\n    }\r\n}\r\n```\r\n\r\nThe first pattern is what we often write and the second one is the most efficient manually unrolled version. Surprisingly rustc fails to optimize the former one into the latter as you can see in [godbolt listing](https://rust.godbolt.org/z/KkCGDu):\r\n\r\n```asm\r\nexample::unwrap_combinators:\r\n        xor     eax, eax\r\n        cmp     edx, esi\r\n        setle   al\r\n        test    edi, edi\r\n        mov     ecx, 2\r\n        cmovne  ecx, eax\r\n        cmp     cl, 2\r\n        setne   al\r\n        and     al, cl\r\n        ret\r\n\r\nexample::unwrap_manual:\r\n        test    edi, edi\r\n        setne   cl\r\n        cmp     esi, edx\r\n        setge   al\r\n        and     al, cl\r\n        ret\r\n```\r\n\r\nP.S. Yes, I'm aware of `map_or`", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68667/reactions", "total_count": 13, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 3, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68667/timeline", "performed_via_github_app": null, "state_reason": null}