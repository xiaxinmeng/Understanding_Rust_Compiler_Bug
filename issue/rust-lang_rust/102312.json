{"url": "https://api.github.com/repos/rust-lang/rust/issues/102312", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102312/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102312/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102312/events", "html_url": "https://github.com/rust-lang/rust/issues/102312", "id": 1386111142, "node_id": "I_kwDOAAsO6M5SnmCm", "number": 102312, "title": "Incomplete optimization with opt-level=z compared to clang for possible pre-compiled expressions", "user": {"login": "arctic-penguin", "id": 103587359, "node_id": "U_kgDOBiyeHw", "avatar_url": "https://avatars.githubusercontent.com/u/103587359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arctic-penguin", "html_url": "https://github.com/arctic-penguin", "followers_url": "https://api.github.com/users/arctic-penguin/followers", "following_url": "https://api.github.com/users/arctic-penguin/following{/other_user}", "gists_url": "https://api.github.com/users/arctic-penguin/gists{/gist_id}", "starred_url": "https://api.github.com/users/arctic-penguin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arctic-penguin/subscriptions", "organizations_url": "https://api.github.com/users/arctic-penguin/orgs", "repos_url": "https://api.github.com/users/arctic-penguin/repos", "events_url": "https://api.github.com/users/arctic-penguin/events{/privacy}", "received_events_url": "https://api.github.com/users/arctic-penguin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-09-26T13:43:58Z", "updated_at": "2022-09-26T17:56:59Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I noted that rust does not apply some size optimizations when `opt-level=z` is supplied, whereas in `c` they are applied.\r\n\r\nSee here: https://godbolt.org/z/1955WjcT8\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#[no_mangle]\r\nfn iterate() -> i32 {\r\n    let mut result = 0;\r\n    for i in 0..=100 {\r\n        result += i;\r\n    }\r\n    result\r\n}\r\n```\r\n\r\nWith `opt-level=3`\r\n```asm\r\niterate:\r\n        mov     eax, 5050\r\n        ret\r\n```\r\n\r\nWith `opt-level=z`\r\n```asm\r\niterate:\r\n        xor     ecx, ecx\r\n        xor     edx, edx\r\n        xor     eax, eax\r\n.LBB0_1:\r\n        test    dl, dl\r\n        jne     .LBB0_3\r\n        lea     esi, [rcx + 1]\r\n        cmp     ecx, 100\r\n        sete    dl\r\n        cmove   esi, ecx\r\n        add     eax, ecx\r\n        mov     ecx, esi\r\n        jmp     .LBB0_1\r\n.LBB0_3:\r\n        ret\r\n```\r\n\r\nI would expect `opt-level=z` and `opt-level=3` to have the same output for this fairly simple case.\r\n\r\nIn contrast, `clang` 15.0.0 does this:\r\n\r\n```c\r\nint something() {\r\n    int result = 0;\r\n    for (int i=0; i<=100; i++) {\r\n        result += i;\r\n    }\r\n    return result;\r\n}\r\n```\r\n\r\nwith `-O3`\r\n```asm\r\nsomething:                              # @something\r\n        mov     eax, 5050\r\n        ret\r\n```\r\n\r\nwith `-Oz`\r\n```asm\r\nsomething:                              # @something\r\n        mov     eax, 5050\r\n        ret\r\n```\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\n1.64.0 (godbolt.org), I assume that's a55dd71d5\r\n```\r\n\r\nI understand that the c code is far easier to optimize, but nevertheless the rust-produced assembly code is about 7 x as long. ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102312/timeline", "performed_via_github_app": null, "state_reason": null}