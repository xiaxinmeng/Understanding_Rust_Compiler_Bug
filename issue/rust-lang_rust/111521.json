{"url": "https://api.github.com/repos/rust-lang/rust/issues/111521", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111521/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111521/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111521/events", "html_url": "https://github.com/rust-lang/rust/issues/111521", "id": 1708358978, "node_id": "I_kwDOAAsO6M5l031C", "number": 111521, "title": "ICE: parallel compiler: `found cycle`", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1576178387, "node_id": "MDU6TGFiZWwxNTc2MTc4Mzg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-parallel", "name": "WG-compiler-parallel", "color": "c2e0c6", "default": false, "description": "Working group working on parallelizing the compiler"}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-05-13T00:15:34Z", "updated_at": "2023-05-13T03:33:35Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n-->\r\n\r\n### Code\r\nyou need parallel compiler config to reproduce this!\r\n`rustc -Zthreads=300 file.rs`\r\n```Rust\r\n#![feature(generic_const_exprs)]\r\n\r\ntrait TensorDimension {\r\n    const DIM: usize;\r\n    const ISSCALAR: bool = Self::DIM == 0;\r\n    fn is_scalar(&self) -> bool {\r\n        Self::ISSCALAR\r\n    }\r\n}\r\n\r\ntrait TensorSize: TensorDimension {\r\n    fn size(&self) -> [usize; Self::DIM];\r\n    fn inbounds(&self, index: [usize; Self::DIM]) -> bool {\r\n        index.iter().zip(self.size().iter()).all(|(i, s)| i < s)\r\n    }\r\n}\r\n\r\ntrait Broadcastable: TensorSize + Sized {\r\n    type Element;\r\n    fn bget(&self, index: [usize; Self::DIM]) -> Option<Self::Element>;\r\n    fn lazy_updim<const NEWDIM: usize>(\r\n        &self,\r\n        size: [usize; NEWDIM],\r\n    ) -> LazyUpdim<Self, { Self::DIM }, NEWDIM> {\r\n        assert!(\r\n            NEWDIM >= Self::DIM,\r\n            \"Updimmed tensor cannot have fewer indices than the initial one.\"\r\n        ); // const generic bounds on nightly. ( )\r\n        LazyUpdim {\r\n            size,\r\n            reference: &self,\r\n        }\r\n    }\r\n    fn bmap<T, F: Fn(Self::Element) -> T>(&self, foo: F) -> BMap<T, Self, F, { Self::DIM }> {\r\n        BMap {\r\n            reference: self,\r\n            closure: foo,\r\n        }\r\n    }\r\n}\r\n\r\nstruct LazyUpdim<'a, T: Broadcastable, const OLDDIM: usize, const DIM: usize> {\r\n    size: [usize; DIM],\r\n    reference: &'a T,\r\n}\r\n\r\nimpl<'a, T: Broadcastable, const DIM: usize> TensorDimension for LazyUpdim<'a, T, { T::DIM }, DIM> {\r\n    const DIM: usize = DIM;\r\n}\r\nimpl<'a, T: Broadcastable, const DIM: usize> TensorSize for LazyUpdim<'a, T, { T::DIM }, DIM> {\r\n    fn size(&self) -> [usize; DIM] {\r\n        self.size\r\n    }\r\n}\r\nimpl<'a, T: Broadcastable, const DIM: usize> Broadcastable for LazyUpdim<'a, T, { T::DIM }, DIM> {\r\n    type Element = T::Element;\r\n    fn bget(&self, index: [usize; DIM]) -> Option<Self::Element> {\r\n        assert!(DIM >= T::DIM);\r\n        if !self.inbounds(index) {\r\n            return None;\r\n        }\r\n        let size = self.size();\r\n        let newindex: [usize; T::DIM] = Default::default(); //array_init::array_init(|i| if size[i] > 1 {index[i]} else {0});\r\n        self.reference.bget(newindex)\r\n    }\r\n}\r\n\r\nstruct BMap<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> {\r\n    reference: &'a T,\r\n    closure: F,\r\n}\r\n\r\nimpl<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> TensorDimension\r\n    for BMap<'a, R, T, F, DIM>\r\n{\r\n    const DIM: usize = DIM;\r\n}\r\nimpl<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> TensorSize\r\n    for BMap<'a, R, T, F, DIM>\r\n{\r\n    fn size(&self) -> [usize; DIM] {\r\n        self.reference.size()\r\n    }\r\n}\r\nimpl<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> Broadcastable\r\n    for BMap<'a, R, T, F, DIM>\r\n{\r\n    type Element = R;\r\n    fn bget(&self, index: [usize; DIM]) -> Option<Self::Element> {\r\n        self.reference.bget(index).map(&self.closure)\r\n    }\r\n}\r\n\r\nimpl<T> TensorDimension for Vec<T> {\r\n    const DIM: usize = 1;\r\n}\r\nimpl<T> TensorSize for Vec<T> {\r\n    fn size(&self) -> [usize; 1] {\r\n        [self.len()]\r\n    }\r\n}\r\nimpl<T: Clone> Broadcastable for Vec<T> {\r\n    type Element = T;\r\n    fn bget(&self, index: [usize; 1]) -> Option<T> {\r\n        self.get(index[0]).cloned()\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let v = vec![1, 2, 3];\r\n    let bv = v.lazy_updim([3, 4]);\r\n    let bbv = bv.bmap(|x| x * x);\r\n\r\n    println!(\r\n        \"The size of v is {:?}\",\r\n        bbv.bget([0, 2]).expect(\"Out of bounds.\")\r\n    );\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\n4a59ba4d54a3ec0d8ea1e82b7eeb5c8b0162de04\r\n```\r\n\r\n### Error output\r\n\r\n```\r\n<output>\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nwarning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\r\n --> /home/matthias/vcs/github/glacier2/fixed/83765.rs:1:12\r\n  |\r\n1 | #![feature(generic_const_exprs)]\r\n  |            ^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\r\n  = note: `#[warn(incomplete_features)]` on by default\r\n\r\nthread '<unnamed>' panicked at 'assertion failed: found_cycle', /home/matthias/vcs/github/rust_debug_assertions/compiler/rustc_query_system/src/query/job.rs:556:5\r\nstack backtrace:\r\n   0:     0x7f76a530abf6 - std::backtrace_rs::backtrace::libunwind::trace::h74804ffdd8fa53e7\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\r\n   1:     0x7f76a530abf6 - std::backtrace_rs::backtrace::trace_unsynchronized::h7428ab2b67b36e0c\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   2:     0x7f76a530abf6 - std::sys_common::backtrace::_print_fmt::h8de225fa5d864a16\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/sys_common/backtrace.rs:65:5\r\n   3:     0x7f76a530abf6 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hf186862c319ab6b0\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/sys_common/backtrace.rs:44:22\r\n   4:     0x7f76a53af698 - core::fmt::rt::Argument::fmt::h6eb98e918eb80ebd\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/core/src/fmt/rt.rs:138:9\r\n   5:     0x7f76a53af698 - core::fmt::write::hfa7c5695b2a1784c\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/core/src/fmt/mod.rs:1094:21\r\n   6:     0x7f76a53151bf - std::io::Write::write_fmt::h8780fc8b700f7b89\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/io/mod.rs:1712:15\r\n   7:     0x7f76a530a9f5 - std::sys_common::backtrace::_print::h4ce540e460b36e22\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/sys_common/backtrace.rs:47:5\r\n   8:     0x7f76a530a9f5 - std::sys_common::backtrace::print::h6954c2242c47d1db\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/sys_common/backtrace.rs:34:9\r\n   9:     0x7f76a532bebc - std::panicking::default_hook::{{closure}}::h7efa3c73d7318a2f\r\n  10:     0x7f76a532bb92 - std::panicking::default_hook::h478ef42d51f84426\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/panicking.rs:288:9\r\n  11:     0x7f76a7cfe63b - <alloc[32b43e9536c01a3]::boxed::Box<dyn for<'a, 'b> core[c5d5d662f7508502]::ops::function::Fn<(&'a core[c5d5d662f7508502]::panic::panic_info::PanicInfo<'b>,), Output = ()> + core[c5d5d662f7508502]::marker::Send + core[c5d5d662f7508502]::marker::Sync> as core[c5d5d662f7508502]::ops::function::Fn<(&core[c5d5d662f7508502]::panic::panic_info::PanicInfo,)>>::call\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/alloc/src/boxed.rs:1999:9\r\n  12:     0x7f76a7cfe63b - rustc_driver_impl[fa47bdc6a12b5fac]::install_ice_hook::{closure#0}\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/compiler/rustc_driver_impl/src/lib.rs:1258:13\r\n  13:     0x7f76a532c75a - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::hfea6944ca11513b1\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/alloc/src/boxed.rs:1999:9\r\n  14:     0x7f76a532c75a - std::panicking::rust_panic_with_hook::h3d7c73761f67633f\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/panicking.rs:695:13\r\n  15:     0x7f76a530baa1 - std::panicking::begin_panic_handler::{{closure}}::h0004dd01860b01c3\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/panicking.rs:580:13\r\n  16:     0x7f76a530acd6 - std::sys_common::backtrace::__rust_end_short_backtrace::hccbfe31830e0f553\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/sys_common/backtrace.rs:150:18\r\n  17:     0x7f76a532c2c2 - rust_begin_unwind\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/panicking.rs:578:5\r\n  18:     0x7f76a53cb363 - core::panicking::panic_fmt::h98b1dd38c1edb68b\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/core/src/panicking.rs:67:14\r\n  19:     0x7f76a53cb3f5 - core::panicking::panic::he5f7c6779e1d5164\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/core/src/panicking.rs:117:5\r\n  20:     0x7f76a7cce4d4 - rustc_query_system[8ee2d68ce6f1a061]::query::job::deadlock::<rustc_middle[d62e0ab363fca640]::dep_graph::dep_node::DepKind>\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/compiler/rustc_query_system/src/query/job.rs:556:5\r\n  21:     0x7f76a7d44fad - rustc_interface[f00717bbd5e2d5b3]::util::run_in_thread_pool_with_globals::<rustc_interface[f00717bbd5e2d5b3]::interface::run_compiler<core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>, rustc_driver_impl[fa47bdc6a12b5fac]::run_compiler::{closure#1}>::{closure#0}, core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>>::{closure#1}::{closure#1}\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/compiler/rustc_interface/src/util.rs:191:35\r\n  22:     0x7f76a7d44fad - std[68c29493de10bea]::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface[f00717bbd5e2d5b3]::util::run_in_thread_pool_with_globals<rustc_interface[f00717bbd5e2d5b3]::interface::run_compiler<core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>, rustc_driver_impl[fa47bdc6a12b5fac]::run_compiler::{closure#1}>::{closure#0}, core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>>::{closure#1}::{closure#1}, ()>\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/sys_common/backtrace.rs:134:18\r\n  23:     0x7f76a7cee5c3 - <std[68c29493de10bea]::thread::Builder>::spawn_unchecked_::<rustc_interface[f00717bbd5e2d5b3]::util::run_in_thread_pool_with_globals<rustc_interface[f00717bbd5e2d5b3]::interface::run_compiler<core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>, rustc_driver_impl[fa47bdc6a12b5fac]::run_compiler::{closure#1}>::{closure#0}, core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>>::{closure#1}::{closure#1}, ()>::{closure#1}::{closure#0}\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/thread/mod.rs:529:17\r\n  24:     0x7f76a7cee5c3 - <core[c5d5d662f7508502]::panic::unwind_safe::AssertUnwindSafe<<std[68c29493de10bea]::thread::Builder>::spawn_unchecked_<rustc_interface[f00717bbd5e2d5b3]::util::run_in_thread_pool_with_globals<rustc_interface[f00717bbd5e2d5b3]::interface::run_compiler<core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>, rustc_driver_impl[fa47bdc6a12b5fac]::run_compiler::{closure#1}>::{closure#0}, core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>>::{closure#1}::{closure#1}, ()>::{closure#1}::{closure#0}> as core[c5d5d662f7508502]::ops::function::FnOnce<()>>::call_once\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/core/src/panic/unwind_safe.rs:271:9\r\n  25:     0x7f76a7cee5c3 - std[68c29493de10bea]::panicking::try::do_call::<core[c5d5d662f7508502]::panic::unwind_safe::AssertUnwindSafe<<std[68c29493de10bea]::thread::Builder>::spawn_unchecked_<rustc_interface[f00717bbd5e2d5b3]::util::run_in_thread_pool_with_globals<rustc_interface[f00717bbd5e2d5b3]::interface::run_compiler<core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>, rustc_driver_impl[fa47bdc6a12b5fac]::run_compiler::{closure#1}>::{closure#0}, core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>>::{closure#1}::{closure#1}, ()>::{closure#1}::{closure#0}>, ()>\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/panicking.rs:485:40\r\n  26:     0x7f76a7cee5c3 - std[68c29493de10bea]::panicking::try::<(), core[c5d5d662f7508502]::panic::unwind_safe::AssertUnwindSafe<<std[68c29493de10bea]::thread::Builder>::spawn_unchecked_<rustc_interface[f00717bbd5e2d5b3]::util::run_in_thread_pool_with_globals<rustc_interface[f00717bbd5e2d5b3]::interface::run_compiler<core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>, rustc_driver_impl[fa47bdc6a12b5fac]::run_compiler::{closure#1}>::{closure#0}, core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>>::{closure#1}::{closure#1}, ()>::{closure#1}::{closure#0}>>\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/panicking.rs:449:19\r\n  27:     0x7f76a7cee5c3 - std[68c29493de10bea]::panic::catch_unwind::<core[c5d5d662f7508502]::panic::unwind_safe::AssertUnwindSafe<<std[68c29493de10bea]::thread::Builder>::spawn_unchecked_<rustc_interface[f00717bbd5e2d5b3]::util::run_in_thread_pool_with_globals<rustc_interface[f00717bbd5e2d5b3]::interface::run_compiler<core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>, rustc_driver_impl[fa47bdc6a12b5fac]::run_compiler::{closure#1}>::{closure#0}, core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>>::{closure#1}::{closure#1}, ()>::{closure#1}::{closure#0}>, ()>\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/panic.rs:140:14\r\n  28:     0x7f76a7cee5c3 - <std[68c29493de10bea]::thread::Builder>::spawn_unchecked_::<rustc_interface[f00717bbd5e2d5b3]::util::run_in_thread_pool_with_globals<rustc_interface[f00717bbd5e2d5b3]::interface::run_compiler<core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>, rustc_driver_impl[fa47bdc6a12b5fac]::run_compiler::{closure#1}>::{closure#0}, core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>>::{closure#1}::{closure#1}, ()>::{closure#1}\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/thread/mod.rs:528:30\r\n  29:     0x7f76a7cee5c3 - <<std[68c29493de10bea]::thread::Builder>::spawn_unchecked_<rustc_interface[f00717bbd5e2d5b3]::util::run_in_thread_pool_with_globals<rustc_interface[f00717bbd5e2d5b3]::interface::run_compiler<core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>, rustc_driver_impl[fa47bdc6a12b5fac]::run_compiler::{closure#1}>::{closure#0}, core[c5d5d662f7508502]::result::Result<(), rustc_span[9849ed9ca8d6c267]::ErrorGuaranteed>>::{closure#1}::{closure#1}, ()>::{closure#1} as core[c5d5d662f7508502]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/core/src/ops/function.rs:250:5\r\n  30:     0x7f76a531d69a - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h59b61553bfddebc8\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/alloc/src/boxed.rs:1985:9\r\n  31:     0x7f76a531d69a - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h0ce3d7a7bade6491\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/alloc/src/boxed.rs:1985:9\r\n  32:     0x7f76a5303b15 - std::sys::unix::thread::Thread::new::thread_start::h6e446945f062d041\r\n                               at /home/matthias/vcs/github/rust_debug_assertions/library/std/src/sys/unix/thread.rs:108:17\r\n  33:     0x7f76a50a6bb5 - <unknown>\r\n  34:     0x7f76a5128d90 - <unknown>\r\n  35:                0x0 - <unknown>\r\n\r\nerror: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.71.0-dev running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -Z threads=300\r\n\r\nquery stack during panic:\r\nend of query stack\r\ndeadlock handler panicked, aborting process\r\n[1]    1559687 IOT instruction  ~/.rustup/toolchains/local-debug-assertions/bin/rustc -Zthreads=300\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111521/timeline", "performed_via_github_app": null, "state_reason": null}