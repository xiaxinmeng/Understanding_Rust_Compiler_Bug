{"url": "https://api.github.com/repos/rust-lang/rust/issues/72512", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72512/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72512/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72512/events", "html_url": "https://github.com/rust-lang/rust/issues/72512", "id": 623730675, "node_id": "MDU6SXNzdWU2MjM3MzA2NzU=", "number": 72512, "title": "No warning when trait extension fn's conflict with pre-existing fn's", "user": {"login": "jaspercb", "id": 11592046, "node_id": "MDQ6VXNlcjExNTkyMDQ2", "avatar_url": "https://avatars.githubusercontent.com/u/11592046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaspercb", "html_url": "https://github.com/jaspercb", "followers_url": "https://api.github.com/users/jaspercb/followers", "following_url": "https://api.github.com/users/jaspercb/following{/other_user}", "gists_url": "https://api.github.com/users/jaspercb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaspercb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaspercb/subscriptions", "organizations_url": "https://api.github.com/users/jaspercb/orgs", "repos_url": "https://api.github.com/users/jaspercb/repos", "events_url": "https://api.github.com/users/jaspercb/events{/privacy}", "received_events_url": "https://api.github.com/users/jaspercb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-23T19:54:15Z", "updated_at": "2020-05-24T10:11:33Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "When trying to use a trait extension for the Result type, I found that calling code seemed to not be using my implemented methods at all. Turns out, I was defining `or(self, Self) -> Self`, which Result already has an implementation of - so any code calling a.or(b) was calling Result's `or`, not my `or`. I know this is why it's best practice to use a newtype in these situations, but it would be awesome to have a warning message or some sign that your traits impls aren't going to be used.\r\n\r\nRepro code:\r\n\r\n```rust\r\npub trait IntResultExt {\r\n    fn or(self, then: Result<i32, ()>) -> Result<i32, ()>;\r\n}\r\n\r\nimpl IntResultExt for Result<i32, ()> {\r\n    fn or(self, then: Result<i32, ()>) -> Result<i32, ()> {\r\n        match (self, then) {\r\n            (Ok(l), Ok(r)) => Ok(l+r),\r\n            _ => Err(())\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n\r\n    let a: Result<i32, ()> = Ok(1);\r\n    let b: Result<i32, ()> = Ok(2);\r\n    println!(\"{:?}\", a.or(b)); // Expected Ok(3), got Ok(1)\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=1d0de59cfd6c9ca2caa2b8763eb48306))", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72512/timeline", "performed_via_github_app": null, "state_reason": null}