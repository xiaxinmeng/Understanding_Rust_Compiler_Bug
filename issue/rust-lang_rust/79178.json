{"url": "https://api.github.com/repos/rust-lang/rust/issues/79178", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79178/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79178/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79178/events", "html_url": "https://github.com/rust-lang/rust/issues/79178", "id": 746028741, "node_id": "MDU6SXNzdWU3NDYwMjg3NDE=", "number": 79178, "title": "HashMap reports zero capacity without freeing memory", "user": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-11-18T21:39:18Z", "updated_at": "2021-02-05T02:31:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nIt's generally expected that when std collections return a capacity of zero, that they are not backed by any allocation. I believe this was also true for the HashMap prior to hashbrown, although I could be wrong.\r\n\r\nIn any case, whilst `HashMap::capacity()` is documented as a *lower bound* I still find it extremely surprising that it reports a capacity of zero without freeing its memory.\r\n\r\nYou can reproduce the issue with the following program (using mockalloc to detect the leaked memory):\r\n\r\n```rust\r\nuse std::alloc::System;\r\nuse std::collections::hash_map::{DefaultHasher, HashMap};\r\nuse std::hash::BuildHasherDefault;\r\n\r\nuse mockalloc::Mockalloc;\r\n\r\n#[global_allocator]\r\nstatic ALLOCATOR: Mockalloc<System> = Mockalloc(System);\r\n\r\nconst NUMBERS: &[usize] = &[\r\n    25, 38, 41, 42, 89, 115, 184, 237, 273, 286, 300, 326, 377, 413, 482, 536, 602, 650, 702, 746,\r\n    750, 807, 810, 836, 960, 979, 982, 1007,\r\n];\r\n\r\nfn main() {\r\n    let mut guard =\r\n        HashMap::<String, (), _>::with_hasher(BuildHasherDefault::<DefaultHasher>::default());\r\n    mockalloc::assert_allocs(|| {\r\n        for &n in NUMBERS {\r\n            let k = n.to_string();\r\n            guard.insert(k, ());\r\n        }\r\n        for &n in NUMBERS {\r\n            let k = n.to_string();\r\n            guard.remove(&k);\r\n            if guard.len() * 3 < guard.capacity() {\r\n                guard.shrink_to_fit();\r\n            }\r\n        }\r\n        eprintln!(\"Capacity: {}\", guard.capacity());\r\n        //guard.shrink_to_fit();\r\n    });\r\n}\r\n```\r\n\r\nGiven these lines: \r\n```rust\r\nif guard.len() * 3 < guard.capacity() {\r\n    guard.shrink_to_fit();\r\n}\r\n```\r\n\r\nI expected all the memory to be reclaimed by the end of the loop. However, this is not the case: the memory is only reclaimed if `shrink_to_fit()` is called an additional time.\r\n\r\nIMO, the fix should be two-fold:\r\n1) When the last element of a HashMap is removed, it should automatically clear out any tombstones so that the `capacity()` method is accurate again.\r\n\r\n2) A new method should be introduced to obtain the upper bound on the capacity. At the moment code which attempts to shrink under-utilized hashmaps is broken, and it's not possible to fix this code without a new method.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79178/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79178/timeline", "performed_via_github_app": null, "state_reason": null}