{"url": "https://api.github.com/repos/rust-lang/rust/issues/43262", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43262/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43262/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43262/events", "html_url": "https://github.com/rust-lang/rust/issues/43262", "id": 243213709, "node_id": "MDU6SXNzdWUyNDMyMTM3MDk=", "number": 43262, "title": "Is there a safe way of constraining FromStr::Err to implement Debug?", "user": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-16T02:52:53Z", "updated_at": "2022-04-03T19:34:20Z", "closed_at": "2017-07-16T03:14:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `std::str::FromStr` trait takes a `type` field which specifies the type of error it will return if a conversion cannot be made; it also has a function that returns `Result<T, Self::Err>`.\r\n\r\nIn a generic function with generic `T` constrained by `where T: std::str::FromStr`, the result of `T::from_str(...)` cannot be unwrapped unless an additional constraint `,std::fmt::Debug` is applied to the the error type of T passed to the generic function because unwrap requires the error type implement `std::fmt::Debug`.\r\n\r\ne.g. this will not compile:\r\n```rust\r\nfn value_from_string<T>(s: &str) -> T\r\nwhere T: std::str::FromStr\r\n{\r\n    return T::from_str(s).unwrap();\r\n}\r\n```\r\n\r\nand one must always use this additional constraint instead:\r\n```rust\r\nfn value_from_string<T>(s: &str) -> T\r\nwhere T: std::str::FromStr, <T as std::str::FromStr>::Err : std::fmt::Debug\r\n{\r\n    return T::from_str(s).unwrap();\r\n}\r\n```\r\n\r\nSince `FromStr` will *always* require (in practice) that T::Err implement `std::fmt::Debug` in order to actually unwrap the result, is there a safe way to introduce this constraint into `FromStr` that does not break the language?\r\n", "closed_by": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43262/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43262/timeline", "performed_via_github_app": null, "state_reason": "completed"}