{"url": "https://api.github.com/repos/rust-lang/rust/issues/58437", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58437/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58437/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58437/events", "html_url": "https://github.com/rust-lang/rust/issues/58437", "id": 409987347, "node_id": "MDU6SXNzdWU0MDk5ODczNDc=", "number": 58437, "title": "Failed to run `cargo install ripgrep`", "user": {"login": "meangrape", "id": 9083, "node_id": "MDQ6VXNlcjkwODM=", "avatar_url": "https://avatars.githubusercontent.com/u/9083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meangrape", "html_url": "https://github.com/meangrape", "followers_url": "https://api.github.com/users/meangrape/followers", "following_url": "https://api.github.com/users/meangrape/following{/other_user}", "gists_url": "https://api.github.com/users/meangrape/gists{/gist_id}", "starred_url": "https://api.github.com/users/meangrape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meangrape/subscriptions", "organizations_url": "https://api.github.com/users/meangrape/orgs", "repos_url": "https://api.github.com/users/meangrape/repos", "events_url": "https://api.github.com/users/meangrape/events{/privacy}", "received_events_url": "https://api.github.com/users/meangrape/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-13T20:29:18Z", "updated_at": "2019-02-13T21:14:55Z", "closed_at": "2019-02-13T21:14:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please note that I'm not a Rust developer so, in many cases, am unable to dig in any more than I have with this issue. Hopefully it will be enough to shed some light on the situation. Thanks!\r\n\r\n### Summary\r\nRunning `cargo install ripgrep fails` saying `error: internal compiler error: unexpected panic` in one case. In another case, it fails to compile the encoding_rs package.\r\n\r\n`RUST_BACKTRACE=1 cargo install -v -f --all-features ripgrep` fails with [the backtrace below.](#user-content-bt-1-selector)\r\n\r\nRemoving the `--all-features` flag causes the installation to continue passed the previous error while failing to compile `encoding_rs` (I'm aware this could be a problem with the package; I just wanted to be complete.\r\n`RUST_BACKTRACE=1 cargo install -v -f  ripgrep` [fails differently](#user-content-rs-selector)\r\n\r\nAdding `CARGO_INCREMENTAL=0` to both command lines results in no difference.\r\n\r\nFinally, adding an additional `--verbose` flag causes a new [\"compiler unexpectedly crashed\"](#user-content-verbose-selector)\r\n \r\n### Environment\r\nLinux 12f40977-fe30-ec9d-919b-8f78ec1b25bd 4.10 BrandZ virtual linux x86_64 GNU/Linu\r\nDebian 9.7\r\n\r\n```shell\r\nrustc 1.34.0-nightly (b244f61b7 2019-02-12)\r\nbinary: rustc\r\ncommit-hash: b244f61b77c42d7be695afd7901ee4418559e518\r\ncommit-date: 2019-02-12\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.34.0-nightly\r\nLLVM version: 8.0\r\n```\r\n\r\n<h2 id=\"bt-1-selector\">Backtrace</h2>.\r\n     Running `rustc --crate-name byteorder /root/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.1/src/lib.rs --color always --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=1 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=74cd3938edfc7e49 -C extra-filename=-74cd3938edfc7e49 --out-dir /tmp/cargo-installw4TDvO/release/deps -L dependency=/tmp/cargo-installw4TDvO/release/deps --cap-lints allow --cfg byteorder_i128`\r\n\r\nstack backtrace: \r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39                    \r\n   1: std::sys_common::backtrace::_print                      \r\n             at src/libstd/sys_common/backtrace.rs:70       \r\n   2: std::panicking::default_hook::{{closure}}     \r\n             at src/libstd/sys_common/backtrace.rs:58                                                                                                                                                                \r\n             at src/libstd/panicking.rs:200                                                                                                                                                                          \r\n   3: std::panicking::default_hook                                                                                                                                                                                   \r\n             at src/libstd/panicking.rs:215                                                                                                                                                                          \r\n   4: rustc::util::common::panic_hook                                                                                                                                                                                \r\n   5: std::panicking::rust_panic_with_hook                                                                                                                                                                           \r\n             at src/libstd/panicking.rs:482                                                                                                                                                                          \r\n   6: std::panicking::begin_panic                                                                                                                                                                                    \r\n   7: rustc_borrowck::borrowck::check_loans::CheckLoanCtxt::report_error_if_loans_conflict                                                                                                                           \r\n   8: <rustc_borrowck::borrowck::check_loans::CheckLoanCtxt<'a, 'tcx> as rustc::middle::expr_use_visitor::Delegate<'tcx>>::borrow                                                                                    \r\n   9: rustc::middle::expr_use_visitor::ExprUseVisitor::borrow_expr                                                                                                                                                   \r\n  10: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_expr                                                                                                                                                     \r\n  11: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_local    \r\n  12: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_expr\r\n  13: rustc::middle::expr_use_visitor::ExprUseVisitor::consume_expr\r\n  14: rustc_borrowck::borrowck::check_loans::check_loans                                                                                                                                                              \r\n  15: rustc_borrowck::borrowck::borrowck\r\n  16: rustc::ty::query::__query_compute::borrowck\r\n  17: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::borrowck<'tcx>>::compute                                                                                 \r\n  18: rustc::dep_graph::graph::DepGraph::with_task_impl                                                                                                                                                               \r\n  19: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_get_with\r\n  20: rustc::ty::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::par_body_owners\r\n  21: rustc_borrowck::borrowck::check_crate\r\n  22: rustc::util::common::time                                                                                                                                                                                       \r\n  23: <std::thread::local::LocalKey<T>>::with                                                                                                                                                                         \r\n  24: rustc::ty::context::TyCtxt::create_and_enter                                                                                                                                                                    \r\n  25: rustc_driver::driver::compile_input\r\n  26: rustc_driver::run_compiler_with_pool                                                                                                                                                                            \r\n  27: <scoped_tls::ScopedKey<T>>::set                                                                                                                                                                                 \r\n  28: rustc_driver::run_compiler                                \r\n  29: syntax::with_globals  \r\n  30: __rust_maybe_catch_panic                                                                                                                                                                                        \r\n             at src/libpanic_unwind/lib.rs:90                                                                                                                                                                         \r\n  31: <F as alloc::boxed::FnBox<A>>::call_box                                                       \r\n  32: std::sys::unix::thread::Thread::new::thread_start\r\n             at /rustc/b244f61b77c42d7be695afd7901ee4418559e518/src/liballoc/boxed.rs:744                                                                                                                             \r\n             at src/libstd/sys_common/thread.rs:14                                                                                                                                                                    \r\n             at src/libstd/sys/unix/thread.rs:81             \r\n  33: start_thread                                                                                   \r\n  34: __clone              \r\nquery stack during panic:                                                                                                                                                                                             \r\n#0 [borrowck] processing `Build::try_get_compiler`                                                                                                                                                                    \r\nend of query stack                                \r\n    **Running `/tmp/cargo-installw4TDvO/release/build/memchr-8de5a956fc56ce8f/build-script-build`**\r\n                                                                                                                                                                                                                      \r\nerror: internal compiler error: unexpected panic                                                                                                                                                                      \r\n                                                          \r\nnote: the compiler unexpectedly panicked. this is a bug.                                             \r\n                                                                                                                                                                                                                     \r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports                                                                                                     \r\n                                                                                                                         \r\nnote: rustc 1.34.0-nightly (b244f61b7 2019-02-12) running on x86_64-unknown-linux-gnu         \r\n                                                                                                                                                                                                                      \r\nnote: compiler flags: -C opt-level=3 -C debuginfo=1 --crate-type lib                                                                                                                                                  \r\n                      \r\nnote: some of the compiler flags provided by cargo are hidden                                \r\n                                                                                                                                                                                                                      \r\nerror: Could not compile `cc`.                                                                                                                                                                             \r\n                                                                                               \r\nCaused by:                                                                                                                                                                                                            \r\n  process didn't exit successfully: `rustc --crate-name cc /root/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.29/src/lib.rs --color always --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=1 -C metadata=21fb46640054fa4a -C extra-filename=-21fb46640054fa4a --out-dir /tmp/cargo-installw4TDvO/release/deps -L dependency=/tmp/cargo-installw4TDvO/release/deps --cap-lints allow` (exit code: 101)\r\n\r\n### Manual output of failed build-script-build\r\n```shell\r\nroot@12f40977-fe30-ec9d-919b-8f78ec1b25bd:/tmp/cargo-installw4TDvO/release/build/memchr-8de5a956fc56ce8f# ./build-script-build \r\ncargo:rustc-cfg=memchr_runtime_simd\r\ncargo:rustc-cfg=memchr_runtime_sse2\r\ncargo:rustc-cfg=memchr_runtime_sse42\r\ncargo:rustc-cfg=memchr_runtime_avx\r\n```\r\n\r\n### C compiler information\r\n```shell\r\n cc --version\r\ncc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\r\nCopyright (C) 2016 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```\r\n\r\n<h2 id=\"rs-selector\">encoding_rs failure</h2>\r\n\r\nThis is what compilation fails with. (All of the errors are E034s).\r\n```\r\nerror: aborting due to 183 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0384`.\r\nerror: Could not compile `encoding_rs`.\r\n```\r\n\r\nHere's a demonstrative code block:\r\n```rust\r\nerror[E0384]: cannot assign twice to immutable variable `dst_written_again`                                                        \r\n   --> /root/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs-0.8.16/src/macros.rs:254:73        \r\n    |                                                                                                      \r\n254 |                                                               Space::Full(dst_written_again) => {               \r\n    |                                                                           ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\r\n    |                                                                                                \r\n   ::: /root/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs-0.8.16/src/euc_kr.rs:48:5     \r\n    |                                                                                                          \r\n48  | /     ascii_compatible_two_byte_decoder_functions!(                                           \r\n49  | |         {                                                                                     \r\n50  | |             // If lead is between 0x81 and 0xFE, inclusive,                                                   \r\n51  | |             // subtract offset 0x81.                                                                               \r\n...   |                                                                                                       \r\n180 | |         check_space_bmp,                                                                                           \r\n181 | |         true);                                                                                         \r\n    | |______________- in this macro invocation    \r\n```\r\n\r\n<h2 id=\"verbose-selector\">Verbose crash</h2>\r\n   Running `CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>' CARGO_MANIFEST_DIR=/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-0.4.27 CARGO_PKG_VERSION_PATCH=\r\n27 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PRE= CARGO_PKG_NAME=proc-macro2 CARGO_PKG_VERSION=0.4.27 CARGO_PKG_DESCRIPTION='A stable implementation of the upcoming new `proc_macro` API. Comes with an            option, off by default, to also reimplement itself in terms of the upstream                                                                                                                                           unstable API.                                                                                                                                                                                                         ' LD_LIBRARY_PATH='/tmp/cargo-installtAs34c/release/deps:/root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib:/root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib' CARGO=/root/.rustup/toolchains/n\r\nightly-x86_64-unknown-linux-gnu/bin/cargo CARGO_PKG_HOMEPAGE='https://github.com/alexcrichton/proc-macro2' CARGO_PKG_REPOSITORY='https://github.com/alexcrichton/proc-macro2' OUT_DIR=/tmp/cargo-installtAs34c/release\r\n/build/proc-macro2-eaf1175bb47d85d5/out rustc --crate-name proc_macro2 /root/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-0.4.27/src/lib.rs --color always --crate-type lib --emit=dep-info,link -C opt\r\n-level=3 -C debuginfo=1 --cfg 'feature=\"default\"' --cfg 'feature=\"proc-macro\"' -C metadata=cefeeb7eeb7fca01 -C extra-filename=-cefeeb7eeb7fca01 --out-dir /tmp/cargo-installtAs34c/release/deps -L dependency=/tmp/car\r\ngo-installtAs34c/release/deps --extern unicode_xid=/tmp/cargo-installtAs34c/release/deps/libunicode_xid-0eb4f1af95128ac1.rlib --cap-lints warn --cfg u128 --cfg use_proc_macro --cfg wrap_proc_macro --cfg nightly`\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace                                                                                                                                                            Running `/tmp/cargo-installtAs34c/release/build/byteorder-17073b766fd37d60/build-script-build`                                                                                                                  \r\n             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39                                                                                                                                                        1: std::sys_common::backtrace::_print                                                                                                                                                                                           at src/libstd/sys_common/backtrace.rs:70                                                                                                                                                                    2: std::panicking::default_hook::{{closure}}                                                                                                                                                                      \r\n             at src/libstd/sys_common/backtrace.rs:58     \r\n             at src/libstd/panicking.rs:200                                                                \r\n   3: std::panicking::default_hook                                                                 \r\n             at src/libstd/panicking.rs:215\r\n   4: rustc::util::common::panic_hook                  \r\n   5: std::panicking::rust_panic_with_hook            \r\n             at src/libstd/panicking.rs:482\r\n   6: std::panicking::begin_panic           \r\n   7: rustc_borrowck::borrowck::check_loans::CheckLoanCtxt::report_error_if_loans_conflict              \r\n   8: <rustc_borrowck::borrowck::check_loans::CheckLoanCtxt<'a, 'tcx> as rustc::middle::expr_use_visitor::Delegate<'tcx>>::borrow\r\n   9: rustc::middle::expr_use_visitor::ExprUseVisitor::borrow_expr\r\n  10: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_expr\r\n  11: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_local\r\n  12: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_expr                                                                                                                                                     \r\n  13: rustc::middle::expr_use_visitor::ExprUseVisitor::consume_expr\r\n  14: rustc_borrowck::borrowck::check_loans::check_loans                                                                                                                                                              \r\n  15: rustc_borrowck::borrowck::borrowck                                                                                                                                                                              \r\n  16: rustc::ty::query::__query_compute::borrowck                                                                                                                                                                     \r\n  17: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::borrowck<'tcx>>::compute                                                                                  \r\n  18: rustc::dep_graph::graph::DepGraph::with_task_impl                                                                                                                                                              \r\n  19: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_get_with      \r\n  20: rustc::ty::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::par_body_owners           \r\n  21: rustc_borrowck::borrowck::check_crate\r\n  22: rustc::util::common::time                                                                                                                                                                                       \r\n  23: <std::thread::local::LocalKey<T>>::with                                                                                                           \r\n  24: rustc::ty::context::TyCtxt::create_and_enter                                                                                                                                                                    \r\n  25: rustc_driver::driver::compile_input                                                                                                                                                                             \r\n  26: rustc_driver::run_compiler_with_pool                                                                                                                                                                            \r\n  27: <scoped_tls::ScopedKey<T>>::set                                                                                                                                                                                 \r\n  28: rustc_driver::run_compiler\r\n  29: syntax::with_globals                                                                   \r\n  30: __rust_maybe_catch_panic        \r\n             at src/libpanic_unwind/lib.rs:90\r\n  31: <F as alloc::boxed::FnBox<A>>::call_box                                                                                                                                                                         \r\n  32: std::sys::unix::thread::Thread::new::thread_start                                                                                                                                                               \r\n             at /rustc/b244f61b77c42d7be695afd7901ee4418559e518/src/liballoc/boxed.rs:744                                                                                                                             \r\n             at src/libstd/sys_common/thread.rs:14                                                                                                                                                                    \r\n             at src/libstd/sys/unix/thread.rs:81                                                                                                                                                                      \r\n  33: start_thread                                                                         \r\n  34: __clone                                                                                  \r\nquery stack during panic:               \r\n#0 [borrowck] processing `Build::try_get_compiler`\r\nend of query stack                      \r\n                                            \r\nerror: internal compiler error: unexpected panic\r\n                                              \r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n                                                                                                                                                                                                                      \r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports                                                                                                     \r\n                                                                                                                                                                                                                      \r\nnote: rustc 1.34.0-nightly (b244f61b7 2019-02-12) running on x86_64-unknown-linux-gnu                                                                                                                                 \r\n                                                                                                                                                                                                                      \r\nnote: compiler flags: -C opt-level=3 -C debuginfo=1 --crate-type lib                                                                                                                                                  \r\n                                                                                                        \r\nnote: some of the compiler flags provided by cargo are hidden                                                  \r\n                                                                                                                       \r\nerror: Could not compile `cc`. \r\n\r\n\r\nCaused by:                               \r\n  process didn't exit successfully: `CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>' CARGO_MANIFEST_DIR=/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.29 CARGO_PKG_VERSION_PATCH=29 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PRE= CARGO_PKG_NAME=cc CARGO_PKG_VERSION=1.0.29 CARGO_PKG_DESCRIPTION='A build-time dependency for Cargo build scripts to assist in invoking the native \r\nC compiler to compile native C code into a static archive to be linked into Rust\r\ncode.                                                                                                                                                                                                                 \r\n' LD_LIBRARY_PATH='/tmp/cargo-installtAs34c/release/deps:/root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib:/root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib' CARGO=/root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo CARGO_PKG_HOMEPAGE='https://github.com/alexcrichton/cc-rs' CARGO_PKG_REPOSITORY='https://github.com/alexcrichton/cc-rs' rustc --crate-name cc /root/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.29/src/lib.rs --color always --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=1 -C metadata=21fb46640054fa4a -C extra-filename=-21fb46640054fa4a --out-dir /tmp/cargo-installtAs34c/release/deps -L dependency=/tmp/cargo-installtAs34c/release/deps --cap-lints warn` (exit code: 101)                                                                                                     \r\nwarning: build failed, waiting for other jobs to finish...                                                                                                                                                            \r\n[byteorder 1.3.1] cargo:rustc-cfg=byteorder_i128                                                                                                                                                                      \r\nerror: Could not compile `termcolor`.                                                                                                                                                                                 \r\n                                                                                                                                                                                                                   \r\nCaused by:      \r\n  process didn't exit successfully: `CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_AUTHORS='Andrew Gallant <jamslam@gmail.com>' CARGO_MANIFEST_DIR=/root/.cargo/registry/src/github.com-1ecc6299db9ec823/termcolor-1.0.4 CARGO_PKG_VERSION_PATCH=4 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PRE= CARGO_PKG_NAME=termcolor CARGO_PKG_VERSION=1.0.4 CARGO_PKG_DESCRIPTION='A simple cross platform library for writing colored text to a terminal.  \r\n' LD_LIBRARY_PATH='/tmp/cargo-installtAs34c/release/deps:/root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib:/root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib' CARGO=/root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo CARGO_PKG_HOMEPAGE='https://github.com/BurntSushi/termcolor' CARGO_PKG_REPOSITORY='https://github.com/BurntSushi/termcolor' rustc --crate-name termcolor /root/.cargo/registry/src/github.com-1ecc6299db9ec823/termcolor-1.0.4/src/lib.rs --color always --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=1 -C metadata=79ffde147fdc08e7 -C extra-filename=-79ffde147fdc08e7 --out-dir /tmp/cargo-installtAs34c/release/deps -L dependency=/tmp/cargo-installtAs34c/release/deps --cap-lints warn` (signal: 11, SIGSEGV: invalid memory reference)                                                    \r\nwarning: build failed, waiting for other jobs to finish...\r\n", "closed_by": {"login": "meangrape", "id": 9083, "node_id": "MDQ6VXNlcjkwODM=", "avatar_url": "https://avatars.githubusercontent.com/u/9083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meangrape", "html_url": "https://github.com/meangrape", "followers_url": "https://api.github.com/users/meangrape/followers", "following_url": "https://api.github.com/users/meangrape/following{/other_user}", "gists_url": "https://api.github.com/users/meangrape/gists{/gist_id}", "starred_url": "https://api.github.com/users/meangrape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meangrape/subscriptions", "organizations_url": "https://api.github.com/users/meangrape/orgs", "repos_url": "https://api.github.com/users/meangrape/repos", "events_url": "https://api.github.com/users/meangrape/events{/privacy}", "received_events_url": "https://api.github.com/users/meangrape/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58437/timeline", "performed_via_github_app": null, "state_reason": "completed"}