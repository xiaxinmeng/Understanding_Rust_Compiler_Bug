{"url": "https://api.github.com/repos/rust-lang/rust/issues/100134", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100134/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100134/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100134/events", "html_url": "https://github.com/rust-lang/rust/issues/100134", "id": 1328124364, "node_id": "I_kwDOAAsO6M5PKZHM", "number": 100134, "title": "Rust 1.62.1 cannot be compiled and installed, because of miri", "user": {"login": "dilyanpalauzov", "id": 4992947, "node_id": "MDQ6VXNlcjQ5OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4992947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dilyanpalauzov", "html_url": "https://github.com/dilyanpalauzov", "followers_url": "https://api.github.com/users/dilyanpalauzov/followers", "following_url": "https://api.github.com/users/dilyanpalauzov/following{/other_user}", "gists_url": "https://api.github.com/users/dilyanpalauzov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dilyanpalauzov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dilyanpalauzov/subscriptions", "organizations_url": "https://api.github.com/users/dilyanpalauzov/orgs", "repos_url": "https://api.github.com/users/dilyanpalauzov/repos", "events_url": "https://api.github.com/users/dilyanpalauzov/events{/privacy}", "received_events_url": "https://api.github.com/users/dilyanpalauzov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2022-08-04T06:20:41Z", "updated_at": "2022-09-22T12:28:12Z", "closed_at": "2022-09-22T12:28:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "When compiling rust 1.62.1 it fails with:\r\n```\r\nBuilding stage1 tool miri (x86_64-unknown-linux-gnu)\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /src/rustc-1.62.1-src/src/tools/rls/racer/Cargo.toml\r\nworkspace: /src/rustc-1.62.1-src/Cargo.toml\r\n   Compiling miri v0.1.0 (/src/rustc-1.62.1-src/src/tools/miri)\r\nerror[E0407]: method `ptr_from_addr` is not a member of trait `Machine`\r\n   --> src/tools/miri/src/machine.rs:602:5\r\n    |\r\n602 | /     fn ptr_from_addr(\r\n603 | |         ecx: &MiriEvalContext<'mir, 'tcx>,\r\n604 | |         addr: u64,\r\n605 | |     ) -> Pointer<Option<Self::PointerTag>> {\r\n606 | |         intptrcast::GlobalStateInner::ptr_from_addr(addr, ecx)\r\n607 | |     }\r\n    | |_____^ not a member of trait `Machine`\r\n\r\nerror[E0053]: method `get_alloc_id` has an incompatible type for trait\r\n   --> src/tools/miri/src/machine.rs:161:30\r\n    |\r\n161 |     fn get_alloc_id(self) -> AllocId {\r\n    |                              ^^^^^^^\r\n    |                              |\r\n    |                              expected enum `Option`, found struct `rustc_const_eval::interpret::AllocId`\r\n    |                              help: change the output type to match the trait: `Option<rustc_const_eval::interpret::AllocId>`\r\n    |\r\n    = note: expected fn pointer `fn(machine::Tag) -> Option<rustc_const_eval::interpret::AllocId>`\r\n               found fn pointer `fn(machine::Tag) -> rustc_const_eval::interpret::AllocId`\r\n\r\nerror[E0053]: method `ptr_get_alloc` has an incompatible type for trait\r\n   --> src/tools/miri/src/machine.rs:614:10\r\n    |\r\n614 |     ) -> (AllocId, Size, Self::TagExtra) {\r\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |          |\r\n    |          expected enum `Option`, found tuple\r\n    |          help: change the output type to match the trait: `Option<(rustc_const_eval::interpret::AllocId, rustc_target::abi::Size, stacked_borrows::SbTag)>`\r\n    |\r\n    = note: expected fn pointer `fn(&rustc_const_eval::interpret::InterpCx<'mir, 'tcx, machine::Evaluator<'mir, 'tcx>>, rustc_const_eval::interpret::Pointer<_>) -> Option<(rustc_const_eval::interpret::AllocId, rustc_target::abi::Size, stacked_borrows::SbTag)>`\r\n               found fn pointer `fn(&rustc_const_eval::interpret::InterpCx<'mir, 'tcx, machine::Evaluator<'mir, 'tcx>>, rustc_const_eval::interpret::Pointer<_>) -> (rustc_const_eval::interpret::AllocId, rustc_target::abi::Size, stacked_borrows::SbTag)`\r\n\r\nerror[E0046]: not all trait items implemented, missing: `ptr_from_addr_cast`, `ptr_from_addr_transmute`, `expose_ptr`\r\n   --> src/tools/miri/src/machine.rs:434:1\r\n    |\r\n434 | impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\r\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `ptr_from_addr_cast`, `ptr_from_addr_transmute`, `expose_ptr` in implementation\r\n    |\r\n    = help: implement the missing item: `fn ptr_from_addr_cast(_: &rustc_const_eval::interpret::InterpCx<'mir, 'tcx, Self>, _: u64) -> rustc_const_eval::interpret::Pointer<Option<<Self as rustc_const_eval::interpret::Machine<'mir, 'tcx>>::PointerTag>> { todo!() }`\r\n    = help: implement the missing item: `fn ptr_from_addr_transmute(_: &rustc_const_eval::interpret::InterpCx<'mir, 'tcx, Self>, _: u64) -> rustc_const_eval::interpret::Pointer<Option<<Self as rustc_const_eval::interpret::Machine<'mir, 'tcx>>::PointerTag>> { todo!() }`\r\n    = help: implement the missing item: `fn expose_ptr(_: &mut rustc_const_eval::interpret::InterpCx<'mir, 'tcx, Self>, _: rustc_const_eval::interpret::Pointer<<Self as rustc_const_eval::interpret::Machine<'mir, 'tcx>>::PointerTag>) -> Result<(), rustc_const_eval::interpret::InterpErrorInfo<'tcx>> { todo!() }`\r\n\r\nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\r\n    --> src/tools/miri/src/machine.rs:546:29\r\n     |\r\n546  |         let attrs = ecx.tcx.get_attrs(def_id);\r\n     |                             ^^^^^^^^^ ------ supplied 1 argument\r\n     |                             |\r\n     |                             expected 2 arguments\r\n     |\r\nnote: associated function defined here\r\n    --> /src/rustc-1.62.1-src/compiler/rustc_middle/src/ty/mod.rs:2194:12\r\n     |\r\n2194 |     pub fn get_attrs(self, did: DefId, attr: Symbol) -> ty::Attributes<'tcx> {\r\n     |            ^^^^^^^^^\r\n\r\nerror[E0308]: mismatched types\r\n    --> src/tools/miri/src/machine.rs:547:73\r\n     |\r\n547  |         let link_name = match ecx.tcx.sess.first_attr_value_str_by_name(attrs, sym::link_name) {\r\n     |                                                                         ^^^^^ expected `&[Attribute]`, found opaque type\r\n    ::: /src/rustc-1.62.1-src/compiler/rustc_middle/src/ty/mod.rs:1944:29\r\n     |\r\n1944 | pub type Attributes<'tcx> = impl Iterator<Item = &'tcx ast::Attribute>;\r\n     |                             ------------------------------------------ the found opaque type\r\n     |\r\n     = note: expected reference `&[Attribute]`\r\n              found opaque type `rustc_middle::ty::Attributes<'_>`\r\n\r\nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\r\n    --> src/tools/miri/src/shims/foreign_items.rs:238:30\r\n     |\r\n238  |         let attrs = this.tcx.get_attrs(def_id);\r\n     |                              ^^^^^^^^^ ------ supplied 1 argument\r\n     |                              |\r\n     |                              expected 2 arguments\r\n     |\r\nnote: associated function defined here\r\n    --> /src/rustc-1.62.1-src/compiler/rustc_middle/src/ty/mod.rs:2194:12\r\n     |\r\n2194 |     pub fn get_attrs(self, did: DefId, attr: Symbol) -> ty::Attributes<'tcx> {\r\n     |            ^^^^^^^^^\r\n\r\nerror[E0308]: mismatched types\r\n    --> src/tools/miri/src/shims/foreign_items.rs:242:43\r\n     |\r\n242  |             .first_attr_value_str_by_name(attrs, sym::link_name)\r\n     |                                           ^^^^^ expected `&[Attribute]`, found opaque type\r\n     |\r\n    ::: /src/rustc-1.62.1-src/compiler/rustc_middle/src/ty/mod.rs:1944:29\r\n     |\r\n1944 | pub type Attributes<'tcx> = impl Iterator<Item = &'tcx ast::Attribute>;\r\n     |                             ------------------------------------------ the found opaque type\r\n     |\r\n     = note: expected reference `&[Attribute]`\r\n              found opaque type `rustc_middle::ty::Attributes<'_>`\r\n\r\nerror[E0599]: no method named `subst` found for struct `rustc_middle::ty::Ty` in the current scope\r\n   --> src/tools/miri/src/shims/posix/sync.rs:844:21\r\n    |\r\n844 |     let ty = def_ty.subst(*tcx, &[param.into()]);\r\n    |                     ^^^^^ method not found in `rustc_middle::ty::Ty<'_>`\r\n\r\nwarning: unused import: `subst::Subst`\r\n --> src/tools/miri/src/shims/posix/sync.rs:4:62\r\n  |\r\n4 | use rustc_middle::ty::{layout::TyAndLayout, query::TyCtxtAt, subst::Subst, Ty};\r\n  |                                                              ^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(unused_imports)]` on by default\r\n\r\nSome errors have detailed explanations: E0046, E0053, E0061, E0308, E0407, E0599.\r\nFor more information about an error, try `rustc --explain E0046`.\r\nwarning: `miri` (lib) generated 1 warning\r\nerror: could not compile `miri` due to 9 previous errors; 1 warning emitted\r\nBuilding stage1 tool cargo-miri (x86_64-unknown-linux-gnu)\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /src/rustc-1.62.1-src/src/tools/rls/racer/Cargo.toml\r\nworkspace: /src/rustc-1.62.1-src/Cargo.toml\r\n    Finished release [optimized] target(s) in 0.28s\r\nBuild completed successfully in 0:00:16\r\n```\r\n\r\nThe above is during `x.py build -j1`.  When I call afterwards `x.py install -j1` the output is:\r\n```\r\nBuilding stage2 tool miri (x86_64-unknown-linux-gnu)\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /src/rustc-1.62.1-src/src/tools/rls/racer/Cargo.toml\r\nworkspace: /src/rustc-1.62.1-src/Cargo.toml\r\n   Compiling miri v0.1.0 (/src/rustc-1.62.1-src/src/tools/miri)\r\nerror[E0407]: method `ptr_from_addr` is not a member of trait `Machine`\r\n   --> src/tools/miri/src/machine.rs:602:5\r\n    |\r\n602 | /     fn ptr_from_addr(\r\n603 | |         ecx: &MiriEvalContext<'mir, 'tcx>,\r\n604 | |         addr: u64,\r\n605 | |     ) -> Pointer<Option<Self::PointerTag>> {\r\n606 | |         intptrcast::GlobalStateInner::ptr_from_addr(addr, ecx)\r\n607 | |     }\r\n    | |_____^ not a member of trait `Machine`\r\n\r\nerror[E0053]: method `get_alloc_id` has an incompatible type for trait\r\n   --> src/tools/miri/src/machine.rs:161:30\r\n    |\r\n161 |     fn get_alloc_id(self) -> AllocId {\r\n    |                              ^^^^^^^\r\n    |                              |\r\n    |                              expected enum `Option`, found struct `rustc_const_eval::interpret::AllocId`\r\n    |                              help: change the output type to match the trait: `Option<rustc_const_eval::interpret::AllocId>`\r\n    |\r\n    = note: expected fn pointer `fn(machine::Tag) -> Option<rustc_const_eval::interpret::AllocId>`\r\n               found fn pointer `fn(machine::Tag) -> rustc_const_eval::interpret::AllocId`\r\n\r\nerror[E0053]: method `ptr_get_alloc` has an incompatible type for trait\r\n   --> src/tools/miri/src/machine.rs:614:10\r\n    |\r\n614 |     ) -> (AllocId, Size, Self::TagExtra) {\r\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |          |\r\n    |          expected enum `Option`, found tuple\r\n    |          help: change the output type to match the trait: `Option<(rustc_const_eval::interpret::AllocId, rustc_target::abi::Size, stacked_borrows::SbTag)>`\r\n    |\r\n    = note: expected fn pointer `fn(&rustc_const_eval::interpret::InterpCx<'mir, 'tcx, machine::Evaluator<'mir, 'tcx>>, rustc_const_eval::interpret::Pointer<_>) -> Option<(rustc_const_eval::interpret::AllocId, rustc_target::abi::Size, stacked_borrows::SbTag)>`\r\n               found fn pointer `fn(&rustc_const_eval::interpret::InterpCx<'mir, 'tcx, machine::Evaluator<'mir, 'tcx>>, rustc_const_eval::interpret::Pointer<_>) -> (rustc_const_eval::interpret::AllocId, rustc_target::abi::Size, stacked_borrows::SbTag)`\r\n\r\nerror[E0046]: not all trait items implemented, missing: `ptr_from_addr_cast`, `ptr_from_addr_transmute`, `expose_ptr`\r\n   --> src/tools/miri/src/machine.rs:434:1\r\n    |\r\n434 | impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\r\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `ptr_from_addr_cast`, `ptr_from_addr_transmute`, `expose_ptr` in implementation\r\n    |\r\n    = help: implement the missing item: `fn ptr_from_addr_cast(_: &rustc_const_eval::interpret::InterpCx<'mir, 'tcx, Self>, _: u64) -> rustc_const_eval::interpret::Pointer<Option<<Self as rustc_const_eval::interpret::Machine<'mir, 'tcx>>::PointerTag>> { todo!() }`\r\n    = help: implement the missing item: `fn ptr_from_addr_transmute(_: &rustc_const_eval::interpret::InterpCx<'mir, 'tcx, Self>, _: u64) -> rustc_const_eval::interpret::Pointer<Option<<Self as rustc_const_eval::interpret::Machine<'mir, 'tcx>>::PointerTag>> { todo!() }`\r\n    = help: implement the missing item: `fn expose_ptr(_: &mut rustc_const_eval::interpret::InterpCx<'mir, 'tcx, Self>, _: rustc_const_eval::interpret::Pointer<<Self as rustc_const_eval::interpret::Machine<'mir, 'tcx>>::PointerTag>) -> Result<(), rustc_const_eval::interpret::InterpErrorInfo<'tcx>> { todo!() }`\r\n\r\nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\r\n    --> src/tools/miri/src/machine.rs:546:29\r\n     |\r\n546  |         let attrs = ecx.tcx.get_attrs(def_id);\r\n     |                             ^^^^^^^^^ ------ supplied 1 argument\r\n     |                             |\r\n     |                             expected 2 arguments\r\n     |\r\nnote: associated function defined here\r\n    --> /src/rustc-1.62.1-src/compiler/rustc_middle/src/ty/mod.rs:2194:12\r\n     |\r\n2194 |     pub fn get_attrs(self, did: DefId, attr: Symbol) -> ty::Attributes<'tcx> {\r\n     |            ^^^^^^^^^\r\n\r\nerror[E0308]: mismatched types\r\n    --> src/tools/miri/src/machine.rs:547:73\r\n     |\r\n547  |         let link_name = match ecx.tcx.sess.first_attr_value_str_by_name(attrs, sym::link_name) {\r\n     |                                                                         ^^^^^ expected `&[Attribute]`, found opaque type\r\n     |\r\n    ::: /src/rustc-1.62.1-src/compiler/rustc_middle/src/ty/mod.rs:1944:29\r\n     |\r\n1944 | pub type Attributes<'tcx> = impl Iterator<Item = &'tcx ast::Attribute>;\r\n     |                             ------------------------------------------ the found opaque type\r\n     |\r\n     = note: expected reference `&[Attribute]`\r\n              found opaque type `rustc_middle::ty::Attributes<'_>`\r\n\r\nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\r\n    --> src/tools/miri/src/shims/foreign_items.rs:238:30\r\n     |\r\n238  |         let attrs = this.tcx.get_attrs(def_id);\r\n     |                              ^^^^^^^^^ ------ supplied 1 argument\r\n     |                              |\r\n     |                              expected 2 arguments\r\n     |\r\nnote: associated function defined here\r\n    --> /src/rustc-1.62.1-src/compiler/rustc_middle/src/ty/mod.rs:2194:12\r\n     |\r\n2194 |     pub fn get_attrs(self, did: DefId, attr: Symbol) -> ty::Attributes<'tcx> {\r\n     |            ^^^^^^^^^\r\n\r\nerror[E0308]: mismatched types\r\n    --> src/tools/miri/src/shims/foreign_items.rs:242:43\r\n     |\r\n242  |             .first_attr_value_str_by_name(attrs, sym::link_name)\r\n     |                                           ^^^^^ expected `&[Attribute]`, found opaque type\r\n     |\r\n    ::: /src/rustc-1.62.1-src/compiler/rustc_middle/src/ty/mod.rs:1944:29\r\n     |\r\n1944 | pub type Attributes<'tcx> = impl Iterator<Item = &'tcx ast::Attribute>;\r\n     |                             ------------------------------------------ the found opaque type\r\n     |\r\n     = note: expected reference `&[Attribute]`\r\n              found opaque type `rustc_middle::ty::Attributes<'_>`\r\n\r\nerror[E0599]: no method named `subst` found for struct `rustc_middle::ty::Ty` in the current scope\r\n   --> src/tools/miri/src/shims/posix/sync.rs:844:21\r\n    |\r\n844 |     let ty = def_ty.subst(*tcx, &[param.into()]);\r\n    |                     ^^^^^ method not found in `rustc_middle::ty::Ty<'_>`\r\n\r\nwarning: unused import: `subst::Subst`\r\n --> src/tools/miri/src/shims/posix/sync.rs:4:62\r\n  |\r\n4 | use rustc_middle::ty::{layout::TyAndLayout, query::TyCtxtAt, subst::Subst, Ty};\r\n  |                                                              ^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(unused_imports)]` on by default\r\n\r\nSome errors have detailed explanations: E0046, E0053, E0061, E0308, E0407, E0599.\r\nFor more information about an error, try `rustc --explain E0046`.\r\nwarning: `miri` (lib) generated 1 warning\r\nerror: could not compile `miri` due to 9 previous errors; 1 warning emitted\r\nthread 'main' panicked at 'Unable to build miri', src/bootstrap/dist.rs:42:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nBuild completed unsuccessfully in 0:42:12\r\n```\r\nThat is, rust 1.62.1 cannot be compiled and installed.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100134/timeline", "performed_via_github_app": null, "state_reason": "completed"}