{"url": "https://api.github.com/repos/rust-lang/rust/issues/52798", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52798/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52798/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52798/events", "html_url": "https://github.com/rust-lang/rust/issues/52798", "id": 345400450, "node_id": "MDU6SXNzdWUzNDU0MDA0NTA=", "number": 52798, "title": "`#[macro_use]` on `use` broken with gfx-rs", "user": {"login": "nwoeanhinnogaehr", "id": 7297725, "node_id": "MDQ6VXNlcjcyOTc3MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7297725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwoeanhinnogaehr", "html_url": "https://github.com/nwoeanhinnogaehr", "followers_url": "https://api.github.com/users/nwoeanhinnogaehr/followers", "following_url": "https://api.github.com/users/nwoeanhinnogaehr/following{/other_user}", "gists_url": "https://api.github.com/users/nwoeanhinnogaehr/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwoeanhinnogaehr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwoeanhinnogaehr/subscriptions", "organizations_url": "https://api.github.com/users/nwoeanhinnogaehr/orgs", "repos_url": "https://api.github.com/users/nwoeanhinnogaehr/repos", "events_url": "https://api.github.com/users/nwoeanhinnogaehr/events{/privacy}", "received_events_url": "https://api.github.com/users/nwoeanhinnogaehr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 980999956, "node_id": "MDU6TGFiZWw5ODA5OTk5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-edition-2018-lints", "name": "A-edition-2018-lints", "color": "f7e101", "default": false, "description": "Area: lints supporting the 2018 edition"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-28T00:25:47Z", "updated_at": "2019-04-27T07:54:53Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "With rust 2015 we can do this:\r\n```rust\r\n#[macro_use] extern crate gfx;\r\n\r\ngfx_defines! {\r\n    vertex Vertex {\r\n        pos: [f32; 2] = \"a_Pos\",\r\n    }\r\n    pipeline rect_pipe {\r\n        vertices: gfx::VertexBuffer<Vertex> = (),\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\nBut it's 2018 so we should deal with this warning:\r\n```\r\nwarning: deprecated `#[macro_use]` directive used to import macros should be replaced at use sites with a `use` statement to import the macro instead\r\n --> src/main.rs:4:1\r\n  |\r\n4 | #[macro_use]\r\n  | ^^^^^^^^^^^^\r\n  |\r\n```\r\nOK, lets give it a try.\r\n```rust\r\n#![feature(rust_2018_preview)]\r\n#![warn(rust_2018_idioms)]\r\n\r\nuse gfx;\r\n#[macro_use] use gfx::gfx_defines;\r\n\r\ngfx_defines! {\r\n    vertex Vertex {\r\n        pos: [f32; 2] = \"a_Pos\",\r\n    }\r\n    pipeline rect_pipe {\r\n        vertices: gfx::VertexBuffer<Vertex> = (),\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\nOops!\r\n```\r\nerror: cannot find macro `gfx_vertex_struct_meta!` in this scope\r\n  --> src/main.rs:7:1\r\n   |\r\n7  | / gfx_defines! {\r\n8  | |     vertex Vertex {\r\n9  | |         pos: [f32; 2] = \"a_Pos\",\r\n10 | |     }\r\n...  |\r\n13 | |     }\r\n14 | | }\r\n   | |_^\r\n   |\r\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\r\n\r\nerror: cannot find macro `gfx_pipeline!` in this scope\r\n  --> src/main.rs:7:1\r\n   |\r\n7  | / gfx_defines! {\r\n8  | |     vertex Vertex {\r\n9  | |         pos: [f32; 2] = \"a_Pos\",\r\n10 | |     }\r\n...  |\r\n13 | |     }\r\n14 | | }\r\n   | |_^\r\n   |\r\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\r\n```\r\nLooks like it wants me to import some macros which are used internally by the one that I called. Surely that's a bug in itself. Lets try and work around it though!\r\n\r\nTwo iterations later, we have `#[macro_use] use gfx::{gfx_defines, gfx_pipeline, gfx_vertex_struct_meta, gfx_impl_struct_meta, gfx_pipeline_inner};` and an odd message.\r\n```\r\nerror[E0282]: type annotations needed\r\n  --> src/gui/render.rs:19:1\r\n   |\r\n19 | / gfx_defines! {\r\n20 | |     vertex Vertex {\r\n21 | |         pos: [f32; 2] = \"a_Pos\",\r\n22 | |     }\r\n...  |\r\n70 | |     }\r\n71 | | }\r\n   | |_^ cannot infer type for `std::ops::Range<{integer}>`\r\n   |\r\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\r\n```\r\nCargo suggests running with `-Z external-macro-backtrace`, but then complains that no such `-Z` flag exists (yes, this is a nightly build). I guessed that I should really be passing that flag to rustc and not cargo, so I tried `RUSTFLAGS=\"-Z external-macro-backtrace\" cargo run` and got the info I was looking for.\r\n\r\n```\r\nerror[E0282]: type annotations needed\r\n   --> <gfx_pipeline_inner macros>:88:28\r\n    |\r\n1   | /      { $ ( $ field : ident : $ ty : ty , ) * } => {\r\n2   | |      use $ crate :: pso :: {\r\n3   | |      DataLink , DataBind , Descriptor , InitError , RawDataSet , AccessInfo } ; # [\r\n4   | |      derive ( Clone , Debug , PartialEq ) ] pub struct Data < R : $ crate ::\r\n...   |\r\n88  | |      => (  ) , } ) * } for _ in 0 .. 1 {\r\n    | |                                 ------\r\n    | |                                 |\r\n    | |                                 cannot infer type for `std::ops::Range<{integer}>`\r\n    | |                                 in this expansion of `desugaring of `...`` (#7)\r\n    | |                                 in this macro invocation (#7)\r\n...   |\r\n99  | |      $ ( meta . $ field . bind_to ( out , & self . $ field , man , access ) ; ) * }\r\n100 | |      } }\r\n    | |________- in this expansion of `gfx_pipeline_inner!` (#6)\r\n    |\r\n   ::: <gfx_defines macros>:1:1\r\n    |\r\n1   |        (\r\n    |      __-\r\n    |     |__|\r\n    |    ||__|\r\n    |   |||__|\r\n    |  ||||\r\n2   |  ||||  $ ( # [ $ attr : meta ] ) * vertex $ name : ident {\r\n3   |  ||||  $ (\r\n4   |  ||||  $ ( # [ $ field_attr : meta ] ) * $ field : ident : $ ty : ty = $ e : expr , )\r\n...    ||||\r\n17  |  ||||  ) => { gfx_pipeline ! ( $ name { $ ( $ field : $ ty = $ e , ) + } ) ; } ; (\r\n    |  ||||         -------------------------------------------------------------- in this macro invocation (#5)\r\n...    ||||\r\n24  |  ||||  $ ( $ ( # [ $ field_attr ] ) * $ field : $ ty = $ e , ) + } } gfx_defines ! (\r\n    |  ||||________________________________________________________________-\r\n    | |||||________________________________________________________________|\r\n    | |||||\r\n25  | |||||  $ ( $ tail ) + ) ; } ; (\r\n    | |||||                   -\r\n    | |||||___________________|\r\n    | |||||___________________in this macro invocation (#2)\r\n    |  ||||                   in this macro invocation (#4)\r\n...    ||||\r\n37  | |||||  gfx_defines ! { $ keyword $ name { $ ( $ field : $ ty = $ e , ) + } }\r\n38  | |||||  gfx_defines ! ( $ ( $ tail ) + ) ; } ;\r\n    | |||||  ----------------------------------   -\r\n    | |||||__|____________________________________|\r\n    | ||||___|____________________________________in this expansion of `gfx_defines!` (#1)\r\n    | |||____|____________________________________in this expansion of `gfx_defines!` (#2)\r\n    | ||_____|____________________________________in this expansion of `gfx_defines!` (#3)\r\n    | |      |                                    in this expansion of `gfx_defines!` (#4)\r\n    | |      in this macro invocation (#3)\r\n    |\r\n   ::: <gfx_pipeline macros>:1:1\r\n    |\r\n1   |      / ( $ module : ident { $ ( $ field : ident : $ ty : ty = $ value : expr , ) * }\r\n2   |      | ) => {\r\n3   |      | # [ allow ( missing_docs ) ] pub mod $ module {\r\n4   |      | # [ allow ( unused_imports ) ] use super :: * ; # [ allow ( unused_imports ) ]\r\n5   |      | use super :: gfx ; gfx_pipeline_inner ! { $ ( $ field : $ ty , ) * } pub fn\r\n    |      |                    ------------------------------------------------- in this macro invocation (#6)\r\n6   |      | new (  ) -> Init < 'static > { Init { $ ( $ field : $ value , ) * } } } }\r\n    |      |_________________________________________________________________________- in this expansion of `gfx_pipeline!` (#5)\r\n    |\r\n   ::: src/gui/render.rs:19:1\r\n    |\r\n19  | /      gfx_defines! {\r\n20  | |          vertex Vertex {\r\n21  | |              pos: [f32; 2] = \"a_Pos\",\r\n22  | |          }\r\n...   |\r\n70  | |          }\r\n71  | |      }\r\n    | |______- in this macro invocation (#1)\r\n```\r\n\r\nThe ASCII art is beautiful. But I still have no clue what is going on, especially considering that this was working fine when I was doing `#[macro_use] extern crate gfx;`.\r\n\r\n`for _ in 0 .. 1 { }` appears to be a fully valid construct when it appears anywhere else but [here](https://docs.rs/gfx/0.17.1/src/gfx/macros/pso.rs.html#193).\r\n\r\nversion info:\r\n```\r\nrustc 1.29.0-nightly (6a1c0637c 2018-07-23)\r\nbinary: rustc\r\ncommit-hash: 6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d\r\ncommit-date: 2018-07-23\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.29.0-nightly\r\nLLVM version: 7.0\r\n```\r\ngfx crate is at `0.17.1`", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52798/timeline", "performed_via_github_app": null, "state_reason": null}