{"url": "https://api.github.com/repos/rust-lang/rust/issues/99645", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99645/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99645/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99645/events", "html_url": "https://github.com/rust-lang/rust/issues/99645", "id": 1315698106, "node_id": "I_kwDOAAsO6M5Oa_W6", "number": 99645, "title": "Diag: closure with implied type lacks generic lifetime", "user": {"login": "dhardy", "id": 134893, "node_id": "MDQ6VXNlcjEzNDg5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/134893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhardy", "html_url": "https://github.com/dhardy", "followers_url": "https://api.github.com/users/dhardy/followers", "following_url": "https://api.github.com/users/dhardy/following{/other_user}", "gists_url": "https://api.github.com/users/dhardy/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhardy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhardy/subscriptions", "organizations_url": "https://api.github.com/users/dhardy/orgs", "repos_url": "https://api.github.com/users/dhardy/repos", "events_url": "https://api.github.com/users/dhardy/events{/privacy}", "received_events_url": "https://api.github.com/users/dhardy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-07-23T16:36:33Z", "updated_at": "2022-07-25T10:29:50Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code \u2014 [playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=99170e90a169ee5156ab147c918a7956):\r\n\r\n```rust\r\nstruct A<'a>(&'a ());\r\n\r\ntrait Foo {}\r\n\r\nimpl<F: Fn(A)> Foo for F {}\r\n\r\nfn main() {\r\n    fn use_foo<F: Foo>(_: F) {}\r\n    use_foo(|_| {});\r\n}\r\n```\r\n\r\nThe output on nightly is as follows. (Rust v1.62 only omits the second error + notes.)\r\n\r\n```rust\r\nCompiling playground v0.0.1 (/playground)\r\nerror: implementation of `FnOnce` is not general enough\r\n --> src/main.rs:9:5\r\n  |\r\n9 |     use_foo(|_| {});\r\n  |     ^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\r\n  |\r\n  = note: closure with signature `fn(A<'2>)` must implement `FnOnce<(A<'1>,)>`, for any lifetime `'1`...\r\n  = note: ...but it actually implements `FnOnce<(A<'2>,)>`, for some specific lifetime `'2`\r\n\r\nerror[[E0308]](https://doc.rust-lang.org/nightly/error-index.html#E0308): mismatched types\r\n --> src/main.rs:9:5\r\n  |\r\n9 |     use_foo(|_| {});\r\n  |     ^^^^^^^^^^^^^^^ one type is more general than the other\r\n  |\r\n  = note: expected trait `for<'r> Fn<(A<'r>,)>`\r\n             found trait `Fn<(A<'_>,)>`\r\nnote: this closure does not fulfill the lifetime requirements\r\n --> src/main.rs:9:13\r\n  |\r\n9 |     use_foo(|_| {});\r\n  |             ^^^\r\nnote: the lifetime requirement is introduced here\r\n --> src/main.rs:8:19\r\n  |\r\n8 |     fn use_foo<F: Foo>(_: F) {}\r\n  |                   ^^^\r\n```\r\n\r\nIdeally a hint like the following would be included:\r\n```\r\nhelp: consider adding a type annotation:\r\n   |\r\n 9 |     use_foo(|_: A<_>| {});\r\n   |               ~~~+++\r\n```\r\n\r\nSee also the [discussion on internals.rust-lang](https://internals.rust-lang.org/t/implied-lifetime-of-parameter-to-fnonce-trait/17068/13).\r\n\r\nNote: the impl of `Foo for F` has an elided lifetime which expands as follows ([nomicon/HRTB](https://doc.rust-lang.org/nomicon/hrtb.html)):\r\n```rust\r\nimpl<F> Foo for F\r\nwhere\r\n    for<'a> F: Fn(A<'a>),\r\n{}\r\n```\r\n\r\nNote (@steffahn): \"Closures with completely inferred types tend to not be generic over lifetimes, which is why |_| {} fails.\"", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99645/timeline", "performed_via_github_app": null, "state_reason": null}