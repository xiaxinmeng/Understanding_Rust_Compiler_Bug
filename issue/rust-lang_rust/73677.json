{"url": "https://api.github.com/repos/rust-lang/rust/issues/73677", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73677/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73677/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73677/events", "html_url": "https://github.com/rust-lang/rust/issues/73677", "id": 644274609, "node_id": "MDU6SXNzdWU2NDQyNzQ2MDk=", "number": 73677, "title": "SIGSEGV when building core for aarch64-unknown-none-softfloat target", "user": {"login": "jiegec", "id": 6127678, "node_id": "MDQ6VXNlcjYxMjc2Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6127678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiegec", "html_url": "https://github.com/jiegec", "followers_url": "https://api.github.com/users/jiegec/followers", "following_url": "https://api.github.com/users/jiegec/following{/other_user}", "gists_url": "https://api.github.com/users/jiegec/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiegec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiegec/subscriptions", "organizations_url": "https://api.github.com/users/jiegec/orgs", "repos_url": "https://api.github.com/users/jiegec/repos", "events_url": "https://api.github.com/users/jiegec/events{/privacy}", "received_events_url": "https://api.github.com/users/jiegec/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-06-24T02:45:13Z", "updated_at": "2021-09-04T00:16:51Z", "closed_at": "2021-09-04T00:16:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```bash\r\ncargo new --bin poc\r\ncd poc\r\ncargo build --target aarch64-unknown-none-softfloat -Z build-std=core,alloc\r\n```\r\n\r\nI expected to see this happen: It should build without failure.\r\n\r\nInstead, this happened: \r\n\r\n```\r\n   Compiling core v0.0.0 (/Volumes/Data/rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/libcore)\r\n   Compiling rustc-std-workspace-core v1.99.0 (/Volumes/Data/rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/tools/rustc-std-workspace-core)\r\n   Compiling compiler_builtins v0.1.31\r\nerror: could not compile `core`.\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name core --edition=2018 /Volumes/Data/rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/libcore/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts --crate-type lib --emit=dep-info,metadata,link -Cembed-bitcode=no -C debuginfo=2 -C metadata=ec32283505e65c0a -C extra-filename=-ec32283505e65c0a --out-dir /Volumes/Data/temp/poc/target/aarch64-unknown-none-softfloat/debug/deps --target aarch64-unknown-none-softfloat -Zforce-unstable-if-unmarked -L dependency=/Volumes/Data/temp/poc/target/aarch64-unknown-none-softfloat/debug/deps -L dependency=/Volumes/Data/temp/poc/target/debug/deps --cap-lints allow` (signal: 11, SIGSEGV: invalid memory reference)\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror: build failed\r\n\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.46.0-nightly (118b50524 2020-06-06)\r\nbinary: rustc\r\ncommit-hash: 118b50524b79e565f017e08bce9b90a16c63634f\r\ncommit-date: 2020-06-06\r\nhost: x86_64-apple-darwin\r\nrelease: 1.46.0-nightly\r\nLLVM version: 10.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\nNo rust backtrace, because it crashes in libLLVM.\r\n\r\n</p>\r\n</details>\r\n\r\nThen, I built a stage1 rust(commit ff5b446d2f) with debug and assertions enabled in another Linux machine, and got this backtrace upon crash:\r\n\r\n```\r\nrustc: /data/jiegec/rust/src/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp:572: static llvm::LegalizerInfo::SizeAndAction llvm::LegalizerInfo::findAction(const SizeAndActionsVec&, uint32_t): Assertion `It != Vec.begin() && \"Does Vec not start with size 1?\"' failed.\r\n\r\n(gdb) bt\r\n#0  0x00007fffed90b355 in raise () from /usr/lib/libc.so.6\r\n#1  0x00007fffed8f4853 in abort () from /usr/lib/libc.so.6\r\n#2  0x00007fffed8f4727 in __assert_fail_base.cold () from /usr/lib/libc.so.6\r\n#3  0x00007fffed903936 in __assert_fail () from /usr/lib/libc.so.6\r\n#4  0x00007fffeffd3ae7 in llvm::LegalizerInfo::findAction (Vec=std::vector of length 0, capacity 0, Size=<optimized out>)\r\n    at /data/jiegec/rust/src/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp:617\r\n#5  0x00007fffeffd4d14 in llvm::LegalizerInfo::findScalarLegalAction (Aspect=..., this=0x7fffac051320)\r\n    at /data/jiegec/rust/src/llvm-project/llvm/include/llvm/Support/LowLevelTypeImpl.h:150\r\n#6  llvm::LegalizerInfo::findScalarLegalAction (this=0x7fffac051320, Aspect=...) at /data/jiegec/rust/src/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp:621\r\n#7  0x00007fffeffd5375 in llvm::LegalizerInfo::getAction (Query=..., this=<optimized out>) at /data/jiegec/rust/src/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:109\r\n#8  llvm::LegalizerInfo::getAction (this=0x7fffac051320, Query=...) at /data/jiegec/rust/src/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp:458\r\n#9  0x00007fffeffd588f in llvm::LegalizerInfo::getAction (this=0x7fffac051320, MI=..., MRI=...)\r\n    at /data/jiegec/rust/src/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:135\r\n#10 0x00007fffeffd0eb8 in llvm::LegalizerHelper::legalizeInstrStep (this=0x7fffe7365170, MI=...) at /data/jiegec/rust/src/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:90\r\n#11 0x00007fffeffaff5b in llvm::Legalizer::legalizeMachineFunction (MF=..., LI=..., AuxObservers=..., MIRBuilder=...)\r\n    at /data/jiegec/rust/src/llvm-project/llvm/lib/CodeGen/GlobalISel/Legalizer.cpp:206\r\n#12 0x00007fffeffb1481 in llvm::Legalizer::runOnMachineFunction (this=<optimized out>, MF=...) at /data/jiegec/rust/src/llvm-project/llvm/include/llvm/ADT/SmallVector.h:146\r\n#13 0x00007ffff051f015 in llvm::MachineFunctionPass::runOnFunction (this=0x7fffac00d870, F=...) at /data/jiegec/rust/src/llvm-project/llvm/lib/CodeGen/MachineFunctionPass.cpp:73\r\n#14 0x00007ffff1232991 in llvm::FPPassManager::runOnFunction (this=this@entry=0x7fffac0010e0, F=...) at /data/jiegec/rust/src/llvm-project/llvm/lib/IR/LegacyPassManager.cpp:1481\r\n#15 0x00007ffff1233021 in llvm::FPPassManager::runOnModule (this=0x7fffac0010e0, M=...) at /data/jiegec/rust/src/llvm-project/llvm/lib/IR/LegacyPassManager.cpp:1517\r\n#16 0x00007ffff12333be in (anonymous namespace)::MPPassManager::runOnModule (M=..., this=<optimized out>) at /data/jiegec/rust/src/llvm-project/llvm/lib/IR/LegacyPassManager.cpp:1582\r\n#17 llvm::legacy::PassManagerImpl::run (this=0x7fffac0014c0, M=...) at /data/jiegec/rust/src/llvm-project/llvm/lib/IR/LegacyPassManager.cpp:1694\r\n#18 0x00007ffff12336f9 in llvm::legacy::PassManager::run (this=this@entry=0x7fffac010ea0, M=...) at /data/jiegec/rust/src/llvm-project/llvm/lib/IR/LegacyPassManager.cpp:1725\r\n#19 0x00007fffeee0e302 in LLVMRustWriteOutputFile (Target=0x7fffcd3356e0, PMR=0x7fffac010ea0, M=0x7fffe13e4b40, Path=<optimized out>, RustFileType=<optimized out>)\r\n    at /data/jiegec/rust/src/llvm-project/llvm/include/llvm/IR/Module.h:884\r\n#20 0x00007fffeec6721c in rustc_codegen_llvm::back::write::write_output_file (handler=0x7fffe7367210, target=0x2, pm=0x7fffe7364bc0, m=0x0,\r\n    output=<error reading variable: access outside bounds of object referenced via synthetic pointer>, file_type=rustc_codegen_llvm::llvm_::ffi::FileType::ObjectFile)\r\n    at src/librustc_codegen_llvm/back/write.rs:55\r\n#21 0x00007fffeec7864b in rustc_codegen_llvm::back::write::codegen::{{closure}} (cpm=0x7fffac010ea0) at src/librustc_codegen_llvm/back/write.rs:770\r\n#22 rustc_codegen_llvm::back::write::codegen::with_codegen (tm=0x7fffcd3356e0, llmod=0x7fffe13e4b40, no_builtins=<optimized out>, f=...) at src/librustc_codegen_llvm/back/write.rs:658\r\n#23 rustc_codegen_llvm::back::write::codegen (cgcx=<optimized out>, diag_handler=0x7fffe7367210, module=..., config=<optimized out>) at src/librustc_codegen_llvm/back/write.rs:769\r\n#24 <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::write::WriteBackendMethods>::codegen (cgcx=<optimized out>, diag_handler=0x7fffe7367210, module=...,\r\n    config=0x7fffeae76090) at src/librustc_codegen_llvm/lib.rs:166\r\n#25 0x00007fffeecaf758 in rustc_codegen_ssa::back::write::execute_optimize_work_item (cgcx=0x7fffe73674c8, module=..., module_config=0x7fffeae76090)\r\n    at /data/jiegec/rust/src/librustc_codegen_ssa/back/write.rs:806\r\n#26 rustc_codegen_ssa::back::write::execute_work_item (cgcx=0x7fffe73674c8, work_item=...) at /data/jiegec/rust/src/librustc_codegen_ssa/back/write.rs:721\r\n#27 0x00007fffeed7a0ae in rustc_codegen_ssa::back::write::spawn_work::{{closure}} () at /data/jiegec/rust/src/librustc_codegen_ssa/back/write.rs:1553\r\n#28 std::sys_common::backtrace::__rust_begin_short_backtrace (f=...) at /data/jiegec/rust/src/libstd/sys_common/backtrace.rs:130\r\n#29 0x00007fffeedc9e53 in std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} () at /data/jiegec/rust/src/libstd/thread/mod.rs:475\r\n#30 <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once (self=..., _args=<optimized out>) at /data/jiegec/rust/src/libstd/panic.rs:318\r\n#31 std::panicking::try::do_call (data=<optimized out>) at /data/jiegec/rust/src/libstd/panicking.rs:296\r\n#32 std::panicking::try (f=...) at /data/jiegec/rust/src/libstd/panicking.rs:273\r\n\r\n```\r\n", "closed_by": {"login": "jiegec", "id": 6127678, "node_id": "MDQ6VXNlcjYxMjc2Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6127678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiegec", "html_url": "https://github.com/jiegec", "followers_url": "https://api.github.com/users/jiegec/followers", "following_url": "https://api.github.com/users/jiegec/following{/other_user}", "gists_url": "https://api.github.com/users/jiegec/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiegec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiegec/subscriptions", "organizations_url": "https://api.github.com/users/jiegec/orgs", "repos_url": "https://api.github.com/users/jiegec/repos", "events_url": "https://api.github.com/users/jiegec/events{/privacy}", "received_events_url": "https://api.github.com/users/jiegec/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73677/timeline", "performed_via_github_app": null, "state_reason": "completed"}