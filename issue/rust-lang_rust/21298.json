{"url": "https://api.github.com/repos/rust-lang/rust/issues/21298", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21298/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21298/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21298/events", "html_url": "https://github.com/rust-lang/rust/issues/21298", "id": 54664275, "node_id": "MDU6SXNzdWU1NDY2NDI3NQ==", "number": 21298, "title": "Improving Entry API to get the keys back when they are unused", "user": {"login": "matthieu-m", "id": 2420441, "node_id": "MDQ6VXNlcjI0MjA0NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/2420441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthieu-m", "html_url": "https://github.com/matthieu-m", "followers_url": "https://api.github.com/users/matthieu-m/followers", "following_url": "https://api.github.com/users/matthieu-m/following{/other_user}", "gists_url": "https://api.github.com/users/matthieu-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthieu-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthieu-m/subscriptions", "organizations_url": "https://api.github.com/users/matthieu-m/orgs", "repos_url": "https://api.github.com/users/matthieu-m/repos", "events_url": "https://api.github.com/users/matthieu-m/events{/privacy}", "received_events_url": "https://api.github.com/users/matthieu-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-01-17T15:09:51Z", "updated_at": "2015-01-21T20:24:35Z", "closed_at": "2015-01-21T20:24:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, I would like to congratulate Gankro on the Entry API, it really simplified the interface of associative containers.\n\nIf I had one nit, however, it is that the `entry` methods available always consume the key.\n\nNow, said key is taken by value so of course it is consumed, and the key is actually inserted in the container via the call to `VacantEntry::insert`, so it seems reasonable. However, in the case the key slot in the container is already occupied, and we get an `OccupiedEntry` as a result, there seems to be little reason not to return the key to the user.\n\nFor completeness, one could actually also improve `VacantEntry` so that is possible for it to hand over the key it had consumed, although why would one use the Entry API for look-up without any wish to insert is for now a mystery to me.\n\nThe main benefit of returning the un-consumed key is allowing reusing it. When the key is a simple integer, this has little appeal, however when the key owns heap-allocated memory (such as `String`) then the ability to re-use the buffer rather than continuously allocating/deallocating seems like a huge boon.\n\n---\n\nI prototyped the idea of an improved `Occupied` below, the modification is simple, and casual perusal of http://doc.rust-lang.org/src/std/collections/hash/map.rs.html#1150-1195 seems to show that simply modifying the lines 1175-1177 to:\n\n```\nreturn Occupied(OccupiedEntry{ elem: bucket, }, k); // Note the \", k\"\n```\n\nwould be the only change to `HashMap` implementation; likewise the entry change at lines 1366-1371 is simple enough:\n\n```\npub enum Entry<'a, K: 'a, V: 'a> {\n    /// An occupied Entry, and the unconsumed key\n    Occupied(OccupiedEntry<'a, K, V>, K), // Note the \", K\"\n    /// A vacant Entry\n    Vacant(VacantEntry<'a, K, V>),\n}\n```\n\nI suspect, but have not verified, that other associative containers would likely be as easily modified. And of course, it would impact all consumers...\n\nThe example below show cases achieving buffer re-use through such an improved API, note how easy it is.\n\n```\n#![allow(unstable)]\n\nuse std::default::Default;\n\nstruct OccupiedEntry<K, V>;\n\nstruct VacantEntry<K, V> {\n    entry: K,\n}\n\nenum Entry<K, V> {\n    Occupied(OccupiedEntry<K, V>, K), // Simply add one more element to Occupied.\n    Vacant(VacantEntry<K, V>),\n}\n\nimpl<K, V> Entry<K, V> {\n    fn new(key: K, really: bool) -> Entry<K, V> {\n        if really {\n            Entry::Occupied(OccupiedEntry, key)\n        } else {\n            Entry::Vacant(VacantEntry{entry: key})\n        }\n    }\n}\n\nfn main() {\n    let mut acc: Vec<String> = vec!();\n\n    let mut word: String = Default::default();\n    for i in \"Lorem iipsum and all that\".split_str(\" \") {\n        word.clear();\n        word.push_str(i);\n\n        word = match Entry::<String, i32>::new(word, i.len() % 2 == 0) {\n            Entry::Occupied(_, key) => { key }\n            Entry::Vacant(v) => { acc.push(v.entry); Default::default() }\n        };\n\n        println!(\"{}\\t{}\", word, i);\n    }\n\n    println!(\"{:?}\", acc);\n}\n```\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21298/timeline", "performed_via_github_app": null, "state_reason": "completed"}