{"url": "https://api.github.com/repos/rust-lang/rust/issues/111898", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111898/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111898/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111898/events", "html_url": "https://github.com/rust-lang/rust/issues/111898", "id": 1723221494, "node_id": "I_kwDOAAsO6M5mtkX2", "number": 111898, "title": "Misleading suggestion for missing type variable trait bound", "user": {"login": "joshlf", "id": 1046063, "node_id": "MDQ6VXNlcjEwNDYwNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1046063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshlf", "html_url": "https://github.com/joshlf", "followers_url": "https://api.github.com/users/joshlf/followers", "following_url": "https://api.github.com/users/joshlf/following{/other_user}", "gists_url": "https://api.github.com/users/joshlf/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshlf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshlf/subscriptions", "organizations_url": "https://api.github.com/users/joshlf/orgs", "repos_url": "https://api.github.com/users/joshlf/repos", "events_url": "https://api.github.com/users/joshlf/events{/privacy}", "received_events_url": "https://api.github.com/users/joshlf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-05-24T05:50:29Z", "updated_at": "2023-05-24T05:51:16Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\ntrait Foo {}\r\ntrait Bar: Foo {}\r\n\r\nstruct Wrapper<T>(T);\r\n\r\nimpl<T: Foo> Foo for Wrapper<T> {}\r\n\r\nmacro_rules! impl_trait {\r\n    ($tyvar:ident => $trait:ident for $ty:ty) => {\r\n        impl<$tyvar> $trait for $ty {}\r\n    };\r\n}\r\n\r\nimpl_trait!(T => Bar for Wrapper<T>);\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\nerror[E0277]: the trait bound `T: Foo` is not satisfied\r\n  --> src/lib.rs:14:26\r\n   |\r\n14 | impl_trait!(T => Bar for Wrapper<T>);\r\n   |                          ^^^^^^^^^^ the trait `Foo` is not implemented for `T`\r\n   |\r\nnote: required for `Wrapper<T>` to implement `Foo`\r\n  --> src/lib.rs:6:14\r\n   |\r\n6  | impl<T: Foo> Foo for Wrapper<T> {}\r\n   |         ---  ^^^     ^^^^^^^^^^\r\n   |         |\r\n   |         unsatisfied trait bound introduced here\r\nnote: required by a bound in `Bar`\r\n  --> src/lib.rs:2:12\r\n   |\r\n2  | trait Bar: Foo {}\r\n   |            ^^^ required by this bound in `Bar`\r\nhelp: consider restricting type parameter `T`\r\n   |\r\n14 | impl_trait!(T: Foo => Bar for Wrapper<T>);\r\n   |              +++++\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n\r\n### Desired output\r\n\r\nThe suggestion should not include `T: Foo` in the following line:\r\n\r\n```Shell\r\n14 | impl_trait!(T: Foo => Bar for Wrapper<T>);\r\n```\r\n\r\n\r\n### Rationale and extra context\r\n\r\nGiven the definition of `impl_trait!`, the suggested change would cause the macro invocation to stop compiling. In general, even if it did compile (for example because another macro variant would match the new syntax), the current analysis doesn't look into the macro's body to determine that the suggestion is accurate.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111898/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111898/timeline", "performed_via_github_app": null, "state_reason": null}