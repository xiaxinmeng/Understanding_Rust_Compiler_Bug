{"url": "https://api.github.com/repos/rust-lang/rust/issues/86854", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86854/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86854/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86854/events", "html_url": "https://github.com/rust-lang/rust/issues/86854", "id": 936355099, "node_id": "MDU6SXNzdWU5MzYzNTUwOTk=", "number": 86854, "title": "Unify cargo and rustc's error reporting", "user": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 609101895, "node_id": "MDU6TGFiZWw2MDkxMDE4OTU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-cargo", "name": "T-cargo", "color": "bfd4f2", "default": false, "description": "Relevant to the cargo team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-07-04T01:20:13Z", "updated_at": "2021-07-07T17:16:29Z", "closed_at": "2021-07-07T17:16:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Given the following code:\r\n\r\n```rust\r\nfn f() -> usize {}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:1:11\r\n  |\r\n1 | fn f() -> usize {}\r\n  |    -      ^^^^^ expected `usize`, found `()`\r\n  |    |\r\n  |    implicitly returns `()` as its body has no tail or `return` expression\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nIdeally the output should look like:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:1:11\r\n  |\r\n1 | fn f() -> usize {}\r\n  |    -      ^^^^^ expected `usize`, found `()`\r\n  |    |\r\n  |    implicitly returns `()` as its body has no tail or `return` expression\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\nRight now, cargo and rustc operate basically independently of each other. The summary (\"aborting ...\" and \"could not compile ...\") is repeated twice, and both have different, incompatible ways to get more info about what went wrong. There's no reason to repeat these twice; we could include all the same information in half the space if we can get cargo and rustc to cooperate.\r\n\r\nI suggest the way this be implemented is by keeping rustc's output the same when run standalone, but omitting \"aborting due to ...\" and \"for more information ...\" when run with `--error-format=json`. Then cargo can aggregate the info it used to print into its own errors by using the JSON output.\r\n\r\ncc @rust-lang/cargo @rust-lang/wg-diagnostics\r\n\r\n(meta note: I thought of this while working on https://github.com/rust-lang/rust/pull/86022, which has fully 12 lines of \"metadata\" after the 5 line error. Most builds are not that bad in comparison, but I do think it shows that it needs support from all the tools in the stack to keep the verbosity down.)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86854/timeline", "performed_via_github_app": null, "state_reason": "completed"}