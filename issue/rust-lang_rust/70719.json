{"url": "https://api.github.com/repos/rust-lang/rust/issues/70719", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70719/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70719/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70719/events", "html_url": "https://github.com/rust-lang/rust/issues/70719", "id": 592898860, "node_id": "MDU6SXNzdWU1OTI4OTg4NjA=", "number": 70719, "title": "Cloned sockets are inherited by child processes on windows", "user": {"login": "mwrock", "id": 655165, "node_id": "MDQ6VXNlcjY1NTE2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/655165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwrock", "html_url": "https://github.com/mwrock", "followers_url": "https://api.github.com/users/mwrock/followers", "following_url": "https://api.github.com/users/mwrock/following{/other_user}", "gists_url": "https://api.github.com/users/mwrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwrock/subscriptions", "organizations_url": "https://api.github.com/users/mwrock/orgs", "repos_url": "https://api.github.com/users/mwrock/repos", "events_url": "https://api.github.com/users/mwrock/events{/privacy}", "received_events_url": "https://api.github.com/users/mwrock/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}, {"id": 3812066157, "node_id": "LA_kwDOAAsO6M7jN4Nt", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-process", "name": "A-process", "color": "f7e101", "default": false, "description": "Area: std::process and std::env"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-02T20:16:45Z", "updated_at": "2023-03-19T09:50:17Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given this test code running on Windows 10 compiled with rustc 1.41.0:\r\n\r\n```rust\r\nuse std::{net::UdpSocket, os::windows::io::AsRawSocket, process::Command};\r\nuse winapi::{\r\n    shared::minwindef::DWORD,\r\n    um::{handleapi, winbase, winnt},\r\n};\r\n\r\nfn main() -> std::io::Result<()> {\r\n    let socket1 = UdpSocket::bind(\"0.0.0.0:9999\")?;\r\n    let socket2 = socket1.try_clone()?;\r\n\r\n    let mut flags: DWORD = 0;\r\n    unsafe {\r\n        handleapi::GetHandleInformation(socket1.as_raw_socket() as winnt::HANDLE, &mut flags);\r\n    }\r\n    println!(\r\n        \"socket 1 HANDLE_FLAG_INHERIT is set: {}\",\r\n        ((flags & winbase::HANDLE_FLAG_INHERIT) != 0)\r\n    );\r\n\r\n    unsafe {\r\n        handleapi::GetHandleInformation(socket2.as_raw_socket() as winnt::HANDLE, &mut flags);\r\n    }\r\n    println!(\r\n        \"socket 2 HANDLE_FLAG_INHERIT is set: {}\",\r\n        ((flags & winbase::HANDLE_FLAG_INHERIT) != 0)\r\n    );\r\n\r\n    Command::new(\"notepad.exe\").spawn()?;\r\n    Ok(())\r\n}\r\n```\r\n\r\nI would expect UDP port 9999 to no longer be listening after the code terminates and I would expect both `socket1` and `socket2` to report `false` on the state of their `HANDLE_FLAG_INHERIT`.\r\n\r\nInstead port 9999 remains in a listening state until I close the spawned child process `notepad` and `socket2` shows that its `HANDLE_FLAG_INHERIT` is set.\r\n\r\nThis appears to have been introduced in rust 1.38.0 via PR #60260 which now sets the `WSA_FLAG_NO_HANDLE_INHERIT` in `WSASocketW` instead of explicitly clearing the `HANDLE_FLAG_INHERIT` with `SetHandleInformation`. Just to confirm, I have compiled this against `nightly-2019-07-26-x86_64-pc-windows-msvc` (before PR) and `nightly-2019-07-27-x86_64-pc-windows-msvc` (after PR) and this code behaves as expected before the PR.\r\n\r\nOn the surface that PR looks solid and I would totally expect it to work. However it seems (surprisingly) that setting the `WSA_FLAG_NO_HANDLE_INHERIT` flag on a duplicated socket is not effective. I have googled until I could google no longer and alas have found no mention of this behavior.\r\n\r\nAs a workaround, doing something like:\r\n\r\n```\r\nlet in_socket = socket.try_clone()?;\r\nunsafe {\r\n    handleapi::SetHandleInformation(in_socket.as_raw_socket() as winnt::HANDLE, winbase::HANDLE_FLAG_INHERIT, 0)\r\n};\r\n```\r\nfixes my use case.\r\n\r\nPerhaps the correct fix is for [`duplicate`](https://github.com/rust-lang/rust/blob/537ccdf3ac44c8c7a8d36cbdbe6fb224afabb7ae/src/libstd/sys/windows/net.rs#L189) to call [`set_no_inherit`](https://github.com/rust-lang/rust/blob/537ccdf3ac44c8c7a8d36cbdbe6fb224afabb7ae/src/libstd/sys/windows/net.rs#L356) unless it is a UWP app. However I would love it if someone had deeper knowledge as to why this behavior is as it is. ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70719/timeline", "performed_via_github_app": null, "state_reason": null}