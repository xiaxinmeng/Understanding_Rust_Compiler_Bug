{"url": "https://api.github.com/repos/rust-lang/rust/issues/59352", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59352/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59352/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59352/events", "html_url": "https://github.com/rust-lang/rust/issues/59352", "id": 423978101, "node_id": "MDU6SXNzdWU0MjM5NzgxMDE=", "number": 59352, "title": "Optimization regression in 1.32+", "user": {"login": "adrian17", "id": 4729533, "node_id": "MDQ6VXNlcjQ3Mjk1MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4729533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrian17", "html_url": "https://github.com/adrian17", "followers_url": "https://api.github.com/users/adrian17/followers", "following_url": "https://api.github.com/users/adrian17/following{/other_user}", "gists_url": "https://api.github.com/users/adrian17/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrian17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrian17/subscriptions", "organizations_url": "https://api.github.com/users/adrian17/orgs", "repos_url": "https://api.github.com/users/adrian17/repos", "events_url": "https://api.github.com/users/adrian17/events{/privacy}", "received_events_url": "https://api.github.com/users/adrian17/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-21T23:00:39Z", "updated_at": "2022-11-15T17:15:30Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The following function:\r\n```\r\npub fn num_to_digit(num: char) -> u32 {\r\n    if num.is_digit(8) { num.to_digit(8).unwrap() } else { 0 }\r\n}\r\n```\r\nWith 1.31 produced the following:\r\n```\r\n  add edi, -48\r\n  xor eax, eax\r\n  cmp edi, 8\r\n  cmovb eax, edi\r\n  ret\r\n```\r\nWhich looks reasonable, as `unwrap()` should never fail.\r\nBut in 1.32 and above it produces an unnecessary panic branch:\r\n```\r\n  push rax\r\n  mov ecx, edi\r\n  and ecx, -8\r\n  xor eax, eax\r\n  cmp ecx, 48\r\n  jne .LBB0_3\r\n  add edi, -48\r\n  mov eax, edi\r\n  cmp edi, 8\r\n  jae .LBB0_2\r\n.LBB0_3:\r\n  pop rcx\r\n  ret\r\n.LBB0_2:\r\n  lea rdi, [rip + .L__unnamed_1]\r\n  call qword ptr [rip + _ZN4core9panicking5panic17h6f50c0de2dcd7974E@GOTPCREL]\r\n  ud2\r\n```\r\n\r\nInterestingly, when I manually inline `is_digit`: https://github.com/rust-lang/rust/blob/89573b3c8b629507130b1ec8beeaf550fdc0e046/src/libcore/char/methods.rs#L58-L61\r\n```\r\npub fn num_to_digit_fast1(num: char) -> u32 {\r\n    if num.to_digit(8).is_some() { num.to_digit(8).unwrap() } else { 0 }\r\n}\r\n```\r\nOr just use `unwrap_or`:\r\n```\r\npub fn num_to_digit_fast2(num: char) -> u32 {\r\n    num.to_digit(8).unwrap_or(0)\r\n}\r\n```\r\nIt produces good code on all compiler versions.\r\n\r\nGodbolt instance I tested this on: https://godbolt.org/z/8yg7x0", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59352/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59352/timeline", "performed_via_github_app": null, "state_reason": null}