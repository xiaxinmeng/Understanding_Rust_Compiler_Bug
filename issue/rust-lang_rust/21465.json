{"url": "https://api.github.com/repos/rust-lang/rust/issues/21465", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21465/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21465/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21465/events", "html_url": "https://github.com/rust-lang/rust/issues/21465", "id": 55023402, "node_id": "MDU6SXNzdWU1NTAyMzQwMg==", "number": 21465, "title": "Improve LLVM optimization across function calls", "user": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2015-01-21T14:11:47Z", "updated_at": "2015-04-11T19:24:00Z", "closed_at": "2015-04-11T19:24:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`Vec<T>` has an `extend` function which is equivalent to `push_all` except that it accepts an iterator. `push_all` optimizes to `memcpy` but `extend` does not. Consider the following unsafe Iterator:\n\n``` rust\nstruct MyIntoIter<T> {\n    ptr: *const T,\n    end: *const T\n}\n\nimpl<T> MyIntoIter<T> {\n    fn from_vec(mut v: Vec<T>) -> MyIntoIter<T> {\n        unsafe {\n            let ptr = v.as_mut_ptr();\n            let begin = ptr as *const T;\n            let end = if mem::size_of::<T>() == 0 {\n                (ptr as usize + v.len()) as *const T\n            } else {\n                ptr.offset(v.len() as isize) as *const T\n            };\n            mem::forget(v);\n            MyIntoIter { ptr: begin, end: end }\n        }\n    }\n}\n\ntrait RawIterator {\n    type Item;\n\n    fn next(&mut self) -> Self::Item;\n    fn ptr(&self) -> *const Self::Item;\n    fn len(&self) -> usize;\n}\n\nimpl<T> RawIterator for MyIntoIter<T> {\n    type Item = T;\n\n    fn next(&mut self) -> T {\n        unsafe {\n            let old = self.ptr;\n            self.ptr = self.ptr.offset(1);\n            ptr::read(old)\n        }\n    }\n\n    fn ptr(&self) -> *const T {\n        self.ptr\n    }\n\n    fn len(&self) -> usize {\n        (self.end as usize - self.ptr as usize) / mem::size_of::<T>()\n    }\n}\n```\n\nThis has all safety features removed. The user is responsible for not calling `next` when there are no more elements. One can assume that the normal Iterator will never optimize better than this Iterator.\n\nConsider the following variants of `extend`:\n\n``` rust\n#![allow(unstable)]\n\nuse std::{ptr, mem};\n\n#[inline(never)]\nfn extend4<T, I: RawIterator<Item=T>>(vec: &mut Vec<T>, mut iter: I) {\n    let len = iter.len();\n    vec.reserve(len);\n    unsafe {\n        let mut ptr = vec.as_mut_ptr().offset(vec.len() as isize);\n        let end = ptr.offset(len as isize);\n        while ptr != end {\n            ptr::write(ptr, iter.next());\n            ptr = ptr.offset(1);\n        }\n    }\n}\n\n#[inline(never)]\nfn extend5<T, I: RawIterator<Item=T>>(vec: &mut Vec<T>, mut iter: I) {\n    let len = iter.len();\n    vec.reserve(len);\n    unsafe {\n        let mut dst_ptr = vec.as_mut_ptr().offset(vec.len() as isize);\n        let dst_end = dst_ptr.offset(len as isize);\n        let mut src_ptr = iter.ptr();\n        while dst_ptr != dst_end {\n            ptr::write(dst_ptr, ptr::read(src_ptr));\n            dst_ptr = dst_ptr.offset(1);\n            src_ptr = src_ptr.offset(1);\n        }\n    }\n}\n\nfn main() {\n    let src: Vec<_> = (0..6400000us).map(|x| x as u8).collect();\n    let mut x: Vec<u8> = vec!();\n\n    //extend4(&mut x, MyIntoIter::from_vec(src));\n    extend5(&mut x, MyIntoIter::from_vec(src));\n}\n```\n\nYou can see that `extend5` is nothing but `extend4` with `next` inlined manually. However, `extend5` optimizes to a memcpy while `extend4` does not.\n\nFrom this we can see that adding an unsafe `ExactSizeIterator` trait will not improve the `extend` performance on its own.\n", "closed_by": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21465/timeline", "performed_via_github_app": null, "state_reason": "completed"}