{"url": "https://api.github.com/repos/rust-lang/rust/issues/110131", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110131/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110131/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110131/events", "html_url": "https://github.com/rust-lang/rust/issues/110131", "id": 1660201445, "node_id": "I_kwDOAAsO6M5i9Knl", "number": 110131, "title": "error: internal compiler error: compiler/rustc_middle/src/ty/sty.rs:847:21: expected type for param #0", "user": {"login": "yegawong", "id": 41882993, "node_id": "MDQ6VXNlcjQxODgyOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/41882993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yegawong", "html_url": "https://github.com/yegawong", "followers_url": "https://api.github.com/users/yegawong/followers", "following_url": "https://api.github.com/users/yegawong/following{/other_user}", "gists_url": "https://api.github.com/users/yegawong/gists{/gist_id}", "starred_url": "https://api.github.com/users/yegawong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yegawong/subscriptions", "organizations_url": "https://api.github.com/users/yegawong/orgs", "repos_url": "https://api.github.com/users/yegawong/repos", "events_url": "https://api.github.com/users/yegawong/events{/privacy}", "received_events_url": "https://api.github.com/users/yegawong/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3921860029, "node_id": "LA_kwDOAAsO6M7pwtW9", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-has-mcve", "name": "S-has-mcve", "color": "862eff", "default": false, "description": "A Minimal Complete and Verifiable Example has been found for this issue"}], "state": "closed", "locked": false, "assignee": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2023-04-10T04:08:56Z", "updated_at": "2023-04-13T00:37:45Z", "closed_at": "2023-04-13T00:37:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\nhow to create smaller examples.\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\n-->\n\n### Code\n\n```Rust\nstruct SqueneceBuffer<'a, T>\nwhere\n    &'a T: IntoIterator<Item = &'a u8>,\n{\n    iter: <&'a T as IntoIterator>::IntoIter,\n}\n\nimpl<'a, T> SqueneceBuffer<'a, T>\nwhere\n    &'a T: IntoIterator<Item = &'a u8>,\n{\n    fn new(sq: &'a T) -> Self {\n        Self {\n            iter: sq.into_iter(),\n        }\n    }\n\n    fn get(&mut self) -> Option<&'a u8> {\n        self.iter.next()\n    }\n}\n\n#[allow(dead_code)]\npub struct Helper<'a, T>\nwhere\n    &'a T: IntoIterator<Item = &'a u8>,\n{\n    buf: SqueneceBuffer<'a, T>,\n    unit: u8,\n    num: u8,\n    used_bit: u8,\n}\n\n#[allow(dead_code)]\nimpl<'a, T> Helper<'a, T>\nwhere\n    &'a T: IntoIterator<Item = &'a u8>,\n{\n    pub fn new(sq: &'a T) -> Self {\n        let mut result = Self {\n            buf: SqueneceBuffer::new(sq),\n            unit: 8,\n            num: 0,\n            used_bit: 0,\n        };\n        match result.update() {\n            true => result,\n            _ => panic!(\"the squenece can not be empty!\"),\n        }\n    }\n\n    fn update(&mut self) -> bool {\n        let nop = self.buf.get();\n        match nop {\n            Some(n) => {\n                self.num = *n;\n                self.used_bit = 0;\n                true\n            }\n            _ => false,\n        }\n    }\n\n    pub fn set_unit(&mut self, u: u8) {\n        if u > 32 || u == 0 {\n            panic!(\"the unit can neither be greater than 32 nor 0\")\n        }\n        self.unit = u;\n    }\n\n    pub fn get_num_by_bit(&mut self, bit: u8) -> GetResult {\n        if bit > 32 || bit == 0 {\n            return GetResult::Error;\n        }\n        let mut rest_bit = 8 - self.used_bit;\n        if rest_bit == 0 {\n            if self.update() {\n                rest_bit = 8\n            } else {\n                return GetResult::Fail;\n            }\n        }\n        let diff: i8 = bit as i8 - rest_bit as i8;\n        if diff <= 0 {\n            let num: u32 = (((0xff as u8 >> self.used_bit) & self.num) >> -diff as u8) as u32;\n            self.used_bit += bit;\n            return GetResult::Whole(num);\n        }\n        let mut slice: [Option<u8>; 4] = [None; 4];\n        slice[0] = Some((0xff as u8 >> self.used_bit) & self.num);\n        let mut result: u32 = slice[0].unwrap() as u32;\n        let mut bits = rest_bit;\n        let exp_bytes: u8 = (diff / 8) as u8;\n        let exp_bits: u8 = (diff % 8) as u8;\n        let mut i: u8 = 1;\n        while i <= exp_bytes {\n            if self.update() == false {\n                break;\n            }\n            slice[i as usize] = Some(self.num);\n            i += 1;\n        }\n        for j in &slice[1..] {\n            match j {\n                Some(n) => {\n                    result = (result << 8) + *n as u32;\n                    bits += 8;\n                }\n                _ => break,\n            }\n        }\n        self.used_bit = 8;\n        if i <= exp_bytes {\n            return GetResult::Semi(result, bits);\n        }\n        if exp_bits == 0 {\n            return GetResult::Whole(result);\n        }\n        if !self.update() {\n            return GetResult::Semi(result, bits);\n        }\n        result = (result << exp_bits as u32) + (self.num >> (8 - exp_bits as u32) as u8) as u32;\n        self.used_bit = exp_bits;\n        return GetResult::Whole(result);\n    }\n}\n\n#[allow(dead_code)]\n#[derive(Debug)]\npub enum GetResult {\n    Whole(u32),\n    Semi(u32, u8),\n    Fail,\n    Error,\n}\n\n// bug!!!\npub struct BitReaderWrapper<T>(T);\n\nimpl<'a, T> IntoIterator for &'a BitReaderWrapper<T> \nwhere\n    &'a T: IntoIterator<Item = &'a u8>,\n{\n    type Item = u32;\n\n    type IntoIter = Helper<'a, T>;\n\n    fn into_iter(self) -> Self::IntoIter {\n        Helper::new(&self.0)\n    }\n}\n\nimpl<'a, T> Iterator for Helper<'a, T>\nwhere\n    &'a T: IntoIterator<Item = &'a u8>,\n{\n    type Item = u32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        match self.get_num_by_bit(self.unit) {\n            GetResult::Error => panic!(\"can not read the data\"),\n            GetResult::Semi(result, _) => Some(result),\n            GetResult::Whole(result) => Some(result),\n            _ => None\n        }\n    }\n}\n\nfn main() {}\n\n```\n\n\n### Meta\n\n```[tasklist]\n### Tasks\n- [ ] error: internal compiler error: compiler/rustc_middle/src/ty/sty.rs:847:21: expected type for param #0.\n```\n\n\n\n<!--\nIf you're using the stable version of the compiler, you should also check if the\nbug also exists in the beta or nightly versions.\n-->\n\n`rustc --version --verbose`:\n```\nrustc 1.68.2 (9eb3afe9e 2023-03-27)\nbinary: rustc\ncommit-hash: 9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0\ncommit-date: 2023-03-27\nhost: x86_64-unknown-linux-gnu\nrelease: 1.68.2\nLLVM version: 15.0.6\n```\n\n### Error output\n\n```\nerror: internal compiler error: compiler/rustc_middle/src/ty/sty.rs:847:21: expected type for param #0 in [ReErased, BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<BitReaderWrapper<_>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]\n\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/compiler/rustc_errors/src/lib.rs:1609:9\nstack backtrace:\n   0:     0x7f784d9ac59a - std::backtrace_rs::backtrace::libunwind::trace::ha271a8a7e1f3d4ef\n                               at /rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x7f784d9ac59a - std::backtrace_rs::backtrace::trace_unsynchronized::h85739da0352c791a\n                               at /rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   ......\n 969:     0x7f784d9b9823 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h3205ec2d7fc232c5\n                               at /rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/library/alloc/src/boxed.rs:1988:9\n 970:     0x7f784d9b9823 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h3bb5daec8177f56b\n                               at /rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/library/alloc/src/boxed.rs:1988:9\n 971:     0x7f784d9b9823 - std::sys::unix::thread::Thread::new::thread_start::had7b8061e306bb5c\n                               at /rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/library/std/src/sys/unix/thread.rs:108:17\n 972:     0x7f784d871609 - start_thread\n                               at /build/glibc-SzIz7B/glibc-2.31/nptl/pthread_create.c:477:8\n 973:     0x7f784d794133 - clone\n                               at /build/glibc-SzIz7B/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95\n 974:                0x0 - <unknown>\n```\n\n<!--\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\n-->\n<details><summary><strong>Backtrace</strong></summary>\n<p>\n\n```\nquery stack during panic:\n#0 [typeck] type-checking `<impl at src/main.rs:39:1: 39:26>::new`\n#1 [typeck_item_bodies] type-checking all item bodies\n#2 [analysis] running analysis passes on this crate\nend of query stack\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/compiler/rustc_errors/src/lib.rs:1609:9\nstack backtrace:\n   0:     0x7f784d9ac59a - std::backtrace_rs::backtrace::libunwind::trace::ha271a8a7e1f3d4ef\n                               at /rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x7f784d9ac59a - std::backtrace_rs::backtrace::trace_unsynchronized::h85739da0352c791a\n                               at /rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n  ......\n 970:     0x7f784d794133 - clone\n                               at /build/glibc-SzIz7B/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95\n 971:                0x0 - <unknown>\n```\n\n</p>\n</details>\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"compiler-errors\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110131/timeline", "performed_via_github_app": null, "state_reason": "completed"}