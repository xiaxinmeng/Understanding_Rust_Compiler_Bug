{"url": "https://api.github.com/repos/rust-lang/rust/issues/54054", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54054/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54054/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54054/events", "html_url": "https://github.com/rust-lang/rust/issues/54054", "id": 358285878, "node_id": "MDU6SXNzdWUzNTgyODU4Nzg=", "number": 54054, "title": "Slow performance of std::iter::Rev with iterator adapters using std::iter::Iterator::nth()", "user": {"login": "koalatux", "id": 973758, "node_id": "MDQ6VXNlcjk3Mzc1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/973758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koalatux", "html_url": "https://github.com/koalatux", "followers_url": "https://api.github.com/users/koalatux/followers", "following_url": "https://api.github.com/users/koalatux/following{/other_user}", "gists_url": "https://api.github.com/users/koalatux/gists{/gist_id}", "starred_url": "https://api.github.com/users/koalatux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koalatux/subscriptions", "organizations_url": "https://api.github.com/users/koalatux/orgs", "repos_url": "https://api.github.com/users/koalatux/repos", "events_url": "https://api.github.com/users/koalatux/events{/privacy}", "received_events_url": "https://api.github.com/users/koalatux/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-08T11:03:29Z", "updated_at": "2019-08-31T13:28:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following example shows a benchmark of the iterator adapter `step_by()`. Once using `step_by()` directly on the range and once with a redirection via `rev()`.\r\n\r\n```rust\r\nuse test::Bencher;\r\n\r\n#[bench]\r\nfn bench_forward_skip(b: &mut Bencher) {\r\n    b.iter(|| (0..10001).step_by(100).sum::<i32>());\r\n}\r\n\r\n#[bench]\r\nfn bench_reverse_skip(b: &mut Bencher) {\r\n    b.iter(|| (0..10001).rev().step_by(100).sum::<i32>());\r\n}\r\n```\r\n\r\nRunning this benchmark with the current nightly shows these results:\r\n\r\n```\r\ntest tests::bench_forward_skip ... bench:         137 ns/iter (+/- 6)\r\ntest tests::bench_reverse_skip ... bench:       3,878 ns/iter (+/- 327)\r\n```\r\n\r\n`step_by()` makes use of `nth()` of the adapted iterator. A range provides an optimized version of `nth()`, but by using `rev()` we get to use the default implementation of `nth()`.\r\n\r\nWe should Extend `std::iter::DoubleEndedIterator` to provide a new method maybe `nth_back()` or `rnth()` with a default implementation which then can get adapted by `rev()`. Similar to the already existing `next_back()`, `try_rfold()`, `rfold()` and `rfind()`.\r\n\r\n**Update:**\r\n\r\n`nth_back()` has been merged in #56802. Types which have a specialized `nth()` and implement `DoubleEndedIterator` are candidates for a specialized `nth_back()`. The following list shows these candidates and their implementation status:\r\n\r\n- [x] Box (#59328)\r\n- [x] Bytes (#60023)\r\n- [X] Chain (#60492)\r\n- [X] Chunks (#61048)\r\n- [x] ChunksExact (#62064)\r\n- [X] ChunksExactMut (#63265)\r\n- [x] ChunksMut (#62074)\r\n- [X] &mut DoubleEndedIterator (#56802)\r\n- [x] Enumerate (#60023)\r\n- [x] Fuse _(default fn)_ (#60023)\r\n- [x] Fuse _(where FusedIterator)_ (#60023)\r\n- [x] slice::Iter _(defined by a macro)_ (#60772)\r\n- [x] slice::IterMut _(defined by a macro)_ (#60772)\r\n- [x] Range (#61671)\r\n- [x] RangeInclusive (#61671)\r\n- [X] RChunks (#60555)\r\n- [X] RChunksExact (#60555)\r\n- [X] RChunksExactMut (#60555)\r\n- [X] RChunksMut (#60555)\r\n- [X] Rev (#56802)\r\n- [x] Skip (#60454)\r\n- [X] Windows (#59328)\r\n- [ ] Zip (#60574)\r\n- [ ] Zip _(in ZipImpl default fn)_\r\n- [ ] Zip _(in ZipImpl where TrustedRandomAccess)_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54054/reactions", "total_count": 5, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 5, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54054/timeline", "performed_via_github_app": null, "state_reason": null}