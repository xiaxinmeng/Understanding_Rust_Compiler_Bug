{"url": "https://api.github.com/repos/rust-lang/rust/issues/90410", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90410/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90410/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90410/events", "html_url": "https://github.com/rust-lang/rust/issues/90410", "id": 1039972471, "node_id": "I_kwDOAAsO6M49_Lh3", "number": 90410, "title": "split_at family should return an Result", "user": {"login": "Stargateur", "id": 7503742, "node_id": "MDQ6VXNlcjc1MDM3NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7503742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stargateur", "html_url": "https://github.com/Stargateur", "followers_url": "https://api.github.com/users/Stargateur/followers", "following_url": "https://api.github.com/users/Stargateur/following{/other_user}", "gists_url": "https://api.github.com/users/Stargateur/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stargateur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stargateur/subscriptions", "organizations_url": "https://api.github.com/users/Stargateur/orgs", "repos_url": "https://api.github.com/users/Stargateur/repos", "events_url": "https://api.github.com/users/Stargateur/events{/privacy}", "received_events_url": "https://api.github.com/users/Stargateur/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-10-29T22:43:17Z", "updated_at": "2023-06-13T21:05:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "These function:\r\n\r\n- [`slice::split_at`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_at)\r\n- [`slice::split_at_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut)\r\n- [`str::split_at`](https://doc.rust-lang.org/std/primitive.str.html#method.split_at)\r\n- [`str::split_at_mut`](https://doc.rust-lang.org/std/primitive.str.html#method.split_at_mut)\r\n\r\nAre inconvenient to use, one need to check `len` (or be sure) then call `split_at()` that will also check `len`, first this can lead to bad asm https://github.com/rust-lang/rust/issues/74938 & https://github.com/rust-lang/rust/issues/30112. Then it's inelegant. This would be ok if these function would be unsafe, so not checking the len twice.\r\n\r\nThese function are better cause there return an `Option`:\r\n\r\n- [`slice::split_first`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_first)\r\n- [`slice::split_first_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_first_mut)\r\n- [`slice::split_last`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_last)\r\n- [`slice::split_last_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_last_mut)\r\n\r\nI propose we add the equivalent of `split_at` returning a `Result`\r\n\r\n```rust\r\nimpl slice {\r\n  fn split_at_mid(&self, mid: usize) -> Result<(&[T], &[T]), usize>;\r\n  fn split_at_mid_mut(&mut self, mid: usize) -> Result<(&mut [T], &mut [T]), usize>;\r\n}\r\n\r\nimpl str {\r\n  fn split_at_mid(&self, mid: usize) -> Result<(&str, &str), usize>;\r\n  fn split_at_mid_mut(&mut self, mid: usize) -> Result<(&mut str, &mut str), usize>;\r\n}\r\n```\r\n\r\nThe `Err` be `mid` or `len` (but we could imagine more precise error for example str could indicate char error boundary) or we keep it simple with `Option`\r\n\r\nBTW: We miss `split_first()` and `split_last()` on `str`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90410/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90410/timeline", "performed_via_github_app": null, "state_reason": null}