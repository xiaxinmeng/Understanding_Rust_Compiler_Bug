{"url": "https://api.github.com/repos/rust-lang/rust/issues/22090", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/22090/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/22090/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/22090/events", "html_url": "https://github.com/rust-lang/rust/issues/22090", "id": 56952265, "node_id": "MDU6SXNzdWU1Njk1MjI2NQ==", "number": 22090, "title": "#[derive(Foo)] on a parametrized struct only works if the type parameters implement Foo", "user": {"login": "nical", "id": 264854, "node_id": "MDQ6VXNlcjI2NDg1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/264854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nical", "html_url": "https://github.com/nical", "followers_url": "https://api.github.com/users/nical/followers", "following_url": "https://api.github.com/users/nical/following{/other_user}", "gists_url": "https://api.github.com/users/nical/gists{/gist_id}", "starred_url": "https://api.github.com/users/nical/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nical/subscriptions", "organizations_url": "https://api.github.com/users/nical/orgs", "repos_url": "https://api.github.com/users/nical/repos", "events_url": "https://api.github.com/users/nical/events{/privacy}", "received_events_url": "https://api.github.com/users/nical/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-08T13:54:29Z", "updated_at": "2015-02-09T17:27:06Z", "closed_at": "2015-02-09T17:27:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This has been bugging me for a while:\n\nTo guard yourself against mistakes, it's nice to use type aprameters to give a type signatures that depend on its unit, without having any actual members of type T in the structure. Example:\n\n```\n#[derive(Copy)]\npub struct Vector2D<T> {\n  pub x: f32,\n  pub y: f32,\n}\n```\n\nAnd make sure operators such as Add only work on vectors of the same space.\nOk, now the problem is that unless T also implements Copy, Vector2D<T> does not actually implement Copy.\n\n```\nfn foo<T>(a: Vector2D<T>) {\n  let b = a;\n  let c = a;\n  // ...\n}\n```\n\nThe compiler says:\n\n```\nerror: use of moved value: `a`\n`a` moved here because it has type `math::Vector2D<T>`, which is non-copyable\n```\n\nThis can be worked around by specifying that T must be Copy in the definiton of foo\n\n```\nfn foo<T: Copy>(a: Vector<T>) {\n```\n\nWhile this isn't a blocking issue, it is very confusing, since T is part of the type of Vector2D but isn't instanciated in the structure, so whether T implements copy should have no influence on whether Vector2D is copyable.\nThe error message doesn't help because it doesn't say anything about T which is what is apparently confusing the compiler. Instead it points to the structure Vector2D<T> which has derive(Foo) right next to it's definition.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/22090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/22090/timeline", "performed_via_github_app": null, "state_reason": "completed"}