{"url": "https://api.github.com/repos/rust-lang/rust/issues/58967", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58967/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58967/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58967/events", "html_url": "https://github.com/rust-lang/rust/issues/58967", "id": 417691540, "node_id": "MDU6SXNzdWU0MTc2OTE1NDA=", "number": 58967, "title": "Tracking Issue for `self-profile` minimum viable product", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1260714786, "node_id": "MDU6TGFiZWwxMjYwNzE0Nzg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-self-profile", "name": "A-self-profile", "color": "f7e101", "default": false, "description": "Area: Self-profiling feature of the compiler"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-06T09:00:09Z", "updated_at": "2020-01-16T16:07:52Z", "closed_at": "2020-01-16T16:07:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Goals** for the first usable iteration of `-Zself-profile` are:\r\n\r\n- Make the compiler track query invocations and other important function calls (e.g. LLVM related)\r\n  - This means tracking the query/function name (no query keys, arguments yet)\r\n- Reduce the overhead of tracking and profile generation as to not be prohibitive\r\n  - This means emitting events in an optimized binary format\r\n- Write a post-processing tool that generates an aggregated report from the raw event data\r\n  - The aggregated report is a table with one line per query/function and columns for \r\n    - total time spent in the query (in milliseconds)\r\n    - time spent in the query as percentage of total compile time\r\n    - number of query invocations\r\n    - percentage of in-memory cache hits\r\n    - percentage of incremental cache hits\r\n    - total time spent (milliseconds) in loading query results from incremental cache\r\n    - total time spent (milliseconds) blocked on concurrent query invocations\r\n- Re-enable self-profiling on perf.rlo, which includes\r\n    - running the postprocessing tool to generate the report for each test run\r\n    - adding a new comparison view that compares the test runs of a single benchmark and shows changes per query. This view is reachable by clicking on a benchmark in the regular comparison view (i.e. one can \"zoom\" into a given benchmark)\r\n- Document how self-profiling works in the [rustc-guide](https://github.com/rust-lang/rustc-guide).\r\n\r\n**Non-Goals** are:\r\n- Supporting self-profiling in 32-bit compilers -- this makes it easier to rely on things like memory mapped files\r\n- Tracking individual query keys/function arguments\r\n\r\n**Work packages** resulting from this set of goals are:\r\n\r\n- [x] Implement a library that takes care of reading and writing the binary event format\r\n  - See https://github.com/rust-lang/measureme/\r\n- [x] Make the compiler use the library to emit profiling data efficiently\r\n  - [x] Initial integration at https://github.com/rust-lang/rust/pull/59515\r\n  - [x] Implement \"event filtering\" in order to keep profiling overhead low in the common case. (#59915)\r\n  - [x] Add output directory argument to `-Zself-profile` (#61123)\r\n  - [x] Add a version header to profiler artifacts (https://github.com/rust-lang/measureme/issues/40)\r\n- [x] Implement a postprocessing tool (using the library) that generates the aggregated report (rust-lang/measureme#17)\r\n- [x] Make perf.rlo support self-profile:\r\n  - [x] run benchmarks with `-Zself-profile`\r\n  - [x] run postprocessing tool\r\n  - [x] store aggregated reports\r\n  - [x] implement the detailed comparison view \r\n  - [x] make the regular comparison view link to detailed views\r\n- [x] Review and make sure that we are tracking everything we are interested in. Things to check:\r\n  - [x] Pre-query passes (parsing, macro expansion, name resolution, HIR lowering, ...)\r\n  - [x] LLVM optimization passes\r\n  - [x] Metadata loading/decoding\r\n  - [x] ~~Trait selection~~ (removed this from the MVP for now)\r\n- [x] Document how self-profiling works in the [rustc-guide](https://github.com/rust-lang/rustc-guide).\r\n- [x] Polishing iteration\r\n  - [x] Write high-level crate docs for measureme (implemented in https://github.com/rust-lang/measureme/pull/68)\r\n  - [x] Detailed view should show \"percentage of total time\" column (https://github.com/rust-lang-nursery/rustc-perf/issues/523)\r\n  - [x] Show total sum line in table for the entire crate (https://github.com/rust-lang-nursery/rustc-perf/issues/525)\r\n  - [x] Make sorting more visible/accessible in the results table (https://github.com/rust-lang-nursery/rustc-perf/issues/526)\r\n  - [x] It's unclear what the \"invocations\" and \"cache misses\" columns in the detailed view are exactly. (https://github.com/rust-lang-nursery/rustc-perf/issues/529)\r\n  - [x] Resolve a bug in the sum for `incr. loading time` column (https://github.com/rust-lang-nursery/rustc-perf/issues/527)\r\n  - [x] Clean up self-time computation in `summarize` (https://github.com/rust-lang/measureme/issues/75)\r\n\r\n**Possible Problems** that might arise are:\r\n- Profiling overhead keeps being too high - then we need to think about doing separate `self-profile` runs on perf.rlo\r\n\r\ncc @wesleywiser @Mark-Simulacrum ", "closed_by": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58967/reactions", "total_count": 4, "+1": 0, "-1": 0, "laugh": 0, "hooray": 4, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58967/timeline", "performed_via_github_app": null, "state_reason": "completed"}