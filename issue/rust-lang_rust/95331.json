{"url": "https://api.github.com/repos/rust-lang/rust/issues/95331", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95331/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95331/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95331/events", "html_url": "https://github.com/rust-lang/rust/issues/95331", "id": 1181769148, "node_id": "I_kwDOAAsO6M5GcF28", "number": 95331, "title": "Confusing \"the parameter type `Self` may not live long enough\" error with dyn HRTB callback taking GAT", "user": {"login": "Kestrer", "id": 38139193, "node_id": "MDQ6VXNlcjM4MTM5MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/38139193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kestrer", "html_url": "https://github.com/Kestrer", "followers_url": "https://api.github.com/users/Kestrer/followers", "following_url": "https://api.github.com/users/Kestrer/following{/other_user}", "gists_url": "https://api.github.com/users/Kestrer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kestrer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kestrer/subscriptions", "organizations_url": "https://api.github.com/users/Kestrer/orgs", "repos_url": "https://api.github.com/users/Kestrer/repos", "events_url": "https://api.github.com/users/Kestrer/events{/privacy}", "received_events_url": "https://api.github.com/users/Kestrer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 3307663436, "node_id": "MDU6TGFiZWwzMzA3NjYzNDM2", "url": "https://api.github.com/repos/rust-lang/rust/labels/GATs-triaged", "name": "GATs-triaged", "color": "e88000", "default": false, "description": "Issues using the `generic_associated_types` feature that have been triaged"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-03-26T13:34:02Z", "updated_at": "2022-05-08T13:16:15Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\ntrait FooBad {\r\n    type Item<'a>;\r\n    fn items(walker: &mut dyn for<'a> FnMut(Self::Item<'a>));\r\n}\r\n```\r\n\r\nI expected to see this happen: No error.\r\n\r\nInstead, this happened:\r\n\r\n```\r\nerror[E0311]: the parameter type `Self` may not live long enough\r\n --> src/main.rs:5:22\r\n  |\r\n5 |     fn items(walker: &mut dyn for<'a> FnMut(Self::Item<'a>));\r\n  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\nnote: the parameter type `Self` must be valid for the anonymous lifetime defined here...\r\n --> src/main.rs:5:22\r\n  |\r\n5 |     fn items(walker: &mut dyn for<'a> FnMut(Self::Item<'a>));\r\n  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...so that the reference type `&mut dyn for<'a> FnMut(<Self as FooBad>::Item<'a>)` does not outlive the data it points at\r\n --> src/main.rs:5:22\r\n  |\r\n5 |     fn items(walker: &mut dyn for<'a> FnMut(Self::Item<'a>));\r\n  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\n<details>\r\n<summary>Outdated information</summary>\r\nThe strange thing is that this alternative version, which should in theory be totally identical, works fine:\r\n\r\n```rs\r\ntrait FooGood {\r\n    type Item<'a>;\r\n    fn items(walker: &mut dyn ItemWalker<Self>);\r\n}\r\n\r\ntrait ItemWalker<T: ?Sized + FooGood>: for<'a> FnMut(T::Item<'a>) {}\r\nimpl<T: ?Sized + FooGood, F: ?Sized> ItemWalker<T> for F where F: for<'a> FnMut(T::Item<'a>) {}\r\n```\r\n\r\nEdit: I later realized that this isn't totally identical at all, because `dyn ItemWalker<T>` and `dyn ItemWalker<U>` would not be considered the same type even if `T` and `U` have identical `Item` types. So it's not so easy to work around.\r\n</details>\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.61.0-nightly (d53246fed 2022-03-25)\r\nbinary: rustc\r\ncommit-hash: d53246fedde4c193eae8a003546a8f0f9f85d223\r\ncommit-date: 2022-03-25\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.61.0-nightly\r\nLLVM version: 14.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95331/timeline", "performed_via_github_app": null, "state_reason": null}