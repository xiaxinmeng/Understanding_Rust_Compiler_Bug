{"url": "https://api.github.com/repos/rust-lang/rust/issues/39786", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39786/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39786/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39786/events", "html_url": "https://github.com/rust-lang/rust/issues/39786", "id": 207238466, "node_id": "MDU6SXNzdWUyMDcyMzg0NjY=", "number": 39786, "title": "library metadata is build path dependant and so not portable", "user": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 602425123, "node_id": "MDU6TGFiZWw2MDI0MjUxMjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-dev-tools", "name": "T-dev-tools", "color": "bfd4f2", "default": false, "description": "Relevant to the dev-tools subteam, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-13T14:48:05Z", "updated_at": "2018-04-07T17:03:14Z", "closed_at": "2018-04-07T17:03:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nAt OpenBSD, we are facing a packaging problem that seems to be related to the way library filename (and metadata hash) is builded.\r\n\r\nThe metadata (and the filename, as it is `{filename}-{target_metadata}`) is constructed by hashing using several parameters to ensuring an unique name reflecting compatibility.\r\n\r\nPer se, it is cargo that construct the metadata information (see [target_metadata() function](https://github.com/rust-lang/cargo/blob/master/src/cargo/ops/cargo_rustc/context.rs#L368)). But as it affects rustc packaging, I prefer to open an issue against rustc.\r\n\r\nThe metadata hash is based on several components.\r\n\r\nHere an debug output of some elements of these components (output based on local patch of cargo, used when building rustc):\r\n\r\n```\r\npackage_id=PackageId {\r\n  name: \"std_shim\",\r\n  version: \"0.1.0\",\r\n  source: \"file:///home/semarie/ports/pobj/rust-1.15.1/rustc-1.15.1-src/src/rustc/std_shim\"\r\n}\r\n\r\nprofile=Profile {\r\n  opt_level: \"2\",\r\n  lto: false,\r\n  codegen_units: None,\r\n  rustc_args: None,\r\n  rustdoc_args: None,\r\n  debuginfo: false,\r\n  debug_assertions: false,\r\n  rpath: false,\r\n  test: false,\r\n  doc: false,\r\n  run_custom_build: false,\r\n  check: false,\r\n  panic: None\r\n}\r\n\r\ntarget.name=\"std_shim\"\r\ntarget.kind=Lib([Lib])\r\n```\r\n\r\nThe `PackageId` contains elements related to the build host configuration: the full path of the source tree used at build-time. It should be at least the relative path.\r\n\r\nAdditionally `profile` could included several informations related to the host that build the library but not about the library itself, like `rustc_args`, or `codegen_units` which is a LLVM parameter that shouldn't influence the library compatibility.\r\n\r\nPer se, it is a portability issue: the metadata information shouldn't depend on information that Rust doesn't control (and the full path of the build directory isn't controlled).\r\n\r\nOpenBSD exposes the problem because as the build of package is based on work of voluntary persons (openbsd developers), build hosts aren't necessary homogeneous regarding the build environment (build path could vary). It makes filename of libraries (which include the metadata information) to differ from one build to another, and so we are unable to package it properly.\r\n\r\nI assume the metadata hash should be constructed with *some* elements from `packageid` or `profile` but not from all. Or a preprocessing should be done on elements that could contains pathnames in order to exclude the build directory part from it (and rely only on rust-owned stuff).\r\n\r\nI would also point that some discussion about it occurs on #rust-internals.", "closed_by": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39786/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39786/timeline", "performed_via_github_app": null, "state_reason": "completed"}