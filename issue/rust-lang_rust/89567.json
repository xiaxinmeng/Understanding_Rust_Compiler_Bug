{"url": "https://api.github.com/repos/rust-lang/rust/issues/89567", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89567/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89567/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89567/events", "html_url": "https://github.com/rust-lang/rust/issues/89567", "id": 1016613316, "node_id": "I_kwDOAAsO6M48mEnE", "number": 89567, "title": "Diagnostics: confusing terminology when moves occur due to `?` operator", "user": {"login": "ogham", "id": 503760, "node_id": "MDQ6VXNlcjUwMzc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/503760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogham", "html_url": "https://github.com/ogham", "followers_url": "https://api.github.com/users/ogham/followers", "following_url": "https://api.github.com/users/ogham/following{/other_user}", "gists_url": "https://api.github.com/users/ogham/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogham/subscriptions", "organizations_url": "https://api.github.com/users/ogham/orgs", "repos_url": "https://api.github.com/users/ogham/repos", "events_url": "https://api.github.com/users/ogham/events{/privacy}", "received_events_url": "https://api.github.com/users/ogham/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-05T17:47:21Z", "updated_at": "2021-10-05T17:49:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was assisting someone new to Rust and they were confused by an error message. I've simplified the code for this issue but the error message is exactly the same. This is the code they had written:\r\n\r\n```rust\r\nuse std::fs;\r\nuse std::io;\r\n\r\nfn main() -> io::Result<()> {\r\n    for entry in fs::read_dir(\".\")? {\r\n        let file_type = entry?.file_type()?;\r\n        if file_type.is_dir() {\r\n            dbg!(entry?.file_name());\r\n        }\r\n    }\r\n    \r\n    Ok(())\r\n}\r\n```\r\n\r\nUsing rustc 1.55.0 (c8dfcfe04 2021-09-06) and rustc 1.57.0-nightly (f03eb6bef 2021-10-02), the compiler outputs the following error ([playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=9b6a02fee7cd7cebbb2fb34b5018a26c)):\r\n\r\n```\r\nerror[E0382]: use of moved value: `entry`\r\n   --> src/main.rs:8:18\r\n    |\r\n5   |     for entry in fs::read_dir(\".\")? {\r\n    |         ----- move occurs because `entry` has type `Result<DirEntry, std::io::Error>`, which does not implement the `Copy` trait\r\n6   |         let file_type = entry?.file_type()?;\r\n    |                         ------ `entry` moved due to this method call\r\n7   |         if file_type.is_dir() {\r\n8   |             dbg!(entry?.file_name());\r\n    |                  ^^^^^ value used here after move\r\n    |\r\nnote: this function takes ownership of the receiver `self`, which moves `entry`\r\n\r\nFor more information about this error, try `rustc --explain E0382`.\r\n```\r\n\r\nThis error message is correct \u2014 `entry?` on line 6 moves `entry`, so it can't be used again on line 8. However, we had trouble interpreting it.\r\n\r\nThe first part of the hint (\"`entry` moved due to this method call\") was misunderstood to mean that it was the `file_type()` method call that was moving the value, rather than the `?` operator. I don't personally think of `?` as a \"method call\", nor a \"function\", though I can see why the compiler thinks of it as one. Unlike the `try!` macro, though, you can't easily view the expanded version of the code to see if there's a method call or a function under the hood.\r\n\r\nSecondly, the wording of the note tripped us up too: \"this function\" was misunderstood to refer to `main`, which doesn't even use `self` anywhere, rather than `?`. I've seen this note a bunch of times before, and I know what it means, but for some reason having almost all of the `main` function's code on the screen made me think it referred to `main` itself!\r\n\r\nI think more specific error messages for when `?` moves a value would be useful here, maybe something like \"some_variable moved due to use of `?` operator\" and \"the `?` operator takes ownership of the receiver `self`, which moves some_variable\".", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89567/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89567/timeline", "performed_via_github_app": null, "state_reason": null}