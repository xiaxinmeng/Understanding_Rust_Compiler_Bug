{"url": "https://api.github.com/repos/rust-lang/rust/issues/68208", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68208/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68208/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68208/events", "html_url": "https://github.com/rust-lang/rust/issues/68208", "id": 549400539, "node_id": "MDU6SXNzdWU1NDk0MDA1Mzk=", "number": 68208, "title": "Overhead of core::sync::atomic::* primitives in dev builds", "user": {"login": "therealprof", "id": 3321888, "node_id": "MDQ6VXNlcjMzMjE4ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3321888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/therealprof", "html_url": "https://github.com/therealprof", "followers_url": "https://api.github.com/users/therealprof/followers", "following_url": "https://api.github.com/users/therealprof/following{/other_user}", "gists_url": "https://api.github.com/users/therealprof/gists{/gist_id}", "starred_url": "https://api.github.com/users/therealprof/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/therealprof/subscriptions", "organizations_url": "https://api.github.com/users/therealprof/orgs", "repos_url": "https://api.github.com/users/therealprof/repos", "events_url": "https://api.github.com/users/therealprof/events{/privacy}", "received_events_url": "https://api.github.com/users/therealprof/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 880020421, "node_id": "MDU6TGFiZWw4ODAwMjA0MjE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-embedded", "name": "WG-embedded", "color": "c2e0c6", "default": false, "description": "Of interest to the embedded Working Group"}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-14T08:08:22Z", "updated_at": "2020-04-06T23:36:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The primitives provided by `core::sync::atomic` come with a binary overhead in dev builds which also partly contradicts the documentation, e.g. `compiler_fence` states: \r\n\r\n> compiler_fence does not emit any machine code\r\n\r\nHowever when we compile trivial program for an embedded target:\r\n```\r\n#![no_main]\r\n#![no_std]\r\n\r\nuse panic_halt as _;\r\nuse cortex_m_rt::entry;\r\n\r\n#[entry]\r\nfn main() -> ! {\r\n    loop {\r\n        continue;\r\n    }\r\n}\r\n```\r\n\r\ne.g. for `thumbv6m-none-eabi` we can observe that we not only get one but two `compiler_fence` instances:\r\n\r\n```\r\nAnalyzing target/thumbv6m-none-eabi/debug/examples/empty\r\n\r\nFile  .text Size       Crate Name\r\n0.1%  11.3%  74B cortex_m_rt r0::init_data\r\n0.0%   9.8%  64B cortex_m_rt core::sync::atomic::compiler_fence\r\n0.0%   9.8%  64B  panic_halt core::sync::atomic::compiler_fence\r\n0.0%   8.6%  56B cortex_m_rt r0::zero_bss\r\n0.0%   7.3%  48B cortex_m_rt Reset\r\n0.0%   6.4%  42B cortex_m_rt core::ptr::read\r\n0.0%   5.5%  36B         std core::panicking::panic\r\n0.0%   4.3%  28B   [Unknown] __aeabi_memcpy4\r\n0.0%   4.3%  28B         std core::panicking::panic_fmt\r\n0.0%   4.0%  26B cortex_m_rt core::intrinsics::copy_nonoverlapping\r\n0.0%   3.4%  22B cortex_m_rt core::ptr::<impl *const T>::offset\r\n0.0%   3.4%  22B cortex_m_rt core::ptr::<impl *mut T>::offset\r\n0.0%   3.1%  20B cortex_m_rt HardFault_\r\n0.0%   3.1%  20B  panic_halt rust_begin_unwind\r\n0.0%   2.8%  18B cortex_m_rt DefaultHandler_\r\n0.0%   2.8%  18B   [Unknown] __aeabi_memcpy\r\n0.0%   2.4%  16B cortex_m_rt core::ptr::write\r\n0.0%   2.4%  16B cortex_m_rt core::ptr::write_volatile\r\n0.0%   2.4%  16B         std <T as core::any::Any>::type_id\r\n0.0%   1.8%  12B cortex_m_rt core::mem::zeroed\r\n0.0%   0.6%   4B   [Unknown] main\r\n0.0%   0.3%   2B cortex_m_rt DefaultPreInit\r\n0.0%   0.3%   2B         std core::ptr::real_drop_in_place\r\n0.5% 100.0% 654B             .text section size, the file size is 127.6KiB\r\n```\r\n\r\nwhich amount to nearly 20% of the code size plus two instances of the panic message plus the formatting machinery which would not be needed otherwise.\r\n\r\nIn #68155 I've tried to coerce the compiler into fully inlining the code, especially since the argument (as I would imagine is pretty much always the case) is a constant. But as suspected by @rkruppe and @jonas-schievink, this does not have the intended effect.\r\n\r\nAs noted in the PR replacing the `panic!` by a unit type helps somewhat (and one could argue that a \"lazy\" compiler fence is pretty much equal to doing nothing and should not panic at runtime) but it would be better if we could somehow insure that the `compiler_fence` really only turns into a compiler hint and not a function call.\r\n\r\nIf we cannot ensure that a `compiler_fence` actually turns into nothing, would it be acceptable to also expose the various fence types directly via functions?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68208/timeline", "performed_via_github_app": null, "state_reason": null}