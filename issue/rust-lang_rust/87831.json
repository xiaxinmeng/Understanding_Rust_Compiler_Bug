{"url": "https://api.github.com/repos/rust-lang/rust/issues/87831", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87831/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87831/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87831/events", "html_url": "https://github.com/rust-lang/rust/issues/87831", "id": 963031707, "node_id": "MDU6SXNzdWU5NjMwMzE3MDc=", "number": 87831, "title": "Inconsistent treatment of different kinds of trait bounds with GATs", "user": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 3307663436, "node_id": "MDU6TGFiZWwzMzA3NjYzNDM2", "url": "https://api.github.com/repos/rust-lang/rust/labels/GATs-triaged", "name": "GATs-triaged", "color": "e88000", "default": false, "description": "Issues using the `generic_associated_types` feature that have been triaged"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-08-06T20:38:03Z", "updated_at": "2021-10-16T05:41:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\ntrait Collection {\r\n    type Iter<'a>: IntoIterator\r\n    where\r\n        <Self::Iter<'a> as IntoIterator>::Item: std::fmt::Debug;\r\n}\r\n```\r\n\r\nThis fails to compile with:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: the trait bound `<Self as Collection>::Iter<'a>: IntoIterator` is not satisfied\r\n --> src/lib.rs:4:5\r\n  |\r\n4 | /     type Iter<'a>: IntoIterator\r\n5 | |     where\r\n6 | |         <Self::Iter<'a> as IntoIterator>::Item: std::fmt::Debug;\r\n  | |________________________________________________________________^ the trait `IntoIterator` is not implemented for `<Self as Collection>::Iter<'a>`\r\n  |\r\nhelp: consider further restricting the associated type\r\n  |\r\n3 | trait Collection where <Self as Collection>::Iter<'a>: IntoIterator {\r\n  |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0277]: the trait bound `<Self as Collection>::Iter<'a>: IntoIterator` is not satisfied\r\n   --> src/lib.rs:4:20\r\n    |\r\n4   |       type Iter<'a>: IntoIterator\r\n    |                      ^^^^^^^^^^^^ the trait `IntoIterator` is not implemented for `<Self as Collection>::Iter<'a>`\r\n    |\r\nhelp: consider further restricting the associated type\r\n    |\r\n3   | trait Collection where <Self as Collection>::Iter<'a>: IntoIterator {\r\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to 2 previous errors\r\n```\r\n\r\n[Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=08b8ddfa747edd9690e7b0853446422f)\r\n\r\n`aka/rrevenantt` on Discord discovered the following workaround, which to me seems like it should be treated the same as above. The only difference is the location of the bound - one using \"inheritance style\", the other as part of a where clause:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\ntrait Collection {\r\n    type Iter<'a>\r\n    where\r\n        Self::Iter<'a>: IntoIterator,\r\n        <Self::Iter<'a> as IntoIterator>::Item: std::fmt::Debug;\r\n}\r\n```\r\n\r\nIt's worth noting that the same issue exists without GATs. But `where` clauses on associated types are also feature gated under `generic_associated_types`.\r\n\r\nThis fails to compile:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\ntrait Collection {\r\n    type Iter: IntoIterator\r\n    where\r\n        <Self::Iter as IntoIterator>::Item: std::fmt::Debug;\r\n}\r\n```\r\n\r\nHowever this works on stable (lifting the bound to the trait itself):\r\n\r\n```rust\r\ntrait Collection\r\nwhere\r\n    <Self::Iter as IntoIterator>::Item: std::fmt::Debug,\r\n{\r\n    type Iter: IntoIterator;\r\n}\r\n\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87831/timeline", "performed_via_github_app": null, "state_reason": null}