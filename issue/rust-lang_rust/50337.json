{"url": "https://api.github.com/repos/rust-lang/rust/issues/50337", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50337/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50337/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50337/events", "html_url": "https://github.com/rust-lang/rust/issues/50337", "id": 318816269, "node_id": "MDU6SXNzdWUzMTg4MTYyNjk=", "number": 50337, "title": "improve `newtype_index!` macro", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-04-30T08:24:17Z", "updated_at": "2018-09-08T14:16:33Z", "closed_at": "2018-09-08T14:16:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We have this [handy macro `newtype_index!`](https://github.com/rust-lang/rust/blob/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src/librustc_data_structures/indexed_vec.rs#L45) that creates a, well, newtype'd index:\r\n\r\n```rust\r\nnewtype_index!(RegionAtLocationIndex { DEBUG_FORMAT = \"RegionAtLocationIndex({})\" });\r\n```\r\n\r\nHowever, I think it could be improved in four ways:\r\n\r\n**First,** the syntax should change to include the keyword `struct` and `pub`. This would help with people trying to find the definition of the type. I'd probably switch to `{}` form at the same time, but that's not *necessary*:\r\n\r\n```rust\r\nnewtype_index! {\r\n  pub struct RegionAtLocationIndex { DEBUG_FORMAT = \"RegionAtLocationIndex({})\" }\r\n}\r\n```\r\n\r\n**Second,** doing this would also allow us to support arbitrary visibilities. For example, I'd like to make `crate struct RegionAtLocationIndex`:\r\n\r\n```rust\r\nnewtype_index! {\r\n  crate struct RegionAtLocationIndex { DEBUG_FORMAT = \"RegionAtLocationIndex({})\" }\r\n}\r\n```\r\n\r\n**Third,** we should change to incorporate `NonZero`. That is, the original example would [currently expands to something like](https://github.com/rust-lang/rust/blob/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src/librustc_data_structures/indexed_vec.rs#L76):\r\n\r\n```rust\r\npub struct RegionAtLocationIndex(u32);\r\n```\r\n\r\nbut I want it to expand to:\r\n\r\n[`NonZero`]: https://doc.rust-lang.org/core/nonzero/struct.NonZero.html\r\n\r\n```\r\npub struct RegionAtLocationIndex { non_zero: NonZero<u32> }\r\n```\r\n\r\nOf course, `0` is a valid index, so the [various initialization and accessor routines would have to add or subtract one](https://github.com/rust-lang/rust/blob/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src/librustc_data_structures/indexed_vec.rs#L78-L89) as appropriate. \r\n\r\nUsing `NonZero` would mean that `Option<T>` would be represented still as a single u32.\r\n\r\nFinally, **fourth**, as a convenience, it would be nice to define *inherent* (non-trait) methods, so that using these types did not require importing the `Idx` trait:\r\n\r\n```rust\r\n        impl $type {\r\n            #[inline]\r\n            fn new(value: usize) -> Self {..}\r\n            #[inline]\r\n            fn index(self) -> usize {..}\r\n        }\r\n```\r\n\r\ncc @Nashenas88 @spastorino @sgrif \r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50337/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50337/timeline", "performed_via_github_app": null, "state_reason": "completed"}