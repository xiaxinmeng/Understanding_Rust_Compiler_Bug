{"url": "https://api.github.com/repos/rust-lang/rust/issues/54149", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54149/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54149/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54149/events", "html_url": "https://github.com/rust-lang/rust/issues/54149", "id": 359358979, "node_id": "MDU6SXNzdWUzNTkzNTg5Nzk=", "number": 54149, "title": "Trait bounds on associated types of subtraits don't work correctly", "user": {"login": "sicking", "id": 1831914, "node_id": "MDQ6VXNlcjE4MzE5MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1831914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sicking", "html_url": "https://github.com/sicking", "followers_url": "https://api.github.com/users/sicking/followers", "following_url": "https://api.github.com/users/sicking/following{/other_user}", "gists_url": "https://api.github.com/users/sicking/gists{/gist_id}", "starred_url": "https://api.github.com/users/sicking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sicking/subscriptions", "organizations_url": "https://api.github.com/users/sicking/orgs", "repos_url": "https://api.github.com/users/sicking/repos", "events_url": "https://api.github.com/users/sicking/events{/privacy}", "received_events_url": "https://api.github.com/users/sicking/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-12T07:58:42Z", "updated_at": "2021-02-02T17:48:11Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "[The following code does not compile](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=829bebed200dce6ba96c8aa95c33bec4):\r\n\r\n```rust\r\ntrait MyTrait1 {\r\n    type X;\r\n    fn get_val(&self) -> Self::X;\r\n}\r\n\r\ntrait MyTrait2: MyTrait1 where <Self as MyTrait1>::X: Into<u32> {}\r\n\r\nstruct MyStruct(u32);\r\n\r\nimpl MyTrait1 for MyStruct {\r\n    type X = u32;\r\n    fn get_val(&self) -> Self::X { self.0 }\r\n}\r\nimpl MyTrait2 for MyStruct {}\r\n\r\nfn myfunc<T: MyTrait2>(v: &T) {\r\n    println!(\"{}\", Into::<u32>::into(v.get_val()));\r\n}\r\n\r\nfn main() {\r\n    let s = MyStruct(10);\r\n    myfunc(&s);\r\n}\r\n```\r\n\r\nIt fails with\r\n\r\n```\r\nerror[E0277]: the trait bound `u32: std::convert::From<<T as MyTrait1>::X>` is not satisfied\r\n  --> src/main.rs:16:1\r\n   |\r\n16 | / fn myfunc<T: MyTrait2>(v: &T) {\r\n17 | |     println!(\"{}\", Into::<u32>::into(v.get_val()));\r\n18 | | }\r\n   | |_^ the trait `std::convert::From<<T as MyTrait1>::X>` is not implemented for `u32`\r\n   |\r\n   = help: consider adding a `where u32: std::convert::From<<T as MyTrait1>::X>` bound\r\n   = note: required because of the requirements on the impl of `std::convert::Into<u32>` for `<T as MyTrait1>::X`\r\nnote: required by `MyTrait2`\r\n  --> src/main.rs:6:1\r\n   |\r\n6  | trait MyTrait2: MyTrait1 where <Self as MyTrait1>::X: Into<u32> {}\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nIn fact, I haven't been able to come up with **any** syntax for `myfunc` which uses a trait bound using `MyTrait2` that will compile once the trait bound `X` exists.\r\n\r\nChanging the declaration of `MyTrait2` to `trait MyTrait2: MyTrait1<X=u32> {}` does work, so it's clearly possible for super traits to put constraints on the associated types of subtraits. However I've only been able to create constraints that require the associated types to be of a particular type, not to require that they implement particular traits. I also tried `trait MyTrait2: MyTrait1<X: Into<u32>> {}`, however that just yielded a syntax error.\r\n\r\nIt's quite possible that I'm misunderstanding the meaning of the syntax in the original example above, and that I should create an RFC for supporting what I'm trying to accomplish above.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54149/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54149/timeline", "performed_via_github_app": null, "state_reason": null}