{"url": "https://api.github.com/repos/rust-lang/rust/issues/62708", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62708/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62708/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62708/events", "html_url": "https://github.com/rust-lang/rust/issues/62708", "id": 468415095, "node_id": "MDU6SXNzdWU0Njg0MTUwOTU=", "number": 62708, "title": "ICE using associated constant in generic type", "user": {"login": "Michael-F-Bryan", "id": 17380079, "node_id": "MDQ6VXNlcjE3MzgwMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/17380079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Michael-F-Bryan", "html_url": "https://github.com/Michael-F-Bryan", "followers_url": "https://api.github.com/users/Michael-F-Bryan/followers", "following_url": "https://api.github.com/users/Michael-F-Bryan/following{/other_user}", "gists_url": "https://api.github.com/users/Michael-F-Bryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Michael-F-Bryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Michael-F-Bryan/subscriptions", "organizations_url": "https://api.github.com/users/Michael-F-Bryan/orgs", "repos_url": "https://api.github.com/users/Michael-F-Bryan/repos", "events_url": "https://api.github.com/users/Michael-F-Bryan/events{/privacy}", "received_events_url": "https://api.github.com/users/Michael-F-Bryan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1405345617, "node_id": "MDU6TGFiZWwxNDA1MzQ1NjE3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lazy-normalization", "name": "A-lazy-normalization", "color": "f7e101", "default": false, "description": "Area: lazy normalization (tracking issue: #60471)"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}, {"id": 2345070748, "node_id": "MDU6TGFiZWwyMzQ1MDcwNzQ4", "url": "https://api.github.com/repos/rust-lang/rust/labels/const-generics-fixed-by-const_generics", "name": "const-generics-fixed-by-const_generics", "color": "3f5dca", "default": false, "description": "A bug that has been fixed once `const_generics` is enabled."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-16T02:28:00Z", "updated_at": "2020-12-30T11:58:04Z", "closed_at": "2020-12-30T11:58:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to use an associated constant when telling `arrayvec::ArrayVec` how big the underlying array should be and encountered an ICE while running the following code:\r\n\r\n```rust\r\nuse arrayvec::ArrayVec;\r\n\r\npub struct MultiDriver<D: ?Sized> {\r\n    drivers: ArrayVec<[Driver<D>; MultiDriver::<D>::MAX_DRIVERS]>,\r\n}\r\n\r\nimpl<D: ?Sized> MultiDriver<D> {\r\n    pub const MAX_DRIVERS: usize = 10;\r\n\r\n    pub fn new() -> MultiDriver<D> {\r\n        MultiDriver {\r\n            drivers: ArrayVec::new(),\r\n        }\r\n    }\r\n\r\n    pub fn push_driver(&mut self, driver: Driver<D>) {\r\n        self.drivers.push(driver);\r\n    }\r\n}\r\n\r\nstruct Driver<D>(D);\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=880487b49337cdb59010599586a814bb))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: internal compiler error: src/librustc/ty/subst.rs:557: type parameter `D/#0` (D/0) out of range when substituting (root type=Some(D)) substs=[]\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:584:9\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:47\r\n   3: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:36\r\n   4: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:200\r\n   5: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:214\r\n   6: rustc::util::common::panic_hook\r\n   7: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:481\r\n   8: std::panicking::begin_panic\r\n   9: rustc_errors::Handler::span_bug\r\n  10: rustc::util::bug::opt_span_bug_fmt::{{closure}}\r\n  11: rustc::ty::context::tls::with_opt::{{closure}}\r\n  12: rustc::ty::context::tls::with_context_opt\r\n  13: rustc::ty::context::tls::with_opt\r\n  14: rustc::util::bug::opt_span_bug_fmt\r\n  15: rustc::util::bug::span_bug_fmt\r\n  16: <rustc::ty::subst::SubstFolder as rustc::ty::fold::TypeFolder>::fold_ty\r\n  17: <smallvec::SmallVec<A> as core::iter::traits::collect::FromIterator<<A as smallvec::Array>::Item>>::from_iter\r\n  18: rustc::ty::fold::TypeFoldable::fold_with\r\n  19: rustc::traits::codegen::<impl rustc::ty::context::TyCtxt>::subst_and_normalize_erasing_regions\r\n  20: rustc_mir::interpret::eval_context::InterpCx<M>::resolve\r\n  21: rustc_mir::interpret::operand::<impl rustc_mir::interpret::eval_context::InterpCx<M>>::eval_const_to_op\r\n  22: rustc_mir::interpret::step::<impl rustc_mir::interpret::eval_context::InterpCx<M>>::run\r\n  23: rustc_mir::const_eval::eval_body_using_ecx\r\n  24: rustc_mir::const_eval::const_eval_raw_provider\r\n  25: rustc::ty::query::__query_compute::const_eval_raw\r\n  26: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::const_eval_raw>::compute\r\n  27: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  28: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  29: rustc_mir::const_eval::const_eval_provider\r\n  30: rustc::ty::query::__query_compute::const_eval\r\n  31: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::const_eval>::compute\r\n  32: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  33: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  34: <rustc::traits::project::AssocTypeNormalizer as rustc::ty::fold::TypeFolder>::fold_const\r\n  35: rustc::ty::structural_impls::<impl rustc::ty::fold::TypeFoldable for &rustc::ty::TyS>::super_fold_with\r\n  36: <rustc::traits::project::AssocTypeNormalizer as rustc::ty::fold::TypeFolder>::fold_ty\r\n  37: <smallvec::SmallVec<A> as core::iter::traits::collect::FromIterator<<A as smallvec::Array>::Item>>::from_iter\r\n  38: rustc::ty::fold::TypeFoldable::fold_with\r\n  39: rustc::ty::structural_impls::<impl rustc::ty::fold::TypeFoldable for &rustc::ty::TyS>::super_fold_with\r\n  40: <rustc::traits::project::AssocTypeNormalizer as rustc::ty::fold::TypeFolder>::fold_ty\r\n  41: rustc::traits::project::normalize\r\n  42: rustc_typeck::check::FnCtxt::normalize_associated_types_in\r\n  43: <core::iter::adapters::Map<I,F> as core::iter::traits::iterator::Iterator>::fold\r\n  44: rustc::ty::context::GlobalCtxt::enter_local\r\n  45: rustc_typeck::check::wfcheck::check_item_well_formed\r\n  46: rustc::ty::query::__query_compute::check_item_well_formed\r\n  47: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::check_item_well_formed>::compute\r\n  48: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  49: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  50: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  51: std::panicking::try::do_call\r\n  52: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:82\r\n  53: rustc_data_structures::sync::par_for_each_in\r\n  54: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:82\r\n  55: rustc::hir::Crate::par_visit_all_item_likes\r\n  56: rustc::util::common::time\r\n  57: rustc_typeck::check_crate\r\n  58: rustc_interface::passes::analysis\r\n  59: rustc::ty::query::__query_compute::analysis\r\n  60: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  61: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  62: rustc_interface::passes::BoxedGlobalCtxt::access::{{closure}}\r\n  63: rustc_interface::passes::create_global_ctxt::{{closure}}\r\n  64: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  65: std::thread::local::LocalKey<T>::with\r\n  66: scoped_tls::ScopedKey<T>::set\r\n  67: syntax::with_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nquery stack during panic:\r\n#0 [const_eval_raw] const-evaluating `MultiDriver::drivers::{{constant}}#0`\r\n#1 [const_eval] const-evaluating + checking `MultiDriver::drivers::{{constant}}#0`\r\n#2 [check_item_well_formed] processing `MultiDriver`\r\n#3 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror[E0277]: the size for values of type `D` cannot be known at compilation time\r\n  --> src/lib.rs:16:5\r\n   |\r\n16 | /     pub fn push_driver(&mut self, driver: Driver<D>) {\r\n17 | |         self.drivers.push(driver);\r\n18 | |     }\r\n   | |_____^ doesn't have a size known at compile-time\r\n   |\r\n   = help: the trait `std::marker::Sized` is not implemented for `D`\r\n   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\r\n   = help: consider adding a `where D: std::marker::Sized` bound\r\nnote: required by `Driver`\r\n  --> src/lib.rs:21:1\r\n   |\r\n21 | struct Driver<D>(D);\r\n   | ^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.38.0-nightly (83e4eed16 2019-07-14) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C codegen-units=1 -C debuginfo=2 --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```", "closed_by": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62708/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62708/timeline", "performed_via_github_app": null, "state_reason": "completed"}