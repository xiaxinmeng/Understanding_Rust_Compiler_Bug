{"url": "https://api.github.com/repos/rust-lang/rust/issues/88443", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88443/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88443/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88443/events", "html_url": "https://github.com/rust-lang/rust/issues/88443", "id": 981936088, "node_id": "MDU6SXNzdWU5ODE5MzYwODg=", "number": 88443, "title": "Windows [UNC] Path substitutions on WOW", "user": {"login": "C0D3-M4513R", "id": 28912031, "node_id": "MDQ6VXNlcjI4OTEyMDMx", "avatar_url": "https://avatars.githubusercontent.com/u/28912031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/C0D3-M4513R", "html_url": "https://github.com/C0D3-M4513R", "followers_url": "https://api.github.com/users/C0D3-M4513R/followers", "following_url": "https://api.github.com/users/C0D3-M4513R/following{/other_user}", "gists_url": "https://api.github.com/users/C0D3-M4513R/gists{/gist_id}", "starred_url": "https://api.github.com/users/C0D3-M4513R/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/C0D3-M4513R/subscriptions", "organizations_url": "https://api.github.com/users/C0D3-M4513R/orgs", "repos_url": "https://api.github.com/users/C0D3-M4513R/repos", "events_url": "https://api.github.com/users/C0D3-M4513R/events{/privacy}", "received_events_url": "https://api.github.com/users/C0D3-M4513R/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-08-28T21:57:09Z", "updated_at": "2021-08-29T10:21:14Z", "closed_at": "2021-08-29T09:50:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\nImportant is, that this is run, as x86, on a x64 install (this process needs? to run under WOW), of Windows. Otherwise, this will work, as expected. I speculate further, that this is a problem, with (at least) every dll present in `c:\\Windows\\SYSWOW64`.\r\nI tried running this code with `cargo +nightly-i686 run` and `cargo +stable-i686 run`\r\n\r\n```rust\r\nfn main() {\r\n    let path = \"\\\\\\\\?\\\\C:\\\\Windows\\\\System32\\\\kernel32.dll\";\r\n    let winpath_tmp =std::fs::canonicalize(path).unwrap();\r\n    let winpath=winpath_tmp.to_str().unwrap();\r\n    assert_eq!(path,winpath);\r\n}\r\n```\r\n\r\nI expected to see this happen: \r\n\r\nI expected, that with the UNC path would not change. Especially, since, the link in the doc, of `std::fs::canonicalize`, says:\r\n> For file I/O, the \"\\\\\\\\?\\\\\" prefix to a path string tells the Windows APIs to disable all string parsing and to send the string that follows it straight to the file system.\r\n\r\nInstead, this happened: \r\n\r\nInstead Windows, or rust changed the Path, upon parsing it. Reading also yields the `SYSWOW64/kernel.dll\r\n file contents.\r\n\r\nThis also happens, with paths, that just start with `C:\\`.\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.54.0 (a178d0322 2021-07-26)\r\nbinary: rustc\r\ncommit-hash: a178d0322ce20e33eac124758e837cbd80a6f633\r\ncommit-date: 2021-07-26\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.54.0\r\nLLVM version: 12.0.1\r\n```\r\n\r\n`rustc +stable-i686 --version --verbose`\r\n```\r\nrustc 1.54.0 (a178d0322 2021-07-26)\r\nbinary: rustc\r\ncommit-hash: a178d0322ce20e33eac124758e837cbd80a6f633\r\ncommit-date: 2021-07-26\r\nhost: i686-pc-windows-msvc\r\nrelease: 1.54.0\r\nLLVM version: 12.0.1\r\n```\r\n\r\n`rustc +nightly-i686 --version --verbose`\r\n```\r\nrustc 1.56.0-nightly (ac50a5335 2021-08-27)\r\nbinary: rustc\r\ncommit-hash: ac50a53359328a5d7f2f558833e63d59d372e4f7\r\ncommit-date: 2021-08-27\r\nhost: i686-pc-windows-msvc\r\nrelease: 1.56.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `\"\\\\\\\\?\\\\C:\\\\Windows\\\\System32\\\\kernel32.dll\"`,\r\n right: `\"\\\\\\\\?\\\\C:\\\\Windows\\\\SysWOW64\\\\kernel32.dll\"`', src\\main.rs:5:5\r\nstack backtrace:\r\n   0:   0xa16cea - core::fmt::write\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\core\\src\\fmt\\mod.rs:1150\r\n   1:   0xa062c1 - std::io::Write::write_fmt<std::sys::windows::stdio::Stderr>\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\std\\src\\io\\mod.rs:1667\r\n   2:   0xa09b28 - std::sys_common::backtrace::_print\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\std\\src\\sys_common\\backtrace.rs:49\r\n   3:   0xa09b28 - std::sys_common::backtrace::print\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\std\\src\\sys_common\\backtrace.rs:36\r\n   4:   0xa09b28 - std::panicking::default_hook::closure$1\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\std\\src\\panicking.rs:210\r\n   5:   0xa096c3 - std::panicking::default_hook\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\std\\src\\panicking.rs:227\r\n   6:   0xa0a10e - std::panicking::rust_panic_with_hook\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\std\\src\\panicking.rs:624\r\n   7:   0xa09d06 - std::panicking::begin_panic_handler::closure$0\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\std\\src\\panicking.rs:521\r\n   8:   0xa0879f - std::sys_common::backtrace::__rust_end_short_backtrace<std::panicking::begin_panic_handler::closure$0,never$>\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\std\\src\\sys_common\\backtrace.rs:141\r\n   9:   0xa09c52 - std::panicking::begin_panic_handler\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\std\\src\\panicking.rs:517\r\n  10:   0xa1b18a - core::panicking::panic_fmt\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\core\\src\\panicking.rs:101\r\n  11:   0xa161e3 - core::panicking::assert_failed_inner\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\/library\\core\\src\\panicking.rs:183\r\n  12:   0xa01cc9 - core::panicking::assert_failed<str,str>\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\library\\core\\src\\panicking.rs:140\r\n  13:   0xa01e97 - core::ops::function::FnOnce::call_once<void (*)(),tuple$<> >\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\library\\core\\src\\ops\\function.rs:227\r\n  14:   0xa027c1 - std::rt::lang_start::closure$0<tuple$<> >\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\library\\std\\src\\rt.rs:63\r\n  15: 0x7567801d - GetProcAddressForCaller\r\n  16:   0xa02792 - std::rt::lang_start<tuple$<> >\r\n                       at /rustc/ac50a53359328a5d7f2f558833e63d59d372e4f7\\library\\std\\src\\rt.rs:62\r\n  17:   0xa01541 - main\r\n  18: 0x75cefa29 - BaseThreadInitThunk\r\n  19: 0x77177a7e - RtlGetAppContainerNamedObjectPath\r\n  20: 0x77177a4e - RtlGetAppContainerNamedObjectPath\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nMy main problem is, that I do not know, how to get to the contents of  `C:\\Windows\\System32\\kernel32.dll`, using regular `std::fs` tools. For the time being, I'll search for a workaround, using winapi calls.", "closed_by": {"login": "C0D3-M4513R", "id": 28912031, "node_id": "MDQ6VXNlcjI4OTEyMDMx", "avatar_url": "https://avatars.githubusercontent.com/u/28912031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/C0D3-M4513R", "html_url": "https://github.com/C0D3-M4513R", "followers_url": "https://api.github.com/users/C0D3-M4513R/followers", "following_url": "https://api.github.com/users/C0D3-M4513R/following{/other_user}", "gists_url": "https://api.github.com/users/C0D3-M4513R/gists{/gist_id}", "starred_url": "https://api.github.com/users/C0D3-M4513R/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/C0D3-M4513R/subscriptions", "organizations_url": "https://api.github.com/users/C0D3-M4513R/orgs", "repos_url": "https://api.github.com/users/C0D3-M4513R/repos", "events_url": "https://api.github.com/users/C0D3-M4513R/events{/privacy}", "received_events_url": "https://api.github.com/users/C0D3-M4513R/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88443/timeline", "performed_via_github_app": null, "state_reason": "completed"}