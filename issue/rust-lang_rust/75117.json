{"url": "https://api.github.com/repos/rust-lang/rust/issues/75117", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75117/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75117/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75117/events", "html_url": "https://github.com/rust-lang/rust/issues/75117", "id": 672260031, "node_id": "MDU6SXNzdWU2NzIyNjAwMzE=", "number": 75117, "title": "double free in tcache2 or segfault when using Vec in async", "user": {"login": "SiebenCorgie", "id": 7197298, "node_id": "MDQ6VXNlcjcxOTcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7197298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiebenCorgie", "html_url": "https://github.com/SiebenCorgie", "followers_url": "https://api.github.com/users/SiebenCorgie/followers", "following_url": "https://api.github.com/users/SiebenCorgie/following{/other_user}", "gists_url": "https://api.github.com/users/SiebenCorgie/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiebenCorgie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiebenCorgie/subscriptions", "organizations_url": "https://api.github.com/users/SiebenCorgie/orgs", "repos_url": "https://api.github.com/users/SiebenCorgie/repos", "events_url": "https://api.github.com/users/SiebenCorgie/events{/privacy}", "received_events_url": "https://api.github.com/users/SiebenCorgie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-03T18:22:51Z", "updated_at": "2020-08-03T18:40:08Z", "closed_at": "2020-08-03T18:40:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI recently started to try my luck with async code via [smol](https://crates.io/crates/smol). However, I a strange bug when using vectors in smols async context, where my program crashes with \r\n\r\n`free(): double free detected in tcache 2` or a segfault\r\n\r\nThis is the code, a description follows below:\r\n```rust\r\nextern crate async_graph;\r\nuse async_graph::*;\r\nuse std::sync::{Arc, RwLock};\r\n\r\n\r\nenum SenderEn{\r\n    Something,\r\n    SomeVec(Vec<f32>)\r\n}\r\n\r\nstruct SenderNode{\r\n    some_inner: i32,\r\n    channel: Vec<Arc<RwLock<dyn Splitter<DataLayout = [SenderEn; 1]> + Send + Sync>>>,\r\n}\r\n\r\nimpl ProducerAble for SenderNode{\r\n    type OutputLayout = [SenderEn; 1];\r\n    \r\n    fn receiver_channel(&mut self, channel: Arc<RwLock<dyn Splitter<DataLayout = Self::OutputLayout> + Send + Sync>>){\r\n\tself.channel.push(channel);\r\n    }\r\n\r\n    fn produce(&self){\r\n\tfor c in &self.channel{\r\n\t    async_graph::smol::run(async{\r\n\t\tprintln!(\"Works: \");\r\n\t\tc.read().unwrap().split([SenderEn::Something], \"Nothing\").unwrap();\r\n\t    });\r\n\r\n// --- Problem below\t    \r\n\t    async_graph::smol::run(async{\r\n\t\tprintln!(\"Works as well: \");\r\n\t\tlet mut vec = Vec::with_capacity(10);\r\n\t\t//When removing this print, crash occurs as well but is double free, not segfault\r\n\t\tprintln!(\"After alloc\");\r\n\t\tfor _ in 0..10{\r\n\t\t    vec.push(0.0);\r\n\t\t}\r\n\t\tc.read().unwrap().split([SenderEn::SomeVec(vec)], \"Created vec\").unwrap();\r\n\t    });\r\n\r\n\t    \r\n\t    async_graph::smol::run(async{\r\n\t\tprintln!(\"Crashes: \"); //crashes with segfault on nightly\r\n\t\tc.read().unwrap().split([SenderEn::SomeVec(vec![0.0; 64])], \"Created vec\").unwrap();\r\n\t    });\r\n\t}\r\n    }\r\n}\r\n\r\nimpl Node for SenderNode{\r\n    type Inputs = ();\r\n    type Outputs = [SenderEn; 1];\r\n\r\n    fn process(&self, input: Self::Inputs) -> Self::Outputs{\r\n\t[SenderEn::Something]\r\n    }\r\n}\r\n\r\n\r\nfn main() {    \r\n    //Run producer then wait\r\n    let node = Arc::new(RwLock::new(SenderNode{some_inner: 654, channel: Vec::with_capacity(1)}));\r\n    let prod = Aggregator::from_arc_producer(node.clone());\r\n\r\n    let node_clone = node.clone();\r\n    node_clone.read().unwrap().produce();\r\n\r\n    std::thread::sleep(std::time::Duration::from_secs(1));\r\n    let oke = node.read().unwrap().some_inner;\r\n}\r\n```\r\n\r\n## Description \r\nI currently try to build some kind of async execution DAG (async_graph). The DAG itself work, but has this bug. A Producer is some `Node` that can send values via `produce` into the graph from some thread (in this case the main thread). However, in this example no nodes are connected, so the output of produce is send nowhere.\r\n\r\nThe `Aggregator` is a wrapper around some type that implements `Node`. It handles the connection from and to this node as well as splitting input from a Box<Any> into tuples of (X,Y,Z) (based on the associated type of `Node`). Similarly it handles assembling some output of the nodes `process` function into several send calls to other nodes.\r\n\r\nThe [async_graph](https://gitlab.com/tendsinmende/asyncgraph) is open source and documented if more information regarding it is needed.\r\n\r\nSo in short, something goes wrong when working with vecs in my special, async case. I do not use any unsafe code, so I think this shouldn't happen.\r\n\r\n### Meta\r\nI tested it on nightly.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.47.0-nightly (6c8927b0c 2020-07-26)\r\nbinary: rustc\r\ncommit-hash: 6c8927b0cf80ceee19386026cf9d7fd4fd9d486f\r\ncommit-date: 2020-07-26\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.47.0-nightly\r\nLLVM version: 10.0\r\n```\r\nHardware / Software\r\nOS: Updated arch linux\r\nCPU: AMD Ryzen 1700x\r\n\r\n## backtrace\r\nSadly there is no backtrace.\r\n\r\n## Closing\r\nI uploaded the project which can be executed and should produce the same problem: https://gitlab.com/tendsinmende/async_double_free\r\n\r\nIf there is anything I can debug/do to help, let me know!\r\n\r\nCheers\r\nTendsin Mende\r\n", "closed_by": {"login": "SiebenCorgie", "id": 7197298, "node_id": "MDQ6VXNlcjcxOTcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7197298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiebenCorgie", "html_url": "https://github.com/SiebenCorgie", "followers_url": "https://api.github.com/users/SiebenCorgie/followers", "following_url": "https://api.github.com/users/SiebenCorgie/following{/other_user}", "gists_url": "https://api.github.com/users/SiebenCorgie/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiebenCorgie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiebenCorgie/subscriptions", "organizations_url": "https://api.github.com/users/SiebenCorgie/orgs", "repos_url": "https://api.github.com/users/SiebenCorgie/repos", "events_url": "https://api.github.com/users/SiebenCorgie/events{/privacy}", "received_events_url": "https://api.github.com/users/SiebenCorgie/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75117/timeline", "performed_via_github_app": null, "state_reason": "completed"}