{"url": "https://api.github.com/repos/rust-lang/rust/issues/36587", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36587/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36587/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36587/events", "html_url": "https://github.com/rust-lang/rust/issues/36587", "id": 177907688, "node_id": "MDU6SXNzdWUxNzc5MDc2ODg=", "number": 36587, "title": "Specialization doesn't work when an impl has an associated type bound", "user": {"login": "kylewlacy", "id": 1362179, "node_id": "MDQ6VXNlcjEzNjIxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1362179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylewlacy", "html_url": "https://github.com/kylewlacy", "followers_url": "https://api.github.com/users/kylewlacy/followers", "following_url": "https://api.github.com/users/kylewlacy/following{/other_user}", "gists_url": "https://api.github.com/users/kylewlacy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylewlacy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylewlacy/subscriptions", "organizations_url": "https://api.github.com/users/kylewlacy/orgs", "repos_url": "https://api.github.com/users/kylewlacy/repos", "events_url": "https://api.github.com/users/kylewlacy/events{/privacy}", "received_events_url": "https://api.github.com/users/kylewlacy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-19T21:50:34Z", "updated_at": "2017-05-14T14:39:53Z", "closed_at": "2017-05-14T14:39:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "(Originally reported in [this comment](https://github.com/rust-lang/rust/issues/31844#issuecomment-221131352) in #31844)\n\nIn the following, we have a `Child` trait to represent a \"parent-child\" relationship between two types. `Alice` is a child of `()` and `Bob` is a child of `Alice`. Then, we have a trait `Foo` that we want to implement for `Alice`, and for all types that are children of a `Foo` (so `Alice` and `Bob` should both implement `Foo`):\n\n``` rust\n#![feature(specialization)]\n\ntrait Child {\n    type Parent;\n}\n\nstruct Alice;\n\nimpl Child for Alice {\n    type Parent = ();\n}\n\nstruct Bob;\n\nimpl Child for Bob {\n    type Parent = Alice;\n}\n\n\n\ntrait Foo { fn foo(&self); }\n\nimpl Foo for Alice {\n    fn foo(&self) { println!(\"Alice foo!\"); }\n}\n\n// Implement for all children with parents that implement `Foo`\nimpl<T> Foo for T\n    where T: Child, T::Parent: Foo\n{\n    default fn foo(&self) { println!(\"Descendant foo!\"); }\n}\n\n\n\nfn main() {\n    Alice.foo();\n    Bob.foo();\n}\n```\n\n([playpen](https://play.rust-lang.org/?gist=ac401d9be2957b207a6a59b87cab385c&version=nightly))\n## Expected output\n\nThe program should print \"Alice foo!\" and \"Descendant foo!\"\n## Actual output\n\nThe program fails to compile:\n\n```\nerror[E0119]: conflicting implementations of trait `Foo` for type `Alice`:\n  --> <anon>:28:1\n   |\n23 | impl Foo for Alice {\n   | - first implementation here\n...\n28 | impl<T> Foo for T\n   | ^ conflicting implementation for `Alice`\n\nerror: aborting due to previous error\n```\n## Version info\n\n```\n$ rustc --version\nrustc 1.13.0-nightly (55bf6a4f8 2016-09-18)\n```\n## Other notes\n\nThere are two workarounds I've found to fix the error above.\n\nThe first is to just remove the `T::Parent: Foo` clause (which works in this case, but not so much for my actual usecase).\n\nThe second workaround is to introduce another trait, `FooChild`, which is implemented for all types where `Self::Parent: Foo`. We can then use `FooChild` in the `where` clause instead:\n\n``` rust\ntrait FooChild { }\n\nimpl<T> FooChild for T\n    where T: Child, T::Parent: Foo\n{\n}\n\n// Implement for all children with parents that implement `Foo`\nimpl<T> Foo for T\n//  where T: Child, T::Parent: Foo\n    where T: FooChild\n{\n    default fn foo(&self) { println!(\"Descendant foo!\"); }\n}\n\n// ...\n```\n\n([playpen](https://play.rust-lang.org/?gist=657cb3a68ec12db229bc216b271868ce&version=nightly))\n\nInterestingly, the second workaround doesn't work when `Child` is moved into a separate crate ([example repo](https://github.com/kylewlacy/rust-conflicting-impl-specialization))\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36587/timeline", "performed_via_github_app": null, "state_reason": "completed"}