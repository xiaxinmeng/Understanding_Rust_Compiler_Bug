{"url": "https://api.github.com/repos/rust-lang/rust/issues/95184", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95184/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95184/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95184/events", "html_url": "https://github.com/rust-lang/rust/issues/95184", "id": 1175978558, "node_id": "I_kwDOAAsO6M5GGAI-", "number": 95184, "title": "Is `bool` FFI-safe?", "user": {"login": "mcy", "id": 2711945, "node_id": "MDQ6VXNlcjI3MTE5NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2711945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcy", "html_url": "https://github.com/mcy", "followers_url": "https://api.github.com/users/mcy/followers", "following_url": "https://api.github.com/users/mcy/following{/other_user}", "gists_url": "https://api.github.com/users/mcy/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcy/subscriptions", "organizations_url": "https://api.github.com/users/mcy/orgs", "repos_url": "https://api.github.com/users/mcy/repos", "events_url": "https://api.github.com/users/mcy/events{/privacy}", "received_events_url": "https://api.github.com/users/mcy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 4288196623, "node_id": "LA_kwDOAAsO6M7_mLAP", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-abi", "name": "A-abi", "color": "f7e101", "default": false, "description": "Area: Concerning the \"application binary interface\" between functions."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-03-21T21:47:51Z", "updated_at": "2022-07-01T20:23:39Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The following seem inconsistent:\r\n\r\n> An object with the boolean type has a [size and alignment](https://doc.rust-lang.org/reference/type-layout.html#size-and-alignment)\r\n> of 1 each. The value false has the bit pattern 0x00 and the value true has the bit pattern 0x01. It is\r\n> [undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html) for an object with the boolean type\r\n> to have any other bit pattern.\r\n>\r\n> -- https://doc.rust-lang.org/reference/types/boolean.html#boolean-type \r\n\r\n```rust\r\nwarning: `extern` fn uses type `Improper`, which is not FFI-safe\r\n --> <source>:2:35\r\n  |\r\n2 | pub extern \"C\" fn bad(_: bool, _: Improper) {}\r\n  |                                   ^^^^^^^^ not FFI-safe\r\n  |\r\n  = note: `#[warn(improper_ctypes_definitions)]` on by default\r\n  = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\r\n  = note: this struct has unspecified layout\r\nnote: the type is defined here\r\n --> <source>:1:1\r\n  |\r\n1 | pub struct Improper;\r\n  | ^^^^^^^^^^^^^^^^^^^^\r\n\r\nwarning: 1 warning emitted\r\n```\r\n\r\nThe reference states that `bool` has the same layout as `u8` and can only take on the \"usual\" bitpatterns. OTOH, The improper ctypes lints seem to believe that `bool` is FFI-safe, by omission, which is further underscored in the UGC draft: https://rust-lang.github.io/unsafe-code-guidelines/layout/scalars.html#bool, which ties it to `_Bool`; C makes ~no guarantees about the layout of this type, although papers have been published in the past to try to nail down a bit representation. (Personally, such a proposal seems as unlikely as nullptr being guaranteed to be all-zeroes, so I wouldn't count on it.)\r\n\r\nDiscussion on a somewhat old issue seems to indicate we are [not sure how we feel about this](https://github.com/rust-lang/unsafe-code-guidelines/issues/53), so I'd lean towards weakening the reference's assertion.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95184/timeline", "performed_via_github_app": null, "state_reason": null}