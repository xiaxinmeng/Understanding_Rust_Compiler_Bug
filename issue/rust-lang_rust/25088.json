{"url": "https://api.github.com/repos/rust-lang/rust/issues/25088", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/25088/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/25088/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/25088/events", "html_url": "https://github.com/rust-lang/rust/issues/25088", "id": 72927369, "node_id": "MDU6SXNzdWU3MjkyNzM2OQ==", "number": 25088, "title": "Access to thread locals isn't inlined across crates", "user": {"login": "veddan", "id": 307180, "node_id": "MDQ6VXNlcjMwNzE4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/307180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veddan", "html_url": "https://github.com/veddan", "followers_url": "https://api.github.com/users/veddan/followers", "following_url": "https://api.github.com/users/veddan/following{/other_user}", "gists_url": "https://api.github.com/users/veddan/gists{/gist_id}", "starred_url": "https://api.github.com/users/veddan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veddan/subscriptions", "organizations_url": "https://api.github.com/users/veddan/orgs", "repos_url": "https://api.github.com/users/veddan/repos", "events_url": "https://api.github.com/users/veddan/events{/privacy}", "received_events_url": "https://api.github.com/users/veddan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 632886930, "node_id": "MDU6TGFiZWw2MzI4ODY5MzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-thread-locals", "name": "A-thread-locals", "color": "f7e101", "default": false, "description": "Area: Thread local storage (TLS)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2015-05-04T05:32:28Z", "updated_at": "2021-05-19T18:41:24Z", "closed_at": "2021-05-19T18:41:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Proposed solution\n\nRight now access to thread locals defined by `thread_local!` aren't inlined across crates, causing performance problems that wouldn't otherwise be seen within one crate. This can probably be solved with a few new minor language features:\n- First, the `#[inline]` annotation could be processed on `static` variables. If the variable does not have any internal mutability, then the definition can be inlined into other LLVM modules and tagged with `available_externally`. That means that the contents are available for optimization, but if you're taking the address it's available elsewhere.\n- Second, when we inline the contents of a static across modules, function pointers should also be chased and inlined if they're tagged with `#[inline]`. \n\nThose two pieces I believe should provide enough inlining opportunities to ensure that accesses are as fast when done from external crates as they are done with internal crates.\n## Original description\n\nThis hurts performance for the locks in `std::sync`, as they call `std::rt::unwind::panicking()` (which just reads a thread-local). For uncontended locks the cost is quite significant.\n\nThere are two problems:\n1. `std::rt::unwind::panicking()` isn't marked inline. This is trivial to solve.\n2. Accessing a `thread_local!` goes through function pointers, which LLVM fails to see through. These are the `__getit` functions in `libstd/thread/local.rs`. Consider these two files:\n\n``` rust\n// tls.rs\nuse std::cell::Cell;\nthread_local! { static FOO: Cell<bool> = Cell::new(false) }\n#[inline]\npub fn get_foo() -> bool {\n    FOO.with(|s| s.get())\n}\n```\n\n``` rust\n// other.rs\nextern crate tls;\n#[inline(never)]\nfn call_foo() -> bool {\n    tls::get_foo()\n}\n```\n\n`call_foo` gets the following IR with everything compiled with full optimization. Note the call through a function pointer:\n\n```\ndefine internal fastcc zeroext i1 @_ZN8call_foo20h55fb2c2ba5981f51PaaE() unnamed_addr #3 {\nentry-block:\n  %0 = load %\"1.std::thread::local::imp::Key<core::cell::UnsafeCell<core::option::Option<core::cell::Cell<bool>>>>\"* ()** getelementptr inbounds (%\"1.std::thread::local::LocalKey<core::cell::Cell<bool>>\"* @_ZN3FOO20hefc7cdadc988b7defaaE, i64 0, i32 0), align 8\n  %1 = tail call dereferenceable(4) %\"1.std::thread::local::imp::Key<core::cell::UnsafeCell<core::option::Option<core::cell::Cell<bool>>>>\"* %0()\n  %2 = getelementptr inbounds %\"1.std::thread::local::imp::Key<core::cell::UnsafeCell<core::option::Option<core::cell::Cell<bool>>>>\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load i8* %2, align 1, !range !13\n  %cond.i.i = icmp eq i8 %3, 1\n  br i1 %cond.i.i, label %match_case.i.i, label %match_else.i.i\n\nmatch_else.i.i:                                   ; preds = %entry-block\n  %4 = load i8 ()** getelementptr inbounds (%\"1.std::thread::local::LocalKey<core::cell::Cell<bool>>\"* @_ZN3FOO20hefc7cdadc988b7defaaE, i64 0, i32 1), align 8\n  %5 = tail call i8 %4()\n  %6 = zext i8 %5 to i16\n  %7 = shl nuw i16 %6, 8\n  %8 = or i16 %7, 1\n  %9 = bitcast %\"1.std::thread::local::imp::Key<core::cell::UnsafeCell<core::option::Option<core::cell::Cell<bool>>>>\"* %1 to i16*\n  store i16 %8, i16* %9, align 1\n  %10 = getelementptr inbounds %\"1.std::thread::local::imp::Key<core::cell::UnsafeCell<core::option::Option<core::cell::Cell<bool>>>>\"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i64 0\n  %11 = bitcast i8* %10 to %\"2.core::cell::Cell<bool>\"*\n  br label %_ZN7get_foo20h73631102cae2c5b4lbaE.exit\n\nmatch_case.i.i:                                   ; preds = %entry-block\n  %12 = getelementptr inbounds %\"1.std::thread::local::imp::Key<core::cell::UnsafeCell<core::option::Option<core::cell::Cell<bool>>>>\"* %1, i64 0, i32 0, i32 0, i32 0, i32 2\n  %13 = bitcast [1 x i8]* %12 to %\"2.core::cell::Cell<bool>\"*\n  br label %_ZN7get_foo20h73631102cae2c5b4lbaE.exit\n\n_ZN7get_foo20h73631102cae2c5b4lbaE.exit:          ; preds = %match_else.i.i, %match_case.i.i\n  %.0.i.i = phi %\"2.core::cell::Cell<bool>\"* [ %13, %match_case.i.i ], [ %11, %match_else.i.i ]\n  %.0.idx.i.i = getelementptr %\"2.core::cell::Cell<bool>\"* %.0.i.i, i64 0, i32 0, i32 0\n  %.0.idx.val.i.i = load i8* %.0.idx.i.i, align 1\n  %14 = icmp ne i8 %.0.idx.val.i.i, 0\n  ret i1 %14\n}\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/25088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/25088/timeline", "performed_via_github_app": null, "state_reason": "completed"}