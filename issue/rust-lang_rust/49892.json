{"url": "https://api.github.com/repos/rust-lang/rust/issues/49892", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49892/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49892/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49892/events", "html_url": "https://github.com/rust-lang/rust/issues/49892", "id": 313520880, "node_id": "MDU6SXNzdWUzMTM1MjA4ODA=", "number": 49892, "title": "Comparison of Option<NonZeroU*> is not fully optimized", "user": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2018-04-11T23:23:29Z", "updated_at": "2022-10-26T11:19:39Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Compare:\r\n\r\n```rust\r\n#![feature(nonzero)]\r\nuse std::num::NonZeroU32;\r\n\r\npub fn f(a: Option<NonZeroU32>, b: Option<NonZeroU32>) -> bool {\r\n    a < b\r\n}\r\npub fn g(a: u32, b: u32) -> bool {\r\n    a < b\r\n}\r\n```\r\n\r\nThe functions `f` and `g` have equivalent effect, and should compile to the same code. However, the translated `f` is much more complex, involving needless comparison of the discriminant.\r\n\r\n<details><summary>LLVM IR and ASM (in release mode)</summary>\r\n\r\n```llvm\r\n; playground::f\r\n; Function Attrs: norecurse nounwind readnone uwtable\r\ndefine zeroext i1 @_ZN10playground1f17hd628eff49d2ff60dE(i32, i32) unnamed_addr #0 {\r\nstart:\r\n  %2 = icmp ne i32 %0, 0\r\n  %3 = icmp ne i32 %1, 0\r\n  %4 = xor i1 %2, %3\r\n  br i1 %4, label %bb7.i, label %bb6.i\r\n\r\nbb6.i:                                            ; preds = %start\r\n  %5 = icmp ult i32 %0, %1\r\n  %spec.select = and i1 %2, %5\r\n  ret i1 %spec.select\r\n\r\nbb7.i:                                            ; preds = %start\r\n  %6 = xor i1 %2, true\r\n  %7 = and i1 %3, %6\r\n  ret i1 %7\r\n}\r\n\r\n; playground::g\r\n; Function Attrs: norecurse nounwind readnone uwtable\r\ndefine zeroext i1 @_ZN10playground1g17hea1c394facd055aeE(i32 %a, i32 %b) unnamed_addr #0 {\r\nstart:\r\n  %0 = icmp ult i32 %a, %b\r\n  ret i1 %0\r\n}\r\n```\r\n\r\n```asm\r\nplayground::f:\r\n\ttest\tedi, edi\r\n\tsetne\tal\r\n\ttest\tesi, esi\r\n\tsetne\tcl\r\n\txor\tcl, al\r\n\tje\t.LBB0_1\r\n\ttest\tesi, esi\r\n\tsetne\tcl\r\n\ttest\tedi, edi\r\n\tsete\tal\r\n\tand\tal, cl\r\n\tret\r\n\r\n.LBB0_1:\r\n\ttest\tedi, edi\r\n\tsetne\tcl\r\n\tcmp\tedi, esi\r\n\tsetb\tal\r\n\tand\tal, cl\r\n\tret\r\n\r\nplayground::g:\r\n\tcmp\tedi, esi\r\n\tsetb\tal\r\n\tret\r\n```\r\n\r\n</details>\r\n\r\nNote that specializing `PartialOrd` etc for `Option<NonZero*>` is not a valid solution, since custom wrapper types of NonZero* will still have the same problem.\r\n\r\n```rust\r\n#[derive(PartialOrd, PartialEq)]\r\npub struct S(NonZeroU32);\r\npub fn f(a: Option<S>, b: Option<S>) -> bool {\r\n    a < b\r\n}\r\n```\r\n\r\ncc #49137.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49892/timeline", "performed_via_github_app": null, "state_reason": null}