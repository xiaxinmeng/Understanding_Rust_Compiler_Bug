{"url": "https://api.github.com/repos/rust-lang/rust/issues/104285", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104285/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104285/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104285/events", "html_url": "https://github.com/rust-lang/rust/issues/104285", "id": 1445550918, "node_id": "I_kwDOAAsO6M5WKVtG", "number": 104285, "title": "Mismatched types shows 2 equal types", "user": {"login": "marcoow", "id": 1510, "node_id": "MDQ6VXNlcjE1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcoow", "html_url": "https://github.com/marcoow", "followers_url": "https://api.github.com/users/marcoow/followers", "following_url": "https://api.github.com/users/marcoow/following{/other_user}", "gists_url": "https://api.github.com/users/marcoow/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcoow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcoow/subscriptions", "organizations_url": "https://api.github.com/users/marcoow/orgs", "repos_url": "https://api.github.com/users/marcoow/repos", "events_url": "https://api.github.com/users/marcoow/events{/privacy}", "received_events_url": "https://api.github.com/users/marcoow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-11-11T14:26:43Z", "updated_at": "2022-11-11T15:17:45Z", "closed_at": "2022-11-11T15:17:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to add an async function argument to a function and run into a situation where it get a mismatched types error although the types I'm presented in the error message are actually both identical:\r\n\r\n```\r\n   = note: expected trait `for<'r> <for<'r> fn(&'r str, std::string::String) -> impl for<'r> Future<Output = u16> {request_sendgrid} as FnOnce<(&'r str, std::string::String)>>`\r\n              found trait `for<'r> <for<'r> fn(&'r str, std::string::String) -> impl for<'r> Future<Output = u16> {request_sendgrid} as FnOnce<(&'r str, std::string::String)>>`\r\n```\r\n\r\nI'm aware I'm almost 100% certainly doing sth. wrong, still the note there seems probably wrong as well?\r\n\r\nI tried this code:\r\n\r\n```rust\r\npub async fn send_message<Fut>(payload: Payload, api_key: &str, sendgrid: impl FnOnce(&str, String) -> Fut) -> Result<Response>\r\nwhere\r\nFut: Future<Output = u16>, {\r\n    let message = payload.message.trim();\r\n    let message = if !message.is_empty() { message } else { \"\u2013\" };\r\n\r\n    let data = json!({\r\n        \"personalizations\": [{\r\n            \"to\": [\r\n                { \"email\": \"contact@domain.tld\", \"name\": \"My Domain\" }\r\n            ]}\r\n        ],\r\n        \"from\": { \"email\": \"no-reply@domain.tld\", \"name\": format!(\"{} via domain.tld\", payload.name) },\r\n        \"reply_to\": { \"email\": payload.email, \"name\": payload.name },\r\n        \"subject\": \"Inquiry\",\r\n        \"content\": [{\r\n            \"type\": \"text/plain\",\r\n            \"value\": message\r\n        }]\r\n    });\r\n\r\n    let client = reqwest::Client::new();\r\n    let result = client\r\n        .post(\"https://api.sendgrid.com/v3/mail/send\")\r\n        .header(\"Authorization\", format!(\"Bearer {}\", api_key))\r\n        .header(\"Content-Type\", \"application/json\")\r\n        .body(data.to_string())\r\n        .send()\r\n        .await;\r\n\r\n    match result {\r\n        Ok(response) => match response.status() {\r\n            reqwest::StatusCode::ACCEPTED => Response::ok(\"\"),\r\n            _ => Response::error(\"Bad Gateway\", 502),\r\n        },\r\n        Err(_) => Response::error(\"Internal Server Error\", 500),\r\n    }\r\n}\r\n\r\nasync fn request_sendgrid(api_key: &str, data: String) -> u16 {\r\n    let client = reqwest::Client::new();\r\n    let result = client\r\n        .post(\"https://api.sendgrid.com/v3/mail/send\")\r\n        .header(\"Authorization\", format!(\"Bearer {}\", api_key))\r\n        .header(\"Content-Type\", \"application/json\")\r\n        .body(data)\r\n        .send()\r\n        .await;\r\n\r\n    match result {\r\n        Ok(response) => response.status().as_u16(),\r\n        Err(_) => 500u16,\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: 2 different types in the error message\r\n\r\nInstead, this happened: 2 equal types in the error message\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.64.0 (a55dd71d5 2022-09-19)\r\nbinary: rustc\r\ncommit-hash: a55dd71d5fb0ec5a6a3a9e8c27b2127ba491ce52\r\ncommit-date: 2022-09-19\r\nhost: aarch64-apple-darwin\r\nrelease: 1.64.0\r\nLLVM version: 14.0.6\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n   Compiling mainmatter-website-mailer v0.0.0 (/Users/marcoow/Code/mainmatter-website-mailer)\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:43:32\r\n   |\r\n43 |                 Ok(payload) => send_message(payload, &api_key, &request_sendgrid).await,\r\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\r\n   |\r\n   = note: expected trait `for<'r> <for<'r> fn(&'r str, std::string::String) -> impl for<'r> Future<Output = u16> {request_sendgrid} as FnOnce<(&'r str, std::string::String)>>`\r\n              found trait `for<'r> <for<'r> fn(&'r str, std::string::String) -> impl for<'r> Future<Output = u16> {request_sendgrid} as FnOnce<(&'r str, std::string::String)>>`\r\nnote: the lifetime requirement is introduced here\r\n  --> src/lib.rs:53:104\r\n   |\r\n53 | pub async fn send_message<Fut>(payload: Payload, api_key: &str, sendgrid: impl FnOnce(&str, String) -> Fut) -> Result<Response>\r\n   |                                                                                                        ^^^\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `mainmatter-website-mailer` due to previous error\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "marcoow", "id": 1510, "node_id": "MDQ6VXNlcjE1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcoow", "html_url": "https://github.com/marcoow", "followers_url": "https://api.github.com/users/marcoow/followers", "following_url": "https://api.github.com/users/marcoow/following{/other_user}", "gists_url": "https://api.github.com/users/marcoow/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcoow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcoow/subscriptions", "organizations_url": "https://api.github.com/users/marcoow/orgs", "repos_url": "https://api.github.com/users/marcoow/repos", "events_url": "https://api.github.com/users/marcoow/events{/privacy}", "received_events_url": "https://api.github.com/users/marcoow/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104285/timeline", "performed_via_github_app": null, "state_reason": "completed"}