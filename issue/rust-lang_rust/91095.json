{"url": "https://api.github.com/repos/rust-lang/rust/issues/91095", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91095/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91095/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91095/events", "html_url": "https://github.com/rust-lang/rust/issues/91095", "id": 1059250363, "node_id": "I_kwDOAAsO6M4_IuC7", "number": 91095, "title": "Decide on when MIR Discriminant() operation is UB", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 1353616418, "node_id": "MDU6TGFiZWwxMzUzNjE2NDE4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-intrinsics", "name": "A-intrinsics", "color": "f7e101", "default": false, "description": "Area: intrinsics"}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2021-11-20T23:27:19Z", "updated_at": "2022-03-04T21:39:09Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "We do not currently have a clear description of what the semantics of the Discriminant() MIR operation, and the corresponding intrinsic (exposed via `mem::discriminant()`), are -- specifically, what are the safety preconditions of this operation, and when is it UB?\r\n\r\nNote that this operation works on *all* types, not just enums. For valid values of non non-enum types it returns some valid integer value (currently, 0).\r\n\r\nThe implementation in Miri (to be restored with https://github.com/rust-lang/rust/pull/91088) does the minimum amount of work necessary to determine the discriminant: if the type has no discriminant (since there are not at least 2 variants), the operation is always defined; otherwise it reads the tag (which encodes the discriminant) and causes UB if that is uninitialized or does not encode a valid discriminant. (There are some thorny question here around what happens if the discriminant has provenance; I would like to keep that out of scope for this issue -- it should likely be treated like a ptr-to-int transmute, whatever we end up doing with that: https://github.com/rust-lang/unsafe-code-guidelines/issues/286.)\r\n\r\nThe codegen backend adds some extra UB for the case where the type is uninhabited:\r\nhttps://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/compiler/rustc_codegen_ssa/src/mir/place.rs#L206-L215\r\n\r\nWe also have a related MIR optimization in https://github.com/rust-lang/rust/blob/93542a8240c5f926ac5f3f99cef99366082f9c2b/compiler/rustc_mir_transform/src/uninhabited_enum_branching.rs. I am not quite sure what this does though, it seems to be more about assuming that if a particular enum *variant* is uninhabited then we will never see the discriminant for that variant, and can hence remove it from the `SwitchInt`?\r\n\r\nAn 'obvious' choice is to say that the value passed to the `Discriminant` operator must fully satisfy its validity invariant -- that would certainly justify both the MIR optimization and what the codegen backend does. However, this also has problems:\r\n- Drop elaboration generates `Discriminant` operations on partially moved-out-of enums (https://github.com/rust-lang/rust/issues/91029). Depending on the semantics of 'move' and whether validity invariants might take into account what a pointer points to (such as requiring that a `Box` be initialized), this might lead to calling `Discriminant` on invalid values.\r\n- To even check the validity invariant we need to read the full value, but there are legitimate situations where parts of that value are pointed to by an active mutable reference that makes uniqueness assumptions (https://github.com/rust-lang/rust/pull/89764#issuecomment-973588007). Doing a read violates those assumptions.\r\n\r\nThese observations make me doubtful that requiring full validity is the right thing. Making the fewest assumptions is appealing IMO, but not compatible with our codegen backend nor with the MIR optimizations -- the optimization seems to kick in even for operations of the form `Discriminant(*ptr)`, so the validity invariant of `ptr` itself does not help either. It could be possible to strike some middle ground, but that feels like a rather ad-hoc adjustment to the current set of optimizations.\r\n\r\nTo summarize:\r\n- Miri implements \"minimal UB\", requiring just enough to actually be able to compute the discriminant. This is incompatible with what MIR optimizations and the codegen backend do.\r\n- A principled alternative would be requiring full validity of the value, but that is incompatible with code emitted for dropping, and with aliasing assumptions.\r\n- Some middle ground is probably possible but seems entirely ad-hoc.\r\n\r\nCc @wesleywiser @tmandry @rust-lang/wg-mir-opt ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91095/timeline", "performed_via_github_app": null, "state_reason": null}