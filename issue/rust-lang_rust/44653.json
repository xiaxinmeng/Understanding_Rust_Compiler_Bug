{"url": "https://api.github.com/repos/rust-lang/rust/issues/44653", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44653/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44653/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44653/events", "html_url": "https://github.com/rust-lang/rust/issues/44653", "id": 258291728, "node_id": "MDU6SXNzdWUyNTgyOTE3Mjg=", "number": 44653, "title": "Inconsistencies in enum unit vs empty tuple vs empty struct", "user": {"login": "vojtechkral", "id": 424891, "node_id": "MDQ6VXNlcjQyNDg5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/424891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vojtechkral", "html_url": "https://github.com/vojtechkral", "followers_url": "https://api.github.com/users/vojtechkral/followers", "following_url": "https://api.github.com/users/vojtechkral/following{/other_user}", "gists_url": "https://api.github.com/users/vojtechkral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vojtechkral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vojtechkral/subscriptions", "organizations_url": "https://api.github.com/users/vojtechkral/orgs", "repos_url": "https://api.github.com/users/vojtechkral/repos", "events_url": "https://api.github.com/users/vojtechkral/events{/privacy}", "received_events_url": "https://api.github.com/users/vojtechkral/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-17T09:44:10Z", "updated_at": "2017-09-17T17:15:39Z", "closed_at": "2017-09-17T14:46:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n  I'm running into couple of rough / weird corner cases with empty enum tuple and struct variants.\r\nCode to demonstrate:\r\n\r\n\r\n```rust\r\n\r\nenum Example {\r\n    Foo,\r\n    Bar(),\r\n    Baz{},\r\n}\r\n\r\nfn main() {\r\n    // Foo:\r\n    // let x = Example::Foo();\r\n    // ^- error[E0618]: expected function, found `Example::Foo`\r\n    let x = Example::Foo{};\r\n    // ^- compiles\r\n\r\n    // Bar:\r\n    let x = Example::Bar;\r\n    // ^- compiles\r\n    let x = Example::Bar{};\r\n    // ^- compiles\r\n\r\n    // Baz:\r\n    // let x = Example::Baz;\r\n    // ^- error[E0423]: expected value, found struct variant `Example::Baz`\r\n    // let x = Example::Baz();\r\n    // ^- error[E0423]: expected function, found struct variant `Example::Baz`\r\n}\r\n```\r\n\r\nAs you can see, the behaviour here is not consistent.\r\nFor example, you can initialize an empty tuple variant with a syntax of unit variant, but not vice versa.\r\nAlso, the error messages are not super helpful.\r\n\r\nThe reason I ran into this is metaprogramming with both regular and procedural macros.\r\nIn macros, when generating code that initializes enums, one can't use a `Foo()` syntax to initialize `Foo` and needs to special-case to omit the parens.\r\n\r\nWould it make sense to perhaps make all of `Foo`, `Foo()` and `Foo{}` mean the same, ie. unit?\r\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44653/timeline", "performed_via_github_app": null, "state_reason": "completed"}