{"url": "https://api.github.com/repos/rust-lang/rust/issues/67371", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67371/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67371/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67371/events", "html_url": "https://github.com/rust-lang/rust/issues/67371", "id": 539154039, "node_id": "MDU6SXNzdWU1MzkxNTQwMzk=", "number": 67371, "title": "`RangeInclusive` has `pub(crate)` fields. This could be `pub`.", "user": {"login": "Byter09", "id": 16060697, "node_id": "MDQ6VXNlcjE2MDYwNjk3", "avatar_url": "https://avatars.githubusercontent.com/u/16060697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byter09", "html_url": "https://github.com/Byter09", "followers_url": "https://api.github.com/users/Byter09/followers", "following_url": "https://api.github.com/users/Byter09/following{/other_user}", "gists_url": "https://api.github.com/users/Byter09/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byter09/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byter09/subscriptions", "organizations_url": "https://api.github.com/users/Byter09/orgs", "repos_url": "https://api.github.com/users/Byter09/repos", "events_url": "https://api.github.com/users/Byter09/events{/privacy}", "received_events_url": "https://api.github.com/users/Byter09/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-17T15:53:52Z", "updated_at": "2019-12-22T00:10:12Z", "closed_at": "2019-12-22T00:10:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI'm currently writing a library that generalizes all ranges and adds a \"range set\".\r\n`Core`/`Std` compatibility is a must and I want to make the crate \"feel\" as if it would already be part of them. This, of course, requires `From` implementations for all range types for my `GenericRange<T>`.\r\n\r\nAll cases, for example `Range<T>` are trivial:\r\n```rust\r\nimpl<T> From<Range<T>> for GenericRange<T>\r\nwhere\r\n    T: PartialOrd,\r\n{\r\n    fn from(range: Range<T>) -> Self {\r\n        Self::closed_open(range.start, range.end)\r\n    }\r\n}\r\n```\r\n(note: this requires `PartialOrd`, because upon converting I assert, that `start <= end` to optimize other code that depends on this requirement)\r\n\r\nThe problem I'm facing now is that I want to keep clones at a minimum, but `RangeInclusive<T>` forces me to commit this atrocity:\r\n```rust\r\nimpl<T> From<RangeInclusive<T>> for GenericRange<T>\r\nwhere\r\n    T: Clone + PartialOrd,\r\n{\r\n    /// This requires `Clone` because for some reason the internal fields of `RangeInclusive` are\r\n    /// only `pub(crate)` even though they could be `pub` and so we're forced to use the results of\r\n    /// `RangeBounds`, which only return borrowed values.\r\n    fn from(range: RangeInclusive<T>) -> Self {\r\n        Self::closed(range.start().clone(), range.end().clone())\r\n    }\r\n}\r\n```\r\n\r\nAs mentioned in the doc comment and in the title of this issue, `RangeInclusive<T>` has `pub(crate)` fields, which prohibits other users, like me, to correctly take the fields without copying.\r\n\r\nThe crate is `forbid(unsafe_code)` and `#![no_std]` and I have thus no other way to implement `From` other than cloning the `RangeBounds` trait results.\r\n\r\n\r\nIf there is a reason for this I'm sorry for opening an issue - but I don't see one.\r\n\r\nThanks for taking the time to look at this!", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67371/timeline", "performed_via_github_app": null, "state_reason": "completed"}