{"url": "https://api.github.com/repos/rust-lang/rust/issues/39297", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39297/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39297/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39297/events", "html_url": "https://github.com/rust-lang/rust/issues/39297", "id": 203155983, "node_id": "MDU6SXNzdWUyMDMxNTU5ODM=", "number": 39297, "title": "fallback for diverging expressions leaks into the `?` operator", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-01-25T16:44:07Z", "updated_at": "2020-01-24T20:55:42Z", "closed_at": "2020-01-24T20:55:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[This curious example](https://is.gd/LZQHsC) was found by @canndrew:\r\n\r\n```rust\r\ntrait Deserialize: Sized {\r\n    fn deserialize() -> Result<Self, String>;\r\n}\r\n\r\nimpl Deserialize for i32 {\r\n    fn deserialize() -> Result<i32, String> {\r\n        Ok(22)\r\n    }\r\n}\r\n\r\nfn doit() -> Result<(), String> {\r\n    let _ = <_ as Deserialize>::deserialize()?;\r\n    Ok(())\r\n}\r\n\r\nfn main() {\r\n    let _ = doit();\r\n}\r\n```\r\n\r\nThis fails to compile. In particular, the `_` is inferred to `()` (at present) rather than `i32`. This is because of the interaction of two things:\r\n\r\n- impl selection refuses to infer the `Self` type, for some sort of arbitrary reason;\r\n- the `?` desugars into a `match` where one of the arms has a `return`; the type of this `return` thus has a diverging default. \r\n\r\nSince there are no other constraints on the type of `_`, this winds up defaulting to `()`. Once the `never-type` work completes, it will default to `!`. \r\n\r\nIt's not *entirely* clear that this is a bug -- each part sort of makes sense -- but the result is pretty confounding. Some of the work on improving the trait system I've been doing would lead to this example compiling, because the `_` would be inferred to `i32`.\r\n\r\nNote that there are variants of this which *do* compile (because of the fallback to `()`) -- i.e., if you changed the impl to be implemented for `()`. In this case, changing the fallback (to `!`) without improving the trait system's inference leads to a regression, since we fail to infer that `()` was the right answer all along.\r\n\r\nI *think* that improving the trait system's inference does not lead to any breakage (since the default never kicks in). The basic reasoning is that, if the code compiled with a defualt before, but now compiles with improved inference, then the trait system *must* infer the same thing as the default, since otherwise there'd be ambiguity and it should not have done any inference (put another way, if it found another answer, then the default should have led to a compilation error).\r\n\r\nThat said, I think we should stop desugaring `?` when we lower to HIR, and instead do it when we lower to MIR. This would be helpful for implementing `catch`, and would also give us more control over how the typing works. I think it's quite surprising the way the \"divergence\" is hidden in this example.\r\n\r\ncc @eddyb @aturon, with whom I've discussed related issues", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39297/timeline", "performed_via_github_app": null, "state_reason": "completed"}