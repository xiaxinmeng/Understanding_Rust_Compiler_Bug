{"url": "https://api.github.com/repos/rust-lang/rust/issues/81999", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81999/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81999/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81999/events", "html_url": "https://github.com/rust-lang/rust/issues/81999", "id": 806637187, "node_id": "MDU6SXNzdWU4MDY2MzcxODc=", "number": 81999, "title": "Panic compiling in wsl (otherwise link error LNK1181)", "user": {"login": "xumarcus", "id": 51620147, "node_id": "MDQ6VXNlcjUxNjIwMTQ3", "avatar_url": "https://avatars.githubusercontent.com/u/51620147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xumarcus", "html_url": "https://github.com/xumarcus", "followers_url": "https://api.github.com/users/xumarcus/followers", "following_url": "https://api.github.com/users/xumarcus/following{/other_user}", "gists_url": "https://api.github.com/users/xumarcus/gists{/gist_id}", "starred_url": "https://api.github.com/users/xumarcus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xumarcus/subscriptions", "organizations_url": "https://api.github.com/users/xumarcus/orgs", "repos_url": "https://api.github.com/users/xumarcus/repos", "events_url": "https://api.github.com/users/xumarcus/events{/privacy}", "received_events_url": "https://api.github.com/users/xumarcus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-02-11T18:29:03Z", "updated_at": "2021-03-17T08:55:06Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n// from Network Programming with Rust by Abhishek Chanda\r\n// chapter3/pnet-example/src/main.rs\r\n\r\nextern crate pnet;\r\n\r\nuse pnet::datalink::{self, NetworkInterface};\r\nuse pnet::datalink::Channel::Ethernet;\r\nuse pnet::packet::ethernet::{EtherTypes, EthernetPacket};\r\nuse pnet::packet::ipv4::Ipv4Packet;\r\nuse pnet::packet::tcp::TcpPacket;\r\nuse pnet::packet::ip::IpNextHeaderProtocols;\r\nuse pnet::packet::Packet;\r\n\r\nuse std::env;\r\n\r\n// Handles a single ethernet packet\r\nfn handle_packet(ethernet: &EthernetPacket) {\r\n    match ethernet.get_ethertype() {\r\n        EtherTypes::Ipv4 => {\r\n            let header = Ipv4Packet::new(ethernet.payload());\r\n            if let Some(header) = header {\r\n                match header.get_next_level_protocol() {\r\n                    IpNextHeaderProtocols::Tcp => {\r\n                        let tcp = TcpPacket::new(header.payload());\r\n                        if let Some(tcp) = tcp {\r\n                            println!(\r\n                                \"Got a TCP packet {}:{} to {}:{}\",\r\n                                header.get_source(),\r\n                                tcp.get_source(),\r\n                                header.get_destination(),\r\n                                tcp.get_destination()\r\n                            );\r\n                        }\r\n                    }\r\n                    _ => println!(\"Ignoring non TCP packet\"),\r\n                }\r\n            }\r\n        }\r\n        _ => println!(\"Ignoring non IPv4 packet\"),\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let interface_name = env::args().nth(1).unwrap();\r\n\r\n    // Get all interfaces\r\n    let interfaces = datalink::interfaces();\r\n    // Filter the list to find the given interface name\r\n    let interface = interfaces\r\n        .into_iter()\r\n        .filter(|iface: &NetworkInterface| iface.name == interface_name)\r\n        .next()\r\n        .expect(\"Error getting interface\");\r\n\r\n    let (_tx, mut rx) = match datalink::channel(&interface, Default::default()) {\r\n        Ok(Ethernet(tx, rx)) => (tx, rx),\r\n        Ok(_) => panic!(\"Unhandled channel type\"),\r\n        Err(e) => {\r\n            panic!(\r\n                \"An error occurred when creating the datalink channel:\r\n                {}\",e\r\n            )\r\n        }\r\n    };\r\n\r\n    // Loop over packets arriving on the given interface\r\n    loop {\r\n        match rx.next() {\r\n            Ok(packet) => {\r\n                let packet = EthernetPacket::new(packet).unwrap();\r\n                handle_packet(&packet);\r\n            }\r\n            Err(e) => {\r\n            panic!(\"An error occurred while reading: {}\", e);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.49.0 (e1884a8e3 2020-12-29)\r\nbinary: rustc\r\ncommit-hash: e1884a8e3c3e813aada8254edfa120e85bf5ffca\r\ncommit-date: 2020-12-29\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.49.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: incremental compilation: could not create session directory lock file: Incorrect function. (os error 1)\r\n\r\nthread 'rustc' panicked at 'trying to get session directory from `IncrCompSession`: NotInitialized', compiler\\rustc_session\\src\\session.rs:923:48\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.49.0 (e1884a8e3 2020-12-29) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81999/timeline", "performed_via_github_app": null, "state_reason": null}