{"url": "https://api.github.com/repos/rust-lang/rust/issues/76185", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76185/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76185/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76185/events", "html_url": "https://github.com/rust-lang/rust/issues/76185", "id": 689720961, "node_id": "MDU6SXNzdWU2ODk3MjA5NjE=", "number": 76185, "title": "Lifetime '2 not defined in error message for \"lifetime may not live long enough\"", "user": {"login": "taladar", "id": 21060, "node_id": "MDQ6VXNlcjIxMDYw", "avatar_url": "https://avatars.githubusercontent.com/u/21060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taladar", "html_url": "https://github.com/taladar", "followers_url": "https://api.github.com/users/taladar/followers", "following_url": "https://api.github.com/users/taladar/following{/other_user}", "gists_url": "https://api.github.com/users/taladar/gists{/gist_id}", "starred_url": "https://api.github.com/users/taladar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taladar/subscriptions", "organizations_url": "https://api.github.com/users/taladar/orgs", "repos_url": "https://api.github.com/users/taladar/repos", "events_url": "https://api.github.com/users/taladar/events{/privacy}", "received_events_url": "https://api.github.com/users/taladar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-09-01T00:54:43Z", "updated_at": "2020-09-01T16:41:53Z", "closed_at": "2020-09-01T16:41:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to return an async block using the parameter value of a closure and got a \"lifetime may not be long enough\" error message with \"returning this value requires that `'1` must outlive `'2` but it never actually mentioned what it named `'2`\r\n\r\nI tried this code (Edition 2018, Dependencies serenity 0.9.0-rc.0 features framework, standard_framework, rustls_backend, collector and tokio 0.2 with features macros)\r\n\r\n```rust\r\nuse std::{\r\n    collections::HashSet, env,\r\n    time::Duration,\r\n};\r\nuse serenity::{\r\n    async_trait,\r\n    collector::MessageCollectorBuilder,\r\n    // Collectors are streams, that means we can use `StreamExt` and\r\n    // `TryStreamExt`.\r\n    futures::stream::StreamExt,\r\n    framework::standard::{\r\n        Args, CommandResult, CommandGroup,\r\n        HelpOptions, help_commands, StandardFramework,\r\n        macros::{command, group, help},\r\n    },\r\n    prelude::*,\r\n    http::Http,\r\n    model::prelude::*,\r\n};\r\n\r\n#[group(\"trivia\")]\r\n#[commands(start_trivia)]\r\nstruct Trivia;\r\n\r\n#[help]\r\nasync fn my_help(\r\n    context: &Context,\r\n    msg: &Message,\r\n    args: Args,\r\n    help_options: &'static HelpOptions,\r\n    groups: &[&'static CommandGroup],\r\n    owners: HashSet<UserId>\r\n) -> CommandResult {\r\n    let _ = help_commands::with_embeds(context, msg, args, &help_options, groups, owners).await;\r\n    Ok(())\r\n}\r\n\r\nstruct Handler;\r\n\r\n#[async_trait]\r\nimpl EventHandler for Handler {\r\n    async fn ready(&self, _: Context, ready: Ready) {\r\n        println!(\"{} is connected!\", ready.user.name);\r\n    }\r\n}\r\n\r\n#[tokio::main]\r\nasync fn main() {\r\n    // Configure the client with your Discord bot token in the environment.\r\n    let token = env::var(\"DISCORD_TOKEN\").expect(\r\n        \"Expected a token in the environment\",\r\n    );\r\n\r\n    let http = Http::new_with_token(&token);\r\n\r\n    // We will fetch your bot's id.\r\n    let bot_id = match http.get_current_application_info().await {\r\n        Ok(info) => {\r\n            info.id\r\n        },\r\n        Err(why) => panic!(\"Could not access application info: {:?}\", why),\r\n    };\r\n\r\n    let framework = StandardFramework::new()\r\n        .configure(|c| c\r\n                   .with_whitespace(true)\r\n                   .on_mention(Some(bot_id))\r\n                   .prefix(\"~\")\r\n                   .delimiters(vec![\", \", \",\"]))\r\n        .help(&MY_HELP)\r\n        .group(&TRIVIA_GROUP);\r\n\r\n    let mut client = Client::new(&token)\r\n        .event_handler(Handler)\r\n        .framework(framework)\r\n        .await\r\n        .expect(\"Err creating client\");\r\n\r\n    if let Err(why) = client.start().await {\r\n        println!(\"Client error: {:?}\", why);\r\n    }\r\n}\r\n\r\n#[command]\r\nasync fn start_trivia(ctx: &Context, msg: &Message, _: Args) -> CommandResult {\r\n    let _ =  msg.reply(ctx, \"What kind of game are we playing here?\").await;\r\n\r\n    // We can create a collector from scratch too using this builder future.\r\n    let collector = MessageCollectorBuilder::new(&ctx)\r\n        .channel_id(msg.channel_id)\r\n        .timeout(Duration::from_secs(60))\r\n    // Build the collector.\r\n        .await;\r\n\r\n    // Let's acquire borrow HTTP to send a message inside the `async move`.\r\n    let http = &ctx.http;\r\n\r\n    collector.skip_while(|msg| async move { msg.content != \"trivia\" }).take(1usize).then(|msg| async move {\r\n        msg.reply(http, \"You got the correct answer\").await;\r\n    }).collect::<Vec<_>>().await;\r\n\r\n    Ok(())\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen:\r\n\r\nFor it to compile or give a readable error message.\r\n\r\nInstead, this happened:\r\n\r\n```\r\nerror: lifetime may not live long enough\r\n  --> src/main.rs:98:32\r\n   |\r\n98 |     collector.skip_while(|msg| async move { msg.content != \"trivia\" }).take(1usize).then(|msg| async move {\r\n   |                           ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\r\n   |                           |  |\r\n   |                           |  return type of closure is impl std::future::Future\r\n   |                           has type `&'1 std::sync::Arc<serenity::model::channel::message::Message>`\r\n\r\nerror: aborting due to previous error\r\n\r\nerror: could not compile `discord-trivia`.\r\n```\r\n\r\nNote how it never mentions what it named `'2` Presumably it is the return type but it would still be nice to have that actually printed somewhere as part of the error message when names are used that are nowhere in my code.", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76185/timeline", "performed_via_github_app": null, "state_reason": "completed"}