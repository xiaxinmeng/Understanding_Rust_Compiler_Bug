{"url": "https://api.github.com/repos/rust-lang/rust/issues/59954", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59954/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59954/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59954/events", "html_url": "https://github.com/rust-lang/rust/issues/59954", "id": 432929260, "node_id": "MDU6SXNzdWU0MzI5MjkyNjA=", "number": 59954, "title": "ICE when iterating over string literal with manual newline insertions", "user": {"login": "snOm3ad", "id": 29729942, "node_id": "MDQ6VXNlcjI5NzI5OTQy", "avatar_url": "https://avatars.githubusercontent.com/u/29729942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snOm3ad", "html_url": "https://github.com/snOm3ad", "followers_url": "https://api.github.com/users/snOm3ad/followers", "following_url": "https://api.github.com/users/snOm3ad/following{/other_user}", "gists_url": "https://api.github.com/users/snOm3ad/gists{/gist_id}", "starred_url": "https://api.github.com/users/snOm3ad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snOm3ad/subscriptions", "organizations_url": "https://api.github.com/users/snOm3ad/orgs", "repos_url": "https://api.github.com/users/snOm3ad/repos", "events_url": "https://api.github.com/users/snOm3ad/events{/privacy}", "received_events_url": "https://api.github.com/users/snOm3ad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-14T03:47:15Z", "updated_at": "2020-11-12T18:04:37Z", "closed_at": "2020-11-12T18:04:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "The error message by the compiler was, `thread 'rustc' panicked at 'index out of bounds: the len is 73 but the index is 74', /rustc/91856ed52c58aa5ba66a015354d1cc69e9779bdf/src/libcore/slice/mod.rs:2539:10`.\r\n\r\nThe code:\r\n```rust\r\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\r\n    let mut results = Vec::new();\r\n    for line in contents.lines() {\r\n        if line.contains(query) {\r\n            results.push(line);\r\n        }\r\n    }\r\n    results\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    #[test]\r\n    fn one_result() {\r\n        let query = \"duct\";\r\n        let contents = \"Rust:\\nsafe, fast, productive.\\nPick three.\";\r\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\r\n    }\r\n}\r\n```\r\nChanging the `contents` string literal to be formatted in the conventional way, i.e. without the manually inserted newline characters makes the code compile again (see below).\r\n\r\n```rust\r\n        let contents = \"\\\r\nRust:\r\nsafe, fast, productive.\r\nPick three.\";\r\n```\r\n\r\n## Meta\r\n\r\nThe complete error message\r\n```\r\n$ cargo test\r\n   Compiling minigrep v0.1.0 (/Users/snOm3ad/Desktop/rust/minigrep)\r\nthread 'rustc' panicked at 'index out of bounds: the len is 73 but the index is 74', /rustc/91856ed52c58aa5ba66a015354d1cc69e9779bdf/src/libcore/slice/mod.rs:2539:10                                    \r\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports                                                                                        \r\n\r\nnote: rustc 1.34.0 (91856ed52 2019-04-10) running on x86_64-apple-darwin\r\n\r\nnote: compiler flags: -C debuginfo=2 -C incremental\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `minigrep`.\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror: build failed\r\n```\r\n\r\nThe backtrace:\r\n```\r\nstack backtrace:                                                                                                                                                                                          \r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace                                                                                                                                           \r\n   1: std::sys_common::backtrace::_print                                                                                                                                                                  \r\n   2: std::panicking::default_hook::{{closure}}                                                                                                                                                           \r\n   3: std::panicking::default_hook                                                                                                                                                                        \r\n   4: rustc::util::common::panic_hook                                                                                                                                                                     \r\n   5: std::panicking::rust_panic_with_hook                                                                                                                                                                \r\n   6: std::panicking::continue_panic_fmt                                                                                                                                                                  \r\n   7: rust_begin_unwind                                                                                                                                                                                   \r\n   8: core::panicking::panic_fmt                                                                                                                                                                          \r\n   9: core::panicking::panic_bounds_check                                                                                                                                                                 \r\n  10: <rustc::ty::query::on_disk_cache::CacheDecoder<'a, 'tcx, 'x> as serialize::serialize::SpecializedDecoder<syntax_pos::span_encoding::Span>>::specialized_decode                                      \r\n  11: serialize::serialize::Decoder::read_struct                                                                                                                                                          \r\n  12: serialize::serialize::Decoder::read_seq                                                                                                                                                             \r\n  13: serialize::serialize::Decoder::read_struct                                                                                                                                                          \r\n  14: serialize::serialize::Decoder::read_seq                                                                                                                                                             \r\n  15: <rustc::mir::Mir<'tcx> as serialize::serialize::Decodable>::decode::{{closure}}                                                                                                                     \r\n  16: rustc::ty::query::on_disk_cache::OnDiskCache::try_load_query_result                                                                                                                                 \r\n  17: <rustc::ty::query::queries::optimized_mir<'tcx> as rustc::ty::query::config::QueryDescription<'tcx>>::try_load_from_disk                                                                            \r\n  18: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query                                                                                                            \r\n  19: rustc_mir::monomorphize::collector::collect_items_rec                                                                                                                                               \r\n  20: rustc_mir::monomorphize::collector::collect_items_rec                                                                                                                                               \r\n  21: rustc_mir::monomorphize::collector::collect_crate_mono_items::{{closure}}                                                                                                                           \r\n  22: rustc::util::common::time                                                                                                                                                                           \r\n  23: rustc_mir::monomorphize::collector::collect_crate_mono_items                                                                                                                                        \r\n  24: rustc::util::common::time                                                                                                                                                                           \r\n  25: rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items                                                                                                                             \r\n  26: rustc::ty::query::__query_compute::collect_and_partition_mono_items                                                                                                                                 \r\n  27: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::collect_and_partition_mono_items<'tcx>>::compute                                              \r\n  28: rustc::dep_graph::graph::DepGraph::with_task_impl                                                                                                                                                   \r\n  29: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query                                                                                                            \r\n  30: rustc_codegen_ssa::base::codegen_crate                                                                                                                                                              \r\n  31: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_utils::codegen_backend::CodegenBackend>::codegen_crate                                                                                     \r\n  32: rustc::util::common::time                                                                                                                                                                           \r\n  33: rustc_driver::driver::phase_4_codegen                                                                                                                                                               \r\n  34: rustc_driver::driver::compile_input::{{closure}}                                                                                                                                                    \r\n  35: <std::thread::local::LocalKey<T>>::with                                                                                                                                                             \r\n  36: rustc::ty::context::TyCtxt::create_and_enter                                                                                                                                                        \r\n  37: rustc_driver::driver::compile_input                                                                                                                                                                 \r\n  38: rustc_driver::run_compiler_with_pool                                                                                                                                                                \r\n  39: <scoped_tls::ScopedKey<T>>::set                                                                                                                                                                     \r\n  40: rustc_driver::run_compiler                                                                                                                                                                          \r\n  41: syntax::with_globals                                                                                                                                                                                \r\n  42: __rust_maybe_catch_panic                                                                                                                                                                            \r\n  43: <F as alloc::boxed::FnBox<A>>::call_box                                                                                                                                                             \r\n  44: std::sys::unix::thread::Thread::new::thread_start                                                                                                                                                   \r\n  45: _pthread_body                                                                                                                                                                                       \r\n  46: _pthread_start                                                                                                                                                                                      \r\nquery stack during panic:                                                                                                                                                                                 \r\n#0 [optimized_mir] processing `tests::one_result::{{closure}}`                                                                                                                                           \r\n#1 [collect_and_partition_mono_items] collect_and_partition_mono_items                                                                                                                                   \r\nend of query stack\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59954/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59954/timeline", "performed_via_github_app": null, "state_reason": "completed"}