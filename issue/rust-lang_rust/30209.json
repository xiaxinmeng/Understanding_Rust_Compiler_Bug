{"url": "https://api.github.com/repos/rust-lang/rust/issues/30209", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30209/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30209/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30209/events", "html_url": "https://github.com/rust-lang/rust/issues/30209", "id": 120460978, "node_id": "MDU6SXNzdWUxMjA0NjA5Nzg=", "number": 30209, "title": "UFCS can bypass trait stability", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 201852178, "node_id": "MDU6TGFiZWwyMDE4NTIxNzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-stability", "name": "A-stability", "color": "f7e101", "default": false, "description": "Area: issues related to #[stable] and #[unstable] attributes themselves."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-04T18:42:39Z", "updated_at": "2019-12-25T17:18:35Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now we have a trick in the standard library where sometimes a trait is unstable but the methods are stable. This is primarily used for `SliceConcatExt` to make `join` stable on slices but you can't import the trait or rely on the fact that it's defined through a trait.\n\nThere are a few ways to bypass this, however:\n\n``` rust\n// foo.rs\n#![feature(staged_api)]                        \n#![stable(feature = \"foo\", since = \"1.2.0\")]   \n\n#[unstable(feature = \"bar\", issue = \"0\")]      \npub trait Foo {                                \n    #[stable(feature = \"foo\", since = \"1.2.0\")]\n    fn foo(&self) {}                           \n}                                              \n\n#[stable(feature = \"foo\", since = \"1.2.0\")]    \nimpl Foo for i32 {}                            \n```\n\n``` rust\n// bar.rs\n#![allow(warnings)]               \n\nextern crate foo;                 \n\n// this is expected to compile and work A-OK                                  \nfn test1() {                      \n    use foo::*;                   \n    1i32.foo();\n}                                 \n\n// this is expected to fail to compile (e.g. needs the feature)\nfn test2() {                      \n    use foo::Foo; //~ ERROR\n}                                 \n\n// This should *also* fail to compile, but it does not\nfn test3() {                      \n    foo::Foo::foo(&1) // no error\n}                                 \n\n// Like above, this should also fail to compile, but it does not\nfn test4() {                      \n    <i32 as foo::Foo>::foo(&1) // no error\n}                                 \n\nfn main() {}                      \n```\n\n```\n$ multirust run nightly rustc foo.rs --crate-type lib\n$ multirust run nightly rustc bar.rs\nbar.rs:11:9: 11:17 error: use of unstable library feature 'bar' (see issue #0)\nbar.rs:11     use foo::Foo;\n                  ^~~~~~~~\nbar.rs:11:9: 11:17 help: add #![feature(bar)] to the crate attributes to enable\nerror: aborting due to previous error\n```\n\nI thought that we crawled paths pretty meticulously, but apparently not :(\n\ncc @petrochenkov \ncc @rust-lang/libs \n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30209/timeline", "performed_via_github_app": null, "state_reason": null}