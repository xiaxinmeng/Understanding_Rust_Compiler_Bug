{"url": "https://api.github.com/repos/rust-lang/rust/issues/85916", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85916/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85916/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85916/events", "html_url": "https://github.com/rust-lang/rust/issues/85916", "id": 908674383, "node_id": "MDU6SXNzdWU5MDg2NzQzODM=", "number": 85916, "title": "ICE regarding Allocator API", "user": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2021-06-01T20:47:22Z", "updated_at": "2021-06-03T17:05:38Z", "closed_at": "2021-06-03T17:05:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\nI got an ICE while doing `cargo t --features nightly` with this:\r\n\r\n### Code snippets\r\n\r\n`lib.rs`\r\n```Rust\r\n#![cfg_attr(not(test), no_std)]\r\n#![cfg_attr(feature = \"nightly\", feature(allocator_api, maybe_uninit_extra, maybe_uninit_uninit_array, new_uninit))]\r\n\r\nextern crate alloc;\r\n\r\nuse core::mem::{forget, transmute_copy, MaybeUninit};\r\nuse core::ptr::{drop_in_place, slice_from_raw_parts_mut};\r\n\r\n#[cfg_attr(not(feature=\"nightly\"), path=\"stable.rs\")]\r\n#[cfg_attr(feature=\"nightly\", path=\"nightly.rs\")]\r\nmod boxed;\r\npub use boxed::*;\r\n\r\n#[inline]\r\npub(crate) fn init_slice<T, F: FnMut(usize) -> T>(s: &mut [MaybeUninit<T>], mut f: F) {\r\n    struct Guard<T> {\r\n        ptr: *mut T,\r\n        len: usize,\r\n    }\r\n\r\n    impl<T> Drop for Guard<T> {\r\n        fn drop(&mut self) {\r\n            // SAFETY: It is guaranteed that exactly `self.len` items in the slice have been initialized.\r\n            // `self.ptr` is guaranteed to be valid, even if `T` is a ZST, because it has been passed in\r\n            // through the slice `s`.\r\n            unsafe { drop_in_place(slice_from_raw_parts_mut(self.ptr, self.len)) };\r\n        }\r\n    }\r\n\r\n    let mut guard = Guard {\r\n        ptr: s.as_mut_ptr() as *mut T,\r\n        len: 0,\r\n    };\r\n\r\n    for (i, a) in s.iter_mut().enumerate() {\r\n        // Dropping a `MaybeUninit<T>` does nothing, so assigning to it like this\r\n        // does not cause any memory unsafety issues.\r\n        *a = MaybeUninit::new(f(i));\r\n        guard.len += 1;\r\n    }\r\n\r\n    forget(guard);\r\n}\r\n```\r\n\r\n`nightly.rs`\r\n```rust\r\nuse crate::init_slice;\r\nuse alloc::{\r\n    alloc::{Allocator, Global},\r\n    boxed::Box,\r\n};\r\nuse core::mem::MaybeUninit;\r\n\r\n/// Initialize a dynamically-sized heap-allocated slice.\r\n///\r\n/// This function takes in the length of the returned slice as well as a function, which can use the index in the array to compute\r\n/// the value for the item at that index. The function needs to implement [`FnMut`], which means it can also carry internal mutable\r\n/// state which persists for all items.\r\n///\r\n/// # Examples\r\n///\r\n/// ```\r\n/// #![feature(allocator_api)]\r\n/// use init_array::init_boxed_slice_in;\r\n/// use std::alloc::Global;\r\n/// assert_eq!(&*init_boxed_slice_in(3, |_| 0, Global), &[0; 3]);\r\n///\r\n/// assert_eq!(&*init_boxed_slice_in(5, |i| i + 1, Global), &[1, 2, 3, 4, 5]);\r\n///\r\n/// let mut state = 0;\r\n///\r\n/// // arr[i] represents the sum of the first `i + 1` natural numbers.\r\n/// let arr = init_boxed_slice_in(5, |i| {\r\n///     state += i + 1;\r\n///     state\r\n/// }, Global);\r\n/// assert_eq!(&*arr, &[1, 3, 6, 10, 15]);\r\n/// ```\r\n#[inline]\r\npub fn init_boxed_slice_in<T, F, A>(n: usize, f: F, alloc: A) -> Box<[T], A>\r\nwhere\r\n    F: FnMut(usize) -> T,\r\n    A: Allocator\r\n{\r\n    let mut arr = Box::new_uninit_slice_in(n, &alloc);\r\n\r\n    init_slice(&mut arr, f);\r\n\r\n    // SAFETY: `init_slice` initialized the entire slice that is given to it, which in this case is the entire allocated slice.\r\n    // Because all the items have been initialized, it's safe to transform it into the initialized slice by casting the pointer.\r\n    unsafe { Box::from_raw_in(Box::into_raw(arr) as _, alloc) }\r\n}\r\n\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.54.0-nightly (657bc0188 2021-05-31)\r\nbinary: rustc\r\ncommit-hash: 657bc01888e6297257655585f9c475a0801db6d2\r\ncommit-date: 2021-05-31\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.54.0-nightly\r\nLLVM version: 12.0.1\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: /rustc/657bc01888e6297257655585f9c475a0801db6d2\\compiler\\rustc_codegen_ssa\\src\\mir\\operand.rs:132:38: Deref of by-Ref operand OperandRef(Ref((%\"std::boxed::Box<[std::mem::MaybeUninit<usize>], &std::alloc::Global>\"*:  %6 = alloca %\"std::boxed::Box<[std::mem::MaybeUninit<usize>], &std::alloc::Global>\", align 8), None, Align { pow2: 3 \r\n}) @ TyAndLayout { ty: std::boxed::Box<[std::mem::MaybeUninit<usize>], &std::alloc::Global>, layout: Layout { fields: Arbitrary { offsets: [Size { raw: 0 }, Size { raw: 16 }], memory_index: [0, 1] }, variants: Single { index: 0 }, abi: Aggregate { sized: true }, largest_niche: Some(Niche { offset: Size { raw: 0 }, scalar: Scalar { value: Pointer, valid_range: 1..=18446744073709551615 } }), align: AbiAndPrefAlign { abi: Align { pow2: 3 }, pref: Align { pow2: 3 } }, size: Size { raw: 24 } } })\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\nWhen running `cargo t --features nightly` with `RUST_BACKTRACE=1`, no backtrace appears. When running it with\r\n`RUST_BACKTRACE=full`, I get the following backtrace:\r\n\r\n```\r\nstack backtrace:\r\n   0:     0x7ff830c2645f - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h64b9092317105df4\r\n   1:     0x7ff830c4f6aa - core::fmt::write::h4c8edbe553f89713\r\n   2:     0x7ff830c199e8 - <std::io::IoSlice as core::fmt::Debug>::fmt::h97785632734c4dcf\r\n   3:     0x7ff830c2a626 - std::panicking::take_hook::h12edddce955e43f1\r\n   4:     0x7ff830c2a109 - std::panicking::take_hook::h12edddce955e43f1\r\n   5:     0x7fffe9d29fa7 - rustc_driver::report_ice::h3049cb25589a84c3\r\n   6:     0x7ff830c2ae79 - std::panicking::rust_panic_with_hook::hb792f6deccc56d02\r\n   7:     0x7fffedefecd0 - <rustc_errors::snippet::Style as core::fmt::Debug>::fmt::hb979f8072521b87e\r\n   8:     0x7fffedefec49 - <rustc_errors::snippet::Style as core::fmt::Debug>::fmt::hb979f8072521b87e\r\n   9:     0x7fffee1a5681 - rustc_query_system::query::job::report_cycle::h81fc5a257d0f479e\r\n  10:     0x7fffedf2b370 - rustc_errors::annotate_snippet_emitter_writer::AnnotateSnippetEmitterWriter::ui_testing::h625a176cbb1ed0cb\r\n  11:     0x7fffedf31d25 - rustc_errors::HandlerInner::err_count::hafc992165e552e1d\r\n  12:     0x7fffedf2f822 - rustc_errors::Handler::bug::hff657bce9edf0b10\r\n  13:     0x7fffeddf30c8 - rustc_middle::ty::sty::<impl rustc_middle::ty::list::List<rustc_middle::ty::sty::Binder<rustc_middle::ty::sty::ExistentialPredicate>>>::principal_def_id::h4203bcb716d2851d\r\n  14:     0x7fffeddec240 - rustc_middle::ty::subst::<impl rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>::truncate_to::h5faae0127e315250\r\n  15:     0x7fffeddec1e8 - rustc_middle::ty::subst::<impl rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>::truncate_to::h5faae0127e315250\r\n  16:     0x7fffeddf2ff9 - rustc_middle::ty::sty::<impl rustc_middle::ty::list::List<rustc_middle::ty::sty::Binder<rustc_middle::ty::sty::ExistentialPredicate>>>::principal_def_id::h4203bcb716d2851d\r\n  17:     0x7fffee1a18c7 - rustc_middle::util::bug::bug_fmt::h9bfd4648b61d87bb\r\n  18:     0x7fffea008d95 - rustc_codegen_llvm::llvm_::archive_ro::Child::data::hc789694af6654b76\r\n  19:     0x7fffea00a466 - rustc_codegen_llvm::llvm_::archive_ro::Child::data::hc789694af6654b76\r\n  20:     0x7fffe9ffe9a9 - rustc_codegen_llvm::llvm_::archive_ro::Child::data::hc789694af6654b76\r\n  21:     0x7fffe9f8ab42 - rustc_codegen_llvm::type_::<impl rustc_codegen_ssa::traits::type_::LayoutTypeMethods for rustc_codegen_llvm::context::CodegenCx>::reg_backend_type::h895b44fdd8dd0179\r\n  22:     0x7fffe9fc8e1c - <rustc_codegen_llvm::llvm_::ffi::PassKind as core::fmt::Debug>::fmt::hf964a257e2f76c5e\r\n  23:     0x7fffe9ffadff - <rustc_codegen_llvm::base::ValueIter as core::iter::traits::iterator::Iterator>::next::h961b1947c8d7e5f7\r\n  24:     0x7fffe9f8ca07 - rustc_codegen_llvm::type_::<impl rustc_codegen_ssa::traits::type_::LayoutTypeMethods for rustc_codegen_llvm::context::CodegenCx>::reg_backend_type::h895b44fdd8dd0179\r\n  25:     0x7fffe9ffa711 - <rustc_codegen_llvm::base::ValueIter as core::iter::traits::iterator::Iterator>::next::h961b1947c8d7e5f7\r\n  26:     0x7fffe9fa6201 - <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate::h2ae70781e72ad261\r\n  27:     0x7fffe9e5ed3f - rustc_interface::passes::BoxedResolver::to_resolver_outputs::h0d1350e5e7985bf3\r\n  28:     0x7fffe9e810c6 - rustc_interface::queries::Queries::ongoing_codegen::h0e9f2e74141d6805\r\n  29:     0x7fffe9d767dd - <rustc_driver::args::Error as core::fmt::Debug>::fmt::h37b23c9fa6ec772d\r\n  30:     0x7fffe9d44841 - rustc_driver::pretty::print_after_hir_lowering::h3093e466fb72c6e2\r\n  31:     0x7fffe9d77869 - <rustc_driver::args::Error as core::fmt::Debug>::fmt::h37b23c9fa6ec772d\r\n  32:     0x7fffe9d45bfb - rustc_driver::pretty::print_after_hir_lowering::h3093e466fb72c6e2\r\n  33:     0x7fffe9d96c81 - <rustc_driver::args::Error as core::fmt::Debug>::fmt::h37b23c9fa6ec772d\r\n  34:     0x7fffe9d2d9ed - <rustc_driver::Compilation as core::fmt::Debug>::fmt::hb0ab8f97bd4d8039\r\n  35:     0x7ff830c38c3c - std::sys::windows::thread::Thread::new::h7f0299499f002b12\r\n  36:     0x7ff880be7034 - BaseThreadInitThunk\r\n  37:     0x7ff881b82651 - RtlUserThreadStart\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85916/timeline", "performed_via_github_app": null, "state_reason": "completed"}