{"url": "https://api.github.com/repos/rust-lang/rust/issues/92282", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92282/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92282/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92282/events", "html_url": "https://github.com/rust-lang/rust/issues/92282", "id": 1088658957, "node_id": "I_kwDOAAsO6M5A454N", "number": 92282, "title": "incorrect type is inferred for a local variable holding a closure", "user": {"login": "doy", "id": 78547, "node_id": "MDQ6VXNlcjc4NTQ3", "avatar_url": "https://avatars.githubusercontent.com/u/78547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doy", "html_url": "https://github.com/doy", "followers_url": "https://api.github.com/users/doy/followers", "following_url": "https://api.github.com/users/doy/following{/other_user}", "gists_url": "https://api.github.com/users/doy/gists{/gist_id}", "starred_url": "https://api.github.com/users/doy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doy/subscriptions", "organizations_url": "https://api.github.com/users/doy/orgs", "repos_url": "https://api.github.com/users/doy/repos", "events_url": "https://api.github.com/users/doy/events{/privacy}", "received_events_url": "https://api.github.com/users/doy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-12-25T21:37:32Z", "updated_at": "2021-12-26T04:15:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nuse std::collections::HashMap;\r\nuse std::hash::Hash;\r\n\r\npub struct Foo<T>\r\nwhere\r\n    T: Hash + Eq + Clone + 'static,\r\n{\r\n    rule: Box<dyn Fn(&T) -> Option<Vec<(T, u64)>>>\r\n}\r\n\r\nimpl<T> Foo<T>\r\nwhere\r\n    T: Hash + Eq + Clone + 'static\r\n{\r\n    pub fn new(rules: HashMap<T, Vec<(T, u64)>>) -> Self {\r\n        let rule = Box::new(move |src| rules.get(src).map(|o| o.to_owned()));\r\n        Self { rule }\r\n    }\r\n}\r\n```\r\n(https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=f40ec4a2d13b41aa91d6a48ee04214bf)\r\n\r\nI expected to see this happen: this should compile, because this equivalent(?) code compiles:\r\n```rust\r\nuse std::collections::HashMap;\r\nuse std::hash::Hash;\r\n\r\npub struct Foo<T>\r\nwhere\r\n    T: Hash + Eq + Clone + 'static,\r\n{\r\n    rule: Box<dyn Fn(&T) -> Option<Vec<(T, u64)>>>\r\n}\r\n\r\nimpl<T> Foo<T>\r\nwhere\r\n    T: Hash + Eq + Clone + 'static\r\n{\r\n    pub fn new(rules: HashMap<T, Vec<(T, u64)>>) -> Self {\r\n        Self { rule: Box::new(move |src| rules.get(src).map(|o| o.to_owned())) }\r\n    }\r\n}\r\n```\r\n(https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=2809e18e87c789f7591fe7ed57d13ba1)\r\n\r\nthe only difference here is the intermediate variable `rule`, which appears to be inferring an incorrect type for some reason. the code also compiles successfully if `rule` is given an explicit type annotation with the same type as defined in the struct.\r\n\r\nInstead, this happened:\r\n```\r\nerror: implementation of `FnOnce` is not general enough\r\n  --> src/lib.rs:17:16\r\n   |\r\n17 |         Self { rule }\r\n   |                ^^^^ implementation of `FnOnce` is not general enough\r\n   |\r\n   = note: closure with signature `fn(&'2 T) -> Option<Vec<(T, u64)>>` must implement `FnOnce<(&'1 T,)>`, for any lifetime `'1`...\r\n   = note: ...but it actually implements `FnOnce<(&'2 T,)>`, for some specific lifetime `'2`\r\n```\r\n\r\nthis seems maybe related to https://github.com/rust-lang/rust/issues/87079 or https://github.com/rust-lang/rust/issues/70263 but i can't tell if it's actually the same problem or not (this one isn't a problem with function arguments).\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\n1.59.0-nightly\r\n\r\n(2021-12-23 c09a9529c51cde41c110)\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92282/timeline", "performed_via_github_app": null, "state_reason": null}