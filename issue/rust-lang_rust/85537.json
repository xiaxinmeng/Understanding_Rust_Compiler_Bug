{"url": "https://api.github.com/repos/rust-lang/rust/issues/85537", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85537/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85537/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85537/events", "html_url": "https://github.com/rust-lang/rust/issues/85537", "id": 897731109, "node_id": "MDU6SXNzdWU4OTc3MzExMDk=", "number": 85537, "title": "Inconsistent results between split functions and chained functions as well as match expression", "user": {"login": "superwushu", "id": 749998, "node_id": "MDQ6VXNlcjc0OTk5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/749998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/superwushu", "html_url": "https://github.com/superwushu", "followers_url": "https://api.github.com/users/superwushu/followers", "following_url": "https://api.github.com/users/superwushu/following{/other_user}", "gists_url": "https://api.github.com/users/superwushu/gists{/gist_id}", "starred_url": "https://api.github.com/users/superwushu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/superwushu/subscriptions", "organizations_url": "https://api.github.com/users/superwushu/orgs", "repos_url": "https://api.github.com/users/superwushu/repos", "events_url": "https://api.github.com/users/superwushu/events{/privacy}", "received_events_url": "https://api.github.com/users/superwushu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-05-21T06:35:55Z", "updated_at": "2021-05-21T12:24:07Z", "closed_at": "2021-05-21T07:48:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nVery accidentally, I hit an issue when playing with the [sample web server](https://doc.rust-lang.org/book/ch20-03-graceful-shutdown-and-cleanup.html) (full code in the end) from The Book.\r\n\r\nThe web server is supposed to handle multiple requests by `Worker`'s threads in the `ThreadPool`. The sample code has no problem. Making two requests simultaneously:\r\n```\r\n(console 1)\r\n$ curl localhost:7878/sleep    # return the result after 5 seconds\r\n\r\n(console 2)\r\n$ curl localhost:7878/404      # return the result immediately\r\n\r\n(console 0)\r\n$ cargo run\r\n...\r\nWorker 2 got a job; executing.\r\nWorker 0 got a job; executing.\r\n```\r\n\r\nThat worked as expected.\r\n\r\nHowever, when I split the chained message unwrapping:\r\n\r\n```rust\r\nimpl Worker {\r\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\r\n        let thread = thread::spawn(move || loop {\r\n-           let message = receiver.lock().unwrap().recv().unwrap();\r\n+           let recv = receiver.lock().unwrap();\r\n+           let message = recv.recv().unwrap();\r\n            match message {\r\n                Message::NewJob(job) => {\r\n                    println!(\"Worker {} got a job; executing.\", id);\r\n                    job();\r\n                }\r\n   ...\r\n```\r\nOr whatever other forms I tried:\r\n\r\n```rust\r\nlet recv = receiver.lock();\r\nlet message = unwrap().recv().unwrap();\r\n```\r\n\r\n```rust\r\nlet recv = receiver.lock().unwrap().recv();\r\nlet message = recv.unwrap();\r\n```\r\n\r\nor even\r\n\r\n```rust\r\nimpl Worker {\r\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\r\n        let thread = thread::spawn(move || loop {\r\n-           let message = receiver.lock().unwrap().recv().unwrap();\r\n-           match message {\r\n+           match receiver.lock().unwrap().recv().unwrap() {\r\n                Message::NewJob(job) => {\r\n                    println!(\"Worker {} got a job; executing.\", id);\r\n                    job();\r\n                }\r\n\r\n```\r\n\r\nThe result is completely different:\r\n\r\n```\r\n(console 1)\r\n$ curl localhost:7878/sleep    # return the result after 5 seconds\r\n\r\n(console 2)\r\n$ curl localhost:7878/404      # return the result after the above curl completes\r\n\r\n(console 0)\r\n$ cargo run\r\n...\r\nWorker 0 got a job; executing.\r\n(after ~5 seconds)\r\nthread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: \"PoisonError { inner: .. }\"', src/lib.rs:80:35\r\nthread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: \"PoisonError { inner: .. }\"', src/lib.rs:80:35\r\nthread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: \"PoisonError { inner: .. }\"', src/lib.rs:80:35\r\n```\r\n\r\nSplit functions probably differ in semantics from chained functions. But I'm quite confused by omitting the variable `message` and moving the chained functions to the `match` expression.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nTried both stable and nightly.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.50.0 (cb75ad5db 2021-02-10)\r\nbinary: rustc\r\ncommit-hash: cb75ad5db02783e8b0222fee363c5f63f7e2cf5b\r\ncommit-date: 2021-02-10\r\nhost: x86_64-apple-darwin\r\nrelease: 1.50.0\r\n```\r\n```\r\nrustc 1.54.0-nightly (40d230204 2021-05-20)\r\nbinary: rustc\r\ncommit-hash: 40d23020470db06903589e210c83a4936f22d52a\r\ncommit-date: 2021-05-20\r\nhost: x86_64-apple-darwin\r\nrelease: 1.54.0-nightly\r\nLLVM version: 12.0.1\r\n```\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nthread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }', src/main.rs:42:49\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/std/src/panicking.rs:493:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/core/src/panicking.rs:92:14\r\n   2: core::option::expect_none_failed\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/core/src/option.rs:1268:5\r\n   3: core::result::Result<T,E>::unwrap\r\n             at /Users/wushu/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:973:23\r\n   4: bootme_rs::handle_connection\r\n             at ./src/main.rs:42:20\r\n   5: bootme_rs::main::{{closure}}\r\n             at ./src/main.rs:19:13\r\n   6: core::ops::function::FnOnce::call_once{{vtable.shim}}\r\n             at /Users/wushu/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/function.rs:227:5\r\n   7: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\n             at /Users/wushu/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs:1328:9\r\n   8: bootme_rs::lib::Worker::new::{{closure}}\r\n             at ./src/lib.rs:84:21\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nthread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: \"PoisonError { inner: .. }\"', src/lib.rs:80:35\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/std/src/panicking.rs:493:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/core/src/panicking.rs:92:14\r\n   2: core::option::expect_none_failed\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/core/src/option.rs:1268:5\r\n   3: core::result::Result<T,E>::unwrap\r\n             at /Users/wushu/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:973:23\r\n   4: bootme_rs::lib::Worker::new::{{closure}}\r\n             at ./src/lib.rs:80:19\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nthread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: \"PoisonError { inner: .. }\"', src/lib.rs:80:35\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/std/src/panicking.rs:493:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/core/src/panicking.rs:92:14\r\n   2: core::option::expect_none_failed\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/core/src/option.rs:1268:5\r\n   3: core::result::Result<T,E>::unwrap\r\n             at /Users/wushu/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:973:23\r\n   4: bootme_rs::lib::Worker::new::{{closure}}\r\n             at ./src/lib.rs:80:19\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nthread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: \"PoisonError { inner: .. }\"', src/lib.rs:80:35\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/std/src/panicking.rs:493:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/core/src/panicking.rs:92:14\r\n   2: core::option::expect_none_failed\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/core/src/option.rs:1268:5\r\n   3: core::result::Result<T,E>::unwrap\r\n             at /Users/wushu/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:973:23\r\n   4: bootme_rs::lib::Worker::new::{{closure}}\r\n             at ./src/lib.rs:80:19\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85537/timeline", "performed_via_github_app": null, "state_reason": "completed"}