{"url": "https://api.github.com/repos/rust-lang/rust/issues/66708", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66708/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66708/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66708/events", "html_url": "https://github.com/rust-lang/rust/issues/66708", "id": 527728551, "node_id": "MDU6SXNzdWU1Mjc3Mjg1NTE=", "number": 66708, "title": "Decide the precise rules for operand of &raw [const|mut]", "user": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1557340186, "node_id": "MDU6TGFiZWwxNTU3MzQwMTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-raw_ref_op", "name": "F-raw_ref_op", "color": "f9c0cc", "default": false, "description": "`#![feature(raw_ref_op)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-24T17:18:38Z", "updated_at": "2019-11-29T18:53:20Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#66671 implements a check on the operand of `&raw [const|mut]` to ensure that it's not a temporary. It's similar to the check used for the left-hand operand of `=`, but it only allows field and index projections when they are based on a place expression, or it there is at least one deref adjustment involved.\r\n\r\nIt's possible that we want to restrict this to \"at least one deref adjustment from a reference\" or some other variant that limits the use of this with overloaded deref coercions.\r\n\r\n```rust\r\n// The following are all currently OK\r\nStruct A { f: (i32, u32) }\r\nlet x: A = ...;\r\n&raw const x;\r\n&raw const x.f;\r\n&raw const x.f.0;\r\nlet y = &x;\r\n&raw const y;\r\n&raw const *y;\r\n&raw const (*y).f;\r\n&raw const y.f;          // Same as above\r\n&raw const (*y).f.0;\r\n&raw const y.f.0;        // Same as above\r\n\r\n// There's no distinction between `&T` and `Rc<T>`\r\nuse std::rc::Rc;\r\nuse std::ops::Deref;\r\n\r\nlet z = std::rc::Rc::new(x);\r\n&raw const z;\r\n&raw const *(z.deref());\r\n&raw const *z;           // Same as above\r\n&raw const (*z).f;\r\n&raw const z.f;          // Same as above\r\n&raw const (*z).f.0;\r\n&raw const z.f.0;        // Same as above\r\n\r\n// The following are not allowed:\r\n&raw const A { ... };\r\n&raw const A { ... }.f;\r\n&raw const A { ... }.f.0;\r\n\r\n// These are allowed:\r\nconst X: &A = ...;\r\n&raw const *X;\r\n&raw const X.f;\r\n&raw const X.f.0;\r\n\r\n// These are allowed, because they can't easily be distinguished from the above. They all result in immediately dangling pointers.\r\n&raw const *(&A { ... });\r\n&raw const (&A { ... }).f;\r\n&raw const (&A { ... }).f.0;\r\n\r\n// These are also allowed, and seem even more dubious.\r\n&raw const *Rc::new(A { ... });\r\n&raw const Rc::new(A { ... }).f;\r\n&raw const Rc::new(A { ... }).f.0;\r\n```\r\n\r\ncc #64490\r\ncc @Centril @RalfJung @oli-obk \r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66708/timeline", "performed_via_github_app": null, "state_reason": null}