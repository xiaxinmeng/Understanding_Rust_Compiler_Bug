{"url": "https://api.github.com/repos/rust-lang/rust/issues/92197", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92197/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92197/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92197/events", "html_url": "https://github.com/rust-lang/rust/issues/92197", "id": 1086985811, "node_id": "I_kwDOAAsO6M5AyhZT", "number": 92197, "title": "Incorrect non-exaustive match statement (where the user may think that all case are covered)", "user": {"login": "robinmoussu", "id": 6200547, "node_id": "MDQ6VXNlcjYyMDA1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6200547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robinmoussu", "html_url": "https://github.com/robinmoussu", "followers_url": "https://api.github.com/users/robinmoussu/followers", "following_url": "https://api.github.com/users/robinmoussu/following{/other_user}", "gists_url": "https://api.github.com/users/robinmoussu/gists{/gist_id}", "starred_url": "https://api.github.com/users/robinmoussu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robinmoussu/subscriptions", "organizations_url": "https://api.github.com/users/robinmoussu/orgs", "repos_url": "https://api.github.com/users/robinmoussu/repos", "events_url": "https://api.github.com/users/robinmoussu/events{/privacy}", "received_events_url": "https://api.github.com/users/robinmoussu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1839565265, "node_id": "MDU6TGFiZWwxODM5NTY1MjY1", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-terse", "name": "D-terse", "color": "c9f7a3", "default": false, "description": "A diagnostic that doesn't give enough information about the problem at hand"}, {"id": 1976249438, "node_id": "MDU6TGFiZWwxOTc2MjQ5NDM4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-exhaustiveness-checking", "name": "A-exhaustiveness-checking", "color": "f7e101", "default": false, "description": "Relating to exhaustiveness / usefulness checking of patterns"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-12-22T16:22:43Z", "updated_at": "2023-04-04T23:14:21Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n```rust\r\nmatch (order(lhs), order(rhs)) {\r\n    (lhs_, rhs_) if lhs_  < rhs_ => std::cmp::Ordering::Less,\r\n    (lhs_, rhs_) if lhs_  > rhs_ => std::cmp::Ordering::Greater,\r\n    (lhs_, rhs_) if lhs_ == rhs_ => lhs.cmp(rhs),\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n  2 src/main.rs|26 col 15 error   4| non-exhaustive patterns: `(_, _)` not covered                                                                                                                                                                            \r\n  3 ||    |\r\n  4 || 26 |         match (order(lhs), order(rhs)) {\r\n  5 ||    |               ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `(_, _)` not covered\r\n  6 ||    |\r\n  7 ||    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\r\n  8 ||    = note: the matched value is of type `(i32, i32)`\r\n\r\nFor more information about this error, try `rustc --explain E0004`.\r\n```\r\n\r\nAt first, I thought it was a compiler bug (an understandable one since exhaustiveness checking is hard), but then I realized that an buggy (or adversarial) implementation of `Ord` could lead to `lhs` being neither less than, greater than nor equal to `rhs`. So the compiler is right, just confusing.\r\n\r\nIdeally the output should look like (line 8 has been edited):\r\n\r\n```\r\n  2 src/main.rs|26 col 15 error   4| non-exhaustive patterns: `(_, _)` not covered                                                                                                                                                                            \r\n  3 ||    |\r\n  4 || 26 |         match (order(lhs), order(rhs)) {\r\n  5 ||    |               ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `(_, _)` not covered\r\n  6 ||    |\r\n  7 ||    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\r\n  8 ||    = help: a bad implementation of comparison operators of the matched type could lead to all cases not being handled\r\n  9 ||    = \r\n 10 ||    = note: the matched value is of type `(i32, i32)`\r\n\r\nFor more information about this error, try `rustc --explain E0004`.\r\n```\r\n\r\nAnd the error `E0004` could contain or more detailed explanation of why such code isn\u2019t covering all cases.\r\n\r\nIt addition, but I\u2019m less sure of this, a suggestion to be made to either change the last arm to a wildcard (`_ => lhs.cmp(rhs)` or to add an extra arm `_ => unreachable!()` with an explanation of why the user should choose one or the other.\r\n\r\nOf course in this specific case `(i32, i32)` we could trust the implementation, but I\u2019m not sure either that it would be a good idea to special-case them (since it would be even more confusing for a user type that is not special cased).\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92197/timeline", "performed_via_github_app": null, "state_reason": null}