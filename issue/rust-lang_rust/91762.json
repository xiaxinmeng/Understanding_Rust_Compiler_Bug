{"url": "https://api.github.com/repos/rust-lang/rust/issues/91762", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91762/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91762/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91762/events", "html_url": "https://github.com/rust-lang/rust/issues/91762", "id": 1077262526, "node_id": "I_kwDOAAsO6M5ANbi-", "number": 91762, "title": "Typecheck error when using a equality-constrained GAT in a trait.", "user": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 3307663436, "node_id": "MDU6TGFiZWwzMzA3NjYzNDM2", "url": "https://api.github.com/repos/rust-lang/rust/labels/GATs-triaged", "name": "GATs-triaged", "color": "e88000", "default": false, "description": "Issues using the `generic_associated_types` feature that have been triaged"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-12-10T21:55:05Z", "updated_at": "2022-09-08T18:52:24Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nIn this code:\r\n\r\n```rust\r\npub trait Functor {\r\n    type With<T>;\r\n\r\n    fn fmap<T, U>(this: Self::With<T>) -> Self::With<U>;\r\n}\r\n\r\npub trait FunctorExt<T>: Sized {\r\n    type Base: Functor<With<T> = Self>;\r\n\r\n    fn fmap<U>(self) {\r\n        let arg: <Self::Base as Functor>::With<T>;\r\n        let ret: <Self::Base as Functor>::With<U>;\r\n\r\n        arg = self;\r\n        ret = <Self::Base as Functor>::fmap(arg);\r\n    }\r\n}\r\n```\r\n\r\nI would expect the code in `FunctorExt` to compile, as I'm constraining `Self::Base::With<T> = Self`, while `Self::Base::With<U>` should just be whatever `With<T>` is without any extra constraints.\r\n\r\nBut I'm getting this compiler error:\r\n\r\n```text\r\nerror[E0308]: mismatched types\r\n  --> src/case3.rs:15:15\r\n   |\r\n7  | / pub trait FunctorExt<T>: Sized {\r\n8  | |     type Base: Functor<With<T> = Self>;\r\n9  | |\r\n10 | |     fn fmap<U>(self) {\r\n...  |\r\n15 | |         ret = <Self::Base as Functor>::fmap(arg);\r\n   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found type parameter `Self`\r\n16 | |     }\r\n17 | | }\r\n   | |_- this type parameter\r\n   |\r\n   = note: expected associated type `<<Self as FunctorExt<T>>::Base as Functor>::With<U>`\r\n               found type parameter `Self`\r\n   = note: you might be missing a type parameter or trait bound\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `hkt` due to previous error\r\n```\r\n\r\nIt seems to me as if the `Base: Functor<With<T> = Self>;` constraint causes rustc to think that _any_ `With<X>` should be the same type as `Self`, rather than just the one `With<T>` for the specific `T` in scope.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.58.0-nightly (495322d77 2021-11-08)\r\nbinary: rustc\r\ncommit-hash: 495322d776fd6f679cd8cd4ca02b8fa834da654b\r\ncommit-date: 2021-11-08\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.58.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91762/timeline", "performed_via_github_app": null, "state_reason": null}