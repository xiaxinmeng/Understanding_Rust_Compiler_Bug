{"url": "https://api.github.com/repos/rust-lang/rust/issues/10902", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10902/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10902/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10902/events", "html_url": "https://github.com/rust-lang/rust/issues/10902", "id": 24031650, "node_id": "MDU6SXNzdWUyNDAzMTY1MA==", "number": 10902, "title": "borrowck treatment of struct-tuple more liberal than struct with fields", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-12-10T12:34:15Z", "updated_at": "2014-09-15T20:51:05Z", "closed_at": "2014-09-15T20:51:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Forked off of #10766 \n\nA question in #rust  regarding a [borrow checker error](https://gist.github.com/eminence/9797683ba549e1a45fcd) led me on the following exploration.\n\nThe four variants are labelled `one`, `tup`, `two_tuple`, and `two_fields`\n- `one` is just repeating the test case from the description (of #10766).  Its a sanity check that the old error message and behavior still persists.\n- `two_fields` is closest to what achin described in his bug report.  The problem that the borrow checker reports for that code is interesting, and it is replicated by the more minimal test case at the end of this comment.\n- The other two cases are variants of `two_fields` that I made while trying to make as minimal a test case as possible.\n\n```\n% rustc --cfg two_fields --cfg two_tup /tmp/achin.rs\n/tmp/achin.rs:32:8: 32:9 error: cannot infer an appropriate lifetime for region in type/impl due to conflicting requirements\n/tmp/achin.rs:32         P{ car: v1 as &'a T, cdr: v2 as &'a T }\n                         ^\n/tmp/achin.rs:32:34: 32:45 note: first, the lifetime must be contained by the expression at 32:34...\n/tmp/achin.rs:32         P{ car: v1 as &'a T, cdr: v2 as &'a T }\n                                                   ^~~~~~~~~~~\n/tmp/achin.rs:32:34: 32:45 note: ...so that automatically borrowed pointer is valid at the time of borrow\n/tmp/achin.rs:32         P{ car: v1 as &'a T, cdr: v2 as &'a T }\n                                                   ^~~~~~~~~~~\n/tmp/achin.rs:32:16: 32:27 note: but, the lifetime must also be contained by the expression at 32:16...\n/tmp/achin.rs:32         P{ car: v1 as &'a T, cdr: v2 as &'a T }\n                                 ^~~~~~~~~~~\n/tmp/achin.rs:32:16: 32:27 note: ...so that automatically borrowed pointer is valid at the time of borrow\n/tmp/achin.rs:32         P{ car: v1 as &'a T, cdr: v2 as &'a T }\n                                 ^~~~~~~~~~~\nerror: aborting due to previous error\ntask 'rustc' failed at 'explicit failure', /Users/fklock/Dev/Mozilla/rust.git/src/libsyntax/diagnostic.rs:102\ntask '<main>' failed at 'explicit failure', /Users/fklock/Dev/Mozilla/rust.git/src/librustc/lib.rs:396\n```\n\nThe interesting thing is that `two_tuple` (and likewise `tup`) do not exhibit that error, even though they are completely analogous code.  This is probably representative of a bug somewhere in the borrow checker since it really should be treating a struct-tuple here the same as a struct with named fields.  (Plus, you know, these borrows look okay to me... but I have not yet dived in and tried to understand what the problem is that they are trying to flag.)\n\nThe code:\n\n```\n#[cfg(one)]\nmod one {\n    trait T {}\n\n    fn f<'a, V: T>(v: &'a V) -> &'a T {\n        v as &'a T\n    }\n}\n\n#[cfg(tup)]\nmod tup {\n    trait T {}\n    fn f<'a, V: T>(v1: &'a V, v2: &'a V) -> (&'a T, &'a T) {\n        (v1 as &'a T, v2 as &'a T)\n    }\n}\n\n#[cfg(two_tuple)]\nmod two {\n    trait T {}\n    struct P<'a>(&'a T, &'a T);\n    fn f<'a, V: T>(mut v1: &'a V, v2: &'a V) -> P<'a> {\n        P(v1 as &'a T, v2 as &'a T)\n    }\n}\n\n#[cfg(two_fields)]\nmod two {\n    trait T {}\n    struct P<'a> { car: &'a T, cdr: &'a T }\n    fn f<'a, V: T>(mut v1: &'a V, v2: &'a V) -> P<'a> {\n        P{ car: v1 as &'a T, cdr: v2 as &'a T }\n    }\n}\n```\n\n---\n\nThis is a slightly reduced test from the original one above (that was originally a comment on #10766).\n\n``` rust\n#[cfg(two_tuple)]\npub mod two {\n    trait T {}\n    struct P<'a>(&'a T, &'a T);\n    pub fn f<'a>(car: &'a T, cdr: &'a T) -> P<'a> {\n        P(car, cdr)\n    }\n}\n\n#[cfg(two_fields)]\npub mod two {\n    trait T {}\n    struct P<'a> { car: &'a T, cdr: &'a T }\n    pub fn f<'a>(car: &'a T, cdr: &'a T) -> P<'a> {\n        P{ car: car, cdr: cdr }\n    }\n}\n\nfn main() {}\n```\n\nAnd here are the results:\n\n```\n% rustc --version\n/Users/fklock/opt/rust-dbg/bin/rustc 0.9-pre (f817ed3 2013-12-09 13:51:32 -0800)\nhost: x86_64-apple-darwin\n% rustc --cfg two_tuple /tmp/achin.rs \n% rustc --cfg two_fields /tmp/achin.rs \n/tmp/achin.rs:15:8: 15:9 error: cannot infer an appropriate lifetime for region in type/impl due to conflicting requirements\n/tmp/achin.rs:15         P{ car: car, cdr: cdr }\n                         ^\n/tmp/achin.rs:15:16: 15:19 note: first, the lifetime must be contained by the expression at 15:16...\n/tmp/achin.rs:15         P{ car: car, cdr: cdr }\n                                 ^~~\n/tmp/achin.rs:15:16: 15:19 note: ...so that automatically borrowed pointer is valid at the time of borrow\n/tmp/achin.rs:15         P{ car: car, cdr: cdr }\n                                 ^~~\n/tmp/achin.rs:15:26: 15:29 note: but, the lifetime must also be contained by the expression at 15:26...\n/tmp/achin.rs:15         P{ car: car, cdr: cdr }\n                                           ^~~\n/tmp/achin.rs:15:26: 15:29 note: ...so that automatically borrowed pointer is valid at the time of borrow\n/tmp/achin.rs:15         P{ car: car, cdr: cdr }\n                                           ^~~\nerror: aborting due to previous error\ntask 'rustc' failed at 'explicit failure', /Users/fklock/Dev/Mozilla/rust.git/src/libsyntax/diagnostic.rs:102\ntask '<main>' failed at 'explicit failure', /Users/fklock/Dev/Mozilla/rust.git/src/librustc/lib.rs:393\n[ERROR#1] % \n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10902/timeline", "performed_via_github_app": null, "state_reason": "completed"}