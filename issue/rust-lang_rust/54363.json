{"url": "https://api.github.com/repos/rust-lang/rust/issues/54363", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54363/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54363/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54363/events", "html_url": "https://github.com/rust-lang/rust/issues/54363", "id": 361844140, "node_id": "MDU6SXNzdWUzNjE4NDQxNDA=", "number": 54363, "title": "Proc macros: ability to refer to a specific crate/symbol (something similar to `$crate`)", "user": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2018-09-19T17:10:39Z", "updated_at": "2023-03-21T17:52:14Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "### The problem\r\n\r\nIn macros-by-example we have `$crate` to refer to the crate the macro is defined in. This is very useful as the library author doesn't have to assume anything about how that crate is used in the user's crate (in particular, the user can rename the crate without breaking the world).\r\n\r\nIn the new proc macro system we don't seem to have this ability. It's important to note that just `$crate` won't be useful most of the time though, because right now most crates using proc macros are structured like that:\r\n- `foo-{macros/derive/codegen}`: this crate is `proc-macro = true` and defines the actual proc macro.\r\n- `foo`: defines all runtime dependency stuff, has `foo-{macros/derive/codegen}` as dependency and reexports the proc macro.\r\n- The important part: the proc macro emits code that uses stuff from `foo`\r\n\r\nAn example:\r\n<details>\r\n\r\n**`foo-macros/src/lib.rs`**\r\n```rust\r\n#[proc_macro]\r\npub fn mac(_: TokenStream) -> TokenStream {\r\n    quote! { ::foo::do_the_thing(); }\r\n}\r\n```\r\n\r\n**`foo/src/lib.rs`**\r\n```rust\r\npub fn do_the_thing() {\r\n    println!(\"hello!\");\r\n}\r\n```\r\nWhen the user uses `mac!()` now, they have to have `do_the_thing` in scope, otherwise an error from inside the macro will occur. Not nice. Even worse: if the user has a `do_the_thing` in scope that is not from `foo`, strange things could happen.\r\n</details>\r\n<br />\r\n\r\nSo an equivalent of `$crate` would refer to the `foo-{macros/derive/codegen}` crate which is not all that useful, because we mostly want to refer to `foo`. The best way to solve this right now is to use absolute paths everywhere and hope that the user doesn't rename the crate `foo` to something else. \r\n\r\nThe proc macro needs to be defined in a separate crate and the main crate `foo` wants to reexport the macro. That means that `foo-macros` doesn't know anything about `foo` and thus *blindly* emits code (tokens) hoping that the crate `foo` is in scope.\r\n\r\nBut this doesn't sound like a very robust solution. \r\n\r\nFurthermore, using the macro in `foo` itself (usually for testing) is not trivial. The macro assumes `foo` is an extern crate that can be referred to with `::foo`. But that's not the case for `foo` itself. In one of my codebases I used a hacky solution: when the first token of the macro invocation is `*`, I emit paths starting with `crate::` instead of `::foo::`. But again, a better solution would be really appreciated.\r\n\r\n---\r\n\r\n### How can we do better?\r\n\r\nI'm really not sure, but I hope we can use this issue as place for discussion (I hope I didn't miss any previous discussion on IRLO).\r\n\r\nHowever, I have one idea: **declaring dependencies of emitted code**. One could add another kind of dependencies (apart from `dependencies`, `dev-dependencies` and `build-dependencies`) that defines what crates the emitted code depends on. (Let's call them `emit-dependencies` for now, although that name should probably be changed.) So those dependencies wouldn't be checked/downloaded/compiled when the proc macro crate is compiled, but the compiler could make sure that those dependencies are present in the crate using the proc macro.\r\n\r\nI guess defining those dependencies globally crate is not sufficient since different proc macros could emit code with different dependencies. So maybe we could define the `emit-dependencies` per proc macro. But I'm not sure if that makes the check too complicated (because then Cargo would have to check which proc macros the user actually uses to collect a set of `emit-dependencies`).\r\n\r\nThat's just one idea I wanted to throw out there.\r\n\r\n---\r\n\r\n### Related\r\n\r\n- [Question on StackOverflow](https://stackoverflow.com/questions/44950574/using-crate-in-rusts-procedural-macros)\r\n- [`serde` issue related to this](https://github.com/serde-rs/serde/issues/953)\r\n- @Ekleog already asked about that [here](https://github.com/rust-lang/rust/issues/38356#issuecomment-412920528)\r\n- https://github.com/rust-lang/rust/issues/54647\r\n- https://github.com/dtolnay/syn/issues/507\r\n- https://github.com/rust-lang/rust/issues/56409", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54363/reactions", "total_count": 44, "+1": 44, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54363/timeline", "performed_via_github_app": null, "state_reason": null}