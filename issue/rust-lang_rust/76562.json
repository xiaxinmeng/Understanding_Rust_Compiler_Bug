{"url": "https://api.github.com/repos/rust-lang/rust/issues/76562", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76562/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76562/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76562/events", "html_url": "https://github.com/rust-lang/rust/issues/76562", "id": 697692672, "node_id": "MDU6SXNzdWU2OTc2OTI2NzI=", "number": 76562, "title": "[ER] Better suggestions for wrong attempts of giving a struct method as argument to another method", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-09-10T09:47:49Z", "updated_at": "2020-09-10T22:08:35Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is an Enhancement Request regarding the Rust discoverability (for 2021). This is a naive attempt to pass a method as argument to another method:\r\n\r\n```rust\r\nstruct Foo { y: u32 }\r\n\r\nimpl Foo {\r\n    fn bar(&self, x: u32) {\r\n        println!(\"{}\", self.y + x);\r\n    }\r\n\r\n    fn spam(&self, f: impl Fn(u32)) {\r\n        f(5);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let f = Foo { y: 10 };\r\n    f.spam(&f.bar);\r\n}\r\n```\r\n\r\nThe error message are nearly useless:\r\n\r\n```rust\r\nerror[E0615]: attempted to take value of method `bar` on type `Foo`\r\n  --> C:\\lavoro\\bugs\\temp.rs:15:15\r\n   |\r\n15 |     f.spam(&f.bar);\r\n   |               ^^^ method, not a field\r\n   |\r\nhelp: use parentheses to call the method\r\n   |\r\n15 |     f.spam(&f.bar(_));\r\n   |                  ^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nA slightly less naive attempt where the programmer remembers that member functions have the first self argument:\r\n\r\n```rust\r\nstruct Foo { y: u32 }\r\n\r\nimpl Foo {\r\n    fn bar(&self, x: u32) {\r\n        println!(\"{}\", self.y + x);\r\n    }\r\n\r\n    fn spam(&self, f: impl Fn(&Self, u32)) {\r\n        f(self, 5);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let f = Foo { y: 10 };\r\n    f.spam(&f.bar);\r\n}\r\n```\r\n\r\nRust gives similar error messages:\r\n\r\n```rust\r\nerror[E0615]: attempted to take value of method `bar` on type `Foo`\r\n  --> C:\\lavoro\\bugs\\temp2.rs:15:15\r\n   |\r\n15 |     f.spam(&f.bar);\r\n   |               ^^^ method, not a field\r\n   |\r\nhelp: use parentheses to call the method\r\n   |\r\n15 |     f.spam(&f.bar(_));\r\n   |                  ^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThe programmer could receive error messages that lead to code that passes a closure:\r\n\r\n```rust\r\nstruct Foo { y: u32 }\r\n\r\nimpl Foo {\r\n    fn bar(&self, x: u32) {\r\n        println!(\"{}\", self.y + x);\r\n    }\r\n\r\n    fn spam(&self, f: impl Fn(u32)) {\r\n        f(5);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let f = Foo { y: 10 };\r\n    f.spam(|x| f.bar(x));\r\n}\r\n```\r\n\r\nOr something like this, where self is given inside spam():\r\n\r\n```rust\r\nstruct Foo { y: u32 }\r\n\r\nimpl Foo {\r\n    fn bar(&self, x: u32) {\r\n        println!(\"{}\", self.y + x);\r\n    }\r\n\r\n    fn spam(&self, f: impl Fn(&Self, u32)) {\r\n        f(self, 5);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let f = Foo { y: 10 };\r\n    f.spam(Foo::bar);\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76562/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76562/timeline", "performed_via_github_app": null, "state_reason": null}