{"url": "https://api.github.com/repos/rust-lang/rust/issues/20981", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/20981/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/20981/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/20981/events", "html_url": "https://github.com/rust-lang/rust/issues/20981", "id": 54022012, "node_id": "MDU6SXNzdWU1NDAyMjAxMg==", "number": 20981, "title": "Overflow/panic problem in Step and ExactSizeIterator for Range<BigInt>", "user": {"login": "sellibitze", "id": 290865, "node_id": "MDQ6VXNlcjI5MDg2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/290865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sellibitze", "html_url": "https://github.com/sellibitze", "followers_url": "https://api.github.com/users/sellibitze/followers", "following_url": "https://api.github.com/users/sellibitze/following{/other_user}", "gists_url": "https://api.github.com/users/sellibitze/gists{/gist_id}", "starred_url": "https://api.github.com/users/sellibitze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sellibitze/subscriptions", "organizations_url": "https://api.github.com/users/sellibitze/orgs", "repos_url": "https://api.github.com/users/sellibitze/repos", "events_url": "https://api.github.com/users/sellibitze/events{/privacy}", "received_events_url": "https://api.github.com/users/sellibitze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-12T05:34:13Z", "updated_at": "2015-01-22T08:54:30Z", "closed_at": "2015-01-22T08:54:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the trait `Step` we have the method\n\n```\nfn steps_between(start: &Self, end: &Self) -> Option<usize>;\n```\n\nwhich is supposed to handle the integer overflow case with `None`.\n\n`Range<Idx>` comes with the following `size_hint` function in its `Iterator<Idx>` implementation:\n\n```\nfn size_hint(&self) -> (uint, Option<uint>) {\n    if let Some(hint) = Step::steps_between(&self.start, &self.end) {\n        (hint, Some(hint))\n    } else {\n        (0, None)\n    }\n}\n```\n\nwhich simply forwards a possible `None`. `Range<Idx>` also implements `ExactSizeIterator`. But consider what the default implementation of `len` in `ExactSizeIterator` will do if it has to deal with such a `None`:\n\n```\nfn len(&self) -> uint {\n    let (lower, upper) = self.size_hint();\n    assert_eq!(upper, Some(lower));\n    lower\n}\n```\n\nClearly, this function does not expect an integer overflow. It will panic in such a case which will probably surprize some users that try to wrap things like `BigInt`s into the `Range`.\n\nI don't know how this should be handled. Perhaps using algebraic types a bit differently here would help (replacing `None` with `Overflowed`). Or perhaps we should only provide an `ExactSizeIterator` implementation if we can be sure that there won't be any integer overflows. This would imply an additional constraint for the `Idx` parameter in\n\n```\nimpl<Idx: Clone + Step> ExactSizeIterator for Range<Idx> {}\n```\n\ncc @aturon @nick29581\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/20981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/20981/timeline", "performed_via_github_app": null, "state_reason": "completed"}