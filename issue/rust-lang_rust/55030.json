{"url": "https://api.github.com/repos/rust-lang/rust/issues/55030", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55030/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55030/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55030/events", "html_url": "https://github.com/rust-lang/rust/issues/55030", "id": 369776297, "node_id": "MDU6SXNzdWUzNjk3NzYyOTc=", "number": 55030, "title": "Missed optimization: layout optimized enums produce slow derived code", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-13T07:23:27Z", "updated_at": "2023-04-05T17:36:58Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Changing\r\n\r\n```rust\r\nconst FOO_A: u32 = 0xFFFF_FFFF;\r\nconst FOO_B: u32 = 0xFFFF_FFFE;\r\nconst BAR_X: u32 = 0;\r\nconst BAR_Y: u32 = 1;\r\nconst BAR_Z: u32 = 2;\r\nstruct Foo { u: u32 }\r\n```\r\n\r\nhttps://play.rust-lang.org/?gist=9d1ff0355fbfabbc0c47f15e78e94687&version=nightly&mode=debug&edition=2015\r\n\r\nto\r\n\r\n```rust\r\npub enum Bar {\r\n    X, Y, Z\r\n}\r\nenum Foo {\r\n    A,\r\n    B,\r\n    Other(Bar),\r\n}\r\n```\r\n\r\nhttps://play.rust-lang.org/?gist=faf6db37cdc627b1c5f8d582ad5c6779&version=nightly&mode=release&edition=2015\r\n\r\nWhile this will result in pretty much the same layout as before, any derived code on `Foo` will now generate less optimal code. Apparently llvm can't manage to clean that up.\r\n\r\nThe llvm IR for the first playground link is\r\n\r\n```llvm\r\ndefine zeroext i1 @_ZN10playground3foo17h7604dbf314c89374E(i32, i32) unnamed_addr #0 {\r\nstart:\r\n  %2 = icmp eq i32 %0, %1\r\n  ret i1 %2\r\n}\r\n```\r\n\r\nwhile the one for the second link is\r\n\r\n```llvm\r\ndefine zeroext i1 @_ZN10playground3foo17ha662001f5519a11dE(i32, i32) unnamed_addr #0 {\r\nstart:\r\n  %2 = add nsw i32 %0, -3\r\n  %3 = icmp ult i32 %2, 2\r\n  %narrow.i = select i1 %3, i32 %2, i32 2\r\n  %4 = add nsw i32 %1, -3\r\n  %5 = icmp ult i32 %4, 2\r\n  %narrow8.i = select i1 %5, i32 %4, i32 2\r\n  %6 = icmp eq i32 %narrow.i, %narrow8.i\r\n  br i1 %6, label %bb6.i, label %\"_ZN56_$LT$playground..Foo$u20$as$u20$core..cmp..PartialEq$GT$2eq17h647dd5d9c0e8f1fcE.exit\"\r\n\r\nbb6.i:                                            ; preds = %start\r\n  %7 = icmp eq i32 %0, %1\r\n  %not.or.cond.i = or i1 %3, %5\r\n  %spec.select.i = or i1 %7, %not.or.cond.i\r\n  br label %\"_ZN56_$LT$playground..Foo$u20$as$u20$core..cmp..PartialEq$GT$2eq17h647dd5d9c0e8f1fcE.exit\"\r\n\r\n\"_ZN56_$LT$playground..Foo$u20$as$u20$core..cmp..PartialEq$GT$2eq17h647dd5d9c0e8f1fcE.exit\": ; preds = %start, %bb6.i\r\n  %8 = phi i1 [ %spec.select.i, %bb6.i ], [ false, %start ]\r\n  ret i1 %8\r\n}\r\n```\r\n\r\nWe can't improve the derives, because the derives on `Foo` can't see the definition of `Bar`.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55030/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55030/timeline", "performed_via_github_app": null, "state_reason": null}