{"url": "https://api.github.com/repos/rust-lang/rust/issues/106658", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106658/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106658/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106658/events", "html_url": "https://github.com/rust-lang/rust/issues/106658", "id": 1526527014, "node_id": "I_kwDOAAsO6M5a_PQm", "number": 106658, "title": "Unnecessary assembly generated on match statement of u64::trailing_zeros() result", "user": {"login": "pozix604", "id": 3847862, "node_id": "MDQ6VXNlcjM4NDc4NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3847862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pozix604", "html_url": "https://github.com/pozix604", "followers_url": "https://api.github.com/users/pozix604/followers", "following_url": "https://api.github.com/users/pozix604/following{/other_user}", "gists_url": "https://api.github.com/users/pozix604/gists{/gist_id}", "starred_url": "https://api.github.com/users/pozix604/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pozix604/subscriptions", "organizations_url": "https://api.github.com/users/pozix604/orgs", "repos_url": "https://api.github.com/users/pozix604/repos", "events_url": "https://api.github.com/users/pozix604/events{/privacy}", "received_events_url": "https://api.github.com/users/pozix604/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2023-01-10T00:01:24Z", "updated_at": "2023-01-17T21:50:01Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "```rust\r\npub enum Square2 {\r\n    A1, B1, C1, D1, E1, F1, G1, H1, \r\n    A2, B2, C2, D2, E2, F2, G2, H2, \r\n    A3, B3, C3, D3, E3, F3, G3, H3, \r\n    A4, B4, C4, D4, E4, F4, G4, H4, \r\n    A5, B5, C5, D5, E5, F5, G5, H5, \r\n    A6, B6, C6, D6, E6, F6, G6, H6, \r\n    A7, B7, C7, D7, E7, F7, G7, H7, \r\n    A8, B8, C8, D8, E8, F8, G8, H8, \r\n    ZZ\r\n}\r\n\r\npub fn ggg(v: u64) -> Square2 {\r\n    match v.trailing_zeros() {\r\n        0o00 => Square2::A1,\r\n        0o01 => Square2::B1,\r\n        0o02 => Square2::C1,\r\n        0o03 => Square2::D1,\r\n        0o04 => Square2::E1,\r\n        0o05 => Square2::F1,\r\n        0o06 => Square2::G1,\r\n        0o07 => Square2::H1,\r\n\r\n        0o10 => Square2::A2,\r\n        0o11 => Square2::B2,\r\n        0o12 => Square2::C2,\r\n        0o13 => Square2::D2,\r\n        0o14 => Square2::E2,\r\n        0o15 => Square2::F2,\r\n        0o16 => Square2::G2,\r\n        0o17 => Square2::H2,\r\n\r\n        0o20 => Square2::A3,\r\n        0o21 => Square2::B3,\r\n        0o22 => Square2::C3,\r\n        0o23 => Square2::D3,\r\n        0o24 => Square2::E3,\r\n        0o25 => Square2::F3,\r\n        0o26 => Square2::G3,\r\n        0o27 => Square2::H3,\r\n\r\n        0o30 => Square2::A4,\r\n        0o31 => Square2::B4,\r\n        0o32 => Square2::C4,\r\n        0o33 => Square2::D4,\r\n        0o34 => Square2::E4,\r\n        0o35 => Square2::F4,\r\n        0o36 => Square2::G4,\r\n        0o37 => Square2::H4,\r\n\r\n        0o40 => Square2::A5,\r\n        0o41 => Square2::B5,\r\n        0o42 => Square2::C5,\r\n        0o43 => Square2::D5,\r\n        0o44 => Square2::E5,\r\n        0o45 => Square2::F5,\r\n        0o46 => Square2::G5,\r\n        0o47 => Square2::H5,\r\n\r\n        0o50 => Square2::A6,\r\n        0o51 => Square2::B6,\r\n        0o52 => Square2::C6,\r\n        0o53 => Square2::D6,\r\n        0o54 => Square2::E6,\r\n        0o55 => Square2::F6,\r\n        0o56 => Square2::G6,\r\n        0o57 => Square2::H6,\r\n\r\n        0o60 => Square2::A7,\r\n        0o61 => Square2::B7,\r\n        0o62 => Square2::C7,\r\n        0o63 => Square2::D7,\r\n        0o64 => Square2::E7,\r\n        0o65 => Square2::F7,\r\n        0o66 => Square2::G7,\r\n        0o67 => Square2::H7,\r\n\r\n        0o70 => Square2::A8,\r\n        0o71 => Square2::B8,\r\n        0o72 => Square2::C8,\r\n        0o73 => Square2::D8,\r\n        0o74 => Square2::E8,\r\n        0o75 => Square2::F8,\r\n        0o76 => Square2::G8,\r\n        0o77 => Square2::H8,\r\n\r\n        0o100 => Square2::ZZ,\r\n\r\n        _ => unreachable!(),\r\n    }\r\n}\r\n```\r\n\r\nhttps://godbolt.org/z/c9Y83vsPc\r\n\r\nThe assembly generated does not need to check if the `trailing_zeros()` result is greater than 64 and does not need the panic branch because the enumeration has 65 elements. All possible results of `trailing_zeros()` can be converted into the enumeration. \r\n\r\nThe above code generates the assembly below:\r\n\r\n```asm\r\nexample::ggg:\r\n        test    rdi, rdi\r\n        je      .LBB0_1\r\n        bsf     rax, rdi\r\n        cmp     eax, 65\r\n        jae     .LBB0_4\r\n.LBB0_5:\r\n        ret\r\n.LBB0_1:\r\n        mov     eax, 64\r\n        cmp     eax, 65\r\n        jb      .LBB0_5\r\n.LBB0_4:\r\n        push    rax\r\n        lea     rdi, [rip + .L__unnamed_1]\r\n        lea     rdx, [rip + .L__unnamed_2]\r\n        mov     esi, 40\r\n        call    qword ptr [rip + core::panicking::panic@GOTPCREL]\r\n        ud2\r\n\r\n.L__unnamed_1:\r\n        .ascii  \"internal error: entered unreachable code\"\r\n\r\n.L__unnamed_3:\r\n        .ascii  \"/app/example.rs\"\r\n\r\n.L__unnamed_2:\r\n        .quad   .L__unnamed_3\r\n        .asciz  \"\\017\\000\\000\\000\\000\\000\\000\\000Y\\000\\000\\000\\016\\000\\000\"\r\n```\r\n\r\nThe panic branch, setting a register to 64 then checking if it is below 65, unreachable branch, etc. are all unnecessary.\r\n\r\nThe problem does not happen when trying `u8`, `u16`, `u32` and changing the code as appropriate. With these smaller data types, the assembly generated is entirely reasonable:\r\n\r\n```asm\r\nexample::ggg:\r\n        test    edi, edi\r\n        je      .LBB0_1\r\n        bsf     eax, edi\r\n        ret\r\n.LBB0_1:\r\n        mov     eax, 32\r\n        ret\r\n```\r\n\r\nI expected to see this happen with `u64`: The code generated would not have unnecessary comparisons and out-of-bounds panic code, similar to the code generated when using `u8`, `u16`, `u32`.\r\n\r\nTried Rust 1.63, 1.66, beta and nightly withe same results.\r\n\r\n`rustc --version --verbose`:\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.66.0 (69f9c33d7 2022-12-12)\r\nbinary: rustc\r\ncommit-hash: 69f9c33d71c871fc16ac445211281c6e7a340943\r\ncommit-date: 2022-12-12\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.66.0\r\nLLVM version: 15.0.2\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106658/timeline", "performed_via_github_app": null, "state_reason": null}