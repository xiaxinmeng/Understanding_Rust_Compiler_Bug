{"url": "https://api.github.com/repos/rust-lang/rust/issues/70823", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70823/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70823/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70823/events", "html_url": "https://github.com/rust-lang/rust/issues/70823", "id": 594610642, "node_id": "MDU6SXNzdWU1OTQ2MTA2NDI=", "number": 70823, "title": "Wasteful duplication between incremental build dirs and normal artifacts.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-05T19:38:55Z", "updated_at": "2020-04-05T19:42:17Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Incremental compilation reuses object files by storing *a copy* of them in the incremental cache directory, which is then copied into the `rlib`.\r\n\r\nThis results to build dirs which are twice as big as they need to be (which then gets multiplied by the number of stale artifacts that aren't removed by any tool AFAICT).\r\n\r\nThere are several ways we could resolve this, but they can be split into two categories:\r\n* incremental cache holds the object files\r\n  * Cargo could have a mode in which it instructs `rustc` to emit object files but only in the incremental cache and then downstream `rustc` to use that incremental cache\r\n    * this would allow non-Cargo tooling to keep working, but we'd have to support `rlib`s as the same time as the new system and we might unknowingly break them if Cargo doesn't use them\r\n  * the `rlib` *doesn't have to be* a real archive, we could have a different format that references the files in the incremental cache, or even make the `rlib` a directory full of hardlinks, or a hardlink itself etc.\r\n* `rlib` artifact holds the object files\r\n  * not clear what's possible at all for other crate types, for now they'd keep the duplication\r\n  * we probably want to hardlink/symlink it from the incremental cache and hash each object file so we can check it's still the same and only reuse it then\r\n    * we might already be doing that hashing anyway, in case the incremental dir is corrupted\r\n  * requires no change in tooling AFAICT, including custom non-Cargo setups\r\n\r\ncc @rust-lang/compiler ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70823/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70823/timeline", "performed_via_github_app": null, "state_reason": null}