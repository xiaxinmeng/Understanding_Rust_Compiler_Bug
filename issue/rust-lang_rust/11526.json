{"url": "https://api.github.com/repos/rust-lang/rust/issues/11526", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/11526/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/11526/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/11526/events", "html_url": "https://github.com/rust-lang/rust/issues/11526", "id": 25547930, "node_id": "MDU6SXNzdWUyNTU0NzkzMA==", "number": 11526, "title": "RFC: Implement base numeric types and bool as a library", "user": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-01-14T01:57:16Z", "updated_at": "2014-09-24T05:00:16Z", "closed_at": "2014-09-24T05:00:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Here is a (possibly crazy) proposal to remove some magic from the compiler:\n\n``` rust\n#[repr=1 ] pub enum bool { true, false }\n\n#[repr=8 ] pub struct u8;\n#[repr=16] pub struct u16;\n#[repr=32] pub struct u32;\n#[repr=64] pub struct u64;\n\n#[cfg(target_pointer_size = \"32\")] #[repr=32] pub struct uintptr;\n#[cfg(target_pointer_size = \"64\")] #[repr=64] pub struct uintptr;\n\n#[repr=8 ] pub struct i8;\n#[repr=16] pub struct i16;\n#[repr=32] pub struct i32;\n#[repr=64] pub struct i64;\n\n#[cfg(target_pointer_size = \"32\")] #[repr=32] pub struct intptr;\n#[cfg(target_pointer_size = \"64\")] #[repr=64] pub struct intptr;\n\n#[repr=32] pub struct f32;\n#[repr=64] pub struct f64;\n\nmacro_rules! impl_llvm_op(\n    ($Binop:ident, $binop:ident, $Self:ident, $init:expr, $llvm_op:ident, $llvm_ty:ident) => (\n        impl $Binop<$Self, $Self> For $Self {\n            fn $binop(a: &$Self, b: &$Self) -> $Self {\n                let (a, b) = (*a, *b);\n                unsafe {\n                    let ret = &mut $init;\n                    llvm!(concat!(\"%ret = \", stringify!($llvm_op), \" \",\n                                  stringify!($llvm_ty), \" %a, %b\")\n                        :\"a\" = a\n                        :\"b\" = b\n                        :\"ret\" = ret\n                    )\n                    *ret\n                }\n            }\n        }\n    )\n)\n\nimpl_llvm_op!(Add, add, u8, 0, add, i8)\nimpl_llvm_op!(Add, add, u16, 0, add, i16)\nimpl_llvm_op!(Add, add, u32, 0, add, i32)\nimpl_llvm_op!(Add, add, u64, 0, add, i64)\n\n#[cfg(target_pointer_size = \"32\")] impl_llvm_op!(Add, add, uintptr, 0, add, i32)\n#[cfg(target_pointer_size = \"64\")] impl_llvm_op!(Add, add, uintptr, 0, add, i64)\n\nimpl_llvm_op!(Add, add, i8, 0, add, i8)\nimpl_llvm_op!(Add, add, i16, 0, add, i16)\nimpl_llvm_op!(Add, add, i32, 0, add, i32)\nimpl_llvm_op!(Add, add, i64, 0, add, i64)\n\n#[cfg(target_pointer_size = \"32\")] impl_llvm_op!(Add, add, intptr, 0, add, i32)\n#[cfg(target_pointer_size = \"64\")] impl_llvm_op!(Add, add, intptr, 0, add, i64)\n\nimpl_llvm_op!(Add, add, f32, 0.0, fadd, f32)\nimpl_llvm_op!(Add, add, f64, 0.0, fadd, f64)\n```\n\nThis relies on many hypothetical language features including the `llvm!` macro, CTFE and possibly some way of implementing adding literal assignments, and so might be too ambitious for 1.0. But in the end it could make our language far more extensible and powerful. It might also help simplify our documentation issues with builtin types #10114 #11409\n", "closed_by": {"login": "rust-highfive", "id": 7378925, "node_id": "MDQ6VXNlcjczNzg5MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7378925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-highfive", "html_url": "https://github.com/rust-highfive", "followers_url": "https://api.github.com/users/rust-highfive/followers", "following_url": "https://api.github.com/users/rust-highfive/following{/other_user}", "gists_url": "https://api.github.com/users/rust-highfive/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-highfive/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-highfive/subscriptions", "organizations_url": "https://api.github.com/users/rust-highfive/orgs", "repos_url": "https://api.github.com/users/rust-highfive/repos", "events_url": "https://api.github.com/users/rust-highfive/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-highfive/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/11526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/11526/timeline", "performed_via_github_app": null, "state_reason": "completed"}