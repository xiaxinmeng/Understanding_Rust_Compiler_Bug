{"url": "https://api.github.com/repos/rust-lang/rust/issues/90595", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90595/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90595/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90595/events", "html_url": "https://github.com/rust-lang/rust/issues/90595", "id": 1045299439, "node_id": "I_kwDOAAsO6M4-TgDv", "number": 90595, "title": "MaybeUninit seems to prevent RVO in even the most trivial cases.", "user": {"login": "mcy", "id": 2711945, "node_id": "MDQ6VXNlcjI3MTE5NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2711945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcy", "html_url": "https://github.com/mcy", "followers_url": "https://api.github.com/users/mcy/followers", "following_url": "https://api.github.com/users/mcy/following{/other_user}", "gists_url": "https://api.github.com/users/mcy/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcy/subscriptions", "organizations_url": "https://api.github.com/users/mcy/orgs", "repos_url": "https://api.github.com/users/mcy/repos", "events_url": "https://api.github.com/users/mcy/events{/privacy}", "received_events_url": "https://api.github.com/users/mcy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2021-11-04T23:28:27Z", "updated_at": "2023-04-03T12:33:46Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\npub struct Foo([u8; 1000]);\r\n\r\nextern \"C\" {\r\n  fn init(p: *mut Foo);\r\n}\r\n\r\nimpl Foo {\r\n  pub fn new_from_uninit() -> Self {\r\n    let mut x = std::mem::MaybeUninit::uninit();\r\n    unsafe {\r\n      init(x.as_mut_ptr());\r\n      x.assume_init()\r\n    }\r\n  }\r\n\r\n  pub fn new() -> Self {\r\n    let mut x = Self([0; 1000]);\r\n    unsafe { init(&mut x) }\r\n    x\r\n  }\r\n}\r\n\r\n```\r\n\r\nThe generated assembly at -Oz on x86 is:\r\n\r\n```S\r\nexample::Foo::new_from_uninit:\r\n        push    r14\r\n        push    rbx\r\n        sub     rsp, 1000\r\n        mov     rbx, rdi\r\n        mov     r14, rsp\r\n        mov     rdi, r14\r\n        call    qword ptr [rip + init@GOTPCREL]\r\n        mov     edx, 1000\r\n        mov     rdi, rbx\r\n        mov     rsi, r14\r\n        call    qword ptr [rip + memcpy@GOTPCREL] // No RVO! >:(\r\n        mov     rax, rbx\r\n        add     rsp, 1000\r\n        pop     rbx\r\n        pop     r14\r\n        ret\r\n\r\nexample::Foo::new:\r\n        push    rbx\r\n        mov     rbx, rdi\r\n        mov     edx, 1000\r\n        xor     esi, esi\r\n        call    qword ptr [rip + memset@GOTPCREL]\r\n        mov     rdi, rbx\r\n        call    qword ptr [rip + init@GOTPCREL]\r\n        mov     rax, rbx\r\n        pop     rbx\r\n        ret\r\n```\r\n\r\nObserve that Rust (or LLVM, as the case may be) fails to RVO `x` when using `MaybeUninit`, ironically having potentially worse performance than the one that calls `memset`.\r\n\r\nComplete godbolt example: https://godbolt.org/z/c1ccf7WeK\r\n\r\nHere is the pertinent optimized IR:\r\n```ll\r\ndefine void @_ZN7example3Foo15new_from_uninit17h20aebee91382058eE(%Foo* noalias nocapture sret(%Foo) dereferenceable(1000) %0) unnamed_addr #0 !dbg !6 {\r\nstart:\r\n  %x = alloca %\"std::mem::MaybeUninit<Foo>\", align 1\r\n  %1 = getelementptr inbounds %\"std::mem::MaybeUninit<Foo>\", %\"std::mem::MaybeUninit<Foo>\"* %x, i64 0, i32 0, i64 0, !dbg !11\r\n  call void @llvm.lifetime.start.p0i8(i64 1000, i8* nonnull %1), !dbg !11\r\n  \r\n  %2 = bitcast %\"std::mem::MaybeUninit<Foo>\"* %x to %Foo*, !dbg !12\r\n  call void @init(%Foo* nonnull %2), !dbg !20\r\n  %3 = getelementptr inbounds %Foo, %Foo* %0, i64 0, i32 0, i64 0\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(1000) %3, i8* noundef nonnull align 1 dereferenceable(1000) %1, i64 1000, i1 false), !dbg !21\r\n  call void @llvm.lifetime.end.p0i8(i64 1000, i8* nonnull %1), !dbg !22\r\n  ret void, !dbg !23\r\n}\r\n\r\ndefine void @_ZN7example3Foo3new17h8ad79a0e3ddd97ffE(%Foo* noalias nocapture sret(%Foo) dereferenceable(1000) %x) unnamed_addr #0 !dbg !24 {\r\nstart:\r\n  %x89 = getelementptr inbounds %Foo, %Foo* %x, i64 0, i32 0, i64 0\r\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(1000) %x89, i8 0, i64 1000, i1 false), !dbg !25\r\n  tail call void @init(%Foo* nonnull %x), !dbg !26\r\n  ret void, !dbg !27\r\n}\r\n```\r\n\r\nSkimming the -O0 IR doesn't help much, since Rust needs to generate a whole mess of code in the MaybeUninit version. The thing that's very mysterious to me is that, somehow, the `bitcast` in `@_ZN7example3Foo15new_from_uninit17h20aebee91382058eE` is acting as a barrier for merging `%x` with the return slot `%0`??\r\n\r\nThis seems like an LLVM bug but filing here first in case it's bad IR codegen on rustc's part.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90595/timeline", "performed_via_github_app": null, "state_reason": null}