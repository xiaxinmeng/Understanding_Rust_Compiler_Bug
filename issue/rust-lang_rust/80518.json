{"url": "https://api.github.com/repos/rust-lang/rust/issues/80518", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80518/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80518/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80518/events", "html_url": "https://github.com/rust-lang/rust/issues/80518", "id": 776540469, "node_id": "MDU6SXNzdWU3NzY1NDA0Njk=", "number": 80518, "title": "Lifetime parameters on self + impl Traits requires unexpected workaround", "user": {"login": "snoyberg", "id": 49415, "node_id": "MDQ6VXNlcjQ5NDE1", "avatar_url": "https://avatars.githubusercontent.com/u/49415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snoyberg", "html_url": "https://github.com/snoyberg", "followers_url": "https://api.github.com/users/snoyberg/followers", "following_url": "https://api.github.com/users/snoyberg/following{/other_user}", "gists_url": "https://api.github.com/users/snoyberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/snoyberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snoyberg/subscriptions", "organizations_url": "https://api.github.com/users/snoyberg/orgs", "repos_url": "https://api.github.com/users/snoyberg/repos", "events_url": "https://api.github.com/users/snoyberg/events{/privacy}", "received_events_url": "https://api.github.com/users/snoyberg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-12-30T16:39:13Z", "updated_at": "2021-04-19T18:09:11Z", "closed_at": "2021-04-19T18:09:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This may simply be that I'm misunderstanding something. But I was surprised by the workaround necessary to make the following code work. When working on the [Xorcism exercise in Exercism](https://github.com/exercism/rust/tree/master/exercises/xorcism), I needed to return an `impl Iterator<Item=u8>`.  This was complicated by the presence of two different lifetime parameters (the `'a` parameter from the trait for the `key` field, which is a `&'a [u8]`, and the `'b` parameter for the `&'b mut self`). With the following initial code:\r\n\r\n```rust\r\nuse std::borrow::Borrow;\r\n\r\n#[derive(Clone)]\r\npub struct Xorcism<'a> {\r\n    key: &'a [u8],\r\n    index: usize,\r\n}\r\n\r\npub trait MungeOutput: Iterator<Item = u8> + ExactSizeIterator {}\r\nimpl<'a, T> MungeOutput for T where T: Iterator<Item = u8> + ExactSizeIterator {}\r\n\r\nfn next_key(key: &[u8], index: &mut usize) -> u8 {\r\n    let b = key[*index];\r\n    *index += 1;\r\n    if *index >= key.len() {\r\n        *index = 0;\r\n    }\r\n    b\r\n}\r\n\r\nimpl<'a> Xorcism<'a> {\r\n    pub fn new<Key: AsRef<[u8]> + ?Sized>(key: &'a Key) -> Xorcism<'a> {\r\n        Xorcism {\r\n            key: key.as_ref(),\r\n            index: 0,\r\n        }\r\n    }\r\n\r\n    pub fn munge_in_place(&mut self, data: &mut [u8]) {\r\n        for b in data {\r\n            *b ^= next_key(self.key, &mut self.index);\r\n        }\r\n    }\r\n\r\n    pub fn munge<'b, Data>(&'b mut self, data: Data) -> impl Iterator<Item=u8> + 'b\r\n    where\r\n        Data: IntoIterator,\r\n        Data::Item: Borrow<u8>,\r\n        Data::IntoIter: 'b,\r\n    {\r\n        data.into_iter().map(move |b| *b.borrow() ^ next_key(&self.key, &mut self.index))\r\n    }\r\n}\r\n```\r\n\r\nI got the error message:\r\n\r\n```\r\nerror[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\r\n  --> src\\lib.rs:35:57\r\n   |\r\n35 |     pub fn munge<'b, Data>(&'b mut self, data: Data) -> impl Iterator<Item=u8> + 'b\r\n   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: hidden type `Map<<Data as IntoIterator>::IntoIter, [closure@src\\lib.rs:41:30: 41:89]>` captures the lifetime `'a` as defined on the impl at 21:6\r\n  --> src\\lib.rs:21:6\r\n   |\r\n21 | impl<'a> Xorcism<'a> {\r\n   |      ^^\r\n```\r\n\r\nHowever, if I replaced the line:\r\n\r\n```rust\r\ndata.into_iter().map(move |b| *b.borrow() ^ next_key(&self.key, &mut self.index))\r\n```\r\n\r\nWith the non-obvious and less intuitive:\r\n\r\n```rust\r\nlet key = &self.key;\r\nlet index = &mut self.index;\r\ndata.into_iter().map(move |b| *b.borrow() ^ next_key(key, index))\r\n```\r\n\r\nThe code compiled and ran as expected. I may be missing something, but I can't see a reason why borrowing the fields from the structure would be safe, but borrowing the structure itself would be dangerous.\r\n\r\nNote that the original goal was to make `next_key` a method of the `Xorcism` struct, so that the best version of the code would read:\r\n\r\n```rust\r\ndata.into_iter().map(move |b| *b.borrow() ^ self.next_key())\r\n```\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\n> rustc --version --verbose\r\nrustc 1.48.0 (7eac88abb 2020-11-16)\r\nbinary: rustc\r\ncommit-hash: 7eac88abb2e57e752f3302f02be5f3ce3d7adfb4\r\ncommit-date: 2020-11-16\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.48.0\r\nLLVM version: 11.0\r\n```\r\n\r\nAlso occurs on nightly:\r\n\r\n```\r\n> rustc +nightly --version --verbose\r\nrustc 1.51.0-nightly (158f8d034 2020-12-29)\r\nbinary: rustc\r\ncommit-hash: 158f8d034b15e65ba8dc0d066358dd0632bfcd6e\r\ncommit-date: 2020-12-29\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.51.0-nightly\r\n```\r\n", "closed_by": {"login": "snoyberg", "id": 49415, "node_id": "MDQ6VXNlcjQ5NDE1", "avatar_url": "https://avatars.githubusercontent.com/u/49415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snoyberg", "html_url": "https://github.com/snoyberg", "followers_url": "https://api.github.com/users/snoyberg/followers", "following_url": "https://api.github.com/users/snoyberg/following{/other_user}", "gists_url": "https://api.github.com/users/snoyberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/snoyberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snoyberg/subscriptions", "organizations_url": "https://api.github.com/users/snoyberg/orgs", "repos_url": "https://api.github.com/users/snoyberg/repos", "events_url": "https://api.github.com/users/snoyberg/events{/privacy}", "received_events_url": "https://api.github.com/users/snoyberg/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80518/timeline", "performed_via_github_app": null, "state_reason": "completed"}