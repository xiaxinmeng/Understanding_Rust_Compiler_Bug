{"url": "https://api.github.com/repos/rust-lang/rust/issues/79848", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79848/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79848/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79848/events", "html_url": "https://github.com/rust-lang/rust/issues/79848", "id": 759939278, "node_id": "MDU6SXNzdWU3NTk5MzkyNzg=", "number": 79848, "title": "rustc suggests `serde::export::Some` when serde is in scope", "user": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}, {"id": 2238600090, "node_id": "MDU6TGFiZWwyMjM4NjAwMDkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-result-option", "name": "A-result-option", "color": "f7e101", "default": false, "description": "Area: Result and Option combinators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-12-09T02:35:41Z", "updated_at": "2020-12-09T02:35:41Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "There are three different variants of this bug that I've encountered. Here they are:\r\n\r\n-----\r\n\r\nThis is the simplest one:\r\n\r\n```rust\r\nuse serde;\r\n\r\nfn main() {\r\n    let x: Option<i32> = 1;\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=95e9b3a3dcb33a52bc6578809c3cb864))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nwarning: unused import: `serde`\r\n --> src/main.rs:1:5\r\n  |\r\n1 | use serde;\r\n  |     ^^^^^\r\n  |\r\n  = note: `#[warn(unused_imports)]` on by default\r\n\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:4:26\r\n  |\r\n4 |     let x: Option<i32> = 1;\r\n  |            -----------   ^\r\n  |            |             |\r\n  |            |             expected enum `std::option::Option`, found integer\r\n  |            |             help: try using a variant of the expected enum: `serde::export::Some(1)`\r\n  |            expected due to this\r\n  |\r\n  = note: expected enum `std::option::Option<i32>`\r\n             found type `{integer}`\r\n\r\nerror: aborting due to previous error; 1 warning emitted\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n---\r\n\r\nThis one's a bit more complex. Note that the suggestion is to use the `Some` that's created from the derive macro.\r\n\r\n```rust\r\nuse serde::{Serialize, Deserialize};\r\n\r\n#[derive(Serialize, Deserialize)]\r\nstruct Foo;\r\n\r\nfn main() {\r\n    let x: Option<i32> = 1;\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ed46b70857a0b0364974252ebbb4bbf8))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:7:26\r\n  |\r\n7 |     let x: Option<i32> = 1;\r\n  |            -----------   ^\r\n  |            |             |\r\n  |            |             expected enum `std::option::Option`, found integer\r\n  |            |             help: try using a variant of the expected enum: `_::_serde::export::Some(1)`\r\n  |            expected due to this\r\n  |\r\n  = note: expected enum `std::option::Option<i32>`\r\n             found type `{integer}`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n-----\r\n\r\nI haven't been able to reproduce the third, and most confusing, variant (yet), but here's how it appears in my code. It seems to reference something about traits? I don't have any trait bounds on `V` though, so I'm not sure what that's about. Perhaps related to the `?` operator and the `Try` trait?\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> .../trie.rs:31:9\r\n   |\r\n30 |     pub fn get_value(&self, key: impl Iterator<Item = K>) -> Option<&V> {\r\n   |                                                              ---------- expected because this return type...\r\n31 |         self.get_node(key)?.value()\r\n   |         ^^^^^^^^^^^^^^^^^^-^^^^^^^^\r\n   |         |                 |\r\n   |         |                 ...is found to be `std::option::Option<&V>` here\r\n   |         expected enum `std::option::Option`, found `&V`\r\n   |         help: try using a variant of the expected enum: `path::_::_serde::export::Some(self.get_node(key)?.value())`\r\n   |\r\n   = note:   expected enum `std::option::Option<&V>`\r\n           found reference `&V`\r\n   = note: to return `impl Trait`, all returned values must be of the same type\r\n   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\r\n   = help: you could instead create a new `enum` with a variant for each returned type\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79848/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79848/timeline", "performed_via_github_app": null, "state_reason": null}