{"url": "https://api.github.com/repos/rust-lang/rust/issues/84933", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84933/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84933/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84933/events", "html_url": "https://github.com/rust-lang/rust/issues/84933", "id": 875925926, "node_id": "MDU6SXNzdWU4NzU5MjU5MjY=", "number": 84933, "title": "Support inlining cross-crate TLS access on MSVC", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 266005765, "node_id": "MDU6TGFiZWwyNjYwMDU3NjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-msvc", "name": "O-windows-msvc", "color": "6e6ec0", "default": false, "description": "Toolchain: MSVC, Operating system: Windows"}, {"id": 632886930, "node_id": "MDU6TGFiZWw2MzI4ODY5MzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-thread-locals", "name": "A-thread-locals", "color": "f7e101", "default": false, "description": "Area: Thread local storage (TLS)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-05-04T23:41:04Z", "updated_at": "2023-03-29T19:18:43Z", "closed_at": "2023-03-29T19:18:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There exists a `__getit` function as part of the `thread_local!` implementation in the standard library. On the MSVC target this function is not `#[inline]`, meaning that it can't get inlined across crates. This issue is about fixing that, for some scenarios, in the future.\r\n\r\nThe `#[inline]` attribute was added in #84876 and, [like](https://github.com/rust-lang/rust/pull/43931) [historical](https://github.com/rust-lang/rust/pull/50252) [attempts](https://github.com/rust-lang/rust/pull/59720) it does not apply the attribute for MSVC targets. The reason for this is that MSVC appears to not support importing thread-local variables across a DLL boundary.\r\n\r\nFor example this C code:\r\n\r\n```c\r\n__declspec(dllimport, thread) extern int a;\r\n\r\nint get() {\r\n    return a;\r\n}\r\n```\r\n\r\n[yields this error](https://godbolt.org/z/r5Y9TMcW6) when compiled by Clang:\r\n\r\n```\r\n<source>:1:42: error: 'a' cannot be thread local when declared 'dllimport'\r\n__declspec(dllimport, thread) extern int a;\r\n                                         ^\r\n1 error generated.\r\n```\r\n\r\nI do not personally know the history of this. Empirically this appears to be true, if `#[inline]` is applied to `__getit` then the compiler segfaults on MSVC. The Rust compiler generally applies `dllimport` for you and tries to infer when this would otherwise  happen, which probably makes matters worse here.\r\n\r\nTo reproduce this in Rust it's relatively simple. First you'll need to acquire a patched compiler which applies `#[inline]` to the `__getit` function, then compile a library:\r\n\r\n```\r\n$ cat driver.rs\r\npub fn go() {\r\n    std::collections::HashMap::<i32, i32>::new();\r\n}\r\n$ rustc driver.rs --crate-type dylib\r\n$ cat main.rs\r\nfn main() {\r\n    driver::go();\r\n}\r\n$ rustc main.rs --extern driver=driver.dll\r\n```\r\n\r\nThis binary will nondeterministically crash. The crash signature is variable, too. Here the `HashMap` constructor currently uses thread locals internally which is what triggers this bug.\r\n\r\nIn any case things appear to not work with `#[inline]`, notably across DLL boundaries. What can work, however, is inlining thread local accesses that don't cross DLL boundaries. Ideally we would have some sort of conditional `#[inline]` attribute for this. Nothing of this form exists in rustc today, and implementing this is definitely quite a stretch. In any case though I wanted to file an issue about this possible improvement to libstd.\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84933/timeline", "performed_via_github_app": null, "state_reason": "completed"}