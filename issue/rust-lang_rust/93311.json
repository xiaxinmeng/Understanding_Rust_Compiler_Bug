{"url": "https://api.github.com/repos/rust-lang/rust/issues/93311", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93311/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93311/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93311/events", "html_url": "https://github.com/rust-lang/rust/issues/93311", "id": 1114457710, "node_id": "I_kwDOAAsO6M5CbUZu", "number": 93311, "title": "Poor diagnostic when returned `impl Fn` is not general enough", "user": {"login": "Luminiscental", "id": 16429289, "node_id": "MDQ6VXNlcjE2NDI5Mjg5", "avatar_url": "https://avatars.githubusercontent.com/u/16429289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Luminiscental", "html_url": "https://github.com/Luminiscental", "followers_url": "https://api.github.com/users/Luminiscental/followers", "following_url": "https://api.github.com/users/Luminiscental/following{/other_user}", "gists_url": "https://api.github.com/users/Luminiscental/gists{/gist_id}", "starred_url": "https://api.github.com/users/Luminiscental/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Luminiscental/subscriptions", "organizations_url": "https://api.github.com/users/Luminiscental/orgs", "repos_url": "https://api.github.com/users/Luminiscental/repos", "events_url": "https://api.github.com/users/Luminiscental/events{/privacy}", "received_events_url": "https://api.github.com/users/Luminiscental/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-25T23:17:39Z", "updated_at": "2022-06-20T04:02:40Z", "closed_at": "2022-06-20T04:02:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the [following code](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=b7e13e6ea588111e77cc85ec4faaef57):\r\n\r\n```rust\r\nfn main() {\r\n    fn opaque<T, F: Fn(T) -> bool>(f: F) -> impl Fn(T) -> bool {\r\n        f\r\n    }\r\n    (0..3).filter(opaque(|_| true));\r\n}\r\n```\r\n\r\nThe current output is a bit unhelpful:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n   --> src/main.rs:5:12\r\n    |\r\n2   |     fn opaque<T, F: Fn(T) -> bool>(f: F) -> impl Fn(T) -> bool {\r\n    |                                             ------------------\r\n    |                                             |\r\n    |                                             the expected opaque type\r\n    |                                             the found opaque type\r\n...\r\n5   |     (0..3).filter(opaque(|_| true));\r\n    |            ^^^^^^        --------\r\n    |            |             |\r\n    |            |             the expected closure\r\n    |            |             the found closure\r\n    |            lifetime mismatch\r\n    |\r\n    = note: expected associated type `<impl Fn(&i32)-> bool as FnOnce<(&i32,)>>::Output`\r\n               found associated type `<impl Fn(&i32)-> bool as FnOnce<(&i32,)>>::Output`\r\nnote: the lifetime requirement is introduced here\r\n```\r\n\r\nIdeally, I think a diagnostic more in line with the [following case](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=84cf83ec68caf1d9735a68d32fb07059) (replacing `impl ...` with just `F`) would be better:\r\n\r\n```rust\r\nfn main() {\r\n    fn opaque<T, F: Fn(T) -> bool>(f: F) -> F {\r\n        f\r\n    }\r\n    (0..3).filter(opaque(|_| true));\r\n}\r\n```\r\n\r\nWhich describes the actual issue of lifetime generality:\r\n\r\n```\r\nerror: implementation of `FnOnce` is not general enough\r\n --> src/main.rs:5:12\r\n  |\r\n5 |     (0..3).filter(opaque(|_| true));\r\n  |            ^^^^^^ implementation of `FnOnce` is not general enough\r\n  |\r\n  = note: closure with signature `fn(&'2 i32) -> bool` must implement `FnOnce<(&'1 i32,)>`, for any lifetime `'1`...\r\n  = note: ...but it actually implements `FnOnce<(&'2 i32,)>`, for some specific lifetime `'2`\r\n```", "closed_by": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93311/timeline", "performed_via_github_app": null, "state_reason": "completed"}