{"url": "https://api.github.com/repos/rust-lang/rust/issues/61449", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61449/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61449/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61449/events", "html_url": "https://github.com/rust-lang/rust/issues/61449", "id": 451142616, "node_id": "MDU6SXNzdWU0NTExNDI2MTY=", "number": 61449, "title": "Assert panic is difficult to read for long expressions", "user": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108435, "node_id": "MDU6TGFiZWwxMDg0MzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-pretty", "name": "A-pretty", "color": "f7e101", "default": false, "description": "Area: Pretty printing."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-02T01:45:38Z", "updated_at": "2020-06-18T20:01:56Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Given the following test, the traceback is very ugly and difficult to read. I think the `assert!` macro is trying to limit the width to 80 or 100 characters, but it also indents by a ridiculous amount. It should either use block indentation instead of visual indentation, put everything one line, or possibly just format it the same as the original code.\r\n\r\nThis happened even when the terminal width was more than 100 characters.\r\n\r\n```\r\n    #[test]\r\n    fn test_complex_types() {\r\n        assert!(match_type(\r\n            parse(\"char * const (*(* const bar)[10])(int )\"),\r\n            Pointer(\r\n                Box::new(Array(\r\n                    Box::new(Pointer(\r\n                        Box::new(Function(FunctionType {\r\n                            return_type: Box::new(Pointer(Box::new(Char(true)), Qualifiers::CONST)),\r\n                            params: vec![Symbol {\r\n                                ctype: Int(true),\r\n                                storage_class: Default::default(),\r\n                                id: String::new(),\r\n                                qualifiers: Qualifiers::NONE,\r\n                            }],\r\n                            varargs: false,\r\n                        })),\r\n                        Qualifiers::NONE\r\n                    )),\r\n                    ArrayType::Fixed(Box::new(Expr::Int(Token::Int(10))))\r\n                )),\r\n                Qualifiers::CONST\r\n            )\r\n        ));\r\n    }\r\n```\r\n\r\n```\r\nfailures:\r\n\r\n---- parse::tests::test_complex_types stdout ----\r\nthread 'parse::tests::test_complex_types' panicked at 'assertion failed: match_type(parse(\"char * const (*(* const bar)[10])(int )\"),\r\n           Pointer(Box::new(Array(Box::new(Pointer(Box::new(Function(FunctionType{return_type:\r\n                                                                                      Box::new(Pointer(Box::new(Char(true)),\r\n                                                                                                       Qualifiers::CONST)),\r\n                                                                                  params:\r\n                                                                                      vec![Symbol\r\n                                                                                           {\r\n                                                                                           ctype\r\n                                                                                           :\r\n                                                                                           Int\r\n                                                                                           (\r\n                                                                                           true\r\n                                                                                           )\r\n                                                                                           ,\r\n                                                                                           storage_class\r\n                                                                                           :\r\n                                                                                           Default\r\n                                                                                           ::\r\n                                                                                           default\r\n                                                                                           (\r\n\r\n                                                                                           )\r\n                                                                                           ,\r\n                                                                                           id\r\n                                                                                           :\r\n                                                                                           String\r\n                                                                                           ::\r\n                                                                                           new\r\n                                                                                           (\r\n\r\n                                                                                           )\r\n                                                                                           ,\r\n                                                                                           qualifiers\r\n                                                                                           :\r\n                                                                                           Qualifiers\r\n                                                                                           ::\r\n                                                                                           NONE\r\n                                                                                           ,\r\n                                                                                           }],\r\n                                                                                  varargs:\r\n                                                                                      false,})),\r\n                                                   Qualifiers::NONE)),\r\n                                  ArrayType::Fixed(Box::new(Expr::Int(Token::Int(10)))))),\r\n                   Qualifiers::CONST))', src/parse.rs:965:9\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61449/timeline", "performed_via_github_app": null, "state_reason": null}