{"url": "https://api.github.com/repos/rust-lang/rust/issues/39483", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39483/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39483/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39483/events", "html_url": "https://github.com/rust-lang/rust/issues/39483", "id": 205104845, "node_id": "MDU6SXNzdWUyMDUxMDQ4NDU=", "number": 39483, "title": "Miss optimization for loop with integer less than 64bits?", "user": {"login": "ludwigpacifici", "id": 923945, "node_id": "MDQ6VXNlcjkyMzk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/923945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ludwigpacifici", "html_url": "https://github.com/ludwigpacifici", "followers_url": "https://api.github.com/users/ludwigpacifici/followers", "following_url": "https://api.github.com/users/ludwigpacifici/following{/other_user}", "gists_url": "https://api.github.com/users/ludwigpacifici/gists{/gist_id}", "starred_url": "https://api.github.com/users/ludwigpacifici/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ludwigpacifici/subscriptions", "organizations_url": "https://api.github.com/users/ludwigpacifici/orgs", "repos_url": "https://api.github.com/users/ludwigpacifici/repos", "events_url": "https://api.github.com/users/ludwigpacifici/events{/privacy}", "received_events_url": "https://api.github.com/users/ludwigpacifici/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-03T09:09:31Z", "updated_at": "2018-12-01T14:30:07Z", "closed_at": "2018-12-01T14:29:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider this Rust snippet:\r\n\r\n```\r\nfn main() {\r\n    let mut sum: u64 = 0;\r\n\r\n    for i in 0..300 {\r\n        sum += i;\r\n    }\r\n\r\n    println!(\"{}\", sum) // expect: 44850\r\n}\r\n```\r\n\r\n`rustc -O test.rs --emit=asm` will compute the loop at compile time. It can be checked in the asm code: `movq\t$44850, (%rsp)`.\r\n\r\nIf I replace the type of the `sum` variable by an unsigned 32 bits integer: `let mut sum: u32 = 0;`, the `for` loop is not compile time computed, but it is vectorized.\r\n\r\n```\r\n.Ltmp0:\r\n\t.cfi_def_cfa_offset 80\r\n\tmovl\t$0, 4(%rsp)\r\n\tmovdqa\t.LCPI0_0(%rip), %xmm1\r\n\tpxor\t%xmm0, %xmm0\r\n\tmovl\t$320, %eax\r\n\tmovdqa\t.LCPI0_1(%rip), %xmm2\r\n\tmovdqa\t.LCPI0_2(%rip), %xmm4\r\n\tmovdqa\t.LCPI0_3(%rip), %xmm5\r\n\tmovdqa\t.LCPI0_4(%rip), %xmm6\r\n\tpxor\t%xmm3, %xmm3\r\n\tjmp\t.LBB0_1\r\n\t.p2align\t4, 0x90\r\n.LBB0_3:\r\n\tpaddd\t%xmm1, %xmm0\r\n\tpaddd\t%xmm1, %xmm0\r\n\tpaddd\t%xmm1, %xmm0\r\n\tpaddd\t%xmm1, %xmm3\r\n\tpaddd\t%xmm1, %xmm3\r\n\tpaddd\t%xmm1, %xmm3\r\n\tpaddd\t%xmm4, %xmm1\r\n\tpaddd\t%xmm5, %xmm0\r\n\tpaddd\t%xmm6, %xmm3\r\n.LBB0_1:\r\n\tpaddd\t%xmm1, %xmm0\r\n\tpaddd\t%xmm1, %xmm3\r\n\tpaddd\t%xmm2, %xmm3\r\n\taddl\t$-32, %eax\r\n\tjne\t.LBB0_3\r\n\tpaddd\t%xmm0, %xmm3\r\n\tpshufd\t$78, %xmm3, %xmm0\r\n\tpaddd\t%xmm3, %xmm0\r\n\tpshufd\t$229, %xmm0, %xmm1\r\n\tpaddd\t%xmm0, %xmm1\r\n\tmovd\t%xmm1, %eax\r\n\taddl\t$1190, %eax\r\n\tmovl\t%eax, 4(%rsp)\r\n\tleaq\t4(%rsp), %rax\r\n```\r\n\r\nI expected the `for` loop to be computed in both cases, knowing the result fits in 32 bits. Equivalent issue is there for unsigned 16 bits. \r\n\r\nIs it possible to make this compile time computation optimization available for whatever type?\r\n\r\n## Meta\r\n\r\n```\r\nrustc 1.15.0 (10893a9a3 2017-01-19)\r\nbinary: rustc\r\ncommit-hash: 10893a9a349cdd423f2490a6984acb5b3b7c8046\r\ncommit-date: 2017-01-19\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.15.0\r\nLLVM version: 3.9\r\n```", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39483/timeline", "performed_via_github_app": null, "state_reason": "completed"}