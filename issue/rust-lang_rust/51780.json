{"url": "https://api.github.com/repos/rust-lang/rust/issues/51780", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51780/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51780/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51780/events", "html_url": "https://github.com/rust-lang/rust/issues/51780", "id": 335463751, "node_id": "MDU6SXNzdWUzMzU0NjM3NTE=", "number": 51780, "title": "Insufficient synchronization in `Arc::get_mut`", "user": {"login": "jhjourdan", "id": 1917144, "node_id": "MDQ6VXNlcjE5MTcxNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1917144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhjourdan", "html_url": "https://github.com/jhjourdan", "followers_url": "https://api.github.com/users/jhjourdan/followers", "following_url": "https://api.github.com/users/jhjourdan/following{/other_user}", "gists_url": "https://api.github.com/users/jhjourdan/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhjourdan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhjourdan/subscriptions", "organizations_url": "https://api.github.com/users/jhjourdan/orgs", "repos_url": "https://api.github.com/users/jhjourdan/repos", "events_url": "https://api.github.com/users/jhjourdan/events{/privacy}", "received_events_url": "https://api.github.com/users/jhjourdan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-06-25T15:44:34Z", "updated_at": "2018-07-06T08:59:42Z", "closed_at": "2018-07-06T08:59:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following Rust code:\r\n\r\n```rust\r\nextern crate rayon;\r\n\r\nuse std::sync::{Arc, Mutex};\r\nuse std::mem;\r\nuse rayon::join;\r\n\r\nfn main() {\r\n    let a1 = Arc::new(Mutex::new(0));\r\n    let mut a2 = &mut a1.clone();\r\n    join(\r\n        || {\r\n            { let mut guard = a1.lock().unwrap();\r\n              *guard += 1;\r\n              mem::forget(guard); }\r\n            drop(a1);\r\n        },\r\n        || {\r\n            loop {\r\n                match Arc::get_mut(&mut a2) {\r\n                    None => (),\r\n                    Some(m) =>\r\n                    { *m.get_mut().unwrap() += 1;\r\n                      return; }\r\n                }\r\n            }\r\n        }\r\n    );\r\n}\r\n```\r\n\r\nThe first thread acquires the lock, modifies the variable, and then drop its Arc *without unlocking* (that's the point of the `mem::forget`).\r\n\r\nThe second thread waits until the first thread decrements the count by dropping its Arc, and then uses `get_mut` to access the content *without taking the lock* (at that time, the mutex is still locked).\r\n\r\nMy claim is that there is a race between the two accesses of the content of the mutex. The only reason the two accesses would be in a happens-before relationship would be that `Arc::drop` and `Arc::get_mut` would establish this happens-before relationship. However, even though `Arc::drop` does use a release write, `Arc::get_mut` only uses a relaxed read of the strong counter (via `is_unique`).\r\n\r\nThe fix is to use an acquire read in `is_unique`. I do not expect significant performance penalty here, since `is_unique` already contains several release-acquire accesses (of the weak count). \r\n\r\nCC @RalfJung\r\n\r\n\r\n**EDIT**\r\n\r\n\r\nAs @RalfJung noted, we do not actually need leaking memory to exploit this bug (hence this is not another instance of Leakpocalypse). The following piece of code exhibit the same problem:\r\n\r\n```rust\r\nextern crate rayon;\r\n\r\nuse std::sync::Arc;\r\nuse rayon::join;\r\n\r\nfn main() {\r\n    let a1 = Arc::new(0);\r\n    let mut a2 = a1.clone();\r\n    join(\r\n        || {\r\n            let _ : u32 = *a1;\r\n            drop(a1);\r\n        },\r\n        || {\r\n            loop {\r\n                match Arc::get_mut(&mut a2) {\r\n                    None => {}\r\n                    Some(m) => {\r\n                        *m = 1u32;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    );\r\n}\r\n```\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51780/reactions", "total_count": 26, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 26, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51780/timeline", "performed_via_github_app": null, "state_reason": "completed"}