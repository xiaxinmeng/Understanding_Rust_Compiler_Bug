{"url": "https://api.github.com/repos/rust-lang/rust/issues/38070", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38070/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38070/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38070/events", "html_url": "https://github.com/rust-lang/rust/issues/38070", "id": 192229381, "node_id": "MDU6SXNzdWUxOTIyMjkzODE=", "number": 38070, "title": "Type inference and impl visibility", "user": {"login": "ilammy", "id": 1256587, "node_id": "MDQ6VXNlcjEyNTY1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1256587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilammy", "html_url": "https://github.com/ilammy", "followers_url": "https://api.github.com/users/ilammy/followers", "following_url": "https://api.github.com/users/ilammy/following{/other_user}", "gists_url": "https://api.github.com/users/ilammy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilammy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilammy/subscriptions", "organizations_url": "https://api.github.com/users/ilammy/orgs", "repos_url": "https://api.github.com/users/ilammy/repos", "events_url": "https://api.github.com/users/ilammy/events{/privacy}", "received_events_url": "https://api.github.com/users/ilammy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-29T09:27:56Z", "updated_at": "2017-06-22T23:45:48Z", "closed_at": "2017-06-22T23:45:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been abusing type-parameterized traits for C++-style template metaprogramming ([background](https://users.rust-lang.org/t/statically-dispatched-strategy-using-traits/8185/9)) and ran into this strange behavior of the type inferencer.\r\n\r\nSuppose we have this:\r\n\r\n```\r\nmod equality {\r\n    pub trait Equal<How> {\r\n        fn equal(&Self, &Self) -> bool;\r\n    }\r\n\r\n    pub struct ByDefault;\r\n\r\n    impl<T> Equal<ByDefault> for T where T: PartialEq {\r\n        fn equal(a: &T, b: &T) -> bool {\r\n            a == b\r\n        }\r\n    }\r\n}\r\n\r\nmod i32_default {\r\n    use super::equality::{Equal, ByDefault};\r\n\r\n    #[test]\r\n    fn test() {\r\n        assert_eq!(Equal::equal(& 0, &0), true);\r\n        assert_eq!(Equal::equal(& 0, &1), false);\r\n        assert_eq!(Equal::equal(&-1, &1), false);\r\n    }\r\n}\r\n```\r\n\r\nThe compiler has been able to deduce the type of `Equal::<ByDefault>::equal(&i32, &i32)` just fine in this case. Though, it complains about `ByDefault` being used nowhere, and this works even if `ByDefault` is not imported into `i32_default` module.\r\n\r\nHowever, it also breaks if another impl is added to the picture:\r\n\r\n```\r\nmod i32_absolute_equality {\r\n    use super::equality::{Equal};\r\n\r\n    pub struct ByAbsoluteValue;\r\n\r\n    impl Equal<ByAbsoluteValue> for i32 {\r\n        fn equal(a: &i32, b: &i32) -> bool {\r\n            a.abs() == b.abs()\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nGiven the following modules:\r\n\r\n```\r\nmod i32_special {\r\n    use super::equality::{Equal};\r\n    use super::i32_absolute_equality::{ByAbsoluteValue};\r\n\r\n    #[test]\r\n    fn test() {\r\n        assert_eq!(Equal::equal(& 0, &0), true);\r\n        assert_eq!(Equal::equal(& 0, &1), false);\r\n        assert_eq!(Equal::equal(&-1, &1), true);\r\n    }\r\n}\r\n\r\nmod i32_both {\r\n    use super::equality::{Equal, ByDefault};\r\n    use super::i32_absolute_equality::{ByAbsoluteValue};\r\n\r\n    #[test]\r\n    fn test() {\r\n        assert_eq!(Equal::<ByDefault>::equal(& 0, &0), true);\r\n        assert_eq!(Equal::<ByDefault>::equal(& 0, &1), false);\r\n        assert_eq!(Equal::<ByDefault>::equal(&-1, &1), false);\r\n\r\n        assert_eq!(Equal::<ByAbsoluteValue>::equal(& 0, &0), true);\r\n        assert_eq!(Equal::<ByAbsoluteValue>::equal(& 0, &1), false);\r\n        assert_eq!(Equal::<ByAbsoluteValue>::equal(&-1, &1), true);\r\n    }\r\n}\r\n```\r\n\r\nI have expected the type inferencer to be able to deduce the types in `i32_special` automatically, while in `i32_both` it should have required the user to disambiguate. The reason is that there is only one suitable `How` type for `Equal<How>` in scope in `i32_special`, and two of them in `i32_both` case. However, the compiler cannot infer the types in `i32_special`. Furthermore, it cannot (now) infer the types even in `i32_default`!\r\n\r\nIt seems that I (mistakingly?) assume that impls also have visibility that is controlled by the visibility of their parameters. In this case it all makes sense. That's why `i32_default` does not require `ByDefault` to be imported. That's why it works if there only one impl in crate, and does not work if there is any other impl for any other type anywhere. This may be true, but this is somewhat counterintuitive on my mind.\r\n\r\nP.S.\r\n```\r\n$ rustc --version\r\nrustc 1.13.0 (2c6933acc 2016-11-07)\r\n```", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38070/timeline", "performed_via_github_app": null, "state_reason": "completed"}