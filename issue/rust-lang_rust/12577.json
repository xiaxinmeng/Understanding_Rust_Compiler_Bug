{"url": "https://api.github.com/repos/rust-lang/rust/issues/12577", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12577/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12577/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12577/events", "html_url": "https://github.com/rust-lang/rust/issues/12577", "id": 28368285, "node_id": "MDU6SXNzdWUyODM2ODI4NQ==", "number": 12577, "title": "Introduce a `Unsafe<T>` type to be used as the basis for `Cell`, `RefCell`, `Atomic`, etc and remove `Freeze`", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2014-02-26T20:50:59Z", "updated_at": "2014-06-16T21:56:30Z", "closed_at": "2014-03-22T21:11:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**UPDATED**\n\nWe have various safe wrappers that permit aliasable mutability (`Cell`, `RefCell`, etc). To be sound, all of them must use markers for invariance and non-freeze. We should factor out these markers and so on into a base type `Unsafe<T>` that contains the _most general_ (and unsafe) form of interior mutability, which is a function that yields a `*mut T`:\n\n```\nstruct Unsafe<T> {\n    priv value: T,\n}\n\nimpl<T> Unsafe<T> {\n    unsafe fn get(&self) -> *mut T { transmute(&self.value) }\n}\n```\n\nIt will be undefined behavior to transmute an aliasable reference into something mutable through any other means.\n\n`Unsafe<T>` wlil be integrated into the compiler as follows:\n- Its contents are invariant (variance analysis).\n- If an immutable static item contains `Unsafe<T>`, you cannot take its address.\n- If a type contains `Unsafe<T>` (interior), the compiler will have to be careful about optimizing aliasing and so on. This may correspond to some existing LLVM compiler concept like `volatile`.\n- Remove the `Freeze` kind (seemingly orthogonal but...not).\n\nThis type replaces `transmute_mut` as the building block for types like `Cell`. What is better about this is that it ties together the transmute along with the marker types that are required for soundness, so that they cannot be forgotten.\n\ncc @alexcrichton, with whom I was discussing this\ncc @brson, because this relates to our discussion on laying out rules for unsafe code\n", "closed_by": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12577/timeline", "performed_via_github_app": null, "state_reason": "completed"}