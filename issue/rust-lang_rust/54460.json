{"url": "https://api.github.com/repos/rust-lang/rust/issues/54460", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54460/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54460/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54460/events", "html_url": "https://github.com/rust-lang/rust/issues/54460", "id": 362845419, "node_id": "MDU6SXNzdWUzNjI4NDU0MTk=", "number": 54460, "title": "String::from_with_capacity(\"hello\", 30);", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-22T10:31:38Z", "updated_at": "2018-09-22T12:00:15Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In some situations it would be useful to create a string from a &str with a bigger capacity if it is know that the string is extended later on.\r\n\r\n````rust\r\nfn main() {\r\n    let mut s = String::from(\"Hello world\");\r\n    println!(\"len: {}, cap: {}\", s.len(), s.capacity());\r\n    s.push_str(\"add more characters\");\r\n    s.push_str(\"and more\");\r\n    s.push_str(\"and even more\");\r\n    println!(\"len: {}, cap: {}\", s.len(), s.capacity());\r\n}\r\n````\r\n````\r\nlen: 11, cap: 11\r\nlen: 51, cap: 60\r\n````\r\n\r\nTo not have unused capacity, I wonder if we could have something like `String::from_with_capacity()`\r\n````rust\r\nfn main() {\r\n    let mut s = String::from_with_capacity(\"Hello world\", 51);\r\n    println!(\"len: {}, cap: {}\", s.len(), s.capacity());\r\n    s.push_str(\"add more characters\");\r\n    s.push_str(\"and more\");\r\n    s.push_str(\"and even more\");\r\n    println!(\"len: {}, cap: {}\", s.len(), s.capacity());\r\n}\r\n````\r\n````\r\nlen: 11, cap: 51\r\nlen: 51, cap: 51\r\n````\r\n\r\nThis would be a shorter way of writing\r\n````rust\r\nlet mut s = String::with_capacity(51);\r\ns.push_str(\"Hello world\");\r\n....\r\n````", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54460/timeline", "performed_via_github_app": null, "state_reason": null}