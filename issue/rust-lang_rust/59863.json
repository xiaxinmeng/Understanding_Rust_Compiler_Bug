{"url": "https://api.github.com/repos/rust-lang/rust/issues/59863", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59863/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59863/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59863/events", "html_url": "https://github.com/rust-lang/rust/issues/59863", "id": 431771222, "node_id": "MDU6SXNzdWU0MzE3NzEyMjI=", "number": 59863, "title": "Suggestion for improved nested trait error messages when not implemented.", "user": {"login": "Firstyear", "id": 271005, "node_id": "MDQ6VXNlcjI3MTAwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/271005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Firstyear", "html_url": "https://github.com/Firstyear", "followers_url": "https://api.github.com/users/Firstyear/followers", "following_url": "https://api.github.com/users/Firstyear/following{/other_user}", "gists_url": "https://api.github.com/users/Firstyear/gists{/gist_id}", "starred_url": "https://api.github.com/users/Firstyear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Firstyear/subscriptions", "organizations_url": "https://api.github.com/users/Firstyear/orgs", "repos_url": "https://api.github.com/users/Firstyear/repos", "events_url": "https://api.github.com/users/Firstyear/events{/privacy}", "received_events_url": "https://api.github.com/users/Firstyear/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-10T23:57:22Z", "updated_at": "2019-04-11T11:37:20Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI was recently experiencing a confusing error message communication due to an error while developing an actix-web application. The error was:\r\n\r\n```\r\nerror[E0277]: the trait bound `fn((actix_web::Json<proto::LoginRequest>, actix_web::HttpRequest)) -> actix_web::HttpResponse {login}: actix_web::with::WithFactory<_, AppState<'_>, _>` is not satisfied\r\n   --> src/main.rs:117:18\r\n    |\r\n117 |                 .with_config(login, |((cfg, _),)| {\r\n    |                  ^^^^^^^^^^^ the trait `actix_web::with::WithFactory<_, AppState<'_>, _>` is not implemented for `fn((actix_web::Json<proto::LoginRequest>, actix_web::HttpRequest)) -> actix_web::HttpResponse {login}`\r\n\r\n\r\n\r\n```\r\n\r\nThe relevant code parts are:\r\n\r\n```\r\nfn login((lgn, state): (Json<LoginRequest>, HttpRequest<AppState>)) -> HttpResponse {\r\n    HttpResponse::Ok().json(())\r\n}\r\n\r\n#[derive(Debug, Serialize)]\r\nstruct Data {\r\n    data: u64\r\n}\r\n\r\n```\r\n\r\nThis error was unhelpful in resolution of the problem on a number of levels. It was only when asking for help that I was told of the method to resolve the cause. The error is that WithFactory can't be implemented, as FromRequest isn't implemented on (A, B) where A: FromRequest, B: FromRequest. In my case, A did not implement FromRequest, and this was due to lack of DeserializedOwned on Data.\r\n\r\nA more constructive error message in this situation would have been:\r\n\r\n```\r\nthe trait `actix_web::with::WithFactory<_, AppState, _>` is not implemented for `fn((actix_web::Json<Data>, actix_web::State<AppState>)) -> actix_web::HttpResponse {register}`\r\nthe trait `FromRequest` is not implemented for `(actix_web::Json<Data>, actix_web::State<AppState>)`\r\nthe trait `FromRequest` is not implemented for `actix_web::Json<Data>`\r\nthe trait `DeserializedOwned` is not implemented for `Data`\r\n```\r\n\r\nThis could be found easily by checking the traits on each argument, and then recursing into that type and checking why the outer trait is not implemented. For example, (A, B) can't be FromRequest, because A is not FromRequest (but B is) so you would descend into A to determine why it does not implement FromRequest. \r\n\r\nIt was posed to me that this is not possible for rustc to solve, and that IDE's would abstract the problem. First, I think that given the other amazing advances in rustc, this error communication can be created and solved :). Second, not everyone uses an IDE, or that IDE may not have the features required to display an error like this. It would also be difficult for users requesting assistance or getting start to configure IDE's or be expected to use them, and automated systems like a CI should be able to report detailed errors when they occur. \r\n\r\nI would also guess that this style of recursive trait error reporting would be of great use to a library like Futures, and many other applications. It would certainly improve accessibility to traits which often are seen as a deeply complex part of the rust ecosystem.\r\n\r\nI hope this helps, thanks,", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59863/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59863/timeline", "performed_via_github_app": null, "state_reason": null}