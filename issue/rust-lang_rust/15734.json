{"url": "https://api.github.com/repos/rust-lang/rust/issues/15734", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/15734/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/15734/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/15734/events", "html_url": "https://github.com/rust-lang/rust/issues/15734", "id": 38049950, "node_id": "MDU6SXNzdWUzODA0OTk1MA==", "number": 15734, "title": "`a[b]`, the sugary version of `*a.index(&b)`, seems to require type inference hints?", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-07-17T05:59:01Z", "updated_at": "2014-11-07T02:02:53Z", "closed_at": "2014-11-07T02:02:53Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "STR\n\n``` rust\n// Sorry for the long example, didn't have time to make it shorter!\nstruct Mat<T> {\n    data: Vec<T>,\n    shape: (uint, uint),\n}\n\nimpl<T> Mat<T> {\n    fn new(data: Vec<T>, shape@(nrows, ncols): (uint, uint)) -> Mat<T> {\n        assert!(data.len() == nrows * ncols);\n\n        Mat {\n            data: data,\n            shape: shape,\n        }\n    }\n\n    fn row<'a>(&'a self, row: uint) -> Row<&'a Mat<T>> {\n        let (nrows, _) = self.shape;\n\n        assert!(row < nrows);\n\n        Row {\n            mat: self,\n            row: row,\n        }\n    }\n}\n\nimpl<T> Index<(uint, uint), T> for Mat<T> {\n    fn index<'a>(&'a self, &(row, col): &(uint, uint)) -> &'a T {\n        let (nrows, ncols) = self.shape;\n\n        assert!(row < nrows, col < ncols);\n\n        &self.data[row * ncols + col]\n    }\n}\n\nimpl<'a, T> Index<(uint, uint), T> for &'a Mat<T> {\n    fn index<'b>(&'b self, index: &(uint, uint)) -> &'b T {\n        (*self).index(index)\n    }\n}\n\nstruct Row<M> {\n    mat: M,\n    row: uint,\n}\n\nimpl<T, M: Index<(uint, uint), T>> Index<uint, T> for Row<M> {\n    fn index<'a>(&'a self, col: &uint) -> &'a T {\n        &self.mat[(self.row, *col)]\n    }\n}\n\nfn main() {\n    let m = Mat::new(vec!(1u, 2, 3, 4, 5, 6), (2, 3));\n    let r = m.row(1);\n\n    // GOOD\n    println!(\"{}\", r.index(&2) == &6);\n\n    // BAD the sugary version doesn't work\n    println!(\"{}\", r[2] == 6);\n\n    // BAD type annotating the index/rhs doesn't help...\n    println!(\"{}\", r[2u] == 6u);\n\n    // GOOD it works OK in reverse...\n    println!(\"{}\", 6 == r[2]);\n\n    // BAD indirection has no positive effect\n    let e = r[2];\n    println!(\"{}\", e == 6);\n\n    // GOOD unless it's type annotated\n    let e: uint = r[2];\n    println!(\"{}\", e == 6);\n}\n```\n\nAll the lines marked with `BAD` yield these errors:\n\n```\nr[2] == 6: cannot determine a type for this bounded type parameter: unconstrained type\nr[2u] == 6u: the type of this value must be known in this context\ne == 6: the type of this value must be known in this context\n```\n\nVersion\n\n```\n$ rustc --version\nrustc 0.12.0-pre (459ffc2adc74f5e8b64a76f5670edb419b9f65da 2014-07-17 01:16:19 +0000)\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/15734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/15734/timeline", "performed_via_github_app": null, "state_reason": "completed"}