{"url": "https://api.github.com/repos/rust-lang/rust/issues/26003", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/26003/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/26003/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/26003/events", "html_url": "https://github.com/rust-lang/rust/issues/26003", "id": 84911783, "node_id": "MDU6SXNzdWU4NDkxMTc4Mw==", "number": 26003, "title": "MSVC: support LTCG native libraries in rlibs", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 266005765, "node_id": "MDU6TGFiZWwyNjYwMDU3NjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-msvc", "name": "O-windows-msvc", "color": "6e6ec0", "default": false, "description": "Toolchain: MSVC, Operating system: Windows"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-06-04T04:53:03Z", "updated_at": "2022-01-13T16:53:18Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "MSVC supports the option to compile native libraries with link-time code generation enabled via the `/GL` switch to the compiler. This cause the compiler to change the format of the `*.obj` file emitted to no longer be a COFF object file. When MSVC's `lib.exe` tool is used to assemble these object files into a `.lib`, it will correctly detect that these are LTCG-enabled files, adding an appropriate symbol table to the archive being generated. This means that when the linker comes along to link the library, the internal symbol table of the archive points at the LTCG files, allowing the linker to find where symbols are and also produce object files on-the-fly.\n\nWith rustc, however, the symbol tables for LTCG files can be lost. Whenever a native library is included statically into an rlib, the objects are extracted by the compiler and then re-inserted into an rlib. This operation loses the entries in the symbol table of the rlib (LLVM doesn't understand the format of the file being inserted), causing the linker to later on ignore all LTCG enabled files.\n\nLong story short, if a LTCG enabled C library is linked statically into an rlib, the linker will not resolve any of the symbols in the C library. This means that all native code linked statically to rlibs **cannot have LTCG enabled**, and this is occasionally somewhat difficult to retrofit on existing build systems.\n\nFixing this will involve improving the merging process of two archives, probably just blindly carrying over the symbol table from one archive to another (at least on MSVC). I'm not sure what the best route to do this is, but our options are:\n- Add support to `llvm-ar.exe` to do this.\n- Split apart `llvm-ar.cpp` into a library-like interface, and then rewrite the \"driver\" in rustc itself\n- Port `llvm-ar.exe` to Rust, and do everything in Rust\n\nThe latter two options have the great benefit of lifting the compiler's dependence on an `ar` tool, which would be nice!\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/26003/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/26003/timeline", "performed_via_github_app": null, "state_reason": null}