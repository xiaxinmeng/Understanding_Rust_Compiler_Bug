{"url": "https://api.github.com/repos/rust-lang/rust/issues/99538", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99538/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99538/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99538/events", "html_url": "https://github.com/rust-lang/rust/issues/99538", "id": 1312226999, "node_id": "I_kwDOAAsO6M5ONv63", "number": 99538, "title": "Regular incremental (?) build failures during stage 0 build", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2022-07-21T00:56:29Z", "updated_at": "2023-04-09T02:58:41Z", "closed_at": "2023-04-09T02:58:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Regularly, when I do a `git pull` that skips over a few days worth of commits, or switch between branches based on different master commits, a `./x.py check` fails afterwards. It fails with errors like \"lifetime may not live long enough\" or \"this associated function takes 2 generic arguments but 1 generic argument was supplied\" -- regular build errors, not ICEs. The errors are completely bogus though. Here's an example of the most recent one that I experienced today:\r\n\r\n<details>\r\n\r\n```\r\nChecking stage0 std test/bench/example targets (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /home/r/src/rust/rustc.2/src/tools/miri/Cargo.toml\r\nworkspace: /home/r/src/rust/rustc.2/Cargo.toml\r\n    Checking core v0.0.0 (/home/r/src/rust/rustc.2/library/core)\r\nerror[E0107]: this associated function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:145:14\r\n    |\r\n145 |             .provide_value::<String>(|| \"bye\".to_owned());\r\n    |              ^^^^^^^^^^^^^   ------ supplied 1 generic argument\r\n    |              |\r\n    |              expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n145 |             .provide_value::<String, F>(|| \"bye\".to_owned());\r\n    |                                    +++\r\n\r\nerror[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:185:9\r\n    |\r\n185 |         request_ref::<T>(self)\r\n    |         ^^^^^^^^^^^   - supplied 1 generic argument\r\n    |         |\r\n    |         expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n185 |         request_ref::<T, P>(self)\r\n    |                        +++\r\n\r\nerror[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:154:19\r\n    |\r\n154 |     assert_eq!(&**request_ref::<String>(obj).unwrap(), \"hello\");\r\n    |                   ^^^^^^^^^^^   ------ supplied 1 generic argument\r\n    |                   |\r\n    |                   expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n154 |     assert_eq!(&**request_ref::<String, P>(obj).unwrap(), \"hello\");\r\n    |                                       +++\r\n\r\nerror[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:155:18\r\n    |\r\n155 |     assert_eq!(&*request_value::<String>(obj).unwrap(), \"bye\");\r\n    |                  ^^^^^^^^^^^^^   ------ supplied 1 generic argument\r\n    |                  |\r\n    |                  expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n155 |     assert_eq!(&*request_value::<String, P>(obj).unwrap(), \"bye\");\r\n    |                                        +++\r\n\r\nerror[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:156:16\r\n    |\r\n156 |     assert_eq!(request_value::<u8>(obj), None);\r\n    |                ^^^^^^^^^^^^^   -- supplied 1 generic argument\r\n    |                |\r\n    |                expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n156 |     assert_eq!(request_value::<u8, P>(obj), None);\r\n    |                                  +++\r\n\r\nerror[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:164:19\r\n    |\r\n164 |     assert_eq!(&**request_ref::<String>(&*obj).unwrap(), \"hello\");\r\n    |                   ^^^^^^^^^^^   ------ supplied 1 generic argument\r\n    |                   |\r\n    |                   expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n164 |     assert_eq!(&**request_ref::<String, P>(&*obj).unwrap(), \"hello\");\r\n    |                                       +++\r\n\r\nerror[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:165:18\r\n    |\r\n165 |     assert_eq!(&*request_value::<String>(&*obj).unwrap(), \"bye\");\r\n    |                  ^^^^^^^^^^^^^   ------ supplied 1 generic argument\r\n    |                  |\r\n    |                  expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n165 |     assert_eq!(&*request_value::<String, P>(&*obj).unwrap(), \"bye\");\r\n    |                                        +++\r\n\r\nerror[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:166:16\r\n    |\r\n166 |     assert_eq!(request_value::<u8>(&*obj), None);\r\n    |                ^^^^^^^^^^^^^   -- supplied 1 generic argument\r\n    |                |\r\n    |                expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n166 |     assert_eq!(request_value::<u8, P>(&*obj), None);\r\n    |                                  +++\r\n\r\nerror[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:174:19\r\n    |\r\n174 |     assert_eq!(&**request_ref::<String>(&obj).unwrap(), \"hello\");\r\n    |                   ^^^^^^^^^^^   ------ supplied 1 generic argument\r\n    |                   |\r\n    |                   expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n174 |     assert_eq!(&**request_ref::<String, P>(&obj).unwrap(), \"hello\");\r\n    |                                       +++\r\n\r\nerror[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:175:18\r\n    |\r\n175 |     assert_eq!(&*request_value::<String>(&obj).unwrap(), \"bye\");\r\n    |                  ^^^^^^^^^^^^^   ------ supplied 1 generic argument\r\n    |                  |\r\n    |                  expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n175 |     assert_eq!(&*request_value::<String, P>(&obj).unwrap(), \"bye\");\r\n    |                                        +++\r\n\r\nerror[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\r\n   --> library/core/tests/any.rs:176:16\r\n    |\r\n176 |     assert_eq!(request_value::<u8>(&obj), None);\r\n    |                ^^^^^^^^^^^^^   -- supplied 1 generic argument\r\n    |                |\r\n    |                expected 2 generic arguments\r\n    |\r\nhelp: add missing generic argument\r\n    |\r\n176 |     assert_eq!(request_value::<u8, P>(&obj), None);\r\n    |                                  +++\r\n\r\nFor more information about this error, try `rustc --explain E0107`.\r\nerror: could not compile `core` due to 11 previous errors\r\n```\r\n\r\n</details>\r\n\r\nThese always go away when I do `./x.py clean`. This started some time not too long before Jun 28 and has been going on since then.", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99538/timeline", "performed_via_github_app": null, "state_reason": "completed"}