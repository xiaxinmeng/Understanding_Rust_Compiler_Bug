{"url": "https://api.github.com/repos/rust-lang/rust/issues/57103", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57103/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57103/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57103/events", "html_url": "https://github.com/rust-lang/rust/issues/57103", "id": 393909732, "node_id": "MDU6SXNzdWUzOTM5MDk3MzI=", "number": 57103, "title": "sparc64: passing structures with floats in registers should use floating point registers", "user": {"login": "karcherm", "id": 2553687, "node_id": "MDQ6VXNlcjI1NTM2ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/2553687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karcherm", "html_url": "https://github.com/karcherm", "followers_url": "https://api.github.com/users/karcherm/followers", "following_url": "https://api.github.com/users/karcherm/following{/other_user}", "gists_url": "https://api.github.com/users/karcherm/gists{/gist_id}", "starred_url": "https://api.github.com/users/karcherm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karcherm/subscriptions", "organizations_url": "https://api.github.com/users/karcherm/orgs", "repos_url": "https://api.github.com/users/karcherm/repos", "events_url": "https://api.github.com/users/karcherm/events{/privacy}", "received_events_url": "https://api.github.com/users/karcherm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 632899563, "node_id": "MDU6TGFiZWw2MzI4OTk1NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-SPARC", "name": "O-SPARC", "color": "6e6ec0", "default": false, "description": "Target: SPARC processors"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-24T16:50:05Z", "updated_at": "2020-02-19T22:45:35Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`librustc_target/abi/call/sparc64.rs` passes structures as `Uniform`, which get allocated to stack or \"promoted\" to integer registers by LLVM. According to the SPARC v9 64 Bit ABI definition in the SPARC Compliance Definition, floating point members should be promoted into floating point registers instead of integer registers, see page 47 in SCD 2.4.1. This also affects returning of structures, and makes `run-pass/structs-enums/struct-return.rs` fail. gcc returns the members of `struct Floats` in `%d0`, `%o1` and `%d4`, whereas Rust expects the members to be in `%o0`, `%o1` and `%o2`.\r\n\r\nI guess we need to create a `CastTarget` that contains a mixture of Int and Float registers in the prefix with an empty tail. As structures with at most 256 bits (8 * 32 bits) can be returned in registers, the eight class items in the prefix are enough. I expect that the structures needs to be flattened, so a structure containing a structure containing a float also has the float value passed in a floating point register.\r\n\r\nUnaligned Floats and Doubles (with `__attribute__((packed))`) end up being put in integer registers by `gcc` and `clang`, whereas \"accidently\" aligned floating point members get passed in integer registers by `gcc` and floating point registers by `clang`:\r\n\r\n```c++\r\n// Structure without \"packed\" declaration\r\nstruct str1 {\r\n  float f;  // passed in %f0\r\n  int i;    // passed in least-significant half of %o0\r\n};\r\n\r\n// Structure that gets misalignment due to packed declaration\r\nstruct str2 {\r\n  short s;  // passed in bits 48..63 of %o0\r\n  float f;  // passed in bits 16..47 of %o0 (due to misalignment)\r\n} __attribute__((packed));\r\n\r\n// Layout exactly as str1, but has alignof() 1. Different behaviour between gcc 8.2 and clang 7.0\r\nstruct str3 {\r\n  float f;  // passed in most-significant half of %o0 (gcc) or in %f0 (clang)\r\n  int i;    // passed in least-significant half of %o0\r\n} __attribute__((packed));\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57103/timeline", "performed_via_github_app": null, "state_reason": null}