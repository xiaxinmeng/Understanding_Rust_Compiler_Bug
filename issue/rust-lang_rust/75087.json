{"url": "https://api.github.com/repos/rust-lang/rust/issues/75087", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75087/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75087/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75087/events", "html_url": "https://github.com/rust-lang/rust/issues/75087", "id": 671831916, "node_id": "MDU6SXNzdWU2NzE4MzE5MTY=", "number": 75087, "title": "Mapping and collecting an owned `Vec` to an item with the same size should reuse its allocation", "user": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-08-03T06:34:06Z", "updated_at": "2020-09-07T02:13:51Z", "closed_at": "2020-09-07T02:13:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```rust\r\n#[repr(i8)]\r\npub enum Foo {\r\n    A,\r\n    B,\r\n    C,\r\n}\r\n\r\npub fn convert(vec: Vec<Foo>) -> Vec<i8> {\r\n    vec.into_iter().map(|foo| foo as i8).collect()\r\n    // unsafe { std::mem::transmute(vec) }\r\n}\r\n\r\n```\r\n\r\nAs it stands currently (on both stable and nightly), a new `Vec` is created in memory. As the source and target types are the same size in memory, I see no reason the compiler couldn't just map the value in-place, returning the same allocated ref (but with different semantics).\r\n\r\nThe commented out line is to indicate what I think _should_ be the case for a trivial case where memory representations are identical. Obviously it wouldn't be quite as simple for most cases.", "closed_by": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75087/timeline", "performed_via_github_app": null, "state_reason": "completed"}