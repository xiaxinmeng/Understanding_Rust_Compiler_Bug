{"url": "https://api.github.com/repos/rust-lang/rust/issues/84391", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84391/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84391/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84391/events", "html_url": "https://github.com/rust-lang/rust/issues/84391", "id": 863797812, "node_id": "MDU6SXNzdWU4NjM3OTc4MTI=", "number": 84391, "title": "`StructuralEq` and `derive(PartialEq,Eq)` in the stdlib", "user": {"login": "chorman0773", "id": 5026283, "node_id": "MDQ6VXNlcjUwMjYyODM=", "avatar_url": "https://avatars.githubusercontent.com/u/5026283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chorman0773", "html_url": "https://github.com/chorman0773", "followers_url": "https://api.github.com/users/chorman0773/followers", "following_url": "https://api.github.com/users/chorman0773/following{/other_user}", "gists_url": "https://api.github.com/users/chorman0773/gists{/gist_id}", "starred_url": "https://api.github.com/users/chorman0773/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chorman0773/subscriptions", "organizations_url": "https://api.github.com/users/chorman0773/orgs", "repos_url": "https://api.github.com/users/chorman0773/repos", "events_url": "https://api.github.com/users/chorman0773/events{/privacy}", "received_events_url": "https://api.github.com/users/chorman0773/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1976249039, "node_id": "MDU6TGFiZWwxOTc2MjQ5MDM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-patterns", "name": "A-patterns", "color": "f7e101", "default": false, "description": "Relating to patterns and pattern matching"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-04-21T12:08:40Z", "updated_at": "2021-05-14T19:28:11Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been meaning to open this for a few weeks now, but haven't had the time.\r\n\r\nCurrently, in the implementation of the rust standard library, many types use `derive(PartialEq,Eq)`. While, for other derive macros, this isn't an issue, `derive(PartialEq)` and `derive(Eq)` are special, and interacts with various language features. In particular, types like `String` (suprisingly) have the `StructuralEq` impl that `derive(Eq)` presents. Another example is `TypeId`, which is currently both `StructuralEq` and `StructuralPartialEq`, so it could be used in structural matching of `const`s and (eventually) in const generics. \r\nThis particularily affects an implementation I am working on [here](https://github.com/LightningCreations/lccc/blob/ff39e55ff4c5e26f8005f2ed002bd0eaacdc2caf/rust/libcore/src/any.rs#L9..L35), which is intended to solve a longstanding [soundness issue](https://github.com/rust-lang/rust/issues/10389) involving TypeId collisions, at the cost of a non-structural PartialEq implementation. While this is not currently an issue, the stablization of const generics, or making the `TypeId::of` function `const`, would bind `TypeId` to an implementation similar to what already exists, on all implementations (and, in any case, will run into #10389 at some level). For example, with the `#[feature(const_generics)]`, it is [currently possible](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=649202904e42fb8aa12efcc7b1d8adbb) to declare a type with `TypeId` as a generic parameter (though it's not possible to instantiate that parameter).\r\n\r\nI have previously described the TypeId issue [on IRLO](https://internals.rust-lang.org/t/typeid-structuraleq-is-this-necessary-or-planned-to-be-useful-in-the-future/14167), and the more general issue [on zulip](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/derive.28PartialEq.2CEq.29.20in.20the.20stdlib). \r\nI maintain my recommendation from the zulip thread, that currently, if a type cannot be used in structural matching of constants, the derive be removed and replaced with something effectively similar (possibly an equivalent, unstable, derive macro that excludes the impls of Structural{Partial,}Eq). ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84391/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84391/timeline", "performed_via_github_app": null, "state_reason": null}