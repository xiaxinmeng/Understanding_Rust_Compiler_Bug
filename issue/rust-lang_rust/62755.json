{"url": "https://api.github.com/repos/rust-lang/rust/issues/62755", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62755/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62755/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62755/events", "html_url": "https://github.com/rust-lang/rust/issues/62755", "id": 469289077, "node_id": "MDU6SXNzdWU0NjkyODkwNzc=", "number": 62755, "title": "Type inference in the presence of recursive impls may result in an error message that mentions seemingly unrelated types", "user": {"login": "alexwl", "id": 2631944, "node_id": "MDQ6VXNlcjI2MzE5NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2631944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwl", "html_url": "https://github.com/alexwl", "followers_url": "https://api.github.com/users/alexwl/followers", "following_url": "https://api.github.com/users/alexwl/following{/other_user}", "gists_url": "https://api.github.com/users/alexwl/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwl/subscriptions", "organizations_url": "https://api.github.com/users/alexwl/orgs", "repos_url": "https://api.github.com/users/alexwl/repos", "events_url": "https://api.github.com/users/alexwl/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-17T15:30:17Z", "updated_at": "2020-06-11T17:35:08Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Here's an example (tested with 1.36.0 and 1.38.0-nightly):\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=820e0d5fd61e7d9275a4378977488d8a\r\n\r\n```rust\r\ntrait Trait {}\r\n\r\nstruct Struct1<T>(T);\r\nstruct Struct2<T>(T);\r\n\r\n//error message depends on the order of impls\r\nimpl <T> Trait for Option<Struct2<T>> where Option<T>:Trait {}\r\nimpl <T> Trait for Option<Struct1<T>> where Option<T>:Trait {}\r\n\r\nfn foo<E: Trait>() {}\r\n\r\nfn main() {\r\n    foo::<Option<Struct1<_>>>();\r\n}\r\n```\r\n\r\nThe error message:\r\n\r\n```\r\nerror[E0275]: overflow evaluating the requirement `std::option::Option<Struct2<_>>: Trait`\r\n  --> src/main.rs:13:5\r\n   |\r\n13 |     foo::<Option<Struct1<_>>>();\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\r\n   = note: required because of the requirements on the impl of `Trait` for `std::option::Option<Struct2<Struct2<_>>>`\r\n   = note: required because of the requirements on the impl of `Trait` for `std::option::Option<Struct2<Struct2<Struct2<_>>>>`\r\n   ....\r\n```\r\n\r\nI understand that Rust doesn't guarantee that trait resolution is decidable, so overflows are expected in certain cases. Of course, message \"type annotations needed\" would be much more helpful than \"overflow evaluating the requirement\", but I guess this is the price we have to pay for 'aggressive' type inference.\r\n\r\nWhat is really confusing is the fact that the compiler reports that it fails to evaluate `Option<Struct2<_>>:Trait`, when the code clearly shows that the original obligation is `Option<Struct1<_>>:Trait` (`Struct2` is not mentioned anywhere besides the first impl).\r\n\r\nIt seems that obligations are evaluated in the following order:\r\n\r\n1. Option<Struct1<_>> : Trait\r\n2. Option<_> : Trait\r\n3. Option<Struct2<_>>: Trait\r\n4. Option<Struct2<Struct2<_>>>: Trait\r\n5. Option<Struct2<Struct2<Struct2<_>>>>: Trait\r\n...\r\n\r\n<br/>\r\n\r\nImpls that look like this `impl <T> Trait for Something<Struct<T>> where Something<T>:Trait {..}` are not so rare.\r\n\r\nFor example, `impl<'a, E> Read for &'a PollEvented<E> where E: Evented, &'a E: Read {..}` from  https://docs.rs/tokio-reactor/0.1.5/tokio_reactor/struct.PollEvented.html.\r\n\r\nHere's how this impl may cause confusing error message:\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=da7d0c59e214a8536d6872d5069c6500\r\n\r\n```rust\r\n#[allow(unused_imports)]\r\nuse tokio;\r\n\r\nfn foo<T:std::io::Read>() {}\r\n\r\nfn main() {\r\n    foo::<&_>();\r\n}\r\n```\r\n\r\nThe error message:\r\n\r\n```\r\nerror[E0275]: overflow evaluating the requirement `&tokio_reactor::poll_evented::PollEvented<_>: std::io::Read`\r\n --> src/main.rs:7:5\r\n  |\r\n7 |     foo::<&_>();\r\n  |     ^^^^^^^^^\r\n  |\r\n  = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\r\n  = note: required because of the requirements on the impl of `std::io::Read` for `&tokio_reactor::poll_evented::PollEvented<tokio_reactor::poll_evented::PollEvented<_>>`\r\n  = note: required because of the requirements on the impl of `std::io::Read` for `&tokio_reactor::poll_evented::PollEvented<tokio_reactor::poll_evented::PollEvented<tokio_reactor::poll_evented::PollEvented<_>>>`\r\n  ...\r\n```\r\n\r\n`PollEvented` is not mentioned anywhere in the code (but the impl is in scope).\r\n\r\nInteresting, that if I replace `use tokio;` with an impl for a type that is not in scope:\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5cdebfaedd00f3142924dd256ac1116a\r\n\r\n```rust\r\nimpl Struct{}//not found in this scope\r\nfn foo<T:std::io::Read>() {}\r\n\r\nfn main() {\r\n    foo::<&_>();\r\n}\r\n```\r\n\r\nThe error message is even more confusing:\r\n\r\n```\r\nerror[E0275]: overflow evaluating the requirement `&tar::archive::ArchiveInner<_>: std::io::Read`\r\n --> src/main.rs:6:5\r\n  |\r\n6 |     foo::<&_>();\r\n  |     ^^^^^^^^^\r\n  |\r\n  = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\r\n  = note: required because of the requirements on the impl of `std::io::Read` for `&tokio_reactor::poll_evented::PollEvented<tar::archive::ArchiveInner<_>>`\r\n  = note: required because of the requirements on the impl of `std::io::Read` for `&tokio_reactor::poll_evented::PollEvented<tokio_reactor::poll_evented::PollEvented<tar::archive::ArchiveInner<_>>>`\r\n  ...\r\n```\r\n\r\n\r\n<br/><br/>\r\n\r\nIt seems that there are a number of existing issues that have the same underlying cause (type inference in the presence of recursive impls):\r\n\r\nhttps://github.com/rust-lang/rust/issues/61800\r\nhttps://github.com/rust-lang/rust/issues/60603\r\nhttps://github.com/rust-lang/rust/issues/57854\r\nhttps://github.com/rust-lang/rust/issues/39959\r\nhttps://github.com/rust-lang/rust/issues/49017\r\nhttps://github.com/rust-lang/rust/issues/37748\r\nhttps://github.com/rust-lang/rust/issues/34137", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62755/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62755/timeline", "performed_via_github_app": null, "state_reason": null}