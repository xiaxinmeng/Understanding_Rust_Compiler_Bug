{"url": "https://api.github.com/repos/rust-lang/rust/issues/103620", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103620/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103620/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103620/events", "html_url": "https://github.com/rust-lang/rust/issues/103620", "id": 1425124348, "node_id": "I_kwDOAAsO6M5U8av8", "number": 103620, "title": "Exponential parse time involving `recover_const_arg`", "user": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-10-27T06:52:21Z", "updated_at": "2022-11-29T20:23:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code takes minutes to parse:\r\n\r\n```rust\r\nfn main() {\r\n    0 +\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        { let _ : A<B<C = D, x:^\r\n        }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\r\n}\r\n\r\n```\r\n\r\nThe output (with `--error-format=short`) includes:\r\n\r\n```\r\nsrc/main.rs:32:32: error: expected one of `!`, `(`, `,`, `>`, `?`, `for`, `~`, lifetime, or path, found `^`\r\nsrc/main.rs:31:32: error: expected one of `!`, `(`, `,`, `>`, `?`, `for`, `~`, lifetime, or path, found `^`\r\nsrc/main.rs:30:32: error: expected one of `!`, `(`, `,`, `>`, `?`, `for`, `~`, lifetime, or path, found `^`\r\n...\r\n```\r\n\r\nwhere each error takes significantly longer to produce than the previous.\r\n\r\n### Where it's slow\r\n\r\nAccording to `-Z time-passes`, the slow pass is `parse_crate`.\r\n\r\n[sample-head-103620.txt](https://github.com/rust-lang/rust/files/10116995/sample-head-103620.txt)\r\n\r\n`handle_ambiguous_unbraced_const_arg` and `recover_const_arg` repeatedly on the stack is sus.\r\n\r\n### Impact\r\n\r\nThis input is nonsense, so it's possible the only impact of the issue is slowing down fuzzing, very slightly.\r\n\r\n### Version\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.66.0-nightly (bed4ad65b 2022-10-25)\r\nbinary: rustc\r\ncommit-hash: bed4ad65bf7a1cef39e3d66b3670189581b3b073\r\ncommit-date: 2022-10-25\r\nhost: x86_64-apple-darwin\r\nrelease: 1.66.0-nightly\r\nLLVM version: 15.0.2\r\n```\r\n\r\n### Regression\r\n\r\nRegression in nightly-2020-10-28\r\n\r\n@rustbot label +I-compiletime", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103620/timeline", "performed_via_github_app": null, "state_reason": null}