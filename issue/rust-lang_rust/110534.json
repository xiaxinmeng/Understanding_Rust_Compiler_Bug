{"url": "https://api.github.com/repos/rust-lang/rust/issues/110534", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110534/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110534/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110534/events", "html_url": "https://github.com/rust-lang/rust/issues/110534", "id": 1674543696, "node_id": "I_kwDOAAsO6M5jz4JQ", "number": 110534, "title": "broken MIR in DefId(...) (NoSolution)", "user": {"login": "QuineDot", "id": 75067664, "node_id": "MDQ6VXNlcjc1MDY3NjY0", "avatar_url": "https://avatars.githubusercontent.com/u/75067664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuineDot", "html_url": "https://github.com/QuineDot", "followers_url": "https://api.github.com/users/QuineDot/followers", "following_url": "https://api.github.com/users/QuineDot/following{/other_user}", "gists_url": "https://api.github.com/users/QuineDot/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuineDot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuineDot/subscriptions", "organizations_url": "https://api.github.com/users/QuineDot/orgs", "repos_url": "https://api.github.com/users/QuineDot/repos", "events_url": "https://api.github.com/users/QuineDot/events{/privacy}", "received_events_url": "https://api.github.com/users/QuineDot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-04-19T09:37:18Z", "updated_at": "2023-06-14T09:31:41Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\r\n\r\n[Playground.](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=a7fb122c5a7e42313e0b4769f8a633d3)\r\n\r\n```Rust\r\nuse core::cell::Ref;\r\n\r\nstruct System;\r\n\r\ntrait IntoSystem { \r\n    fn into_system(self) -> System;\r\n}\r\n\r\nimpl IntoSystem for fn(Ref<'_, u32>) {\r\n    fn into_system(self) -> System { System }\r\n}\r\n\r\nimpl<A> IntoSystem for fn(A)\r\nwhere\r\n    // n.b. No `Ref<'_, u32>` can satisfy this bound\r\n    A: 'static + for<'x> MaybeBorrowed<'x, Output = A>,\r\n{\r\n    fn into_system(self) -> System { System }\r\n}\r\n\r\n//---------------------------------------------------\r\n\r\ntrait MaybeBorrowed<'a> {\r\n    type Output: 'a;\r\n}\r\n\r\n// If you comment this out you'll see the compiler chose to look at the\r\n// fn(A) implementation of IntoSystem above\r\nimpl<'a, 'b> MaybeBorrowed<'a> for Ref<'b, u32> {\r\n    type Output = Ref<'a, u32>;\r\n}\r\n\r\n// ---------------------------------------------\r\n\r\nfn main() {\r\n    fn sys_ref(_age: Ref<u32>) {}\r\n    let _sys_c = (sys_ref as fn(_)).into_system();\r\n    // properly fails\r\n    // let _sys_c = (sys_ref as fn(Ref<'static, u32>)).into_system();\r\n    // properly succeeds\r\n    // let _sys_c = (sys_ref as fn(Ref<'_, u32>)).into_system();\r\n}\r\n```\r\n\r\n### Meta\r\n\r\nPlayground:\r\n* Build using the Stable version: 1.68.2\r\n* Build using the Beta version: 1.69.0-beta.8 (2023-04-13 f18236dcd3d8191c91ac)\r\n* Build using the Nightly version: 1.71.0-nightly (2023-04-16 d0f204e4d750b62f9d6c)\r\n\r\n[It wasn't an ICE in 1.62.](https://rust.godbolt.org/z/4Mc8z5a63)\r\n\r\n### Error output\r\n\r\n```\r\nwarning: conflicting implementations of trait `IntoSystem` for type `for<'a> fn(Ref<'a, u32>)`\r\n  --> src/main.rs:13:1\r\n   |\r\n9  | impl IntoSystem for fn(Ref<'_, u32>) {\r\n   | ------------------------------------ first implementation here\r\n...\r\n13 | impl<A> IntoSystem for fn(A)\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a> fn(Ref<'a, u32>)`\r\n   |\r\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n   = note: for more information, [see issue #56105 <https://github.com/rust-lang/rust/issues/56105>](https://github.com/rust-lang/rust/issues/56105)\r\n   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\r\n   = note: `#[warn(coherence_leak_check)]` on by default\r\n\r\nerror: internal compiler error: no errors encountered even though `delay_span_bug` issued\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:21 ~ playground[c84b]::main) (NoSolution): could not prove Binder(TraitPredicate(<fn(std::cell::Ref<'_, u32>) as IntoSystem>, polarity:Positive), [])\r\n  |\r\n  = note: delayed at    0: <rustc_errors::HandlerInner>::emit_diagnostic\r\n             1: <rustc_errors::Handler>::delay_span_bug::<rustc_span::span_encoding::Span, &str>\r\n             2: <rustc_borrowck::type_check::TypeChecker>::normalize_and_prove_instantiated_predicates\r\n             3: <rustc_borrowck::type_check::TypeVerifier as rustc_middle::mir::visit::Visitor>::visit_constant\r\n             4: <rustc_borrowck::type_check::TypeVerifier as rustc_middle::mir::visit::Visitor>::visit_body\r\n             5: rustc_borrowck::nll::compute_regions\r\n             6: rustc_borrowck::do_mir_borrowck\r\n             7: rustc_borrowck::mir_borrowck\r\n             8: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::mir_borrowck, rustc_query_impl::plumbing::QueryCtxt>\r\n             9: rustc_data_structures::sync::par_for_each_in::<&[rustc_span::def_id::LocalDefId], <rustc_middle::hir::map::Map>::par_body_owners<rustc_interface::passes::analysis::{closure#2}::{closure#0}>::{closure#0}>\r\n            10: <rustc_session::session::Session>::time::<(), rustc_interface::passes::analysis::{closure#2}>\r\n            11: rustc_interface::passes::analysis\r\n            12: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::analysis, rustc_query_impl::plumbing::QueryCtxt>\r\n            13: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n            14: <std::thread::local::LocalKey<core::cell::Cell<*const ()>>>::with::<rustc_middle::ty::context::tls::enter_context<<rustc_middle::ty::context::GlobalCtxt>::enter<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}::{closure#4}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\r\n            15: <rustc_interface::interface::Compiler>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_span::ErrorGuaranteed>>\r\n            16: rustc_span::set_source_map::<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}::{closure#0}>\r\n            17: std::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\r\n            18: <<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#1} as core::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\r\n            19: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\n                       at /rustc/d0f204e4d750b62f9d6c2593405e828757126832/library/alloc/src/boxed.rs:1973:9\r\n            20: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\n                       at /rustc/d0f204e4d750b62f9d6c2593405e828757126832/library/alloc/src/boxed.rs:1973:9\r\n            21: std::sys::unix::thread::Thread::new::thread_start\r\n                       at /rustc/d0f204e4d750b62f9d6c2593405e828757126832/library/std/src/sys/unix/thread.rs:108:17\r\n            22: start_thread\r\n            23: clone\r\n          \r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.71.0-nightly (d0f204e4d 2023-04-16) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: --crate-type bin -C embed-bitcode=no -C codegen-units=1 -C debuginfo=2\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nwarning: `playground` (bin \"playground\") generated 1 warning\r\nerror: could not compile `playground` (bin \"playground\"); 1 warning emitted\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110534/timeline", "performed_via_github_app": null, "state_reason": null}