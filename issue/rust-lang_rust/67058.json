{"url": "https://api.github.com/repos/rust-lang/rust/issues/67058", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67058/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67058/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67058/events", "html_url": "https://github.com/rust-lang/rust/issues/67058", "id": 533469603, "node_id": "MDU6SXNzdWU1MzM0Njk2MDM=", "number": 67058, "title": "Tracking issue for `{f32,f64}::to_int_unchecked` methods", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-12-05T16:47:03Z", "updated_at": "2020-04-20T08:14:13Z", "closed_at": "2020-04-03T01:22:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "First discussed in issue https://github.com/rust-lang/rust/issues/10184.\r\n\r\nAs of Rust 1.39, casting a floating point number to an integer with `as` is Undefined Behavior if the value is out of range. `-Z saturating-float-casts` fixes this soundness hole by making `as` \u201csaturate\u201d to the maximum or minimum value of the integer type (or zero for `NaN`), but has measurable negative performance impact in some benchmarks. There is some consensus in that thread for enabling saturation by default anyway, but provide an `unsafe fn` alternative for users who know through some other mean that their values are in range.\r\n\r\nPR https://github.com/rust-lang/rust/pull/66841 adds that method to each of `f32` and `f64`.\r\n\r\n```rust\r\n    /// Rounds toward zero and converts to any primitive integer type,\r\n    /// assuming that the value is finite and fits in that type.\r\n    ///\r\n    /// ```\r\n    /// #![feature(float_approx_unchecked_to)]\r\n    ///\r\n    /// let value = 4.6_f32;\r\n    /// let rounded = unsafe { value.approx_unchecked_to::<u16>() };\r\n    /// assert_eq!(rounded, 4);\r\n    ///\r\n    /// let value = -128.9_f32;\r\n    /// let rounded = unsafe { value.approx_unchecked_to::<i8>() };\r\n    /// assert_eq!(rounded, std::i8::MIN);\r\n    /// ```\r\n    ///\r\n    /// # Safety\r\n    ///\r\n    /// The value must:\r\n    ///\r\n    /// * Not be `NaN`\r\n    /// * Not be infinite\r\n    /// * Be representable in the return type `Int`, after truncating off its fractional part\r\n    #[cfg(not(bootstrap))]\r\n    #[unstable(feature = \"float_approx_unchecked_to\", issue = \"0\")]\r\n    #[inline]\r\n    pub unsafe fn approx_unchecked_to<Int>(self) -> Int where Self: FloatToInt<Int> {\r\n        FloatToInt::<Int>::approx_unchecked(self)\r\n    }\r\n```\r\n\r\nThe `FloatToInt` trait (tracking issue: https://github.com/rust-lang/rust/issues/67057) has macro-generated `impl`s for all combinations of primitive integer and primitive floating point types:\r\n\r\n```rust\r\nimpl FloatToInt<$Int> for $Float {\u2026}\r\n```\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67058/reactions", "total_count": 3, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67058/timeline", "performed_via_github_app": null, "state_reason": "completed"}