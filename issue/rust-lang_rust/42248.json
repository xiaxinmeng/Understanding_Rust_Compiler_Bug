{"url": "https://api.github.com/repos/rust-lang/rust/issues/42248", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42248/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42248/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42248/events", "html_url": "https://github.com/rust-lang/rust/issues/42248", "id": 231677436, "node_id": "MDU6SXNzdWUyMzE2Nzc0MzY=", "number": 42248, "title": "Broken match statement when compiling for thumbv6-none-eabi (ARM cortex-m0)", "user": {"login": "alevy", "id": 4689, "node_id": "MDQ6VXNlcjQ2ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/4689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alevy", "html_url": "https://github.com/alevy", "followers_url": "https://api.github.com/users/alevy/followers", "following_url": "https://api.github.com/users/alevy/following{/other_user}", "gists_url": "https://api.github.com/users/alevy/gists{/gist_id}", "starred_url": "https://api.github.com/users/alevy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alevy/subscriptions", "organizations_url": "https://api.github.com/users/alevy/orgs", "repos_url": "https://api.github.com/users/alevy/repos", "events_url": "https://api.github.com/users/alevy/events{/privacy}", "received_events_url": "https://api.github.com/users/alevy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 147085028, "node_id": "MDU6TGFiZWwxNDcwODUwMjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly", "name": "regression-from-stable-to-nightly", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to nightly."}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 16, "created_at": "2017-05-26T16:39:56Z", "updated_at": "2017-06-21T16:30:24Z", "closed_at": "2017-06-19T12:58:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After upgrading Tock to use a recent nightly, compilation for the NRF51-DK (a Cortex-M0 based board) results in unexpected assembly for a particular match statement.\r\n\r\nThe match statement looks like this:\r\n\r\n```rust\r\nimpl kernel::Platform for Platform {\r\n    fn with_driver<F, R>(&self, driver_num: usize, f: F) -> R\r\n        where F: FnOnce(Option<&kernel::Driver>) -> R\r\n    {\r\n        match driver_num {\r\n            0 => f(Some(self.console)),\r\n            1 => f(Some(self.gpio)),\r\n            3 => f(Some(self.timer)),\r\n            8 => f(Some(self.led)),\r\n            9 => f(Some(self.button)),\r\n            14 => f(Some(self.rng)),\r\n            17 => f(Some(self.aes)),\r\n            36 => f(Some(self.temp)),\r\n            _ => f(None),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe LLVM IR that (seems to) corresponds is:\r\n\r\n```\r\nbb49.i.i.i.i:                                     ; preds = %_ZN6kernel7process7Process18incr_syscall_count17h073864aec83cd68fE.exit\r\n  %1192 = load volatile i32, i32* %1028, align 4\r\n  switch i32 %1192, label %bb12.i.i.i1127 [\r\n    i32 0, label %bb1.i.i.i.i.i\r\n    i32 1, label %bb2.i.i.i.i.i\r\n    i32 3, label %bb3.i.i.i.i.i\r\n    i32 8, label %bb4.i57.i.i.i.i\r\n    i32 9, label %bb5.i58.i.i.i.i\r\n    i32 14, label %bb6.i.i.i.i.i\r\n    i32 17, label %bb7.i.i.i.i.i\r\n    i32 36, label %bb8.i.i.i.i.i\r\n  ]\r\n```\r\n\r\nwhich is a fairly straight forward translation.\r\n\r\nIn general, the template for the expected output in assembly is something like:\r\n\r\n```\r\n;given r1 is `driver_num`, the variable we're matching against\r\nlsls    r1, r1, #1\r\nadd     r1, pc\r\nldrh    r1, [r1, #4] ; load a half-word from the switch's offset table\r\nlsls    r1, r1, #1 ; this half-word is actually 2x what it should be (idk why, just cause)\r\nadd     pc, r1 ; use the result as an offset from the current PC and jump there\r\n                     ; (because we're executing a closure\r\n```\r\n\r\nThe match statement seems to end up being broken up (makes sense since the matched values are sparse), with one of the cases (which is called at least when `driver_num` is `3`) looking like this:\r\n\r\n```\r\nadd     r1, pc, #16\r\nlsls    r1, r1, #1\r\nldrh    r1, [r1, r1]\r\nlsls    r1, r1, #1\r\nadd     pc, r1\r\n```\r\n\r\nThis basically doesn't make any sense... it's grabbing a text segment address, multiplying it by two then loading a half-word from an address that's again multiplied by two (and at this point, completely outside the text segment so it could be anything really). In practice, that returns 0xffff, which after shifting left by one results in `0x1fffe`. Finally, adding that to the current PC is way way way outside of the text segment and results in a hardware fault.\r\n\r\n## Notes\r\n\r\nWe can \"fix\" this in a variety of ways:\r\n\r\n  * Commenting out the `17` valued branch (commenting out no other branch seems to do the trick)\r\n\r\n  * Making the function `inline(never)`\r\n\r\n  * Using opt-level 0 or 1\r\n\r\n  * Compiling for better supported architectures by LLVM (e.g. `thumbv7m-none-eabi`) although those don't run on the same hardware so I can only confirm \r\n\r\n## Meta\r\n\r\nThis is using `rustc 1.19.0-nightly (5b13bff52 2017-05-23)`\r\n\r\n## Reproducing\r\n\r\nCheckout commit `d5565a227f8aa40e8c94efa9877a425003d02752` from helena-project/tock and:\r\n\r\n```bash\r\n$ make TOCK_BOARD=nrf51dk\r\n```\r\n\r\nthe resulting binary will be `boards/nrf51dk/target/thumbv6-none-eabi/release/nrf51dk`, which you can read with `objdump`:\r\n\r\n```bash\r\n$ arm-none-eabi-objdump -d boards/nrf51dk/target/thumbv7-none-eabi/release/nrf51dk\r\n```", "closed_by": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42248/timeline", "performed_via_github_app": null, "state_reason": "completed"}