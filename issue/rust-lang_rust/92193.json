{"url": "https://api.github.com/repos/rust-lang/rust/issues/92193", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92193/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92193/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92193/events", "html_url": "https://github.com/rust-lang/rust/issues/92193", "id": 1086652031, "node_id": "I_kwDOAAsO6M5AxP5_", "number": 92193, "title": "No auto-vectorization in such case since 1.54.0", "user": {"login": "solotzg", "id": 9016847, "node_id": "MDQ6VXNlcjkwMTY4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9016847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solotzg", "html_url": "https://github.com/solotzg", "followers_url": "https://api.github.com/users/solotzg/followers", "following_url": "https://api.github.com/users/solotzg/following{/other_user}", "gists_url": "https://api.github.com/users/solotzg/gists{/gist_id}", "starred_url": "https://api.github.com/users/solotzg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solotzg/subscriptions", "organizations_url": "https://api.github.com/users/solotzg/orgs", "repos_url": "https://api.github.com/users/solotzg/repos", "events_url": "https://api.github.com/users/solotzg/events{/privacy}", "received_events_url": "https://api.github.com/users/solotzg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-12-22T09:57:39Z", "updated_at": "2023-04-05T17:34:41Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nconst MAX_STEP_DATA_SIZE: usize = 32;\r\n\r\n#[inline]\r\nfn check(byte: u8) -> bool {\r\n    return (byte <= 0x20) || (byte == 0x22) || (byte == 0x3D) || (byte == 0x5B) || (byte == 0x5D);\r\n    return (byte <= 0x20) | (byte == 0x22) | (byte == 0x3D) | (byte == 0x5B) | (byte == 0x5D);\r\n}\r\n\r\n#[inline]\r\nfn is_any(s: &[bool]) -> bool {\r\n    let mut res = false;\r\n    for i in 0..s.len() {\r\n        res |= s[i];\r\n    }\r\n    res\r\n}\r\n\r\nunsafe fn test_impl(s: *const u8, len: usize) -> bool {\r\n    let mut step_data = [false; MAX_STEP_DATA_SIZE / std::mem::size_of::<u8>()];\r\n    let mut s = s;\r\n    let mut len = len;\r\n    while len >= step_data.len() {\r\n        for i in 0..step_data.len() {\r\n            step_data[i] = check(*s.add(i));\r\n        }\r\n\r\n        if is_any(&step_data) {\r\n            return true;\r\n        }\r\n\r\n        s = s.add(step_data.len());\r\n        len -= step_data.len();\r\n    }\r\n    for i in 0..len {\r\n        if check(*s.add(i)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\npub fn test(s: &[u8]) -> bool {\r\n    unsafe { test_impl(s.as_ptr(), s.len()) }\r\n}\r\n\r\n```\r\n\r\nWith `rustc 1.53.0-nightly`\r\nrun `RUSTFLAGS=\"--emit=asm -C target-feature=+avx2\" cargo build --release`\r\nrustc can generate vectorized asm.\r\n\r\nBut with 1.54.0 or higher, rustc can not make optimization.\r\n\r\nIt can be verified in [godbolt.org](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1DEArgoKkl9ZATwDKjdAGFUtEywYgATAE5SjgBk8BkwAOXcAI0xiEGkAB1QFQjsGFzcPbz8EpNsBIJDwliiY6StMGxShAiZiAjT3T19LTGtchiqagnywyOjYy2ra%2Boym807uwuLYgEpLVBNiZHYONAZzAGoAWQBBAA0AfSEAFWxlfYARbaPtw4BJAC1sEHWzPAAvTHWAUgBmc/Wfl5fgAhL4abZgiFeH5fACswOCtGCmDh50hVAY62QCHKAGsIBEAJ4EdgvAAc03WAFpfth1hFUK5vgB2UHg9Yc9bETAEBaYgnEz6/Jy/f4aVReDSUr7MkWy9YCknfP6i9birxeaWymVOBVEpWi1Xiv5auW6xVClV/NWqeGmnV6wXKtHW8Ww87TEGQzlcnl8x0Gn4i10SqUs836y0usUSzXhgNRo2qE3xi3OpN21OR9Mh92en5siHMtHgyFfaFwhEMJEhVHozF4BT7QyEiAKZ7lgBslYZrlRlJpPzpvdoLMLPvoBHWLBMU%2B5Cmd6yoYiUXvZnP4xHWeG3mI0ADp9wp9/QGBAteOfZz5%2BHVQpK3g6wXvZyZSXtj752Xi2XwSY1kwVCfBi6wkuY%2Bx4CwcS0G2zwAFSrBsJhkqQ6yns8rwfAOtL0oyo4ypeHKTtOs7rOYmBxPs6BMNUi6VsutCrgWWx7IcJxnJc1x3I86wAPRkQQ6AgCAbAsMJSQfPsqBUMJwrIbS55PoRaE8iRU4Lnea4fpyxEzlOp6LqeWk%2BgA7ggdCfAZtJ3iSlHUdUJ6MOeY4vleS4kNuu5qoe5F2TRTCOWeF6uW5nK%2BVR/kPqii7YniEBwceTDoOgEB4NM%2BbKT6b6/tpbl4FQ25Ni2EBduF9lMMF66hdefrEJiBCmCiz5VVe2Wli1PoadaiXJW2tkRQ5p7nhlIUTow1I2RRA0BUNI0tW1uXuVuO7BN5gUuR1nL5ViOLIPiCX7klKVpZVi3VdyvJ1aBjXGaFC1ZT%2BLUXf6DFMYWC2QnEJgREu9WYOYsHfF43bwvJeYTUOuFMgRIX/gogFCqyoH/QQEFQTBiVNnEDXnqhx6zVq74LRwsy0JwsK8J4HBaKQqCcAASmY6nzIsQrQjwpAEJoJOzLiICwl4%2B6SJIsKdgLXDMj8PhcD8GiwvonCSJT3O05wvDthonPc7McCwDAiAoKgUEWWQFAQGgxv0DExBcLCst8HQJLEO2BIqxEwQ1ISnAcxbbCCAA8tWXvU7wWAsIYwDiCHpD4NyFQAG7/SrmCqOUs7LBzwQkmT0dIhExCey4WDe7wDWQSXsxUAYwAKAAangmAmf7cSMCXMiCCIYjsFI7fyEoagq7oXD6BHICmOY%2Bh4BE7aQLMqDYyk7YcFSurzwQVL0IntCij81K6oMwA8lSQE0QsTVol4wJMPHErqy05RtA4DDOK4DR6IEyKTH0w/ZMkAjDJ4H%2BiQ/4MAmL0GIw8ygVAEB0IYr8MiQPvtA9ogwuif3AXoMYcD0iAIGOMdBRRv6zAUCzJYegGqYAziTBWHAKakCpjTOmHBx4EGQOsLg%2B47b7g0AqRmE91i4EIB5csPxh7rBcJbaIQNRHTFLtrWYOIkp9FxnzH4zJOE0KVqQMSzIyT7jJLCO2XhYTS0kFIHwIt6EqyYerEAmsuYhx1vrCASB5gEC%2BhYM2Fs4gm3fvgIgEDe6d3ED3fgghFAqHUNHEyBc4gVxoXQhhvAmH%2B1nB49Y0kuRMzYRwrhPCIASJ8VbaRXBZFa0cQozASiYi4xzlosSXgOFSEkJ2ZkkgNAGIMXLWEzIrHRxsZYOx5StDpVIHzSQ6jDGSB%2BBMskwMOmdh8PLHOPxlb9LVsMnmNCvBrMYRshxIzZiJ2dikWIQA) as well.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.59.0-nightly (e100ec5bc 2021-12-21)\r\nbinary: rustc\r\ncommit-hash: e100ec5bc7cd768ec17d75448b29c9ab4a39272b\r\ncommit-date: 2021-12-21\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.59.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92193/timeline", "performed_via_github_app": null, "state_reason": null}