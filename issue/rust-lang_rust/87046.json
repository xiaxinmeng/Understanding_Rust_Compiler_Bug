{"url": "https://api.github.com/repos/rust-lang/rust/issues/87046", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87046/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87046/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87046/events", "html_url": "https://github.com/rust-lang/rust/issues/87046", "id": 941338980, "node_id": "MDU6SXNzdWU5NDEzMzg5ODA=", "number": 87046, "title": "Strongly-typed str-wrapper const results in ICE in pattern match", "user": {"login": "neoeinstein", "id": 18165, "node_id": "MDQ6VXNlcjE4MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/18165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neoeinstein", "html_url": "https://github.com/neoeinstein", "followers_url": "https://api.github.com/users/neoeinstein/followers", "following_url": "https://api.github.com/users/neoeinstein/following{/other_user}", "gists_url": "https://api.github.com/users/neoeinstein/gists{/gist_id}", "starred_url": "https://api.github.com/users/neoeinstein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neoeinstein/subscriptions", "organizations_url": "https://api.github.com/users/neoeinstein/orgs", "repos_url": "https://api.github.com/users/neoeinstein/repos", "events_url": "https://api.github.com/users/neoeinstein/events{/privacy}", "received_events_url": "https://api.github.com/users/neoeinstein/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-07-10T23:18:12Z", "updated_at": "2021-07-13T04:38:21Z", "closed_at": "2021-07-13T04:38:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n#![feature(const_fn_union)]\r\n\r\n#[derive(PartialEq, Eq)]\r\n#[repr(transparent)]\r\npub struct Username(str);\r\n\r\npub const ROOT_USER: &Username = Username::from_str(\"root\");\r\n\r\nimpl Username {\r\n    pub const fn from_str(raw: &str) -> &Self {\r\n        union Transmute<'a> {\r\n            raw: &'a str,\r\n            typed: &'a Username,\r\n        }\r\n        \r\n        unsafe { Transmute { raw }.typed }\r\n    }\r\n    \r\n    pub const fn as_str(&self) -> &str {\r\n        &self.0\r\n    }\r\n    \r\n    pub fn is_root(&self) -> bool {\r\n        match self {\r\n            ROOT_USER => true,\r\n            _ => false,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nChanging `Username::is_root` and introducing `ROOT_USER_STR` compiles successfully:\r\n```Rust\r\npub const ROOT_USER_STR: &str = ROOT_USER.as_str();\r\n\r\nimpl Username {\r\n    \u2026\r\n    pub fn is_root(&self) -> bool {\r\n        match self.as_str() {\r\n            ROOT_USER_STR => true,\r\n            _ => false,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose` (Was from the Rust Playground):\r\n```\r\n1.55.0-nightly (2021-07-08 8b87e85394aa583b01e5)\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: compiler/rustc_mir/src/const_eval/mod.rs:198:18: type Username should not have metadata, but had Meta(0x0000000000000004)\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.55.0-nightly (8b87e8539 2021-07-08) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C codegen-units=1 -C debuginfo=2 --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [deref_const] deref constant\r\n#1 [check_match] match-checking `<impl at src/main.rs:9:1: 31:2>::is_root`\r\n#2 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: aborting due to previous error\r\n\r\nerror: could not compile `playground`\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'Box<dyn Any>', compiler/rustc_errors/src/lib.rs:1035:9\r\nstack backtrace:\r\n   0: std::panicking::begin_panic\r\n   1: std::panic::panic_any\r\n   2: rustc_errors::HandlerInner::bug\r\n   3: rustc_errors::Handler::bug\r\n   4: rustc_middle::ty::context::tls::with_opt\r\n   5: rustc_middle::util::bug::opt_span_bug_fmt\r\n   6: rustc_middle::util::bug::bug_fmt\r\n   7: rustc_mir::const_eval::deref_const\r\n   8: rustc_query_system::query::plumbing::get_query_impl\r\n   9: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::deref_const\r\n  10: rustc_mir_build::thir::pattern::const_to_pat::ConstToPat::recur\r\n  11: rustc_infer::infer::InferCtxtBuilder::enter\r\n  12: rustc_mir_build::thir::pattern::const_to_pat::<impl rustc_mir_build::thir::pattern::PatCtxt>::const_to_pat\r\n  13: rustc_mir_build::thir::pattern::PatCtxt::lower_path\r\n  14: rustc_mir_build::thir::pattern::PatCtxt::lower_pattern\r\n  15: rustc_mir_build::thir::pattern::check_match::MatchVisitor::lower_pattern\r\n  16: <rustc_mir_build::thir::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  17: <rustc_mir_build::thir::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  18: rustc_mir_build::thir::pattern::check_match::check_match\r\n  19: rustc_query_system::query::plumbing::get_query_impl\r\n  20: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::check_match\r\n  21: rustc_middle::ty::<impl rustc_middle::ty::context::TyCtxt>::par_body_owners\r\n  22: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  23: rustc_interface::passes::analysis\r\n  24: rustc_query_system::query::plumbing::get_query_impl\r\n  25: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  26: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  27: rustc_span::with_source_map\r\n  28: rustc_interface::interface::create_compiler_and_run\r\n  29: scoped_tls::ScopedKey<T>::set\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87046/timeline", "performed_via_github_app": null, "state_reason": "completed"}