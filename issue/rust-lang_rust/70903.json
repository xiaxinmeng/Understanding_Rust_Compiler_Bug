{"url": "https://api.github.com/repos/rust-lang/rust/issues/70903", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70903/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70903/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70903/events", "html_url": "https://github.com/rust-lang/rust/issues/70903", "id": 596149694, "node_id": "MDU6SXNzdWU1OTYxNDk2OTQ=", "number": 70903, "title": "Can we stabilize a function returning an unstable type which uses const generics without stabilizing const generics?", "user": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-07T21:01:59Z", "updated_at": "2021-01-27T10:10:50Z", "closed_at": "2021-01-27T10:10:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This question is important for #65819. No need to read that discussion though!\r\n\r\nMy idea is to discuss and decide on this specific question here, potentially via FCP, to get a clear answer for #65819, but without the iterator-specific concerns from that PR. If you don't think this is a useful approach to this decision, let me know!\r\n\r\n### The question\r\n\r\n```rust\r\n// Uses const generics, is unstable.\r\n#[unstable]\r\nstruct Foo<const N: usize>(...);\r\n\r\n// Does not use const generics itself\r\nfn foo() -> Foo<1> { ... }\r\n```\r\n\r\nAssuming `Foo` could be implementing *without* const generics (but isn't because of reasons), the question is: **Can we stabilize `foo` before we stabilize const generics without accidentally also stably exposing a part of const generics?**\r\n\r\nUsers cannot refer to `Foo` on stable, so it also seems like they cannot use the const parameter of that type in any way. But maybe I am missing something and via tricks one could \"access\" const generics via `Foo` on stable?\r\n\r\n\r\n### Current state of related things\r\n\r\nI think we do not currently have any stable function returning an unstable type in `std` (completely ignoring const generics). If I missed one, please let us know! There are only a couple of unstable traits that are \"usable\" on stable (like `Try` and `Step`). \r\n\r\n### Related discussion\r\n\r\n@SimonSapin:\r\n\r\n> I\u2019d be really uncomfortable with a stable API that returns an unstable type. It means that programs on the Stable channel can manipulate values of that type, making it effectively stable in some ways.\r\n\r\n@cuviper:\r\n\r\n> We would be saying that the type has to exist with such functionality (almost like `impl Trait` if it were allowed in this position), but we wouldn't be committing to its exact generic type signature. IMO that's acceptable, [...]\r\n\r\n@Mark-Simulacrum:\r\n\r\n> so as long as we avoid stabilizing the specific [type] signature I am not particularly worried about [having a stable method return an unstable type]. If that means the entire type is not stable, that also seems fine.\r\n\r\n\r\nAlso CC @Centril @withoutboats ", "closed_by": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70903/timeline", "performed_via_github_app": null, "state_reason": "completed"}