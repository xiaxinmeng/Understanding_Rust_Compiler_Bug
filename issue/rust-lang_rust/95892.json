{"url": "https://api.github.com/repos/rust-lang/rust/issues/95892", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95892/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95892/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95892/events", "html_url": "https://github.com/rust-lang/rust/issues/95892", "id": 1199152783, "node_id": "I_kwDOAAsO6M5HeZ6P", "number": 95892, "title": "Tracking Issue for `sub_ptr` (feature `ptr_sub_ptr`)", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-04-10T19:41:57Z", "updated_at": "2023-06-04T09:33:02Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(ptr_sub_ptr)]` & `#![feature(const_ptr_sub_ptr)]` \r\n\r\nThis is a tracking issue for the `<*const _>::sub_ptr` & `<*mut _>::sub_ptr` methods.\r\n\r\nThis is the produces-`usize` version of `offset_from`, the same way that `add` and `sub` are the takes-`usize` versions of `offset`.\r\n\r\nIt turns out that people almost always actually know which pointer is greater than which when doing this operation, and would rather a `usize` instead of an `isize`  -- every use of `offset_from` in the library was followed with `as usize` in practice.  So like how `.add(d)` greatly improved code compared to needing `.offset(d as isize)`, being able to use `ptr.sub_ptr(origin)` instead of `ptr.offset_from(origin) as usize` is also a major improvement.  And Miri can check the unsafety better, too, since if you get the order wrong it'll [detect that](https://github.com/rust-lang/rust/pull/95837/files#diff-10506a8d62761f810db4f83a4b6b90f29c7a35c97ebd922bfd1183f418fa70f9R83-R88), unlike happens with the `as usize` approach.\r\n\r\nThis also tracks the `const`ness of operations, though with #92980 stabilizing `offset_from` being `const` , this being `const` is likely uncontroversial.\r\n\r\n<!--\r\nInclude a short description of the feature.\r\n-->\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\nimpl<T> *const T {\r\n    pub const unsafe fn sub_ptr(self, origin: *const T) -> usize;\r\n}\r\n\r\nimpl<T> *mut T {\r\n    pub const unsafe fn sub_ptr(self, origin: *const T) -> usize;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: #95837\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- [ ] This uses the terminology of subtraction to match the existing `add` and `sub` methods, but there might be another name that would be more evocative for people https://github.com/rust-lang/rust/pull/95837#issuecomment-1094134054\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95892/reactions", "total_count": 3, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95892/timeline", "performed_via_github_app": null, "state_reason": null}