{"url": "https://api.github.com/repos/rust-lang/rust/issues/82827", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82827/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82827/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82827/events", "html_url": "https://github.com/rust-lang/rust/issues/82827", "id": 823579812, "node_id": "MDU6SXNzdWU4MjM1Nzk4MTI=", "number": 82827, "title": "Misplaced parenthesis in if let produces unhelpful error message", "user": {"login": "mcclure", "id": 277318, "node_id": "MDQ6VXNlcjI3NzMxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/277318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcclure", "html_url": "https://github.com/mcclure", "followers_url": "https://api.github.com/users/mcclure/followers", "following_url": "https://api.github.com/users/mcclure/following{/other_user}", "gists_url": "https://api.github.com/users/mcclure/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcclure/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcclure/subscriptions", "organizations_url": "https://api.github.com/users/mcclure/orgs", "repos_url": "https://api.github.com/users/mcclure/repos", "events_url": "https://api.github.com/users/mcclure/events{/privacy}", "received_events_url": "https://api.github.com/users/mcclure/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 27424086, "node_id": "MDU6TGFiZWwyNzQyNDA4Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parser", "name": "A-parser", "color": "f7e101", "default": false, "description": "Area: The parsing of Rust source code to an AST."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-03-06T06:40:06Z", "updated_at": "2021-03-18T19:47:51Z", "closed_at": "2021-03-09T04:33:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am learning Rust. I haven't read the full manual yet, I am just bumbling through. Tonight I hit an error message that confused me. I am using Rust 1.50.0 on OS X 10.13.6, but I can reproduce the problem on Godbolt. [Here's my Godbolt repro](https://rust.godbolt.org/z/berc4v):\r\n\r\n```\r\n// Type your code here, or load an example.\r\npub fn main() {\r\n  let x = Some(3);\r\n  if (let Some(y) = x) {\r\n    println!(\"{}\", y)\r\n  } else {\r\n    println!(\"None\")\r\n  }\r\n}\r\n```\r\n\r\nThis is wrong because the parenthesis between `if` and `let` confuses Rust completely. If you [remove the parenthesis](https://rust.godbolt.org/z/9447r1) (Godbolt link) it works fine. But I didn't know that.\r\n\r\nThe wrong version produces the following error messages:\r\n\r\n```\r\nerror[E0658]: `let` expressions in this position are experimental\r\n --> <source>:4:7\r\n  |\r\n4 |   if (let Some(y) = x) {\r\n  |       ^^^^^^^^^^^^^^^\r\n  |\r\n  = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\r\n\r\nerror: expected expression, found statement (`let`)\r\n --> <source>:4:7\r\n  |\r\n4 |   if (let Some(y) = x) {\r\n  |       ^^^^^^^^^^^^^^^\r\n  |\r\n  = note: variable declaration using `let` is a statement\r\n\r\nwarning: unnecessary parentheses around `if` condition\r\n --> <source>:4:6\r\n  |\r\n4 |   if (let Some(y) = x) {\r\n  |      ^^^^^^^^^^^^^^^^^ help: remove these parentheses\r\n  |\r\n  = note: `#[warn(unused_parens)]` on by default\r\n\r\nerror: aborting due to 2 previous errors; 1 warning emitted\r\n```\r\n\r\nIn my opinion, this is not as helpful as it could be.\r\n\r\nThe \"experimental\" error mislead me badly. First off, saying something is \"experimental\" does not mean it is wrong, it could mean \"this will be legal in the next released version\". Second off, the \"experimental\" error does not say **what is experimental**. Is it destructuring which is not allowed? Is it destructuring \\*in this position\\* that is not allowed? (In context-- IE not this minimal example-- I had the if embedded as an expression inside a match.) The linked github issue is over two years old and is not enlightening, in fact, it's just frankly kinda scary.\r\n\r\nThe \"expected expression, found statement\" error **is** potentially helpful, but confused me a little, because I'd used \"if let\" before\u2014\u00a0and I wasn't paying as much attention to it anyway, because (C habit that I shouldn't be bringing with me into Rust?) if I get two errors on the same line, I assume the first one is the \"real\" error and the second one is just the compiler being thrown off by the first error.\r\n\r\nThe warning is a good hint (I had a conversation on [twitter](https://twitter.com/ekuber/status/1368039327351992323) about this) but first off it looks like a style recommendation, not a functional one; and also [I did not see it](https://users.rust-lang.org/t/difference-between-unnecessary-and-dangerous-parenthesis/56553).\r\n\r\nMy **expected behavior**:\r\n\r\n- Because putting the parenthesis in the wrong place when doing an if let is a likely new-user \"gotcha\" ([especially for C++ programmers, where the equivalent of `if (let x = ...)` has been a syntax since C++03](https://stackoverflow.com/questions/136548/pro-con-initializing-a-variable-in-a-conditional-statement)), it would be great if the compiler would detect this would have been correct syntax without the parenthesis and print a \"hint: there are no parenthesis in if let, recommend remove parenthesis\" there.\r\n- A more nebulous thought: You should present those \"is experimental\" errors in a **very** different way, if you display them at all! They're scary, they're not actionable, they could be misleading. One possibility (I assume this has been well hashed out, but) would be to treat the experimental features as like a third kind of error besides error and warning, something like \"note: this would have been legal in the 0.51 beta\" (and maybe they shouldn't be printed with the errors\u2014 maybe they should be sorted down with the warnings? I wouldn't have focused on the \"experimental\" error, when I got it, if it weren't **first**).\r\n\r\n*Postscript: I had some thoughts about that parenthesis warning. I thought they would be distracting in this issue, and those thoughts were more like a feature request or a question than a bug report, so as your issue form suggests I [made a forum thread about that](https://users.rust-lang.org/t/difference-between-unnecessary-and-dangerous-parenthesis/56553) instead.*", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82827/timeline", "performed_via_github_app": null, "state_reason": "completed"}