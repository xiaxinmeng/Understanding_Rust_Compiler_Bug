{"url": "https://api.github.com/repos/rust-lang/rust/issues/58188", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58188/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58188/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58188/events", "html_url": "https://github.com/rust-lang/rust/issues/58188", "id": 406828194, "node_id": "MDU6SXNzdWU0MDY4MjgxOTQ=", "number": 58188, "title": "Adding comment to function causes \"overflow evaluating the requirement\"", "user": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-05T15:11:40Z", "updated_at": "2023-03-23T11:36:42Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "> $ rustc --version\r\n> rustc 1.32.0 (9fda7c223 2019-01-16)\r\n> \r\n> $ rustup toolchain list\r\n> stable-x86_64-pc-windows-msvc (default)\r\n\r\nDiscovered when running `cargo check` on `rust-analyzer`. The command succeeds but adding a comment before (as in `// this is a comment` before https://github.com/rust-analyzer/rust-analyzer/blob/88702a758f031f33452e9acac621841552ec9f8a/crates/ra_lsp_server/src/main_loop/handlers.rs#L695\r\n\r\ncauses \r\n\r\n> $ cargo check\r\n    Checking ra_lsp_server v0.1.0 (C:\\projects\\test\\rust-analyzer\\crates\\ra_lsp_server)\r\nerror[E0275]: overflow evaluating the requirement `*const ra_hir::path::GenericArg: std::panic::RefUnwindSafe`\r\n   --> crates\\ra_lsp_server\\src\\main_loop.rs:491:10\r\n    |\r\n491 |     pool.execute(move || {\r\n    |          ^^^^^^^\r\n    |\r\n    = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\r\n    = note: required because it appears within the type `core::nonzero::NonZero<*const ra_hir::path::GenericArg>`\r\n    = note: required because it appears within the type `std::ptr::Unique<ra_hir::path::GenericArg>`\r\n    = note: required because it appears within the type `alloc::raw_vec::RawVec<ra_hir::path::GenericArg>`\r\n    = note: required because it appears within the type `std::vec::Vec<ra_hir::path::GenericArg>`\r\n    = note: required because it appears within the type `ra_hir::path::GenericArgs`\r\n    = note: required because it appears within the type `alloc::sync::ArcInner<ra_hir::path::GenericArgs>`\r\n    = note: required because it appears within the type `*const alloc::sync::ArcInner<ra_hir::path::GenericArgs>`\r\n    = note: required because it appears within the type `core::nonzero::NonZero<*const alloc::sync::ArcInner<ra_hir::path::GenericArgs>>`\r\n    = note: required because it appears within the type `std::ptr::NonNull<alloc::sync::ArcInner<ra_hir::path::GenericArgs>>`\r\n    = note: required because it appears within the type `std::sync::Arc<ra_hir::path::GenericArgs>`\r\n    = note: required because it appears within the type `std::option::Option<std::sync::Arc<ra_hir::path::GenericArgs>>`\r\n    = note: required because it appears within the type `ra_hir::path::PathSegment`\r\n    = note: required because it appears within the type `*const ra_hir::path::PathSegment`\r\n    = note: required because it appears within the type `core::nonzero::NonZero<*const ra_hir::path::PathSegment>`\r\n    = note: required because it appears within the type `std::ptr::Unique<ra_hir::path::PathSegment>`\r\n    = note: required because it appears within the type `alloc::raw_vec::RawVec<ra_hir::path::PathSegment>`\r\n    = note: required because it appears within the type `std::vec::Vec<ra_hir::path::PathSegment>`\r\n    = note: required because it appears within the type `ra_hir::path::Path`\r\n    = note: required because it appears within the type `ra_hir::expr::Expr`\r\n    = note: required because it appears within the type `*const ra_hir::expr::Expr`\r\n    = note: required because it appears within the type `core::nonzero::NonZero<*const ra_hir::expr::Expr>`\r\n    = note: required because it appears within the type `std::ptr::Unique<ra_hir::expr::Expr>`\r\n    = note: required because it appears within the type `alloc::raw_vec::RawVec<ra_hir::expr::Expr>`\r\n    = note: required because it appears within the type `std::vec::Vec<ra_hir::expr::Expr>`\r\n    = note: required because it appears within the type `ra_arena::Arena<ra_hir::expr::ExprId, ra_hir::expr::Expr>`\r\n    = note: required because it appears within the type `ra_hir::expr::Body`\r\n    = note: required because it appears within the type `alloc::sync::ArcInner<ra_hir::expr::Body>`\r\n    = note: required because it appears within the type `*const alloc::sync::ArcInner<ra_hir::expr::Body>`\r\n    = note: required because it appears within the type `core::nonzero::NonZero<*const alloc::sync::ArcInner<ra_hir::expr::Body>>`\r\n    = note: required because it appears within the type `std::ptr::NonNull<alloc::sync::ArcInner<ra_hir::expr::Body>>`\r\n    = note: required because it appears within the type `std::sync::Arc<ra_hir::expr::Body>`\r\n    = note: required because it appears within the type `ra_hir::expr::scope::ExprScopes`\r\n    = note: required because it appears within the type `alloc::sync::ArcInner<ra_hir::expr::scope::ExprScopes>`\r\n    = note: required because it appears within the type `*const alloc::sync::ArcInner<ra_hir::expr::scope::ExprScopes>`\r\n    = note: required because it appears within the type `core::nonzero::NonZero<*const alloc::sync::ArcInner<ra_hir::expr::scope::ExprScopes>>`\r\n    = note: required because it appears within the type `std::ptr::NonNull<alloc::sync::ArcInner<ra_hir::expr::scope::ExprScopes>>`\r\n    = note: required because it appears within the type `std::sync::Arc<ra_hir::expr::scope::ExprScopes>`\r\n    = note: required because of the requirements on the impl of `std::panic::RefUnwindSafe` for `salsa::derived::DerivedStorage<ra_ide_api::db::RootDatabase, ra_hir::db::ExprScopesQuery, salsa::derived::AlwaysMemoizeValue>`\r\n    = note: required because it appears within the type `ra_hir::db::HirDatabaseGroupStorage__<ra_ide_api::db::RootDatabase>`\r\n    = note: required because it appears within the type `ra_ide_api::db::__SalsaDatabaseStorage`\r\n    = note: required because of the requirements on the impl of `std::panic::RefUnwindSafe` for `salsa::runtime::SharedState<ra_ide_api::db::RootDatabase>`\r\n    = note: required because it appears within the type `alloc::sync::ArcInner<salsa::runtime::SharedState<ra_ide_api::db::RootDatabase>>`\r\n    = note: required because it appears within the type `*const alloc::sync::ArcInner<salsa::runtime::SharedState<ra_ide_api::db::RootDatabase>>`\r\n    = note: required because it appears within the type `core::nonzero::NonZero<*const alloc::sync::ArcInner<salsa::runtime::SharedState<ra_ide_api::db::RootDatabase>>>`\r\n    = note: required because it appears within the type `std::ptr::NonNull<alloc::sync::ArcInner<salsa::runtime::SharedState<ra_ide_api::db::RootDatabase>>>`\r\n    = note: required because it appears within the type `std::sync::Arc<salsa::runtime::SharedState<ra_ide_api::db::RootDatabase>>`\r\n    = note: required because it appears within the type `salsa::runtime::RevisionGuard<ra_ide_api::db::RootDatabase>`\r\n    = note: required because it appears within the type `std::option::Option<salsa::runtime::RevisionGuard<ra_ide_api::db::RootDatabase>>`\r\n    = note: required because it appears within the type `salsa::runtime::Runtime<ra_ide_api::db::RootDatabase>`\r\n    = note: required because it appears within the type `ra_ide_api::db::RootDatabase`\r\n    = note: required because of the requirements on the impl of `ra_db::CheckCanceled` for `ra_ide_api::db::RootDatabase`\r\n    = note: required because of the requirements on the impl of `ra_db::SourceDatabase` for `ra_ide_api::db::RootDatabase`\r\n    = note: required because of the requirements on the impl of `salsa::plumbing::QueryGroup<ra_ide_api::db::RootDatabase>` for `ra_db::SourceDatabaseStorage`\r\n    = note: required because it appears within the type `ra_ide_api::db::__SalsaDatabaseStorage`\r\n    = note: required because it appears within the type `salsa::runtime::SharedState<ra_ide_api::db::RootDatabase>`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<salsa::runtime::SharedState<ra_ide_api::db::RootDatabase>>`\r\n    = note: required because it appears within the type `salsa::runtime::RevisionGuard<ra_ide_api::db::RootDatabase>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0275`.\r\nerror: Could not compile `ra_lsp_server`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58188/timeline", "performed_via_github_app": null, "state_reason": null}