{"url": "https://api.github.com/repos/rust-lang/rust/issues/50368", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50368/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50368/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50368/events", "html_url": "https://github.com/rust-lang/rust/issues/50368", "id": 319192798, "node_id": "MDU6SXNzdWUzMTkxOTI3OTg=", "number": 50368, "title": "Should operations on atomics which mutate via raw pointers accept a mutable reference to self?", "user": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-01T13:06:57Z", "updated_at": "2018-05-01T15:24:52Z", "closed_at": "2018-05-01T15:24:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI was looking at the `AtomicU32` documentation. The signature for [`compare_and_swap`](https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU32.html#method.compare_and_swap) is:\r\n\r\n```\r\npub fn compare_and_swap(&self, current: u32, new: u32, order: Ordering) -> u32\r\n```\r\n\r\nI found this curious, as clearly this operation may mutate the `u32` inside. So why is it not accepting an `&mut self`?\r\n\r\nLooking at the implementation, I see why this works. It boils down to a call to `atomic_compare_exchange`, which is unsafe thus (I think) allowing the immutable reference to coerce to a `*mut`.\r\n\r\nBut should the outward facing interface accept an `&mut self` to:\r\n * Aid the mental model of the programmer? \r\n * Prevent the ability to hold multiple mutable references.\r\n\r\nThoughts?", "closed_by": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50368/timeline", "performed_via_github_app": null, "state_reason": "completed"}