{"url": "https://api.github.com/repos/rust-lang/rust/issues/81342", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81342/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81342/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81342/events", "html_url": "https://github.com/rust-lang/rust/issues/81342", "id": 792836771, "node_id": "MDU6SXNzdWU3OTI4MzY3NzE=", "number": 81342, "title": "Addition of Option<NonZero*> can compile suboptimally", "user": {"login": "cevans-uk", "id": 35352396, "node_id": "MDQ6VXNlcjM1MzUyMzk2", "avatar_url": "https://avatars.githubusercontent.com/u/35352396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cevans-uk", "html_url": "https://github.com/cevans-uk", "followers_url": "https://api.github.com/users/cevans-uk/followers", "following_url": "https://api.github.com/users/cevans-uk/following{/other_user}", "gists_url": "https://api.github.com/users/cevans-uk/gists{/gist_id}", "starred_url": "https://api.github.com/users/cevans-uk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cevans-uk/subscriptions", "organizations_url": "https://api.github.com/users/cevans-uk/orgs", "repos_url": "https://api.github.com/users/cevans-uk/repos", "events_url": "https://api.github.com/users/cevans-uk/events{/privacy}", "received_events_url": "https://api.github.com/users/cevans-uk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 2238600090, "node_id": "MDU6TGFiZWwyMjM4NjAwMDkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-result-option", "name": "A-result-option", "color": "f7e101", "default": false, "description": "Area: Result and Option combinators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-01-24T16:27:17Z", "updated_at": "2021-01-24T16:31:06Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I'm fairly certain `foo` and `bar` are equivalent (though let me know if I'm overlooking something!):\r\n\r\n```rust\r\nuse std::num::NonZeroUsize;\r\n\r\npub fn foo(x: Option<NonZeroUsize>, y: Option<NonZeroUsize>) -> Option<NonZeroUsize> {\r\n    if let (Some(x2), Some(y2)) = (x, y) {\r\n        NonZeroUsize::new(x2.get() + y2.get())\r\n    } else {\r\n        None\r\n    }\r\n}\r\n\r\npub fn bar(x: Option<NonZeroUsize>, y: Option<NonZeroUsize>) -> Option<NonZeroUsize> {\r\n    x.zip(y)\r\n        .map(|(x2, y2)| NonZeroUsize::new(x2.get() + y2.get()))\r\n        .flatten()\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=062f1d6b46290a8dbf5b453ad7c10025))\r\n\r\nbut the compilation of `bar` seems suboptimal (current stable, 1.49.0):\r\n\r\n```asm\r\nplayground::foo:\r\n\tleaq\t(%rsi,%rdi), %rax\r\n\ttestq\t%rsi, %rsi\r\n\tcmoveq\t%rsi, %rax\r\n\ttestq\t%rdi, %rdi\r\n\tcmoveq\t%rdi, %rax\r\n\tretq\r\n\r\nplayground::bar:\r\n\ttestq\t%rsi, %rsi\r\n\tmovq\t%rdi, %rcx\r\n\tcmoveq\t%rsi, %rcx\r\n\ttestq\t%rdi, %rdi\r\n\tcmoveq\t%rdi, %rcx\r\n\tleaq\t(%rsi,%rcx), %rax\r\n\ttestq\t%rcx, %rcx\r\n\tcmoveq\t%rcx, %rax\r\n\tretq\r\n```\r\n\r\nSame result with 1.51.0-nightly (2021-01-23 4d0dd02ee07bddad9136).\r\n\r\nIn particular, the middle `testq` / `cmoveq` pair -- immediately preceding the `leaq` -- seem entirely redundant unless I'm missing something, as:\r\n* After the `movq`, `rcx` is equal to `rdi`.\r\n* After the first `cmoveq`, `rcx` is therefore either equal to `rdi`, or 0,\r\n* The second `cmoveq` moves `rdi` into `rcx` when `rdi` is 0. But when `rdi` is 0, `rcx` must already be 0.\r\n\r\nI played around with some other `NonZero*` types (including some signed) and observed the same pattern.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81342/timeline", "performed_via_github_app": null, "state_reason": null}