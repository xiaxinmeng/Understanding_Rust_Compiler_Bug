{"url": "https://api.github.com/repos/rust-lang/rust/issues/29392", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29392/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29392/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29392/events", "html_url": "https://github.com/rust-lang/rust/issues/29392", "id": 113512800, "node_id": "MDU6SXNzdWUxMTM1MTI4MDA=", "number": 29392, "title": "Consider having special debugger pretty printers/handling for Unique/Shared/NonZero", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}, {"id": 602425123, "node_id": "MDU6TGFiZWw2MDI0MjUxMjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-dev-tools", "name": "T-dev-tools", "color": "bfd4f2", "default": false, "description": "Relevant to the dev-tools subteam, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-27T06:04:47Z", "updated_at": "2023-04-05T17:45:41Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "A debugger is particularly useful for diagnosing problems in unsafe code, and these types appear reasonably often there. Currently they're printed in a rather ugly way:\n\n``` rust\n#![feature(unique)]\nuse std::ptr::Unique;\n\nstruct Bar { y: u8 }\nstruct Foo {\n    ptr: Unique<Bar>,\n}\nfn main() {\n    let mut x = Bar { y: 10 };\n    unsafe {\n        let f = Foo { ptr: Unique::new(&mut x) };\n\n        drop(f);\n    }\n}\n```\n\nCompiling with `rustc -g unique.rs` and using `rust-gdb unique` to break on the `drop(f)` line allows one to print `f`:\n\n``` rust\n(gdb) break unique.rs:13\n(gdb) r\n...\n(gdb) p f\n$1 = Foo = {ptr = Unique<unique::Bar> = {pointer = NonZero<*const unique::Bar> = {0x7fffffffdef8}, _marker = PhantomData<unique::Bar>}}\n```\n\nPretty much the only thing that's even slightly interesting there is the `0x7fffffffdef8` and maybe the `unique::Bar`, the layers of `NonZero` and `PhantomData` are just noise. (And even the raw address is pretty useless, and the type is often obvious from context.)\n\nAlso, the only way to examine what the pointer points to is to do a pile of field accesses, like:\n\n```\n(gdb) p *f.ptr.pointer.__0\n$2 = Bar = {y = 10 '\\n'}\n```\n\nIn the best case, it'd be great if `*f.ptr` could work. (Also, `f.ptr.pointer.__0[x]` being written `f.ptr[x]`, for when the `Unique` is representing an array.)\n\n(I guess there may be other standard library types to consider in a similar context: making `rust-gdb` handle them even more nicely.)\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29392/timeline", "performed_via_github_app": null, "state_reason": null}