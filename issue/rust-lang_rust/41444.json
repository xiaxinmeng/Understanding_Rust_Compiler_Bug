{"url": "https://api.github.com/repos/rust-lang/rust/issues/41444", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41444/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41444/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41444/events", "html_url": "https://github.com/rust-lang/rust/issues/41444", "id": 223326518, "node_id": "MDU6SXNzdWUyMjMzMjY1MTg=", "number": 41444, "title": "extract the list of clauses and intern it", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-21T09:18:26Z", "updated_at": "2017-06-21T23:31:25Z", "closed_at": "2017-06-21T23:31:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now the `ParameterEnvironment` is a kind of grab bag of things. The most important thing, however, is the list of \"caller bounds\".  In more Prolog-y terms, these are the *clauses* in the environment -- that is, they are the where-clauses that are in scope, and hence which we can assume to be true. If you look in the `librustc/traits` code, you'll see that in fact the **only** thing which gets used from the `ParameterEnvironment` is this `caller_bounds` field.\r\n\r\nEventually, I think we want to move the `caller_bounds` out into the obligations themselves. That is, in chalk, an obligation is not just the thing to be proven but also the environment in which it should be proven -- and this environment can grow and get new clauses as we go (this will be important for checking higher-ranked trait bounds like `for<T: Foo> Vec<T>: Bar`).\r\n\r\nTo this end, a first step (this issue) is to refactor `caller_bounds` so that they are an interned, lightweight pointer. (The whole setup around `ParameterEnvironment` is, in fact, kind of a mess, but let's start simple). I envision a struct `Environment<'tcx>`:\r\n\r\n```rust\r\npub struct Environment<'tcx> {\r\n    clauses: &'tcx [ty::Predicate<'tcx>]\r\n}\r\n```\r\n\r\nwhere the clauses list is interned. This struct will eventually be part of every `Obligation`, so it's important that it be cheap to copy.  It will also eventually be hashed for cache keys, so having an interned list of predicates makes that cheap. It will **also** grow an additional field (`universe_index: usize`), and hence it's convenient for it to be a named struct.\r\n\r\nWe might want to pick a less overloaded name than `Environment<'tcx>`. I'm not sure what to use though, that's really the most common name for this sort of thing.", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41444/timeline", "performed_via_github_app": null, "state_reason": "completed"}