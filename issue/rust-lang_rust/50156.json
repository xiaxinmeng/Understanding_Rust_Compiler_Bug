{"url": "https://api.github.com/repos/rust-lang/rust/issues/50156", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50156/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50156/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50156/events", "html_url": "https://github.com/rust-lang/rust/issues/50156", "id": 316578153, "node_id": "MDU6SXNzdWUzMTY1NzgxNTM=", "number": 50156, "title": "Implement & use metadata on arguments in LLVM", "user": {"login": "hanna-kruppe", "id": 2311707, "node_id": "MDQ6VXNlcjIzMTE3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2311707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hanna-kruppe", "html_url": "https://github.com/hanna-kruppe", "followers_url": "https://api.github.com/users/hanna-kruppe/followers", "following_url": "https://api.github.com/users/hanna-kruppe/following{/other_user}", "gists_url": "https://api.github.com/users/hanna-kruppe/gists{/gist_id}", "starred_url": "https://api.github.com/users/hanna-kruppe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hanna-kruppe/subscriptions", "organizations_url": "https://api.github.com/users/hanna-kruppe/orgs", "repos_url": "https://api.github.com/users/hanna-kruppe/repos", "events_url": "https://api.github.com/users/hanna-kruppe/events{/privacy}", "received_events_url": "https://api.github.com/users/hanna-kruppe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-04-22T13:13:36Z", "updated_at": "2020-03-18T22:15:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We use *metadata* attached to LLVM instructions to tell LLVM passes about the range of possible integers that a value can take on. This allows additional optimizations. For example, when loading from a `&NonZeroU32`, the LLVM IR looks like this:\r\n\r\n```llvm\r\n  %2 = load i32, i32* %1, align 4, !range !33\r\n```\r\n\r\nwhere `!33` refers to a module-level entry like this (usually located near the end of the module source code):\r\n\r\n```llvm\r\n!33 = !{i32 1, i32 0}\r\n```\r\n\r\nThis tells LLVM that it's UB if the load returns anything that is not in the range \">= 1, < 0\" (with wrap-around, i.e. it includes all values except 0). This allows `x.get() != 0` (where `x: &NonZeroU32`) to be optimized to `true`, for example.\r\n\r\nUnfortunately LLVM does not have a way to attach this information to function arguments, which leads to missed optimizations (e.g. #49572, https://github.com/rust-lang/rust/pull/49420#issuecomment-376805721). Adding this capability has been [discussed before on llvm-dev](https://lists.llvm.org/pipermail/llvm-dev/2015-July/087923.html) and received positively, but was never actually implemented. If we want to use this in Rust, we're likely going to have to implement (& upstream) it outselves.\r\n\r\nThis issue tracks:\r\n\r\n- [ ] Implementing metadata-on-arguments in LLVM ([mentoring instructions](https://github.com/rust-lang/rust/issues/50156#issuecomment-383389073))\r\n- [ ] Upstreaming / backporting that LLVM patch\r\n- [ ] Emitting range metadata on arguments from rustc\r\n\r\ncc @nox @eddyb", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50156/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50156/timeline", "performed_via_github_app": null, "state_reason": null}