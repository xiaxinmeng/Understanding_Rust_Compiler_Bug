{"url": "https://api.github.com/repos/rust-lang/rust/issues/7108", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/7108/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/7108/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/7108/events", "html_url": "https://github.com/rust-lang/rust/issues/7108", "id": 15524318, "node_id": "MDU6SXNzdWUxNTUyNDMxOA==", "number": 7108, "title": "Cannot build current incoming - linker errors with LLVM", "user": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-06-13T19:15:42Z", "updated_at": "2014-07-17T01:23:13Z", "closed_at": "2013-06-13T22:44:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Latest incoming cannot build on my machine. I used `./configure --enable-clang`, if that makes a difference. I get a large number of undefined symbols in RustWrapper.o:\n\n```\nlink: rustllvm/x86_64-apple-darwin/librustllvm.dylib\nclang: warning: argument unused during compilation: '-pthread'\nUndefined symbols for architecture x86_64:\n  \"llvm::TargetRegistry::lookupTarget(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&)\", referenced from:\n      _LLVMRustWriteOutputFile in RustWrapper.o\n  \"llvm::raw_fd_ostream::raw_fd_ostream(char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, unsigned int)\", referenced from:\n      _LLVMRustAddPrintModulePass in RustWrapper.o\n      _LLVMRustWriteOutputFile in RustWrapper.o\n  \"llvm::ParseAssemblyFile(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, llvm::SMDiagnostic&, llvm::LLVMContext&)\", referenced from:\n      _LLVMRustParseAssemblyFile in RustWrapper.o\n  \"llvm::report_fatal_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)\", referenced from:\n      RustMCJITMemoryManager::getPointerToNamedFunction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool) in RustWrapper.o\n  \"llvm::createPrintModulePass(llvm::raw_ostream*, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)\", referenced from:\n      _LLVMRustAddPrintModulePass in RustWrapper.o\n  \"llvm::sys::DynamicLibrary::getPermanentLibrary(char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)\", referenced from:\n      RustMCJITMemoryManager::loadCrate(char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) in RustWrapper.o\n      _LLVMRustLoadCrate in RustWrapper.o\n  \"llvm::sys::Memory::ReleaseRWX(llvm::sys::MemoryBlock&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)\", referenced from:\n      RustMCJITMemoryManager::~RustMCJITMemoryManager() in RustWrapper.o\n  \"llvm::sys::Memory::AllocateRWX(unsigned long, llvm::sys::MemoryBlock const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)\", referenced from:\n      RustMCJITMemoryManager::allocateCodeSection(unsigned long, unsigned int, unsigned int) in RustWrapper.o\n  \"std::string::find_last_not_of(char, unsigned long) const\", referenced from:\n      llvm::SMDiagnostic::print(char const*, llvm::raw_ostream&, bool) const in libLLVMSupport.a(SourceMgr.o)\n  \"std::string::copy(char*, unsigned long, unsigned long) const\", referenced from:\n      llvm::sys::Path::makeUnique(bool, std::string*) in libLLVMSupport.a(Path.o)\n  \"std::string::find(char const*, unsigned long, unsigned long) const\", referenced from:\n      llvm::ARMSubtarget::resetSubtargetFeatures(llvm::StringRef, llvm::StringRef) in libLLVMARMCodeGen.a(ARMSubtarget.o)\n      llvm::MipsSubtarget::MipsSubtarget(std::string const&, std::string const&, std::string const&, bool, llvm::Reloc::Model) in libLLVMMipsCodeGen.a(MipsSubtarget.o)\n      llvm::ScalarEvolution::verifyAnalysis() const in libLLVMAnalysis.a(ScalarEvolution.o)\n      replaceSubString(std::string&, llvm::StringRef, llvm::StringRef) in libLLVMAnalysis.a(ScalarEvolution.o)\n      llvm::sys::getDefaultTargetTriple() in libLLVMSupport.a(Host.o)\n      llvm::BlackList::BlackList(llvm::StringRef) in libLLVMInstrumentation.a(BlackList.o)\n      llvm::DOTGraphTraits<llvm::SelectionDAG*>::getNodeAttributes(llvm::SDNode const*, llvm::SelectionDAG const*) in libLLVMSelectionDAG.a(SelectionDAGPrinter.o)\n      ...\n  \"std::string::find(char, unsigned long) const\", referenced from:\n      llvm::Module::print(llvm::raw_ostream&, llvm::AssemblyAnnotationWriter*) const in libLLVMCore.a(AsmWriter.o)\n      llvm::DOTGraphTraits<llvm::Function const*>::getCompleteNodeLabel(llvm::BasicBlock const*, llvm::Function const*) in libLLVMAnalysis.a(CFGPrinter.o)\n      llvm::DOTGraphTraits<llvm::Function const*>::getCompleteNodeLabel(llvm::BasicBlock const*, llvm::Function const*) in libLLVMAnalysis.a(DomPrinter.o)\n      llvm::DOTGraphTraits<llvm::Function const*>::getCompleteNodeLabel(llvm::BasicBlock const*, llvm::Function const*) in libLLVMAnalysis.a(RegionPrinter.o)\n      llvm::sys::Program::FindProgramByName(std::string const&) in libLLVMSupport.a(Program.o)\n  \"std::string::rfind(char, unsigned long) const\", referenced from:\n      llvm::sys::Path::FindLibrary(std::string&) in libLLVMSupport.a(Path.o)\n      llvm::sys::Path::eraseSuffix() in libLLVMSupport.a(Path.o)\n      llvm::sys::Path::getBasename() const in libLLVMSupport.a(Path.o)\n      llvm::sys::Path::getSuffix() const in libLLVMSupport.a(Path.o)\n      llvm::sys::Path::getLast() const in libLLVMSupport.a(Path.o)\n      llvm::sys::Path::eraseComponent() in libLLVMSupport.a(Path.o)\n  \"std::string::compare(char const*) const\", referenced from:\n      (anonymous namespace)::ARMAsmParser::tryCustomParseOperand(llvm::SmallVectorImpl<llvm::MCParsedAsmOperand*>&, unsigned int) in libLLVMARMAsmParser.a(ARMAsmParser.o)\n      llvm::ARMAsmPrinter::emitAttributes() in libLLVMARMCodeGen.a(ARMAsmPrinter.o)\n      (anonymous namespace)::MipsAsmParser::parseRelocOperand(llvm::MCExpr const*&) in libLLVMMipsAsmParser.a(MipsAsmParser.o)\n      llvm::CreateInfoOutputFile() in libLLVMSupport.a(Timer.o)\n      (anonymous namespace)::DefaultJITMemoryManager::getPointerToNamedFunction(std::string const&, bool) in libLLVMJIT.a(JITMemoryManager.o)\n      (anonymous namespace)::VersionPrinter::print() in libLLVMSupport.a(CommandLine.o)\n      llvm::isCurrentDebugType(char const*) in libLLVMSupport.a(Debug.o)\n      ...\n  \"std::string::compare(unsigned long, unsigned long, char const*) const\", referenced from:\n      llvm::ARMTargetLowering::ExpandInlineAsm(llvm::CallInst*) const in libLLVMARMCodeGen.a(ARMISelLowering.o)\n      llvm::X86TargetLowering::ExpandInlineAsm(llvm::CallInst*) const in libLLVMX86CodeGen.a(X86ISelLowering.o)\n  \"std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const\", referenced from:\n      llvm::TargetLowering::getConstraintType(std::string const&) const in libLLVMSelectionDAG.a(TargetLowering.o)\n  \"std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  \"std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n  \"std::ostream::operator<<(int)\", referenced from:\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n  \"std::string::_M_leak_hard()\", referenced from:\n      llvm::Module::setModuleInlineAsm(llvm::StringRef) in libLLVMCore.a(Core.o)\n      llvm::Module::print(llvm::raw_ostream&, llvm::AssemblyAnnotationWriter*) const in libLLVMCore.a(AsmWriter.o)\n      llvm::Module::setModuleInlineAsm(llvm::StringRef) in libLLVMBitReader.a(BitcodeReader.o)\n      llvm::ARMTargetLowering::LowerAsmOperandForConstraint(llvm::SDValue, std::string&, std::vector<llvm::SDValue, std::allocator<llvm::SDValue> >&, llvm::SelectionDAG&) const in libLLVMARMCodeGen.a(ARMISelLowering.o)\n      llvm::X86TargetLowering::LowerAsmOperandForConstraint(llvm::SDValue, std::string&, std::vector<llvm::SDValue, std::allocator<llvm::SDValue> >&, llvm::SelectionDAG&) const in libLLVMX86CodeGen.a(X86ISelLowering.o)\n      llvm::MipsTargetLowering::LowerAsmOperandForConstraint(llvm::SDValue, std::string&, std::vector<llvm::SDValue, std::allocator<llvm::SDValue> >&, llvm::SelectionDAG&) const in libLLVMMipsCodeGen.a(MipsISelLowering.o)\n      llvm::StringRef::lower() const in libLLVMSupport.a(StringRef.o)\n      ...\n  \"std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)\", referenced from:\n      llvm::DOTGraphTraits<llvm::Function const*>::getCompleteNodeLabel(llvm::BasicBlock const*, llvm::Function const*) in libLLVMAnalysis.a(CFGPrinter.o)\n      llvm::DOTGraphTraits<llvm::Function const*>::getCompleteNodeLabel(llvm::BasicBlock const*, llvm::Function const*) in libLLVMAnalysis.a(DomPrinter.o)\n      llvm::DOTGraphTraits<llvm::Function const*>::getCompleteNodeLabel(llvm::BasicBlock const*, llvm::Function const*) in libLLVMAnalysis.a(RegionPrinter.o)\n      llvm::DOTGraphTraits<llvm::MachineFunction const*>::getNodeLabel(llvm::MachineBasicBlock const*, llvm::MachineFunction const*) in libLLVMCodeGen.a(MachineFunction.o)\n      llvm::DOT::EscapeString(std::string const&) in libLLVMSupport.a(GraphWriter.o)\n  \"std::string::_Rep::_M_destroy(std::allocator<char> const&)\", referenced from:\n      _LLVMCopyStringRepOfTargetData in libLLVMTarget.a(Target.o)\n      _LLVMSetDataLayout in libLLVMCore.a(Core.o)\n      _LLVMSetTarget in libLLVMCore.a(Core.o)\n      _LLVMPrintModuleToFile in libLLVMCore.a(Core.o)\n      _LLVMSetSection in libLLVMCore.a(Core.o)\n      _LLVMCreateMemoryBufferWithContentsOfFile in libLLVMCore.a(Core.o)\n      _LLVMCreateMemoryBufferWithSTDIN in libLLVMCore.a(Core.o)\n      ...\n  \"std::string::_Rep::_S_terminal\", referenced from:\n      llvm::Module::setModuleInlineAsm(llvm::StringRef) in libLLVMCore.a(Core.o)\n      llvm::TimerGroup::TimerGroup(llvm::StringRef) in libLLVMSupport.a(Timer.o)\n      llvm::Triple::normalize(llvm::StringRef) in libLLVMSupport.a(Triple.o)\n      llvm::InlineAsm::ConstraintInfo::Parse(llvm::StringRef, std::vector<llvm::InlineAsm::ConstraintInfo, std::allocator<llvm::InlineAsm::ConstraintInfo> >&) in libLLVMCore.a(InlineAsm.o)\n      llvm::AsmPrinter::EmitFunctionBody() in libLLVMAsmPrinter.a(AsmPrinter.o)\n      llvm::AsmPrinter::EmitInlineAsm(llvm::MachineInstr const*) const in libLLVMAsmPrinter.a(AsmPrinterInlineAsm.o)\n      llvm::Attribute::getAsString(bool) const in libLLVMCore.a(Attributes.o)\n      ...\n  \"std::string::_Rep::_S_empty_rep_storage\", referenced from:\n      _LLVMCopyStringRepOfTargetData in libLLVMTarget.a(Target.o)\n      _LLVMSetDataLayout in libLLVMCore.a(Core.o)\n      _LLVMSetTarget in libLLVMCore.a(Core.o)\n      _LLVMPrintModuleToFile in libLLVMCore.a(Core.o)\n      _LLVMSetSection in libLLVMCore.a(Core.o)\n      _LLVMCreateMemoryBufferWithContentsOfFile in libLLVMCore.a(Core.o)\n      _LLVMCreateMemoryBufferWithSTDIN in libLLVMCore.a(Core.o)\n      ...\n  \"std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)\", referenced from:\n      llvm::TimerGroup::TimerGroup(llvm::StringRef) in libLLVMSupport.a(Timer.o)\n      llvm::InlineAsm::ConstraintInfo::Parse(llvm::StringRef, std::vector<llvm::InlineAsm::ConstraintInfo, std::allocator<llvm::InlineAsm::ConstraintInfo> >&) in libLLVMCore.a(InlineAsm.o)\n      llvm::AsmPrinter::EmitInlineAsm(llvm::MachineInstr const*) const in libLLVMAsmPrinter.a(AsmPrinterInlineAsm.o)\n      llvm::Attribute::getAsString(bool) const in libLLVMCore.a(Attributes.o)\n      llvm::Module::print(llvm::raw_ostream&, llvm::AssemblyAnnotationWriter*) const in libLLVMCore.a(AsmWriter.o)\n      (anonymous namespace)::getReplacementName(llvm::Instruction*, bool, unsigned int, unsigned int) in libLLVMVectorize.a(BBVectorize.o)\n      (anonymous namespace)::DAE::MarkLive((anonymous namespace)::DAE::RetOrArg const&) in libLLVMipo.a(DeadArgumentElimination.o)\n      ...\n  \"std::string::swap(std::string&)\", referenced from:\n      PrintResults(char const*, bool, llvm::Value const*, llvm::Value const*, llvm::Module const*) in libLLVMAnalysis.a(AliasAnalysisEvaluator.o)\n  \"std::string::append(char const*, unsigned long)\", referenced from:\n      _LLVMMoveToNextSection in libLLVMObject.a(Object.o)\n      _LLVMMoveToNextSymbol in libLLVMObject.a(Object.o)\n      _LLVMMoveToNextRelocation in libLLVMObject.a(Object.o)\n      (anonymous namespace)::ARMAsmParser::MatchAndEmitInstruction(llvm::SMLoc, unsigned int&, llvm::SmallVectorImpl<llvm::MCParsedAsmOperand*>&, llvm::MCStreamer&, unsigned int&, bool) in libLLVMARMAsmParser.a(ARMAsmParser.o)\n      llvm::ARMTargetMachine::ARMTargetMachine(llvm::Target const&, llvm::StringRef, llvm::StringRef, llvm::StringRef, llvm::TargetOptions const&, llvm::Reloc::Model, llvm::CodeModel::Model, llvm::CodeGenOpt::Level) in libLLVMARMCodeGen.a(ARMTargetMachine.o)\n      llvm::ARM_MC::ParseARMTriple(llvm::StringRef, llvm::StringRef) in libLLVMARMDesc.a(ARMMCTargetDesc.o)\n      llvm::ARM_MC::createARMMCSubtargetInfo(llvm::StringRef, llvm::StringRef, llvm::StringRef) in libLLVMARMDesc.a(ARMMCTargetDesc.o)\n      ...\n  \"std::string::append(std::string const&)\", referenced from:\n      _LLVMMoveToNextSection in libLLVMObject.a(Object.o)\n      _LLVMMoveToNextSymbol in libLLVMObject.a(Object.o)\n      _LLVMMoveToNextRelocation in libLLVMObject.a(Object.o)\n      llvm::ARMTargetMachine::ARMTargetMachine(llvm::Target const&, llvm::StringRef, llvm::StringRef, llvm::StringRef, llvm::TargetOptions const&, llvm::Reloc::Model, llvm::CodeModel::Model, llvm::CodeGenOpt::Level) in libLLVMARMCodeGen.a(ARMTargetMachine.o)\n      llvm::ARM_MC::createARMMCSubtargetInfo(llvm::StringRef, llvm::StringRef, llvm::StringRef) in libLLVMARMDesc.a(ARMMCTargetDesc.o)\n      llvm::MipsAsmPrinter::emitFrameDirective() in libLLVMMipsCodeGen.a(MipsAsmPrinter.o)\n      createMipsMCSubtargetInfo(llvm::StringRef, llvm::StringRef, llvm::StringRef) in libLLVMMipsDesc.a(MipsMCTargetDesc.o)\n      ...\n  \"std::string::append(unsigned long, char)\", referenced from:\n      llvm::Attribute::getAsString(bool) const in libLLVMCore.a(Attributes.o)\n      (anonymous namespace)::AsmParser::parseMSInlineAsm(void*, std::string&, unsigned int&, unsigned int&, llvm::SmallVectorImpl<std::pair<void*, bool> >&, llvm::SmallVectorImpl<std::string>&, llvm::SmallVectorImpl<std::string>&, llvm::MCInstrInfo const*, llvm::MCInstPrinter const*, llvm::MCAsmParserSemaCallback&) in libLLVMMCParser.a(AsmParser.o)\n  \"std::string::assign(char const*, unsigned long)\", referenced from:\n      llvm::ARM_MC::ParseARMTriple(llvm::StringRef, llvm::StringRef) in libLLVMARMDesc.a(ARMMCTargetDesc.o)\n      createMipsMCSubtargetInfo(llvm::StringRef, llvm::StringRef, llvm::StringRef) in libLLVMMipsDesc.a(MipsMCTargetDesc.o)\n      llvm::X86_MC::ParseX86Triple(llvm::StringRef) in libLLVMX86Desc.a(X86MCTargetDesc.o)\n      llvm::X86_MC::createX86MCSubtargetInfo(llvm::StringRef, llvm::StringRef, llvm::StringRef) in libLLVMX86Desc.a(X86MCTargetDesc.o)\n      llvm::JIT::createJIT(llvm::Module*, std::string*, llvm::JITMemoryManager*, bool, llvm::TargetMachine*) in libLLVMJIT.a(JIT.o)\n      llvm::EngineBuilder::selectTarget(llvm::Triple const&, llvm::StringRef, llvm::StringRef, llvm::SmallVectorImpl<std::string> const&) in libLLVMExecutionEngine.a(TargetSelect.o)\n      llvm::ExecutionEngine::createJIT(llvm::Module*, std::string*, llvm::JITMemoryManager*, llvm::CodeGenOpt::Level, bool, llvm::Reloc::Model, llvm::CodeModel::Model) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      ...\n  \"std::string::assign(std::string const&)\", referenced from:\n      _LLVMSetDataLayout in libLLVMCore.a(Core.o)\n      _LLVMSetTarget in libLLVMCore.a(Core.o)\n      _LLVMSetSection in libLLVMCore.a(Core.o)\n      llvm::Module::setModuleInlineAsm(llvm::StringRef) in libLLVMCore.a(Core.o)\n      std::vector<std::string, std::allocator<std::string> >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string const&) in libLLVMExecutionEngine.a(ExecutionEngineBindings.o)\n      llvm::TargetOptions::operator=(llvm::TargetOptions const&) in libLLVMExecutionEngine.a(ExecutionEngineBindings.o)\n      (anonymous namespace)::ARMAsmParser::convertToMapAndConstraints(unsigned int, llvm::SmallVectorImpl<llvm::MCParsedAsmOperand*> const&) in libLLVMARMAsmParser.a(ARMAsmParser.o)\n      ...\n  \"std::string::resize(unsigned long, char)\", referenced from:\n      llvm::sys::getDefaultTargetTriple() in libLLVMSupport.a(Host.o)\n      llvm::SMDiagnostic::print(char const*, llvm::raw_ostream&, bool) const in libLLVMSupport.a(SourceMgr.o)\n      llvm::Regex::isValid(std::string&) in libLLVMSupport.a(Regex.o)\n  \"std::string::replace(unsigned long, unsigned long, char const*, unsigned long)\", referenced from:\n      llvm::Timer::init(llvm::StringRef) in libLLVMSupport.a(Timer.o)\n      llvm::Timer::init(llvm::StringRef, llvm::TimerGroup&) in libLLVMSupport.a(Timer.o)\n      llvm::NamedRegionTimer::NamedRegionTimer(llvm::StringRef, llvm::StringRef, bool) in libLLVMSupport.a(Timer.o)\n      (anonymous namespace)::WinCOFFStreamer::AddCommonSymbol(llvm::MCSymbol*, unsigned long long, unsigned int, bool) in libLLVMMC.a(WinCOFFStreamer.o)\n      replaceSubString(std::string&, llvm::StringRef, llvm::StringRef) in libLLVMAnalysis.a(ScalarEvolution.o)\n      llvm::BlackList::BlackList(llvm::StringRef) in libLLVMInstrumentation.a(BlackList.o)\n      (anonymous namespace)::DarwinAsmParser::ParseDirectiveSection(llvm::StringRef, llvm::SMLoc) in libLLVMMCParser.a(DarwinAsmParser.o)\n      ...\n  \"std::string::reserve(unsigned long)\", referenced from:\n      llvm::Module::setModuleInlineAsm(llvm::StringRef) in libLLVMCore.a(Core.o)\n      _LLVMMoveToNextSection in libLLVMObject.a(Object.o)\n      _LLVMMoveToNextSymbol in libLLVMObject.a(Object.o)\n      _LLVMMoveToNextRelocation in libLLVMObject.a(Object.o)\n      llvm::ARMTargetMachine::ARMTargetMachine(llvm::Target const&, llvm::StringRef, llvm::StringRef, llvm::StringRef, llvm::TargetOptions const&, llvm::Reloc::Model, llvm::CodeModel::Model, llvm::CodeGenOpt::Level) in libLLVMARMCodeGen.a(ARMTargetMachine.o)\n      llvm::MipsAsmPrinter::emitFrameDirective() in libLLVMMipsCodeGen.a(MipsAsmPrinter.o)\n      llvm::JIT::getPointerToNamedFunction(std::string const&, bool) in libLLVMJIT.a(JIT.o)\n      ...\n  \"std::string::_M_mutate(unsigned long, unsigned long, unsigned long)\", referenced from:\n      llvm::raw_fd_ostream::raw_fd_ostream(char const*, std::string&, unsigned int) in libLLVMSupport.a(raw_ostream.o)\n      (anonymous namespace)::Lint::runOnFunction(llvm::Function&) in libLLVMAnalysis.a(Lint.o)\n      llvm::sys::Path llvm::WriteGraph<llvm::Function const*>(llvm::Function const* const&, llvm::Twine const&, bool, llvm::Twine const&) in libLLVMAnalysis.a(CFGPrinter.o)\n      llvm::DOTGraphTraits<llvm::Function const*>::getCompleteNodeLabel(llvm::BasicBlock const*, llvm::Function const*) in libLLVMAnalysis.a(CFGPrinter.o)\n      llvm::sys::Path llvm::WriteGraph<llvm::PostDominatorTree*>(llvm::PostDominatorTree* const&, llvm::Twine const&, bool, llvm::Twine const&) in libLLVMAnalysis.a(DomPrinter.o)\n      llvm::DOTGraphTraits<llvm::Function const*>::getCompleteNodeLabel(llvm::BasicBlock const*, llvm::Function const*) in libLLVMAnalysis.a(DomPrinter.o)\n      llvm::sys::Path llvm::WriteGraph<llvm::DominatorTree*>(llvm::DominatorTree* const&, llvm::Twine const&, bool, llvm::Twine const&) in libLLVMAnalysis.a(DomPrinter.o)\n      ...\n  \"std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)\", referenced from:\n      _LLVMRunFunctionAsMain in libLLVMExecutionEngine.a(ExecutionEngineBindings.o)\n      llvm::EngineBuilder::EngineBuilder(llvm::Module*) in libLLVMExecutionEngine.a(ExecutionEngineBindings.o)\n      (anonymous namespace)::ARMAsmParser::MatchAndEmitInstruction(llvm::SMLoc, unsigned int&, llvm::SmallVectorImpl<llvm::MCParsedAsmOperand*>&, llvm::MCStreamer&, unsigned int&, bool) in libLLVMARMAsmParser.a(ARMAsmParser.o)\n      llvm::ARMTargetMachine::ARMTargetMachine(llvm::Target const&, llvm::StringRef, llvm::StringRef, llvm::StringRef, llvm::TargetOptions const&, llvm::Reloc::Model, llvm::CodeModel::Model, llvm::CodeGenOpt::Level) in libLLVMARMCodeGen.a(ARMTargetMachine.o)\n      llvm::ThumbTargetMachine::ThumbTargetMachine(llvm::Target const&, llvm::StringRef, llvm::StringRef, llvm::StringRef, llvm::TargetOptions const&, llvm::Reloc::Model, llvm::CodeModel::Model, llvm::CodeGenOpt::Level) in libLLVMARMCodeGen.a(ARMTargetMachine.o)\n      llvm::MipsAsmPrinter::PrintAsmOperand(llvm::MachineInstr const*, unsigned int, unsigned int, char const*, llvm::raw_ostream&) in libLLVMMipsCodeGen.a(MipsAsmPrinter.o)\n      (anonymous namespace)::X86AsmParser::MatchAndEmitInstruction(llvm::SMLoc, unsigned int&, llvm::SmallVectorImpl<llvm::MCParsedAsmOperand*>&, llvm::MCStreamer&, unsigned int&, bool) in libLLVMX86AsmParser.a(X86AsmParser.o)\n      ...\n  \"std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)\", referenced from:\n      _LLVMSetDataLayout in libLLVMCore.a(Core.o)\n      _LLVMSetTarget in libLLVMCore.a(Core.o)\n      _LLVMSetSection in libLLVMCore.a(Core.o)\n      llvm::Module::setModuleInlineAsm(llvm::StringRef) in libLLVMCore.a(Core.o)\n      (anonymous namespace)::ARMAsmParser::convertToMapAndConstraints(unsigned int, llvm::SmallVectorImpl<llvm::MCParsedAsmOperand*> const&) in libLLVMARMAsmParser.a(ARMAsmParser.o)\n      llvm::ARMBaseTargetMachine::ARMBaseTargetMachine(llvm::Target const&, llvm::StringRef, llvm::StringRef, llvm::StringRef, llvm::TargetOptions const&, llvm::Reloc::Model, llvm::CodeModel::Model, llvm::CodeGenOpt::Level) in libLLVMARMCodeGen.a(ARMTargetMachine.o)\n      llvm::ARM_MC::createARMMCSubtargetInfo(llvm::StringRef, llvm::StringRef, llvm::StringRef) in libLLVMARMDesc.a(ARMMCTargetDesc.o)\n      ...\n  \"std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)\", referenced from:\n      _LLVMRunFunctionAsMain in libLLVMExecutionEngine.a(ExecutionEngineBindings.o)\n      std::vector<std::string, std::allocator<std::string> >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string const&) in libLLVMExecutionEngine.a(ExecutionEngineBindings.o)\n      llvm::ARMAsmPrinter::emitAttributes() in libLLVMARMCodeGen.a(ARMAsmPrinter.o)\n      llvm::ARMTargetMachine::ARMTargetMachine(llvm::Target const&, llvm::StringRef, llvm::StringRef, llvm::StringRef, llvm::TargetOptions const&, llvm::Reloc::Model, llvm::CodeModel::Model, llvm::CodeGenOpt::Level) in libLLVMARMCodeGen.a(ARMTargetMachine.o)\n      llvm::TargetOptions::TargetOptions(llvm::TargetOptions const&) in libLLVMARMCodeGen.a(ARMTargetMachine.o)\n      llvm::ARM_MC::createARMMCSubtargetInfo(llvm::StringRef, llvm::StringRef, llvm::StringRef) in libLLVMARMDesc.a(ARMMCTargetDesc.o)\n      llvm::MipsAsmPrinter::emitFrameDirective() in libLLVMMipsCodeGen.a(MipsAsmPrinter.o)\n      ...\n  \"std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)\", referenced from:\n      llvm::sys::TimeValue::str() const in libLLVMSupport.a(TimeValue.o)\n      (anonymous namespace)::AsmParser::ParseStatement((anonymous namespace)::ParseStatementInfo&) in libLLVMMCParser.a(AsmParser.o)\n      llvm::UpgradeIntrinsicCall(llvm::CallInst*, llvm::Function*) in libLLVMCore.a(AutoUpgrade.o)\n  \"std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)\", referenced from:\n      llvm::TimerGroup::PrintQueuedTimers(llvm::raw_ostream&) in libLLVMSupport.a(Timer.o)\n      llvm::PMDataManager::dumpPassInfo(llvm::Pass*, llvm::PassDebuggingString, llvm::PassDebuggingString, llvm::StringRef) in libLLVMCore.a(PassManager.o)\n      llvm::PMDataManager::dumpLastUses(llvm::Pass*, unsigned int) const in libLLVMCore.a(PassManager.o)\n      llvm::PMDataManager::dumpAnalysisUsage(llvm::StringRef, llvm::Pass const*, llvm::SmallVector<void const*, 32u> const&) const in libLLVMCore.a(PassManager.o)\n      llvm::StringRef::lower() const in libLLVMSupport.a(StringRef.o)\n      llvm::StringRef::upper() const in libLLVMSupport.a(StringRef.o)\n      llvm::PrintStatistics(llvm::raw_ostream&) in libLLVMSupport.a(Statistic.o)\n      ...\n  \"std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()\", referenced from:\n      __GLOBAL__I_a in libLLVMSupport.a(Debug.o)\n  \"std::__basic_file<char>::~__basic_file()\", referenced from:\n      (anonymous namespace)::InternalizePass::InternalizePass() in libLLVMipo.a(Internalize.o)\n      (anonymous namespace)::BlockExtractorPass::BlockExtractorPass() in libLLVMipo.a(LoopExtractor.o)\n  \"std::basic_filebuf<char, std::char_traits<char> >::close()\", referenced from:\n      (anonymous namespace)::InternalizePass::InternalizePass() in libLLVMipo.a(Internalize.o)\n      (anonymous namespace)::BlockExtractorPass::BlockExtractorPass() in libLLVMipo.a(LoopExtractor.o)\n  \"std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(char const*, std::_Ios_Openmode)\", referenced from:\n      (anonymous namespace)::InternalizePass::InternalizePass() in libLLVMipo.a(Internalize.o)\n      (anonymous namespace)::BlockExtractorPass::BlockExtractorPass() in libLLVMipo.a(LoopExtractor.o)\n  \"std::_List_node_base::hook(std::_List_node_base*)\", referenced from:\n      llvm::SwitchInst::CaseIt::setValue(llvm::ConstantInt*) in libLLVMInstCombine.a(InstructionCombining.o)\n      llvm::SwitchInst::addCase(llvm::ConstantInt*, llvm::BasicBlock*) in libLLVMCore.a(Instructions.o)\n      llvm::SwitchInst::addCase(llvm::IntegersSubset&, llvm::BasicBlock*) in libLLVMCore.a(Instructions.o)\n      void std::list<llvm::IntegersSubset, std::allocator<llvm::IntegersSubset> >::insert<std::_List_const_iterator<llvm::IntegersSubset> >(std::_List_iterator<llvm::IntegersSubset>, std::_List_const_iterator<llvm::IntegersSubset>, std::_List_const_iterator<llvm::IntegersSubset>) in libLLVMCore.a(Instructions.o)\n      llvm::InstVisitor<(anonymous namespace)::Verifier, void>::visit(llvm::Instruction&) in libLLVMCore.a(Verifier.o)\n      void std::list<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > >::insert<__gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > > > >(std::_List_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> >, __gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > > >, __gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > > >) in libLLVMCore.a(Verifier.o)\n      llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::add(llvm::IntegersSubset const&, llvm::BasicBlock*, unsigned int) in libLLVMTransformUtils.a(LowerSwitch.o)\n      ...\n  \"std::_List_node_base::unhook()\", referenced from:\n      llvm::SwitchInst::removeCase(llvm::SwitchInst::CaseIt&) in libLLVMCore.a(Instructions.o)\n      std::list<llvm::IntegersSubset, std::allocator<llvm::IntegersSubset> >::operator=(std::list<llvm::IntegersSubset, std::allocator<llvm::IntegersSubset> > const&) in libLLVMCore.a(Instructions.o)\n      (anonymous namespace)::MemsetRanges::addRange(long long, long long, llvm::Value*, unsigned int, llvm::Instruction*) in libLLVMScalarOpts.a(MemCpyOptimizer.o)\n      (anonymous namespace)::MipsELFObjectWriter::sortRelocs(llvm::MCAssembler const&, std::vector<llvm::ELFRelocationEntry, std::allocator<llvm::ELFRelocationEntry> >&) in libLLVMMipsDesc.a(MipsELFObjectWriter.o)\n  \"std::_List_node_base::transfer(std::_List_node_base*, std::_List_node_base*)\", referenced from:\n      void std::list<llvm::IntegersSubset, std::allocator<llvm::IntegersSubset> >::insert<std::_List_const_iterator<llvm::IntegersSubset> >(std::_List_iterator<llvm::IntegersSubset>, std::_List_const_iterator<llvm::IntegersSubset>, std::_List_const_iterator<llvm::IntegersSubset>) in libLLVMCore.a(Instructions.o)\n      void std::list<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > >::insert<__gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > > > >(std::_List_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> >, __gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > > >, __gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > > >) in libLLVMCore.a(Verifier.o)\n      void std::list<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > >::insert<__gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > > > >(std::_List_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> >, __gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > > >, __gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::BasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::BasicBlock*> > > >) in libLLVMTransformUtils.a(LowerSwitch.o)\n      void std::list<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*> > >::insert<__gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*> > > > >(std::_List_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*> >, __gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*> > > >, __gnu_cxx::__normal_iterator<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*>*, std::vector<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*>, std::allocator<std::pair<llvm::IntegersSubsetMapping<llvm::MachineBasicBlock, llvm::IntegersSubset, llvm::IntItem>::RangeEx, llvm::MachineBasicBlock*> > > >) in libLLVMSelectionDAG.a(SelectionDAGBuilder.o)\n  \"std::locale::locale()\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  \"std::locale::~locale()\", referenced from:\n      (anonymous namespace)::InternalizePass::InternalizePass() in libLLVMipo.a(Internalize.o)\n      (anonymous namespace)::BlockExtractorPass::BlockExtractorPass() in libLLVMipo.a(LoopExtractor.o)\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  \"std::ios_base::ios_base()\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  \"std::ios_base::~ios_base()\", referenced from:\n      (anonymous namespace)::InternalizePass::InternalizePass() in libLLVMipo.a(Internalize.o)\n      (anonymous namespace)::BlockExtractorPass::BlockExtractorPass() in libLLVMipo.a(LoopExtractor.o)\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  \"std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  \"std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n  \"std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  \"std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)\", referenced from:\n      (anonymous namespace)::ArgPromotion::isSafeToPromoteArgument(llvm::Argument*, bool) const in libLLVMipo.a(ArgumentPromotion.o)\n      MarkIndicesSafe(std::vector<unsigned long long, std::allocator<unsigned long long> > const&, std::set<std::vector<unsigned long long, std::allocator<unsigned long long> >, std::less<std::vector<unsigned long long, std::allocator<unsigned long long> > >, std::allocator<std::vector<unsigned long long, std::allocator<unsigned long long> > > >&) in libLLVMipo.a(ArgumentPromotion.o)\n      std::_Rb_tree<std::vector<unsigned long long, std::allocator<unsigned long long> >, std::vector<unsigned long long, std::allocator<unsigned long long> >, std::_Identity<std::vector<unsigned long long, std::allocator<unsigned long long> > >, std::less<std::vector<unsigned long long, std::allocator<unsigned long long> > >, std::allocator<std::vector<unsigned long long, std::allocator<unsigned long long> > > >::_M_insert_unique(std::_Rb_tree_const_iterator<std::vector<unsigned long long, std::allocator<unsigned long long> > >, std::vector<unsigned long long, std::allocator<unsigned long long> > const&) in libLLVMipo.a(ArgumentPromotion.o)\n      (anonymous namespace)::LSRInstance::GenerateAllReuseFormulae() in libLLVMScalarOpts.a(LoopStrengthReduce.o)\n      (anonymous namespace)::JITResolver::JITCompilerFn(void*) in libLLVMJIT.a(JITEmitter.o)\n  \"std::_Rb_tree_decrement(std::_Rb_tree_node_base*)\", referenced from:\n      std::_Rb_tree<llvm::Pass*, std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*>, std::_Select1st<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> >, std::less<llvm::Pass*>, std::allocator<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> > >::_M_insert_unique(std::_Rb_tree_iterator<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> >, std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> const&) in libLLVMCore.a(PassManager.o)\n      std::_Rb_tree<llvm::Pass*, std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*>, std::_Select1st<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> >, std::less<llvm::Pass*>, std::allocator<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> > >::_M_insert_unique(std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> const&) in libLLVMCore.a(PassManager.o)\n      std::_Rb_tree<std::pair<std::string, llvm::Type*>, std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*>, std::_Select1st<std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> >, std::less<std::pair<std::string, llvm::Type*> >, std::allocator<std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> > >::_M_insert_unique(std::_Rb_tree_iterator<std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> >, std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> const&) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<std::pair<std::string, llvm::Type*>, std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*>, std::_Select1st<std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> >, std::less<std::pair<std::string, llvm::Type*> >, std::allocator<std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> > >::_M_insert_unique(std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> const&) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<void*, std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> >, std::_Select1st<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::less<void*>, std::allocator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > > >::_M_insert_unique(std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > const&) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<void*, std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> >, std::_Select1st<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::less<void*>, std::allocator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > > >::_M_insert_unique(std::_Rb_tree_iterator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > const&) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<llvm::AssertingVH<llvm::Instruction>, llvm::AssertingVH<llvm::Instruction>, std::_Identity<llvm::AssertingVH<llvm::Instruction> >, std::less<llvm::AssertingVH<llvm::Instruction> >, std::allocator<llvm::AssertingVH<llvm::Instruction> > >::_M_insert_unique(llvm::AssertingVH<llvm::Instruction> const&) in libLLVMScalarOpts.a(Reassociate.o)\n      ...\n  \"std::_Rb_tree_increment(std::_Rb_tree_node_base const*)\", referenced from:\n      llvm::AttrBuilder::merge(llvm::AttrBuilder const&) in libLLVMCore.a(Attributes.o)\n      llvm::AttrBuilder::operator==(llvm::AttrBuilder const&) in libLLVMCore.a(Attributes.o)\n      llvm::RuntimeDyldImpl::emitCommonSymbols(llvm::ObjectImage&, std::map<llvm::object::SymbolRef, std::pair<unsigned int, unsigned int>, std::less<llvm::object::SymbolRef>, std::allocator<std::pair<llvm::object::SymbolRef const, std::pair<unsigned int, unsigned int> > > > const&, unsigned long long, llvm::StringMap<std::pair<unsigned int, unsigned long>, llvm::MallocAllocator>&) in libLLVMRuntimeDyld.a(RuntimeDyld.o)\n      (anonymous namespace)::SimplifyCFGOpt::FoldValueComparisonIntoPredecessors(llvm::TerminatorInst*, llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >&) in libLLVMTransformUtils.a(SimplifyCFG.o)\n      llvm::CallGraph::print(llvm::raw_ostream&, llvm::Module*) const in libLLVMipa.a(CallGraph.o)\n      llvm::CallGraph::dump() const in libLLVMipa.a(CallGraph.o)\n      (anonymous namespace)::BasicCallGraph::print(llvm::raw_ostream&, llvm::Module const*) const in libLLVMipa.a(CallGraph.o)\n      ...\n  \"std::_Rb_tree_increment(std::_Rb_tree_node_base*)\", referenced from:\n      llvm::MPPassManager::runOnModule(llvm::Module&) in libLLVMCore.a(PassManager.o)\n      std::_Rb_tree<llvm::Pass*, std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*>, std::_Select1st<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> >, std::less<llvm::Pass*>, std::allocator<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> > >::_M_insert_unique(std::_Rb_tree_iterator<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> >, std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> const&) in libLLVMCore.a(PassManager.o)\n      llvm::MPPassManager::~MPPassManager() in libLLVMCore.a(PassManager.o)\n      std::_Rb_tree<std::pair<std::string, llvm::Type*>, std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*>, std::_Select1st<std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> >, std::less<std::pair<std::string, llvm::Type*> >, std::allocator<std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> > >::_M_insert_unique(std::_Rb_tree_iterator<std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> >, std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> const&) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<void*, std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> >, std::_Select1st<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::less<void*>, std::allocator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > > >::_M_insert_unique(std::_Rb_tree_iterator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > const&) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<void*, std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> >, std::_Select1st<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::less<void*>, std::allocator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > > >::erase(std::_Rb_tree_iterator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::_Rb_tree_iterator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<llvm::AssertingVH<llvm::Instruction>, llvm::AssertingVH<llvm::Instruction>, std::_Identity<llvm::AssertingVH<llvm::Instruction> >, std::less<llvm::AssertingVH<llvm::Instruction> >, std::allocator<llvm::AssertingVH<llvm::Instruction> > >::erase(std::_Rb_tree_iterator<llvm::AssertingVH<llvm::Instruction> >, std::_Rb_tree_iterator<llvm::AssertingVH<llvm::Instruction> >) in libLLVMScalarOpts.a(Reassociate.o)\n      ...\n  \"std::__throw_logic_error(char const*)\", referenced from:\n      llvm::TimerGroup::TimerGroup(llvm::StringRef) in libLLVMSupport.a(Timer.o)\n      llvm::InlineAsm::ConstraintInfo::Parse(llvm::StringRef, std::vector<llvm::InlineAsm::ConstraintInfo, std::allocator<llvm::InlineAsm::ConstraintInfo> >&) in libLLVMCore.a(InlineAsm.o)\n      llvm::AsmPrinter::EmitInlineAsm(llvm::MachineInstr const*) const in libLLVMAsmPrinter.a(AsmPrinterInlineAsm.o)\n      llvm::Attribute::getAsString(bool) const in libLLVMCore.a(Attributes.o)\n      (anonymous namespace)::getReplacementName(llvm::Instruction*, bool, unsigned int, unsigned int) in libLLVMVectorize.a(BBVectorize.o)\n      (anonymous namespace)::DAE::MarkLive((anonymous namespace)::DAE::RetOrArg const&) in libLLVMipo.a(DeadArgumentElimination.o)\n      llvm::Intrinsic::getName(llvm::Intrinsic::ID, llvm::ArrayRef<llvm::Type*>) in libLLVMCore.a(Function.o)\n      ...\n  \"std::__throw_length_error(char const*)\", referenced from:\n      std::vector<char const*, std::allocator<char const*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<char const**, std::vector<char const*, std::allocator<char const*> > >, char const* const&) in libLLVMipo.a(IPO.o)\n      std::vector<llvm::GenericValue, std::allocator<llvm::GenericValue> >::reserve(unsigned long) in libLLVMExecutionEngine.a(ExecutionEngineBindings.o)\n      std::vector<llvm::GenericValue, std::allocator<llvm::GenericValue> >::_M_insert_aux(__gnu_cxx::__normal_iterator<llvm::GenericValue*, std::vector<llvm::GenericValue, std::allocator<llvm::GenericValue> > >, llvm::GenericValue const&) in libLLVMExecutionEngine.a(ExecutionEngineBindings.o)\n      std::vector<std::string, std::allocator<std::string> >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string const&) in libLLVMExecutionEngine.a(ExecutionEngineBindings.o)\n      std::vector<unsigned char, std::allocator<unsigned char> >::_M_insert_aux(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&) in libLLVMARMDisassembler.a(ARMDisassembler.o)\n      llvm::IntegersSubset::IntegersSubset<std::list<llvm::IntRange<llvm::IntItem>, std::allocator<llvm::IntRange<llvm::IntItem> > > >(std::list<llvm::IntRange<llvm::IntItem>, std::allocator<llvm::IntRange<llvm::IntItem> > > const&) in libLLVMInstCombine.a(InstructionCombining.o)\n      llvm::IntegersSubsetGeneric<llvm::IntItem>::IntegersSubsetGeneric<std::list<llvm::IntRange<llvm::IntItem>, std::allocator<llvm::IntRange<llvm::IntItem> > > >(std::list<llvm::IntRange<llvm::IntItem>, std::allocator<llvm::IntRange<llvm::IntItem> > > const&) in libLLVMInstCombine.a(InstructionCombining.o)\n      ...\n  \"std::__throw_out_of_range(char const*)\", referenced from:\n      llvm::X86TargetLowering::LowerVECTOR_SHUFFLE(llvm::SDValue, llvm::SelectionDAG&) const in libLLVMX86CodeGen.a(X86ISelLowering.o)\n      llvm::sys::Path::FindLibrary(std::string&) in libLLVMSupport.a(Path.o)\n      llvm::sys::Path::eraseSuffix() in libLLVMSupport.a(Path.o)\n      llvm::sys::Path::eraseComponent() in libLLVMSupport.a(Path.o)\n      llvm::DwarfUnits::computeSizeAndOffset(llvm::DIE*, unsigned int) in libLLVMAsmPrinter.a(DwarfDebug.o)\n      llvm::DwarfDebug::emitDIE(llvm::DIE*, std::vector<llvm::DIEAbbrev*, std::allocator<llvm::DIEAbbrev*> >*) in libLLVMAsmPrinter.a(DwarfDebug.o)\n      llvm::DwarfDebug::emitAbbrevs(llvm::MCSection const*, std::vector<llvm::DIEAbbrev*, std::allocator<llvm::DIEAbbrev*> >*) in libLLVMAsmPrinter.a(DwarfDebug.o)\n      ...\n  \"std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)\", referenced from:\n      std::_Rb_tree<void*, std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> >, std::_Select1st<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::less<void*>, std::allocator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > > >::erase(std::_Rb_tree_iterator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::_Rb_tree_iterator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<llvm::AssertingVH<llvm::Instruction>, llvm::AssertingVH<llvm::Instruction>, std::_Identity<llvm::AssertingVH<llvm::Instruction> >, std::less<llvm::AssertingVH<llvm::Instruction> >, std::allocator<llvm::AssertingVH<llvm::Instruction> > >::erase(std::_Rb_tree_iterator<llvm::AssertingVH<llvm::Instruction> >, std::_Rb_tree_iterator<llvm::AssertingVH<llvm::Instruction> >) in libLLVMScalarOpts.a(Reassociate.o)\n      llvm::ConstantUniqueMap<llvm::InlineAsmKeyType, llvm::InlineAsmKeyType const&, llvm::PointerType, llvm::InlineAsm, false>::remove(llvm::InlineAsm*) in libLLVMCore.a(InlineAsm.o)\n      llvm::ConstantUniqueMap<llvm::ExprMapKeyType, llvm::ExprMapKeyType const&, llvm::Type, llvm::ConstantExpr, false>::remove(llvm::ConstantExpr*) in libLLVMCore.a(Constants.o)\n      llvm::AttrBuilder::removeAttributes(llvm::AttributeSet, unsigned long long) in libLLVMCore.a(Attributes.o)\n      llvm::AttrBuilder::removeAttribute(llvm::StringRef) in libLLVMCore.a(Attributes.o)\n      (anonymous namespace)::SimplifyCFGOpt::run(llvm::BasicBlock*) in libLLVMTransformUtils.a(SimplifyCFG.o)\n      ...\n  \"std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)\", referenced from:\n      std::_Rb_tree<llvm::Pass*, std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*>, std::_Select1st<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> >, std::less<llvm::Pass*>, std::allocator<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> > >::_M_insert_unique(std::_Rb_tree_iterator<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> >, std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> const&) in libLLVMCore.a(PassManager.o)\n      std::_Rb_tree<llvm::Pass*, std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*>, std::_Select1st<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> >, std::less<llvm::Pass*>, std::allocator<std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> > >::_M_insert_unique(std::pair<llvm::Pass* const, llvm::FunctionPassManagerImpl*> const&) in libLLVMCore.a(PassManager.o)\n      std::_Rb_tree<std::pair<std::string, llvm::Type*>, std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*>, std::_Select1st<std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> >, std::less<std::pair<std::string, llvm::Type*> >, std::allocator<std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> > >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<std::pair<std::string, llvm::Type*> const, llvm::GlobalValue const*> const&) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<void*, std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> >, std::_Select1st<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::less<void*>, std::allocator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > > >::_M_insert_unique(std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > const&) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<void*, std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> >, std::_Select1st<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::less<void*>, std::allocator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > > >::_M_insert_unique(std::_Rb_tree_iterator<std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > >, std::pair<void* const, llvm::AssertingVH<llvm::GlobalValue const> > const&) in libLLVMExecutionEngine.a(ExecutionEngine.o)\n      std::_Rb_tree<llvm::AssertingVH<llvm::Instruction>, llvm::AssertingVH<llvm::Instruction>, std::_Identity<llvm::AssertingVH<llvm::Instruction> >, std::less<llvm::AssertingVH<llvm::Instruction> >, std::allocator<llvm::AssertingVH<llvm::Instruction> > >::_M_insert_unique(llvm::AssertingVH<llvm::Instruction> const&) in libLLVMScalarOpts.a(Reassociate.o)\n      std::_Rb_tree<std::pair<llvm::PointerType*, llvm::InlineAsmKeyType>, std::pair<std::pair<llvm::PointerType*, llvm::InlineAsmKeyType> const, llvm::InlineAsm*>, std::_Select1st<std::pair<std::pair<llvm::PointerType*, llvm::InlineAsmKeyType> const, llvm::InlineAsm*> >, std::less<std::pair<llvm::PointerType*, llvm::InlineAsmKeyType> >, std::allocator<std::pair<std::pair<llvm::PointerType*, llvm::InlineAsmKeyType> const, llvm::InlineAsm*> > >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<std::pair<llvm::PointerType*, llvm::InlineAsmKeyType> const, llvm::InlineAsm*> const&) in libLLVMCore.a(InlineAsm.o)\n      ...\n  \"std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&)\", referenced from:\n      (anonymous namespace)::InternalizePass::InternalizePass() in libLLVMipo.a(Internalize.o)\n      (anonymous namespace)::BlockExtractorPass::BlockExtractorPass() in libLLVMipo.a(LoopExtractor.o)\n  \"VTT for std::basic_ifstream<char, std::char_traits<char> >\", referenced from:\n      (anonymous namespace)::InternalizePass::InternalizePass() in libLLVMipo.a(Internalize.o)\n      (anonymous namespace)::BlockExtractorPass::BlockExtractorPass() in libLLVMipo.a(LoopExtractor.o)\n  \"VTT for std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  \"VTT for std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >\", referenced from:\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n  \"vtable for std::basic_filebuf<char, std::char_traits<char> >\", referenced from:\n      (anonymous namespace)::InternalizePass::InternalizePass() in libLLVMipo.a(Internalize.o)\n      (anonymous namespace)::BlockExtractorPass::BlockExtractorPass() in libLLVMipo.a(LoopExtractor.o)\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\n  \"vtable for std::basic_streambuf<char, std::char_traits<char> >\", referenced from:\n      (anonymous namespace)::InternalizePass::InternalizePass() in libLLVMipo.a(Internalize.o)\n      (anonymous namespace)::BlockExtractorPass::BlockExtractorPass() in libLLVMipo.a(LoopExtractor.o)\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\n  \"vtable for std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\n  \"vtable for std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\n  \"vtable for std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >\", referenced from:\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\n  \"vtable for std::basic_ios<char, std::char_traits<char> >\", referenced from:\n      llvm::BallLarusNode::getName() in libLLVMAnalysis.a(PathNumbering.o)\n      llvm::PEI::getBasicBlockName(llvm::MachineBasicBlock const*) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::PEI::stringifyCSRegSet(llvm::SparseBitVector<128u> const&) in libLLVMCodeGen.a(ShrinkWrapping.o)\n      llvm::sys::disassembleBuffer(unsigned char*, unsigned long, unsigned long long) in libLLVMSupport.a(Disassembler.o)\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [rustllvm/x86_64-apple-darwin/librustllvm.dylib] Error 1\n```\n", "closed_by": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/7108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/7108/timeline", "performed_via_github_app": null, "state_reason": "completed"}