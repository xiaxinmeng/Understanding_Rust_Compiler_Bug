{"url": "https://api.github.com/repos/rust-lang/rust/issues/75846", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75846/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75846/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75846/events", "html_url": "https://github.com/rust-lang/rust/issues/75846", "id": 684254448, "node_id": "MDU6SXNzdWU2ODQyNTQ0NDg=", "number": 75846, "title": "Stdlib proposal: AsPtr, IntoRawPtr, FromRawPtr", "user": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-23T20:50:50Z", "updated_at": "2022-10-28T21:08:40Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to propose some new conversion traits for `core::convert`: `AsPtr`, `IntoRawPtr`, `FromRawPtr`. These would be defined like so:\r\n\r\n```rust\r\ntrait AsPtr {\r\n    type Inner: ?Sized;\r\n    fn as_ptr(&self) -> *const Self::Inner;\r\n}\r\n\r\ntrait IntoRawPtr: Sized {\r\n    type Inner: ?Sized;\r\n    fn into_raw(self) -> *mut Self::Inner;\r\n}\r\n\r\ntrait FromRawPtr: IntoRawPtr {\r\n    // Safety: this must ONLY be called on a pointer that was received\r\n    // through `into_raw`, and that pointer must immediately be discarded\r\n    // afterwards\r\n    unsafe fn from_raw(*mut Self::Inner) -> Self\r\n}\r\n```\r\n\r\nThese traits would be implemented for raw pointer types, as well as for smart pointer types like `Box`, `Arc`, `Weak`, etc. \r\n\r\nThe purpose of these traits would, obviously, be to facilitate conversion of a type into and back out of a pointer. The motivating practical use case is to make it easier to create `RawWaker`s and associated implementations, especially through intermediate Handle types. Consider this example:\r\n\r\n```rust\r\n#[derive(Clone)]\r\nstruct MyWaker {\r\n    state: Arc<State>,\r\n}\r\n\r\nimpl MyWaker {\r\n    fn wake(&self) { ... }\r\n}\r\n```\r\n\r\nThis would be *relatively* easy to create a RawWaker for, since we can directly convert the `state` `Arc` into and out of the requisite `*const()`, and write the vtable methods to convert it back into an `Arc`. However, now consider this example:\r\n\r\n```rust\r\n// Crate A:\r\n#[derive(Clone)]\r\nstruct Unparker {\r\n    state: Arc<State>\r\n}\r\n\r\nimpl Unparker {\r\n    fn unpark(&self) { ... }\r\n}\r\n\r\n// Crate B:\r\n#[derive(Clone)]\r\nstruct MyWaker {\r\n    state: Unparker\r\n}\r\n\r\nimpl MyWaker {\r\n    fn wake(&self) { self.state.unpark(); }\r\n}\r\n```\r\n\r\nThis would be impossible to create a `RawWaker` for, without:\r\n\r\n- Boxing or Arcing the `Unparker` (adds an unnecessary level of indirection)\r\n- transmuting the `Unparker` to and from `*const()` (unsafe, since it now depends on the private implementation details of `Unparker`).\r\n\r\nHowever, with the proposed traits, if `Unparker` wanted to opt-in to being used in this way, it could:\r\n\r\n```rust\r\nimpl IntoRawPtr for Unparker {\r\n    type Inner = ();\r\n    fn into_raw(self) -> *mut () {\r\n        self.state.into_raw() as *mut()\r\n    }\r\n}\r\n\r\nimpl FromRawPtr for Unparker {\r\n    unsafe fn from_raw(ptr: *mut ()) -> Self {\r\n        Self { state: Arc::from_raw(ptr as *mut State) }\r\n    }\r\n}\r\n```\r\n\r\nThis would allow the `Unparker` to declare its \"pointer-ness\" as part of its public API (without actually exposing any implementation details), enabling its use in `RawWaker` (and other raw pointer APIs, such as C FFI).\r\n\r\n## Alternatives:\r\n\r\n### Third party\r\n\r\nThese traits could, of course, be provided as a 3rd party crate, but I believe these traits are sufficiently \"fundamental\" (similar to `Into`/`From`, `AsRef`, etc) to warrant inclusion directly into the standard library. This would also help different, independent libraries to coordinate with each other through this trait, which is possible but more difficult (due to potential ecosystem fragmentation) with a third party crate. It's also the sort of thing that seems \"too simple\" to require an entire dependency crate.\r\n\r\n### Existing traits\r\n\r\nWhile we could use `Into` / `From`, I don't think that those provide a strong enough contract to ensure the correct use of these, especially `IntoRawPtr` and `FromRawPtr`. Additionally, a type should only be able to be converted through a single pointer type, so having a dedicated trait with an associated type makes the most sense.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75846/timeline", "performed_via_github_app": null, "state_reason": null}