{"url": "https://api.github.com/repos/rust-lang/rust/issues/58194", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58194/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58194/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58194/events", "html_url": "https://github.com/rust-lang/rust/issues/58194", "id": 406933632, "node_id": "MDU6SXNzdWU0MDY5MzM2MzI=", "number": 58194, "title": "Explicit underflow allowed in match ", "user": {"login": "spcan", "id": 32984627, "node_id": "MDQ6VXNlcjMyOTg0NjI3", "avatar_url": "https://avatars.githubusercontent.com/u/32984627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spcan", "html_url": "https://github.com/spcan", "followers_url": "https://api.github.com/users/spcan/followers", "following_url": "https://api.github.com/users/spcan/following{/other_user}", "gists_url": "https://api.github.com/users/spcan/gists{/gist_id}", "starred_url": "https://api.github.com/users/spcan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spcan/subscriptions", "organizations_url": "https://api.github.com/users/spcan/orgs", "repos_url": "https://api.github.com/users/spcan/repos", "events_url": "https://api.github.com/users/spcan/events{/privacy}", "received_events_url": "https://api.github.com/users/spcan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-05T19:15:29Z", "updated_at": "2019-02-05T19:21:23Z", "closed_at": "2019-02-05T19:21:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the code below, when matching an `usize`, the compiler allows for explicit underflow of said `usize` with no compiler error. As you can see this underflow is very explicit and the compiler should be able to notice this. Explicit overflows are also allowed by the compiler.\r\n\r\nWhat is the \"supposed\" behaviour (or undefined behaviour) for this underflow and what kind of runtime error should I expect if `n as usize = 0`?\r\n\r\nI'm just curious of what happens in this case as I'm not an expert on Rust. If there's some documentation of this \"feature\", and already open issue or a RFC on this, please link to it, as I haven't found anything on it.\r\n```\r\nfn my_function(n: MyEnum) {\r\n    let (n1, n2) = match n as usize{\r\n        0..8 => (3, (n-1)*4),\r\n        _     => (4, (n-8)*4),\r\n    }\r\n}\r\n```\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58194/timeline", "performed_via_github_app": null, "state_reason": "completed"}