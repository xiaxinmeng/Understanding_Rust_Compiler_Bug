{"url": "https://api.github.com/repos/rust-lang/rust/issues/71588", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71588/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71588/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71588/events", "html_url": "https://github.com/rust-lang/rust/issues/71588", "id": 607052317, "node_id": "MDU6SXNzdWU2MDcwNTIzMTc=", "number": 71588, "title": "`Cow<'a, B: ToOwned>` is too restritive", "user": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-26T16:27:15Z", "updated_at": "2020-04-29T15:20:10Z", "closed_at": "2020-04-29T15:20:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Please, close this issue if it is a duplicate.\r\n\r\nOr I rather say that `ToOwned` is too restrictive because of its associated type.\r\nThe following snippet can't be implemented because `Cow::Owned(B)` where `B = str` expects only and solely `String` due to `impl ToOwned for str { Owned = String }`.\r\n\r\n```rust\r\nuse std::borrow::Cow;\r\n\r\nstruct StackAsciiStr([u8; 32], usize);\r\n\r\nimpl<'a> From<StackAsciiStr> for Cow<'a, str> {\r\n    fn from(from: StackAsciiStr) -> Self {\r\n        Cow::Owned(from) // Error! `Cow::Owned` expects `String`\r\n    }\r\n}\r\n```\r\n\r\nThis particular situation becomes really annoying when a third-party API expects `T: Into<Cow<'a, str>>` and the only owned thing that can be passed is a `String`.\r\n\r\nSure, it isn't possible to change any of these signatures but maybe this use-case might be another reason for a more flexible \"Cow-like\" struct.", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71588/timeline", "performed_via_github_app": null, "state_reason": "completed"}