{"url": "https://api.github.com/repos/rust-lang/rust/issues/46628", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46628/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46628/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46628/events", "html_url": "https://github.com/rust-lang/rust/issues/46628", "id": 280827279, "node_id": "MDU6SXNzdWUyODA4MjcyNzk=", "number": 46628, "title": "ICE with NLL", "user": {"login": "ia0", "id": 969295, "node_id": "MDQ6VXNlcjk2OTI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/969295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ia0", "html_url": "https://github.com/ia0", "followers_url": "https://api.github.com/users/ia0/followers", "following_url": "https://api.github.com/users/ia0/following{/other_user}", "gists_url": "https://api.github.com/users/ia0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ia0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ia0/subscriptions", "organizations_url": "https://api.github.com/users/ia0/orgs", "repos_url": "https://api.github.com/users/ia0/repos", "events_url": "https://api.github.com/users/ia0/events{/privacy}", "received_events_url": "https://api.github.com/users/ia0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-12-10T17:35:03Z", "updated_at": "2018-01-04T20:00:15Z", "closed_at": "2018-01-04T19:59:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code (in a file named `ice.rs`):\r\n\r\n```rust\r\nuse std::io::BufRead;\r\n\r\nfn main() {\r\n    let stdin = std::io::stdin();\r\n    let line = stdin.lock().lines().next().unwrap().unwrap();\r\n    println!(\"{}\", line);\r\n}\r\n```\r\n\r\nI expected `RUST_BACKTRACE=1 rustc -Z nll ice.rs` to succeed. Instead, I got the following error:\r\n\r\n```\r\nerror: internal compiler error: /checkout/src/librustc_mir/borrow_check/nll/mod.rs:309: region is not an ReVar: ReStatic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.24.0-nightly (6fa53b00e 2017-12-09) running on x86_64-unknown-linux-gnu\r\n\r\nnote: run with `RUST_BACKTRACE=1` for a backtrace\r\n\r\nthread 'rustc' panicked at 'Box<Any>', /checkout/src/librustc_errors/lib.rs:501:8\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:68\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:57\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at /checkout/src/libstd/panicking.rs:381\r\n   3: std::panicking::default_hook\r\n             at /checkout/src/libstd/panicking.rs:391\r\n   4: std::panicking::rust_panic_with_hook\r\n             at /checkout/src/libstd/panicking.rs:577\r\n   5: std::panicking::begin_panic\r\n   6: rustc_errors::Handler::bug\r\n   7: <std::thread::local::LocalKey<T>>::with\r\n   8: rustc::ty::context::tls::with_opt\r\n   9: rustc::session::opt_span_bug_fmt\r\n  10: rustc::session::bug_fmt\r\n  11: rustc::ty::structural_impls::<impl rustc::ty::fold::TypeFoldable<'tcx> for &'tcx rustc::ty::TyS<'tcx>>::super_visit_with\r\n  12: <rustc_mir::borrow_check::nll::constraint_generation::ConstraintGeneration<'cg, 'cx, 'gcx, 'tcx> as rustc::mir::visit::Visitor<'tcx>>::visit_basic_block_data\r\n  13: rustc_mir::borrow_check::do_mir_borrowck\r\n  14: <std::thread::local::LocalKey<T>>::with\r\n  15: rustc::ty::context::GlobalCtxt::enter_local\r\n  16: rustc_mir::borrow_check::mir_borrowck\r\n  17: rustc::ty::maps::<impl rustc::ty::maps::queries::mir_borrowck<'tcx>>::compute_result\r\n  18: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  19: rustc_errors::Handler::track_diagnostics\r\n  20: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::cycle_check\r\n  21: rustc::ty::maps::<impl rustc::ty::maps::queries::mir_borrowck<'tcx>>::force\r\n  22: rustc::ty::maps::<impl rustc::ty::maps::queries::mir_borrowck<'tcx>>::try_get\r\n  23: rustc::ty::maps::TyCtxtAt::mir_borrowck\r\n  24: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::mir_borrowck\r\n  25: rustc_driver::driver::phase_3_run_analysis_passes::{{closure}}::{{closure}}\r\n  26: <std::thread::local::LocalKey<T>>::with\r\n  27: <std::thread::local::LocalKey<T>>::with\r\n  28: rustc::ty::context::TyCtxt::create_and_enter\r\n  29: rustc_driver::driver::compile_input\r\n  30: rustc_driver::run_compiler\r\n```\r\n\r\nMy output of `rustc --version --verbose` is:\r\n\r\n```\r\nrustc 1.24.0-nightly (6fa53b00e 2017-12-09)\r\nbinary: rustc\r\ncommit-hash: 6fa53b00e7450060a3af9b1ef63169db37e589c2\r\ncommit-date: 2017-12-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.24.0-nightly\r\nLLVM version: 4.0\r\n```\r\n\r\n## Probably related context\r\n\r\nI tried the following example (in a file named `weird.rs`):\r\n\r\n```rust\r\nuse std::io::BufRead;\r\n\r\nfn main() {\r\n    let line = std::io::stdin().lock().lines().next().unwrap().unwrap();\r\n    println!(\"{}\", line);\r\n}\r\n```\r\n\r\nI expected `rustc -Z borrowck=compare weird.rs` to succeed. Instead, I got the following error:\r\n\r\n```\r\nerror[E0597]: borrowed value does not live long enough (Ast)\r\n --> weird.rs:4:72\r\n  |\r\n4 |     let line = std::io::stdin().lock().lines().next().unwrap().unwrap();\r\n  |                ---------------- temporary value created here           ^ temporary value dropped here while still borrowed\r\n  |\r\n  = note: values in a scope are dropped in the opposite order they are created\r\n  = note: consider using a `let` binding to increase its lifetime\r\n\r\nerror[E0597]: borrowed value does not live long enough (Mir)\r\n --> weird.rs:4:73\r\n  |\r\n4 |     let line = std::io::stdin().lock().lines().next().unwrap().unwrap();\r\n  |                ---------------- temporary value created here            ^ temporary value dropped here while still borrowed\r\n5 |     println!(\"{}\", line);\r\n6 | }\r\n  | - temporary value needs to live until here\r\n  |\r\n  = note: consider using a `let` binding to increase its lifetime\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\nI tried to understand why the borrow checker does not understand that the lock is dropped before the temporary is dropped. So I wrote the following example (in a file named `test.rs`):\r\n\r\n```rust\r\nstruct Foo(i32);\r\nstruct Lock<'a>(&'a Foo);\r\n\r\nimpl Foo {\r\n    fn new(value: i32) -> Foo { Foo(value) }\r\n    fn lock(&self) -> Lock { Lock(self) }\r\n}\r\n\r\nimpl<'a> Lock<'a> {\r\n    fn read(self) -> i32 { (self.0).0 }\r\n}\r\n\r\nimpl<'a> std::ops::Drop for Lock<'a> {\r\n    fn drop(&mut self) {}\r\n}\r\n\r\nfn main() {\r\n    let value = {\r\n        Foo::new(42).lock().read() // fail\r\n        // let foo = Foo::new(42); foo.lock().read() // fail\r\n        // let value = Foo::new(42).lock().read(); value // fail\r\n        // let foo = Foo::new(42); let value = foo.lock().read(); value // pass\r\n        // let foo = Foo::new(42); let lock = foo.lock(); lock.read() // pass\r\n    };\r\n    println!(\"{}\", value);\r\n}\r\n```\r\n\r\nI expected `rustc -Z borrowck=compare test.rs` to succeed for all versions. Instead, only the last 2 versions succeeded. The first 3 versions failed. Notice how the 3rd and 4th versions just differ by assigning the result value into a variable.\r\n\r\nThen, I stepped on #21114 and considered using NLL and discovered that `rustc -Z nll -Z borrowck=compare test.rs` only fails for AST and not for MIR for the first 3 versions. It still succeeds for the last 2 versions. In particular, for the first 3 versions, `rustc -Z nll -Z borrowck=mir test.rs` succeeds while `rustc -Z nll -Z borrowck=ast test.rs` fails.", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46628/timeline", "performed_via_github_app": null, "state_reason": "completed"}