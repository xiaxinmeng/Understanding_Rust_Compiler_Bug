{"url": "https://api.github.com/repos/rust-lang/rust/issues/83060", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83060/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83060/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83060/events", "html_url": "https://github.com/rust-lang/rust/issues/83060", "id": 830428341, "node_id": "MDU6SXNzdWU4MzA0MjgzNDE=", "number": 83060, "title": "Regressions with large (2-4GB) stack arrays on large stacks", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 289259951, "node_id": "MDU6TGFiZWwyODkyNTk5NTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-help-wanted", "name": "E-help-wanted", "color": "02E10C", "default": false, "description": "Call for participation: Help is requested to fix this issue."}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2021-03-12T20:36:16Z", "updated_at": "2023-04-14T15:06:40Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In the course of responding to someone's question, I was experimenting with large (1-4 GB) arrays on the stack, using threads with large stacks created using `std::thread::Builder::stack_size`.\r\n\r\n### Code\r\n\r\nHere's the baseline test program I used:\r\n\r\n```rust\r\nfn func() {\r\n    const CAP: usize = std::u32::MAX as usize;\r\n    let mut x: [u8; CAP] = [0; CAP];\r\n    x[2] = 123;\r\n    println!(\"{}\", x[2]);\r\n}\r\n\r\nfn main() {\r\n    std::thread::Builder::new()\r\n        .stack_size(5 * 1024 * 1024 * 1024)\r\n        .spawn(func)\r\n        .unwrap()\r\n        .join()\r\n        .unwrap();\r\n}\r\n```\r\n\r\nThis creates a thread with a 5GB stack, allocates a 4GB array on it, sets one value in that array, reads that value back, and prints it. It should always print `123`.\r\n\r\nCall this the 4GB variation. I also tested 2GB and 1GB variations, by changing both references to `CAP` to `CAP>>1` and `CAP>>2` respectively. (I could have changed the constant itself rather than dividing it, but I'm preserving exactly the code I used in case it affects the result.)\r\n\r\n### Rust version info\r\n\r\nI tested two versions of Rust: stable 1.50 (`rustc 1.50.0 (cb75ad5db 2021-02-10)`) and nightly (`rustc 1.52.0-nightly (4a8b6f708 2021-03-11)`).\r\n\r\n<details><summary>stable `rustc --version --verbose`</summary>\r\n\r\n```\r\nrustc 1.50.0 (cb75ad5db 2021-02-10)\r\nbinary: rustc\r\ncommit-hash: cb75ad5db02783e8b0222fee363c5f63f7e2cf5b\r\ncommit-date: 2021-02-10\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.50.0\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>nightly `rustc --version --verbose`</summary>\r\n\r\n```\r\nrustc 1.52.0-nightly (4a8b6f708 2021-03-11)\r\nbinary: rustc\r\ncommit-hash: 4a8b6f708c38342a6c74aa00cf4323774c7381a6\r\ncommit-date: 2021-03-11\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.52.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n</details>\r\n\r\n### Results\r\n\r\nI tested each of these three variations (1GB, 2GB, 4GB) on stable-debug (`cargo run`), stable-release (`cargo run --release`), and nightly-release (`cargo +nightly run --release`), and got three different results.\r\n\r\nOn stable-release, all three variations worked as expected, printing `123`.\r\n\r\nOn stable in debug mode, it works as expected at 1GB and 2GB, but the 4GB version prints a random different value every time (not 123). This seems likely to be a soundness issue, so I'm labeling this I-unsound.\r\n\r\nOn nightly in release mode, the 1GB version works as expected, but the 2GB and 4GB versions both run for an unexpectedly longer time (many seconds) and then get killed by the Linux OOM killer. This is a regression from stable to nightly, so I'm labeling this accordingly.\r\n\r\nI don't know if these come from one or multiple underlying issues. I'm reporting all the details here, but this may need to be split into multiple issues once analyzed further.\r\n\r\nI dumped the generated code of all nine builds using `objdump -d`, and I'm attaching those. The diffs between working and non-working versions seem unusual and potentially relevant.\r\n\r\n(I recommend filtering the objdumps through `sed 's/anon[0-9a-f.]*llvm[0-9a-f.]*/anon-ELIDED-llvm-ELIDED/'` to reduce spurious diff noise; that doesn't eliminate differences in code addresses, but it does eliminate differences in anonymous LLVM symbol names.)\r\n\r\n[objdump-d-stable-debug-1gb.txt](https://github.com/rust-lang/rust/files/6132690/objdump-d-stable-debug-1gb.txt)\r\n[objdump-d-stable-debug-2gb.txt](https://github.com/rust-lang/rust/files/6132691/objdump-d-stable-debug-2gb.txt)\r\n[objdump-d-stable-debug-4gb.txt](https://github.com/rust-lang/rust/files/6132692/objdump-d-stable-debug-4gb.txt)\r\n[objdump-d-stable-release-1gb.txt](https://github.com/rust-lang/rust/files/6132693/objdump-d-stable-release-1gb.txt)\r\n[objdump-d-stable-release-2gb.txt](https://github.com/rust-lang/rust/files/6132694/objdump-d-stable-release-2gb.txt)\r\n[objdump-d-stable-release-4gb.txt](https://github.com/rust-lang/rust/files/6132695/objdump-d-stable-release-4gb.txt)\r\n[objdump-d-nightly-release-1gb.txt](https://github.com/rust-lang/rust/files/6132687/objdump-d-nightly-release-1gb.txt)\r\n[objdump-d-nightly-release-2gb.txt](https://github.com/rust-lang/rust/files/6132688/objdump-d-nightly-release-2gb.txt)\r\n[objdump-d-nightly-release-4gb.txt](https://github.com/rust-lang/rust/files/6132689/objdump-d-nightly-release-4gb.txt)\r\n\r\nThe diff from nightly-release-1gb to nightly-release-2gb shows what look like signs of incorrect sign extension of large values. Note how `sub    $0x40000000,%r11` has become `sub    $0xffffffff80000000,%r11`. Also note in the stack cleanup at the end that `add    $0x40000040,%rsp` has become a two-step `add    $0x7fffffff,%rsp` then `add    $0x41,%rsp`; looks like something in the cleanup broke the large offset into two steps (which isn't necessarily a problem but seems notable).\r\n\r\n<details><summary>highlights from diff of nightly-release-1gb to nightly-release-2gb</summary>\r\n\r\n```diff\r\n@@ -2468,7 +2468,7 @@\r\n 0000000000008380 <_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h12c12c27c7a85101E>:\r\n     8380:      53                      push   %rbx\r\n     8381:      49 89 e3                mov    %rsp,%r11\r\n-    8384:      49 81 eb 00 00 00 40    sub    $0x40000000,%r11\r\n+    8384:      49 81 eb 00 00 00 80    sub    $0xffffffff80000000,%r11\r\n     838b:      48 81 ec 00 10 00 00    sub    $0x1000,%rsp\r\n     8392:      48 c7 04 24 00 00 00    movq   $0x0,(%rsp)\r\n     8399:      00 \r\n@@ -2476,7 +2476,7 @@\r\n     839d:      75 ec                   jne    838b <_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h12c12c27c7a85101E+0xb>\r\n     839f:      48 83 ec 40             sub    $0x40,%rsp\r\n     83a3:      48 8d 5c 24 40          lea    0x40(%rsp),%rbx\r\n-    83a8:      ba ff ff ff 3f          mov    $0x3fffffff,%edx\r\n+    83a8:      ba ff ff ff 7f          mov    $0x7fffffff,%edx\r\n     83ad:      48 89 df                mov    %rbx,%rdi\r\n     83b0:      31 f6                   xor    %esi,%esi\r\n     83b2:      ff 15 a0 07 04 00       callq  *0x407a0(%rip)        # 48b58 <memset@GLIBC_2.2.5>\r\n@@ -2497,12 +2497,11 @@\r\n     83ff:      00 00 \r\n     8401:      48 8d 7c 24 10          lea    0x10(%rsp),%rdi\r\n     8406:      ff 15 7c 0a 04 00       callq  *0x40a7c(%rip)        # 48e88 <_GLOBAL_OFFSET_TABLE_+0x5b0>\r\n-    840c:      48 81 c4 40 00 00 40    add    $0x40000040,%rsp\r\n-    8413:      5b                      pop    %rbx\r\n-    8414:      c3                      retq   \r\n-    8415:      66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\r\n-    841c:      00 00 00 \r\n-    841f:      90                      nop\r\n+    840c:      48 81 c4 ff ff ff 7f    add    $0x7fffffff,%rsp\r\n+    8413:      48 83 c4 41             add    $0x41,%rsp\r\n+    8417:      5b                      pop    %rbx\r\n+    8418:      c3                      retq   \r\n+    8419:      0f 1f 80 00 00 00 00    nopl   0x0(%rax)\r\n \r\n 0000000000008420 <_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h3c355c4098361013E>:\r\n     8420:      48 83 ec 08             sub    $0x8,%rsp\r\n```\r\n\r\n</details>\r\n\r\nThe diff from nightly-release-2gb to nightly-release-4gb shows further signs of incorrect handling of large values; note how `sub    $0xffffffff80000000,%r11` has now become `sub    $0x0,%r11`. Also note in the cleanup that the two-step add has now become a three-step add (`add    $0x7fffffff,%rsp` twice then `add    $0x42,%rsp`). I tested, and if I build code that uses a much larger 200GB array, LLVM does generate a `movabs` into a register and then adds that register. So it looks like the stack cleanup code is correct with large stack arrays, but there's something wrong with the stack setup code and stack offset code.\r\n\r\n<details><summary>highlights from diff of nightly-release-2gb to nightly-release-4gb</summary>\r\n\r\n```diff\r\n@@ -2468,7 +2468,7 @@\r\n 0000000000008380 <_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h12c12c27c7a85101E>:\r\n     8380:\t53                   \tpush   %rbx\r\n     8381:\t49 89 e3             \tmov    %rsp,%r11\r\n-    8384:\t49 81 eb 00 00 00 80 \tsub    $0xffffffff80000000,%r11\r\n+    8384:\t49 81 eb 00 00 00 00 \tsub    $0x0,%r11\r\n     838b:\t48 81 ec 00 10 00 00 \tsub    $0x1000,%rsp\r\n     8392:\t48 c7 04 24 00 00 00 \tmovq   $0x0,(%rsp)\r\n     8399:\t00 \r\n@@ -2476,7 +2476,7 @@\r\n     839d:\t75 ec                \tjne    838b <_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h12c12c27c7a85101E+0xb>\r\n     839f:\t48 83 ec 40          \tsub    $0x40,%rsp\r\n     83a3:\t48 8d 5c 24 40       \tlea    0x40(%rsp),%rbx\r\n-    83a8:\tba ff ff ff 7f       \tmov    $0x7fffffff,%edx\r\n+    83a8:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\r\n     83ad:\t48 89 df             \tmov    %rbx,%rdi\r\n     83b0:\t31 f6                \txor    %esi,%esi\r\n     83b2:\tff 15 a0 07 04 00    \tcallq  *0x407a0(%rip)        # 48b58 <memset@GLIBC_2.2.5>\r\n@@ -2498,10 +2498,10 @@\r\n     8401:\t48 8d 7c 24 10       \tlea    0x10(%rsp),%rdi\r\n     8406:\tff 15 7c 0a 04 00    \tcallq  *0x40a7c(%rip)        # 48e88 <_GLOBAL_OFFSET_TABLE_+0x5b0>\r\n     840c:\t48 81 c4 ff ff ff 7f \tadd    $0x7fffffff,%rsp\r\n-    8413:\t48 83 c4 41          \tadd    $0x41,%rsp\r\n-    8417:\t5b                   \tpop    %rbx\r\n-    8418:\tc3                   \tretq   \r\n-    8419:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\r\n+    8413:\t48 81 c4 ff ff ff 7f \tadd    $0x7fffffff,%rsp\r\n+    841a:\t48 83 c4 42          \tadd    $0x42,%rsp\r\n+    841e:\t5b                   \tpop    %rbx\r\n+    841f:\tc3                   \tretq   \r\n \r\n 0000000000008420 <_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h3c355c4098361013E>:\r\n     8420:\t48 83 ec 08          \tsub    $0x8,%rsp\r\n```\r\n\r\n</details>\r\n\r\nThe diff from stable-debug-2gb to stable-debug-4gb is much noisier due to code addresses, but filtering out code-address-related differences, I want to highlight a portion of the diff that again looks like issues with incorrect handling of large values. Note the changes from large negative stack offsets like `-0x7fffff98(%rsp)` and `-0x7fffff90(%rsp)` to small positive stack offsets like `0x68(%rsp)` and `0x70(%rsp)`. The latter look like they *should* be larger negative values, but they wrapped. I'm wondering if something has treated these stack offsets as 32-bit values.\r\n\r\n<details><summary>highlights from diff of stable-debug-2gb to stable-debug-4gb</summary>\r\n\r\n```diff\r\n--- stable-debug-2gb-edited.txt\t2021-03-12 12:26:03.557845940 -0800\r\n+++ stable-debug-4gb-edited.txt\t2021-03-12 12:26:05.849811731 -0800\r\n@@ -1,52 +1,46 @@\r\n 0000000000007cd0 <_ZN3foo4func17hd776abd5c5604338E>:\r\n-    offs:\tb8 78 00 00 80       \tmov    $0x80000078,%eax\r\n-    offs:\te8 2b 62 03 00       \tcallq  3df05 <__rust_probestack>\r\n+    offs:\t48 b8 78 00 00 00 01 \tmovabs $0x100000078,%rax\r\n+    offs:\t00 00 00 \r\n+    offs:\te8 16 62 03 00       \tcallq  3def5 <__rust_probestack>\r\n     offs:\t48 29 c4             \tsub    %rax,%rsp\r\n-    offs:\t48 8d 35 5c 58 03 00 \tlea    0x3585c(%rip),%rsi        # 3d540 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17hcc1876ba0cca6062E>\r\n+    offs:\t48 8d 35 47 58 03 00 \tlea    0x35847(%rip),%rsi        # 3d530 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17hcc1876ba0cca6062E>\r\n     offs:\t48 8d 44 24 29       \tlea    0x29(%rsp),%rax\r\n     offs:\t31 c9                \txor    %ecx,%ecx\r\n     offs:\t48 89 c7             \tmov    %rax,%rdi\r\n     offs:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\r\n     offs:\t89 ce                \tmov    %ecx,%esi\r\n-    offs:\tba ff ff ff 7f       \tmov    $0x7fffffff,%edx\r\n+    offs:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\r\n     offs:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\r\n-    offs:\te8 5c e3 ff ff       \tcallq  6060 <memset@plt>\r\n+    offs:\te8 57 e3 ff ff       \tcallq  6060 <memset@plt>\r\n     offs:\tc6 44 24 2b 7b       \tmovb   $0x7b,0x2b(%rsp)\r\n     offs:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\r\n     offs:\t48 05 02 00 00 00    \tadd    $0x2,%rax\r\n-    offs:\t48 89 84 24 68 00 00 \tmov    %rax,-0x7fffff98(%rsp)\r\n-    offs:\t80 \r\n-    offs:\t48 8b 84 24 68 00 00 \tmov    -0x7fffff98(%rsp),%rax\r\n-    offs:\t80 \r\n-    offs:\t48 89 84 24 70 00 00 \tmov    %rax,-0x7fffff90(%rsp)\r\n-    offs:\t80 \r\n+    offs:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\r\n+    offs:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\r\n+    offs:\t48 89 44 24 70       \tmov    %rax,0x70(%rsp)\r\n     offs:\t48 89 c7             \tmov    %rax,%rdi\r\n     offs:\t48 8b 74 24 20       \tmov    0x20(%rsp),%rsi\r\n-    offs:\te8 37 ff ff ff       \tcallq  7c70 <_ZN4core3fmt10ArgumentV13new17h9ce77c97586d9adaE>\r\n+    offs:\te8 3b ff ff ff       \tcallq  7c70 <_ZN4core3fmt10ArgumentV13new17h9ce77c97586d9adaE>\r\n     offs:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\r\n     offs:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\r\n-    offs:\t48 8d 05 26 76 04 00 \tlea    0x47626(%rip),%rax        # 4f370 <__do_global_dtors_aux_fini_array_entry+0x20>\r\n+    offs:\t48 8d 05 2a 76 04 00 \tlea    0x4762a(%rip),%rax        # 4f370 <__do_global_dtors_aux_fini_array_entry+0x20>\r\n     offs:\t48 8b 4c 24 10       \tmov    0x10(%rsp),%rcx\r\n-    offs:\t48 89 8c 24 58 00 00 \tmov    %rcx,-0x7fffffa8(%rsp)\r\n-    offs:\t80 \r\n+    offs:\t48 89 4c 24 58       \tmov    %rcx,0x58(%rsp)\r\n     offs:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\r\n-    offs:\t48 89 94 24 60 00 00 \tmov    %rdx,-0x7fffffa0(%rsp)\r\n-    offs:\t80 \r\n-    offs:\t48 8d b4 24 58 00 00 \tlea    -0x7fffffa8(%rsp),%rsi\r\n-    offs:\t80 \r\n-    offs:\t48 8d bc 24 28 00 00 \tlea    -0x7fffffd8(%rsp),%rdi\r\n-    offs:\t80 \r\n+    offs:\t48 89 54 24 60       \tmov    %rdx,0x60(%rsp)\r\n+    offs:\t48 8d 74 24 58       \tlea    0x58(%rsp),%rsi\r\n+    offs:\t48 8d 7c 24 28       \tlea    0x28(%rsp),%rdi\r\n     offs:\t48 89 34 24          \tmov    %rsi,(%rsp)\r\n     offs:\t48 89 c6             \tmov    %rax,%rsi\r\n     offs:\tba 02 00 00 00       \tmov    $0x2,%edx\r\n     offs:\t48 8b 0c 24          \tmov    (%rsp),%rcx\r\n     offs:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\r\n-    offs:\te8 01 0e 00 00       \tcallq  8b90 <_ZN4core3fmt9Arguments6new_v117h797f0a7bd4fbfb7aE>\r\n-    offs:\t48 8d bc 24 28 00 00 \tlea    -0x7fffffd8(%rsp),%rdi\r\n-    offs:\t80 \r\n-    offs:\tff 15 bb 9f 04 00    \tcallq  *0x49fbb(%rip)        # 51d58 <_GLOBAL_OFFSET_TABLE_+0x430>\r\n-    offs:\t48 b8 78 00 00 80 00 \tmovabs $0x80000078,%rax\r\n+    offs:\te8 01 0e 00 00       \tcallq  8b80 <_ZN4core3fmt9Arguments6new_v117h797f0a7bd4fbfb7aE>\r\n+    offs:\t48 8d 7c 24 28       \tlea    0x28(%rsp),%rdi\r\n+    offs:\tff 15 ce 9f 04 00    \tcallq  *0x49fce(%rip)        # 51d58 <_GLOBAL_OFFSET_TABLE_+0x430>\r\n+    offs:\t48 b8 78 00 00 00 01 \tmovabs $0x100000078,%rax\r\n     offs:\t00 00 00 \r\n     offs:\t48 01 c4             \tadd    %rax,%rsp\r\n     offs:\tc3                   \tretq   \r\n-    offs:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\r\n+    offs:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\r\n+    offs:\t00 \r\n```\r\n\r\n</details>", "closed_by": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83060/timeline", "performed_via_github_app": null, "state_reason": null}