{"url": "https://api.github.com/repos/rust-lang/rust/issues/107665", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107665/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107665/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107665/events", "html_url": "https://github.com/rust-lang/rust/issues/107665", "id": 1570953666, "node_id": "I_kwDOAAsO6M5dotnC", "number": 107665, "title": "ICE: Found unstable fingerprints for mir_built", "user": {"login": "RonitNath", "id": 69232394, "node_id": "MDQ6VXNlcjY5MjMyMzk0", "avatar_url": "https://avatars.githubusercontent.com/u/69232394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RonitNath", "html_url": "https://github.com/RonitNath", "followers_url": "https://api.github.com/users/RonitNath/followers", "following_url": "https://api.github.com/users/RonitNath/following{/other_user}", "gists_url": "https://api.github.com/users/RonitNath/gists{/gist_id}", "starred_url": "https://api.github.com/users/RonitNath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RonitNath/subscriptions", "organizations_url": "https://api.github.com/users/RonitNath/orgs", "repos_url": "https://api.github.com/users/RonitNath/repos", "events_url": "https://api.github.com/users/RonitNath/events{/privacy}", "received_events_url": "https://api.github.com/users/RonitNath/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2023-02-04T13:55:10Z", "updated_at": "2023-03-16T22:38:14Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\r\n\r\nA little backstory: this issue ended up fixing itself while I was attempting minimization, so I'm not sure if this bug report is still useful, as I don't know how to replicate the error anymore. I saved a commit when I found the error, but even reverting to it doesn't cause this bug to pop up again. The command used to test was either `cargo test` or `cargo test --bin server my_fn`.\r\n\r\nAt the same time, this was an ICE, so I believe it may still be worth reporting.\r\n\r\nWhat ended up fixing things was turning `use super::*` to `use super::{only_the_imports_I_need}` so I believe there was something that `super::*` was bringing in that was breaking things. Hereafter, when I say \"accidentally fixed the issue\" I'm referring to this fixing of imports.\r\n\r\nIn practice, this is what I was testing (with identifiying information obfuscated):\r\n```\r\n#[tokio::test]\r\nasync fn my_fn() {\r\n    let uid = PERSON_UID;\r\n    let org_id = OID(5555555);\r\n    let result = org::my_fn(uid, org_id).await;\r\n    assert!(result.is_ok());\r\n}\r\n```\r\nWhere org was a module in my project. While minimizing, I brought all the non-external code into that one function my_fn, and still received the error. I'm not including it all since I also found that only this test also caused the error:\r\n```\r\nfn it_works() {\r\n    assert_eq!(2 + 2, 4);\r\n}\r\n```\r\n\r\nI'm including the former still it gives some context but because I believe this was caused by something in `super::*` I would ideally submit literally the entire program ---- but since \"literally the entire program\" is no longer causing the bug to happen for me, I'm not sure what to do. (Literally the entire program in the sense that if I run `cargo test` now, with the git-reverted version of my program, I don't get the same error again.) \r\n\r\nI was still able to test the three main channels before accidentally fixing this though:\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.66.1 (90743e729 2023-01-10)\r\nbinary: rustc\r\ncommit-hash: 90743e7298aca107ddaa0c202a4d3604e29bfeb6\r\ncommit-date: 2023-01-10\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.66.1\r\nLLVM version: 15.0.2\r\n```\r\n\r\nSince this section also asked about the nightly and beta versions, I found the following behavior for both of them:\r\n`cargo test` passes both tests I have, but `cargo test -- --my_fn`  returns:\r\n\r\n```\r\nerror: Unrecognized option: 'my_fn'\r\nerror: test failed, to rerun pass `--bin server`\r\n```\r\n\r\nSo when I then use `cargo test --bin server --my_fn` the test passes fine.\r\n\r\nNightly version:\r\n```\r\nrustc --version --verbose\r\nrustc 1.68.0-nightly (3020239de 2023-01-09)\r\nbinary: rustc\r\ncommit-hash: 3020239de947ec52677e9b4e853a6a9fc073d1f9\r\ncommit-date: 2023-01-09\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.68.0-nightly\r\nLLVM version: 15.0.6\r\n```\r\n\r\nBeta version:\r\n```\r\nrustc --version --verbose\r\nrustc 1.68.0-beta.2 (10b73bf73 2023-02-01)\r\nbinary: rustc\r\ncommit-hash: 10b73bf73a6b770cd92ad8ff538173bc3298411c\r\ncommit-date: 2023-02-01\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.68.0-beta.2\r\nLLVM version: 15.0.6\r\n```\r\n\r\nFor the record, `cargo test --bin server my_fn` gives what looks like the same error (as `cargo test`) on stable. After I accidentally fixed the issue, all three versions are not showing the error. (This was before I accidentally fixed the error)\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: encountered incremental compilation error with mir_built(928f9b8b18a387f3-3f37f3ec84c3dacd)\r\n  |\r\n  = help: This is a known issue with the compiler. Run `cargo clean -p server` or `cargo clean` to allow your project to compile\r\n  = note: Please follow the instructions below to create a bug report with the provided information\r\n  = note: See <https://github.com/rust-lang/rust/issues/84970> for more information\r\n\r\nthread 'rustc' panicked at 'Found unstable fingerprints for mir_built(928f9b8b18a387f3-3f37f3ec84c3dacd): Steal { value: RwLock(RefCell { value: Some(Body { basic_blocks: BasicBlocks { basic_blocks: [BasicBlockData { statements: [StorageLive(_1), StorageLive(_2), _2 = [generator@src\\tests.rs:9:26: 14:2 (#0)]], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:8:1: 8:15 (#10), scope: scope[0] }, kind: _1 = std::future::from_generator::<[static generator@src\\tests.rs:9:26: 14:2]>(move _2) -> [return: bb1, \r\nunwind: bb25] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_2), FakeRead(ForLet(None), _1), StorageLive(_3), _3 = move _1, FakeRead(ForLet(None), _3), StorageLive(_4), StorageLive(_5), _5 = &mut _3], terminator: Some(Terminator { source_info: SourceInfo { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:133:13: 133:65 (#15), scope: scope[5] }, kind: _4 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _5) -> [return: bb2, unwind: bb23] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_5), FakeRead(ForLet(None), _4), StorageLive(_6), StorageLive(_7), _7 = move _4, _6 = move _7 as std::pin::Pin<&mut dyn std::future::Future<Output = ()>> (Pointer(Unsize)), StorageDead(_7), FakeRead(ForLet(None), _6), AscribeUserType(_6, o, UserTypeProjection { base: UserType(2), projs: [] }), StorageLive(_9), StorageLive(_10), StorageLive(_11), StorageLive(_12), StorageLive(_13), StorageLive(_14), StorageLive(_15)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:5: 13:11 (#0), scope: scope[7] }, kind: _15 = tokio::runtime::Builder::new_current_thread() -> [return: bb3, unwind: bb23] }), is_cleanup: false }, BasicBlockData { statements: [_14 = &mut _15], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[7] }, kind: _13 = tokio::runtime::Builder::enable_all(move _14) -> [return: bb4, unwind: bb22] }), is_cleanup: false }, BasicBlockData { statements: [_12 = &mut (*_13), StorageDead(_14)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[7] }, kind: _11 = tokio::runtime::Builder::build(move _12) -> [return: bb5, unwind: bb22] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_12), StorageLive(_16), StorageLive(_17), _17 = const \"Failed building the Runtime\", _16 = &(*_17)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[7] }, kind: _10 = std::result::Result::<Runtime, std::io::Error>::expect(move _11, move _16) -> [return: bb6, unwind: bb21] }), is_cleanup: false }, BasicBlockData { statements: [_9 = &_10, StorageDead(_16), StorageDead(_11), StorageLive(_18), _18 = move _6], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[7] }, kind: _0 = Runtime::block_on::<Pin<&mut dyn Future<Output = ()>>>(move _9, move _18) -> [return: bb7, unwind: bb20] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_18), StorageDead(_9)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: goto -> bb14 }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: drop(_10) -> [return: bb9, unwind: bb22] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_17)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: drop(_15) -> [return: bb10, unwind: bb23] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_15), StorageDead(_13), StorageDead(_10)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: unreachable }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_6), StorageDead(_4)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:1: 14:2 (#0), scope: scope[1] }, kind: drop(_3) -> [return: bb12, unwind: bb24] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_3)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:1: 14:2 (#0), scope: scope[0] }, kind: drop(_1) -> [return: bb13, unwind: bb26] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_1)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:2: 14:2 (#0), scope: scope[0] }, kind: goto -> bb19 }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: drop(_10) -> [return: bb15, unwind: bb22] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_17)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: drop(_15) -> [return: bb16, unwind: bb23] }), is_cleanup: false }, BasicBlockData \r\n{ statements: [StorageDead(_15), StorageDead(_13), StorageDead(_10), StorageDead(_6), StorageDead(_4)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:1: 14:2 (#0), scope: scope[1] }, kind: drop(_3) -> [return: bb17, unwind: bb24] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_3)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:1: 14:2 (#0), scope: scope[0] }, kind: drop(_1) -> [return: bb18, unwind: bb26] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_1)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:2: 14:2 (#0), scope: scope[0] }, kind: goto -> bb19 }), is_cleanup: \r\nfalse }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:2: 14:2 (#0), scope: scope[0] }, kind: return }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: drop(_10) -> \r\nbb22 }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: drop(_11) -> bb22 }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: drop(_15) -> bb23 }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:1: 14:2 (#0), scope: scope[1] }, kind: drop(_3) -> bb24 }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:1: 14:2 (#0), scope: scope[0] }, kind: drop(_1) -> bb26 }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:8:14: 8:15 (#10), scope: scope[0] }, kind: drop(_2) -> bb26 }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:9:7: 14:2 (#0), scope: scope[0] }, kind: resume }), is_cleanup: true }], predecessor_cache: PredecessorCache { cache: OnceCell(Uninit) }, switch_source_cache: SwitchSourceCache { cache: OnceCell(Uninit) }, is_cyclic: GraphIsCyclicCache { cache: OnceCell(Uninit) }, postorder_cache: PostorderCache { cache: OnceCell(Uninit) } \r\n}, phase: Built, pass_count: 1, source: MirSource { instance: Item(WithOptConstParam { did: DefId(0:123 ~ server[1118]::tests::add_signatory#1), const_param_did: None }), promoted: None }, source_scopes: [SourceScopeData { span: src\\tests.rs:9:7: 14:2 (#0), parent_scope: None, inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 0 }, safety: Safe }) }, SourceScopeData { span: src\\tests.rs:9:26: 14:2 (#0), parent_scope: Some(scope[0]), inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 0 }, safety: Safe }) }, SourceScopeData { span: src\\tests.rs:9:26: 14:2 (#0), parent_scope: Some(scope[1]), inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 0 }, safety: Safe }) }, SourceScopeData { span: src\\tests.rs:9:26: 14:2 (#0), parent_scope: Some(scope[2]), inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 0 }, safety: Safe }) }, SourceScopeData { span: src\\tests.rs:9:26: 14:2 (#0), parent_scope: Some(scope[2]), inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 109 }, safety: Safe }) }, SourceScopeData { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:132:22: 134:10 (#15), parent_scope: Some(scope[4]), inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 109 }, safety: ExplicitUnsafe(HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 107 }) }) }, SourceScopeData { span: src\\tests.rs:9:26: 14:2 (#0), parent_scope: Some(scope[3]), inlined: None, inlined_parent_scope: \r\nNone, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 0 }, safety: Safe }) }, \r\nSourceScopeData { span: src\\tests.rs:13:28: 13:29 (#0), parent_scope: Some(scope[6]), inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 153 }, safety: Safe }) }], generator: None, local_decls: [LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: (), user_ty: None, source_info: SourceInfo { span: src\\tests.rs:9:26: 9:26 (#0), scope: scope[0] } }, LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_info: None, opt_match_place: Some((None, src\\tests.rs:8:1: 8:15 (#10))), pat_span: src\\tests.rs:8:1: 8:15 (#10) })))), internal: false, is_block_tail: None, ty: impl std::future::Future<Output = ()>, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:8:1: 8:15 (#10), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: [static generator@src\\tests.rs:9:26: 14:2], user_ty: None, source_info: SourceInfo { span: src\\tests.rs:9:26: 14:2 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: Some(User(Set(Var(VarBindingForm { \r\nbinding_mode: BindByValue(Mut), opt_ty_info: None, opt_match_place: Some((None, C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:128:22: 128:24 (#15))), pat_span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:128:13: 128:19 (#15) })))), internal: false, is_block_tail: None, ty: impl std::future::Future<Output = ()>, user_ty: None, source_info: SourceInfo { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:128:13: 128:19 (#15), scope: scope[1] } }, LocalDecl { mutability: Mut, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Mut), opt_ty_info: None, opt_match_place: Some((None, C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:132:22: 134:10 (#15))), pat_span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:132:13: 132:19 (#15) })))), internal: false, is_block_tail: None, ty: std::pin::Pin<&mut impl std::future::Future<Output = ()>>, user_ty: None, source_info: SourceInfo { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:132:13: 132:19 (#15), scope: scope[4] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:133:13: 133:65 (#15) }), ty: &mut impl std::future::Future<Output = ()>, user_ty: None, source_info: SourceInfo { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:133:57: 133:64 (#15), scope: scope[0] } }, LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_info: None, opt_match_place: Some((None, src\\tests.rs:8:1: 8:15 (#10))), pat_span: src\\tests.rs:8:1: 8:15 (#10) })))), internal: false, is_block_tail: None, ty: std::pin::Pin<&mut dyn std::future::Future<Output = ()>>, user_ty: Some(UserTypeProjections { contents: [(UserTypeProjection { base: UserType(1), projs: [] }, src\\tests.rs:8:1: 8:15 (#10))] }), source_info: SourceInfo { span: src\\tests.rs:8:1: 8:15 (#10), scope: scope[3] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: std::pin::Pin<&mut impl std::future::Future<Output = ()>>, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:8:1: 8:15 (#10), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: true, span: src\\tests.rs:13:28: 13:29 (#0) }), ty: !, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[0] } \r\n}, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: &tokio::runtime::Runtime, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: None, ty: tokio::runtime::Runtime, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: std::result::Result<tokio::runtime::Runtime, std::io::Error>, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: &mut tokio::runtime::Builder, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: &mut tokio::runtime::Builder, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: &mut tokio::runtime::Builder, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: tokio::runtime::Builder, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:5: 13:11 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: &str, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: None, ty: &str, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: std::pin::Pin<&mut dyn std::future::Future<Output = ()>>, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:8:1: 8:15 (#10), scope: scope[0] } }], user_type_annotations: [CanonicalUserTypeAnnotation { user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:9706 ~ core[a1be]::pin::{impl#6}::new_unchecked), UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(2:9704 ~ core[a1be]::pin::{impl#6}), self_ty: std::pin::Pin<^1> }) }) }, span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:133:13: 133:56 (#15), inferred_ty: unsafe fn(&mut impl std::future::Future<Output = ()>) -> std::pin::Pin<&mut impl std::future::Future<Output = ()>> {std::pin::Pin::<&mut impl std::future::Future<Output = ()>>::new_unchecked} }, CanonicalUserTypeAnnotation { user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(std::pin::Pin<&mut dyn std::future::Future<Output = ()>>) }, span: src\\tests.rs:8:1: 8:15 (#10), inferred_ty: std::pin::Pin<&mut dyn std::future::Future<Output = ()>> }, CanonicalUserTypeAnnotation { user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(std::pin::Pin<&mut dyn std::future::Future<Output = ()>>) }, span: src\\tests.rs:8:1: 8:15 (#10), inferred_ty: std::pin::Pin<&mut dyn std::future::Future<Output = ()>> }], arg_count: 0, spread_arg: None, var_debug_info: [VarDebugInfo { name: \"body\", source_info: SourceInfo { span: src\\tests.rs:8:1: 8:15 (#10), scope: scope[1] }, value: _1 }, VarDebugInfo { name: \"body\", source_info: SourceInfo { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:128:13: 128:19 (#15), scope: scope[2] }, value: _3 }, VarDebugInfo { name: \"body\", source_info: SourceInfo { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:132:13: 132:19 (#15), scope: scope[3] }, value: _4 }, VarDebugInfo { name: \"body\", source_info: SourceInfo { span: src\\tests.rs:8:1: 8:15 (#10), scope: scope[6] }, value: _6 }], span: src\\tests.rs:9:7: 14:2 (#0), required_consts: [], is_polymorphic: false, tainted_by_errors: None }) }) }', compiler\\rustc_query_system\\src\\query\\plumbing.rs:658:9\r\nstack backtrace:\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.66.1 (90743e729 2023-01-10) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental=[REDACTED]\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [mir_built] building MIR for `tests::add_signatory`\r\n#1 [mir_const] preparing `tests::add_signatory` for borrow checking\r\n#2 [mir_promoted] processing MIR for `tests::add_signatory`\r\n#3 [mir_borrowck] borrow-checking `tests::add_signatory`\r\n#4 [mir_drops_elaborated_and_const_checked] elaborating drops for `tests::add_signatory`\r\n#5 [optimized_mir] optimizing MIR for `tests::add_signatory`\r\n#6 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\n```\r\n\r\n\r\n<details><summary><strong>Backtrace Full</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'Found unstable fingerprints for mir_built(928f9b8b18a387f3-3f37f3ec84c3dacd): Steal { value: RwL\r\nock(RefCell { value: Some(Body { basic_blocks: BasicBlocks { basic_blocks: [BasicBlockData { statements: [StorageLive(_1), S\r\ntorageLive(_2), _2 = [generator@src\\tests.rs:9:26: 14:2 (#0)]], terminator: Some(Terminator { source_info: SourceInfo { span\r\n: src\\tests.rs:8:1: 8:15 (#10), scope: scope[0] }, kind: _1 = std::future::from_generator::<[static generator@src\\tests.rs:9\r\n:26: 14:2]>(move _2) -> [return: bb1, unwind: bb25] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_2),\r\nFakeRead(ForLet(None), _1), StorageLive(_3), _3 = move _1, FakeRead(ForLet(None), _3), StorageLive(_4), StorageLive(_5), _5\r\n= &mut _3], terminator: Some(Terminator { source_info: SourceInfo { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc\r\n6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:133:13: 133:65 (#15), scope: scope[5] }, kind: _4 = Pin::<&mut impl Future<Outpu\r\nt = ()>>::new_unchecked(move _5) -> [return: bb2, unwind: bb23] }), is_cleanup: false }, BasicBlockData { statements: [Stora\r\ngeDead(_5), FakeRead(ForLet(None), _4), StorageLive(_6), StorageLive(_7), _7 = move _4, _6 = move _7 as std::pin::Pin<&mut d\r\nyn std::future::Future<Output = ()>> (Pointer(Unsize)), StorageDead(_7), FakeRead(ForLet(None), _6), AscribeUserType(_6, o,\r\nUserTypeProjection { base: UserType(2), projs: [] }), StorageLive(_9), StorageLive(_10), StorageLive(_11), StorageLive(_12),\r\n StorageLive(_13), StorageLive(_14), StorageLive(_15)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\te\r\nsts.rs:13:5: 13:11 (#0), scope: scope[7] }, kind: _15 = tokio::runtime::Builder::new_current_thread() -> [return: bb3, unwin\r\nd: bb23] }), is_cleanup: false }, BasicBlockData { statements: [_14 = &mut _15], terminator: Some(Terminator { source_info:\r\nSourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[7] }, kind: _13 = tokio::runtime::Builder::enable_all(move _1\r\n4) -> [return: bb4, unwind: bb22] }), is_cleanup: false }, BasicBlockData { statements: [_12 = &mut (*_13), StorageDead(_14)\r\n], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[7] }, kind: _11\r\n = tokio::runtime::Builder::build(move _12) -> [return: bb5, unwind: bb22] }), is_cleanup: false }, BasicBlockData { stateme\r\nnts: [StorageDead(_12), StorageLive(_16), StorageLive(_17), _17 = const \"Failed building the Runtime\", _16 = &(*_17)], termi\r\nnator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[7] }, kind: _10 = std::\r\nresult::Result::<Runtime, std::io::Error>::expect(move _11, move _16) -> [return: bb6, unwind: bb21] }), is_cleanup: false }\r\n, BasicBlockData { statements: [_9 = &_10, StorageDead(_16), StorageDead(_11), StorageLive(_18), _18 = move _6], terminator:\r\n Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[7] }, kind: _0 = Runtime::blo\r\nck_on::<Pin<&mut dyn Future<Output = ()>>>(move _9, move _18) -> [return: bb7, unwind: bb20] }), is_cleanup: false }, BasicB\r\nlockData { statements: [StorageDead(_18), StorageDead(_9)], terminator: Some(Terminator { source_info: SourceInfo { span: sr\r\nc\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: goto -> bb14 }), is_cleanup: false }, BasicBlockData { statements: []\r\n, terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: dro\r\np(_10) -> [return: bb9, unwind: bb22] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_17)], terminator:\r\nSome(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: drop(_15) -> [ret\r\nurn: bb10, unwind: bb23] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_15), StorageDead(_13), StorageD\r\nead(_10)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] },\r\nkind: unreachable }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_6), StorageDead(_4)], terminator: Some\r\n(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:1: 14:2 (#0), scope: scope[1] }, kind: drop(_3) -> [return: bb\r\n12, unwind: bb24] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_3)], terminator: Some(Terminator { sou\r\nrce_info: SourceInfo { span: src\\tests.rs:14:1: 14:2 (#0), scope: scope[0] }, kind: drop(_1) -> [return: bb13, unwind: bb26]\r\n }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_1)], terminator: Some(Terminator { source_info: SourceI\r\nnfo { span: src\\tests.rs:14:2: 14:2 (#0), scope: scope[0] }, kind: goto -> bb19 }), is_cleanup: false }, BasicBlockData { st\r\natements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7]\r\n}, kind: drop(_10) -> [return: bb15, unwind: bb22] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_17)],\r\n terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: drop\r\n(_15) -> [return: bb16, unwind: bb23] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_15), StorageDead(_\r\n13), StorageDead(_10), StorageDead(_6), StorageDead(_4)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\\r\ntests.rs:14:1: 14:2 (#0), scope: scope[1] }, kind: drop(_3) -> [return: bb17, unwind: bb24] }), is_cleanup: false }, BasicBl\r\nockData { statements: [StorageDead(_3)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:1: 14\r\n:2 (#0), scope: scope[0] }, kind: drop(_1) -> [return: bb18, unwind: bb26] }), is_cleanup: false }, BasicBlockData { stateme\r\nnts: [StorageDead(_1)], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:2: 14:2 (#0), scope: s\r\ncope[0] }, kind: goto -> bb19 }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source\r\n_info: SourceInfo { span: src\\tests.rs:14:2: 14:2 (#0), scope: scope[0] }, kind: return }), is_cleanup: false }, BasicBlockD\r\nata { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: s\r\ncope[7] }, kind: drop(_10) -> bb22 }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { so\r\nurce_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[7] }, kind: drop(_11) -> bb22 }), is_cleanup: tru\r\ne }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:13:28: 13:2\r\n9 (#0), scope: scope[7] }, kind: drop(_15) -> bb23 }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some\r\n(Terminator { source_info: SourceInfo { span: src\\tests.rs:14:1: 14:2 (#0), scope: scope[1] }, kind: drop(_3) -> bb24 }), is\r\n_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src\\tests.r\r\ns:14:1: 14:2 (#0), scope: scope[0] }, kind: drop(_1) -> bb26 }), is_cleanup: true }, BasicBlockData { statements: [], termin\r\nator: Some(Terminator { source_info: SourceInfo { span: src\\tests.rs:8:14: 8:15 (#10), scope: scope[0] }, kind: drop(_2) ->\r\nbb26 }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span:\r\nsrc\\tests.rs:9:7: 14:2 (#0), scope: scope[0] }, kind: resume }), is_cleanup: true }], predecessor_cache: PredecessorCache {\r\ncache: OnceCell(Uninit) }, switch_source_cache: SwitchSourceCache { cache: OnceCell(Uninit) }, is_cyclic: GraphIsCyclicCache\r\n { cache: OnceCell(Uninit) }, postorder_cache: PostorderCache { cache: OnceCell(Uninit) } }, phase: Built, pass_count: 1, so\r\nurce: MirSource { instance: Item(WithOptConstParam { did: DefId(0:123 ~ server[1118]::tests::add_signatory#1), const_param_d\r\nid: None }), promoted: None }, source_scopes: [SourceScopeData { span: src\\tests.rs:9:7: 14:2 (#0), parent_scope: None, inli\r\nned: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: De\r\nfId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 0 }, safety: Safe }) }, SourceScopeData { span: src\\tests.rs:\r\n9:26: 14:2 (#0), parent_scope: Some(scope[0]), inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalDa\r\nta { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 0 }, safet\r\ny: Safe }) }, SourceScopeData { span: src\\tests.rs:9:26: 14:2 (#0), parent_scope: Some(scope[1]), inlined: None, inlined_par\r\nent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[111\r\n8]::tests::add_signatory#1) }, local_id: 0 }, safety: Safe }) }, SourceScopeData { span: src\\tests.rs:9:26: 14:2 (#0), paren\r\nt_scope: Some(scope[2]), inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId\r\n{ owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 0 }, safety: Safe }) }, SourceSc\r\nopeData { span: src\\tests.rs:9:26: 14:2 (#0), parent_scope: Some(scope[2]), inlined: None, inlined_parent_scope: None, local\r\n_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signato\r\nry#1) }, local_id: 109 }, safety: Safe }) }, SourceScopeData { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299d\r\nb9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:132:22: 134:10 (#15), parent_scope: Some(scope[4]), inlined: None, inlined_parent_sco\r\npe: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tes\r\nts::add_signatory#1) }, local_id: 109 }, safety: ExplicitUnsafe(HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]:\r\n:tests::add_signatory#1) }, local_id: 107 }) }) }, SourceScopeData { span: src\\tests.rs:9:26: 14:2 (#0), parent_scope: Some(\r\nscope[3]), inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId { owner: Owner\r\nId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, local_id: 0 }, safety: Safe }) }, SourceScopeData { span\r\n: src\\tests.rs:13:28: 13:29 (#0), parent_scope: Some(scope[6]), inlined: None, inlined_parent_scope: None, local_data: Set(S\r\nourceScopeLocalData { lint_root: HirId { owner: OwnerId { def_id: DefId(0:123 ~ server[1118]::tests::add_signatory#1) }, loc\r\nal_id: 153 }, safety: Safe }) }], generator: None, local_decls: [LocalDecl { mutability: Mut, local_info: None, internal: fa\r\nlse, is_block_tail: None, ty: (), user_ty: None, source_info: SourceInfo { span: src\\tests.rs:9:26: 9:26 (#0), scope: scope[\r\n0] } }, LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_i\r\nnfo: None, opt_match_place: Some((None, src\\tests.rs:8:1: 8:15 (#10))), pat_span: src\\tests.rs:8:1: 8:15 (#10) })))), intern\r\nal: false, is_block_tail: None, ty: impl std::future::Future<Output = ()>, user_ty: None, source_info: SourceInfo { span: sr\r\nc\\tests.rs:8:1: 8:15 (#10), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_ta\r\nil: None, ty: [static generator@src\\tests.rs:9:26: 14:2], user_ty: None, source_info: SourceInfo { span: src\\tests.rs:9:26:\r\n14:2 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: Bi\r\nndByValue(Mut), opt_ty_info: None, opt_match_place: Some((None, C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec8\r\n23\\tokio-1.25.0\\src\\macros\\pin.rs:128:22: 128:24 (#15))), pat_span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db\r\n9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:128:13: 128:19 (#15) })))), internal: false, is_block_tail: None, ty: impl std::future\r\n::Future<Output = ()>, user_ty: None, source_info: SourceInfo { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299\r\ndb9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:128:13: 128:19 (#15), scope: scope[1] } }, LocalDecl { mutability: Mut, local_info:\r\nSome(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Mut), opt_ty_info: None, opt_match_place: Some((None, C:\\Users\\\r\nronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:132:22: 134:10 (#15))), pat_span: C:\\Us\r\ners\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:132:13: 132:19 (#15) })))), interna\r\nl: false, is_block_tail: None, ty: std::pin::Pin<&mut impl std::future::Future<Output = ()>>, user_ty: None, source_info: So\r\nurceInfo { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:132:13: 132:1\r\n9 (#15), scope: scope[4] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailI\r\nnfo { tail_result_is_ignored: false, span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\m\r\nacros\\pin.rs:133:13: 133:65 (#15) }), ty: &mut impl std::future::Future<Output = ()>, user_ty: None, source_info: SourceInfo\r\n { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:133:57: 133:64 (#15),\r\n scope: scope[0] } }, LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(\r\nNot), opt_ty_info: None, opt_match_place: Some((None, src\\tests.rs:8:1: 8:15 (#10))), pat_span: src\\tests.rs:8:1: 8:15 (#10)\r\n })))), internal: false, is_block_tail: None, ty: std::pin::Pin<&mut dyn std::future::Future<Output = ()>>, user_ty: Some(Us\r\nerTypeProjections { contents: [(UserTypeProjection { base: UserType(1), projs: [] }, src\\tests.rs:8:1: 8:15 (#10))] }), sour\r\nce_info: SourceInfo { span: src\\tests.rs:8:1: 8:15 (#10), scope: scope[3] } }, LocalDecl { mutability: Mut, local_info: None\r\n, internal: false, is_block_tail: None, ty: std::pin::Pin<&mut impl std::future::Future<Output = ()>>, user_ty: None, source\r\n_info: SourceInfo { span: src\\tests.rs:8:1: 8:15 (#10), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None,\r\ninternal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: true, span: src\\tests.rs:13:28: 13:29 (#0) }),\r\nty: !, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutab\r\nility: Mut, local_info: None, internal: false, is_block_tail: None, ty: &tokio::runtime::Runtime, user_ty: None, source_info\r\n: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Not, local_info: None, inte\r\nrnal: false, is_block_tail: None, ty: tokio::runtime::Runtime, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:1\r\n3:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, t\r\ny: std::result::Result<tokio::runtime::Runtime, std::io::Error>, user_ty: None, source_info: SourceInfo { span: src\\tests.rs\r\n:13:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None,\r\n ty: &mut tokio::runtime::Builder, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scop\r\ne[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: &mut tokio::runtime::Buil\r\nder, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutabili\r\nty: Mut, local_info: None, internal: false, is_block_tail: None, ty: &mut tokio::runtime::Builder, user_ty: None, source_inf\r\no: SourceInfo { span: src\\tests.rs:13:5: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, int\r\nernal: false, is_block_tail: None, ty: tokio::runtime::Builder, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:\r\n13:5: 13:11 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None,\r\nty: &str, user_ty: None, source_info: SourceInfo { span: src\\tests.rs:13:28: 13:29 (#0), scope: scope[0] } }, LocalDecl { mu\r\ntability: Not, local_info: None, internal: false, is_block_tail: None, ty: &str, user_ty: None, source_info: SourceInfo { sp\r\nan: src\\tests.rs:13:28: 13:29 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: None, internal: false, is_\r\nblock_tail: None, ty: std::pin::Pin<&mut dyn std::future::Future<Output = ()>>, user_ty: None, source_info: SourceInfo { spa\r\nn: src\\tests.rs:8:1: 8:15 (#10), scope: scope[0] } }], user_type_annotations: [CanonicalUserTypeAnnotation { user_ty: Canoni\r\ncal { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }],\r\n value: TypeOf(DefId(2:9706 ~ core[a1be]::pin::{impl#6}::new_unchecked), UserSubsts { substs: [^0], user_self_ty: Some(UserS\r\nelfTy { impl_def_id: DefId(2:9704 ~ core[a1be]::pin::{impl#6}), self_ty: std::pin::Pin<^1> }) }) }, span: C:\\Users\\ronit\\.ca\r\nrgo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:133:13: 133:56 (#15), inferred_ty: unsafe fn(&mu\r\nt impl std::future::Future<Output = ()>) -> std::pin::Pin<&mut impl std::future::Future<Output = ()>> {std::pin::Pin::<&mut\r\nimpl std::future::Future<Output = ()>>::new_unchecked} }, CanonicalUserTypeAnnotation { user_ty: Canonical { max_universe: U\r\n0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(std::pin::Pin<&mut d\r\nyn std::future::Future<Output = ()>>) }, span: src\\tests.rs:8:1: 8:15 (#10), inferred_ty: std::pin::Pin<&mut dyn std::future\r\n::Future<Output = ()>> }, CanonicalUserTypeAnnotation { user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo\r\n{ kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(std::pin::Pin<&mut dyn std::future::Future<Output =\r\n()>>) }, span: src\\tests.rs:8:1: 8:15 (#10), inferred_ty: std::pin::Pin<&mut dyn std::future::Future<Output = ()>> }], arg_c\r\nount: 0, spread_arg: None, var_debug_info: [VarDebugInfo { name: \"body\", source_info: SourceInfo { span: src\\tests.rs:8:1: 8\r\n:15 (#10), scope: scope[1] }, value: _1 }, VarDebugInfo { name: \"body\", source_info: SourceInfo { span: C:\\Users\\ronit\\.carg\r\no\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-1.25.0\\src\\macros\\pin.rs:128:13: 128:19 (#15), scope: scope[2] }, value: _3\r\n }, VarDebugInfo { name: \"body\", source_info: SourceInfo { span: C:\\Users\\ronit\\.cargo\\registry\\src\\github.com-1ecc6299db9ec\r\n823\\tokio-1.25.0\\src\\macros\\pin.rs:132:13: 132:19 (#15), scope: scope[3] }, value: _4 }, VarDebugInfo { name: \"body\", source\r\n_info: SourceInfo { span: src\\tests.rs:8:1: 8:15 (#10), scope: scope[6] }, value: _6 }], span: src\\tests.rs:9:7: 14:2 (#0),\r\nrequired_consts: [], is_polymorphic: false, tainted_by_errors: None }) }) }', compiler\\rustc_query_system\\src\\query\\plumbing\r\n.rs:658:9\r\nstack backtrace:\r\n   0:     0x7ffcf6ee9a62 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hc97dbc4fe64c9\r\ne1d\r\n   1:     0x7ffcf6f256db - core::fmt::write::ha369a394538739aa\r\n   2:     0x7ffcf6edc18a - <std::io::IoSlice as core::fmt::Debug>::fmt::h479b71bd3dadc1d1\r\n   3:     0x7ffcf6ee97ab - std::sys::common::alloc::realloc_fallback::h233ebec439b629e2\r\n   4:     0x7ffcf6eed109 - std::panicking::default_hook::h0ab9e14ad869b271\r\n   5:     0x7ffcf6eecd8a - std::panicking::default_hook::h0ab9e14ad869b271\r\n   6:     0x7ffc91901d6e - rustc_driver[e9de03b45d14c171]::describe_lints\r\n   7:     0x7ffcf6eeda60 - std::panicking::rust_panic_with_hook::he7a40468954ae645\r\n   8:     0x7ffcf6eed7bd - <std::panicking::begin_panic_handler::StrPanicPayload as core::panic::BoxMeUp>::get::h44bc3105923\r\nadd49\r\n   9:     0x7ffcf6eea76f - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hc97dbc4fe64c9\r\ne1d\r\n  10:     0x7ffcf6eed480 - rust_begin_unwind\r\n  11:     0x7ffcf6f5b5f5 - core::panicking::panic_fmt::h1862038ee9bad685\r\n  12:     0x7ffc93c9faa0 - rustc_query_system[7839065ace8a0431]::query::plumbing::incremental_verify_ich_cold\r\n  13:     0x7ffc93586554 - <alloc[e204b295117b8aa2]::vec::Vec<u8> as rustc_serialize[5fa760e9e07a81b9]::serialize::Decodable\r\n<rustc_query_impl[d4313462cac9d76]::on_disk_cache::CacheDecoder>>::decode\r\n  14:     0x7ffc8fcc1b46 - <&rustc_index[b766228394234ab1]::vec::IndexVec<rustc_middle[18c13081b174ae21]::mir::Promoted, rus\r\ntc_middle[18c13081b174ae21]::mir::Body> as rustc_serialize[5fa760e9e07a81b9]::serialize::Decodable<rustc_query_impl[d4313462\r\ncac9d76]::on_disk_cache::CacheDecoder>>::decode\r\n  15:     0x7ffc912bb021 - <rustc_span[c61407085697e619]::def_id::DefId as rustc_serialize[5fa760e9e07a81b9]::serialize::Enc\r\nodable<rustc_query_impl[d4313462cac9d76]::on_disk_cache::CacheEncoder>>::encode\r\n  16:     0x7ffc911e6968 - <rustc_query_impl[d4313462cac9d76]::Queries as rustc_middle[18c13081b174ae21]::ty::query::QueryEn\r\ngine>::as_any\r\n  17:     0x7ffc90c74ed0 - <rustc_mir_transform[6e221779ab8adbe]::lower_intrinsics::LowerIntrinsics as rustc_middle[18c13081\r\nb174ae21]::mir::MirPass>::run_pass\r\n  18:     0x7ffc93439b32 - <rustc_mir_dataflow[d6a7f112d5d60ad2]::framework::EffectIndex as core[a1be09f172195029]::fmt::Deb\r\nug>::fmt\r\n  19:     0x7ffc8fcc1b1b - <&rustc_index[b766228394234ab1]::vec::IndexVec<rustc_middle[18c13081b174ae21]::mir::Promoted, rus\r\ntc_middle[18c13081b174ae21]::mir::Body> as rustc_serialize[5fa760e9e07a81b9]::serialize::Decodable<rustc_query_impl[d4313462\r\ncac9d76]::on_disk_cache::CacheDecoder>>::decode\r\n  20:     0x7ffc912bb021 - <rustc_span[c61407085697e619]::def_id::DefId as rustc_serialize[5fa760e9e07a81b9]::serialize::Enc\r\nodable<rustc_query_impl[d4313462cac9d76]::on_disk_cache::CacheEncoder>>::encode\r\n  21:     0x7ffc911e6ab7 - <rustc_query_impl[d4313462cac9d76]::Queries as rustc_middle[18c13081b174ae21]::ty::query::QueryEn\r\ngine>::as_any\r\n  22:     0x7ffc90c76619 - <rustc_mir_transform[6e221779ab8adbe]::lower_intrinsics::LowerIntrinsics as rustc_middle[18c13081\r\nb174ae21]::mir::MirPass>::run_pass\r\n  23:     0x7ffc93439c36 - <rustc_mir_dataflow[d6a7f112d5d60ad2]::framework::EffectIndex as core[a1be09f172195029]::fmt::Deb\r\nug>::fmt\r\n  24:     0x7ffc8fcc1fd8 - <&rustc_index[b766228394234ab1]::vec::IndexVec<rustc_middle[18c13081b174ae21]::mir::Promoted, rus\r\ntc_middle[18c13081b174ae21]::mir::Body> as rustc_serialize[5fa760e9e07a81b9]::serialize::Decodable<rustc_query_impl[d4313462\r\ncac9d76]::on_disk_cache::CacheDecoder>>::decode\r\n  25:     0x7ffc912bcf68 - <rustc_span[c61407085697e619]::def_id::DefId as rustc_serialize[5fa760e9e07a81b9]::serialize::Enc\r\nodable<rustc_query_impl[d4313462cac9d76]::on_disk_cache::CacheEncoder>>::encode\r\n  26:     0x7ffc911e70a0 - <rustc_query_impl[d4313462cac9d76]::Queries as rustc_middle[18c13081b174ae21]::ty::query::QueryEn\r\ngine>::as_any\r\n  27:     0x7ffc90f5fc74 - <rustc_mir_build[c0d76862c1fc0ac8]::build::expr::as_place::PlaceBuilder as core[a1be09f172195029]\r\n::convert::From<rustc_middle[18c13081b174ae21]::mir::Local>>::from\r\n  28:     0x7ffc90f5f668 - <rustc_mir_build[c0d76862c1fc0ac8]::build::expr::as_place::PlaceBuilder as core[a1be09f172195029]\r\n::convert::From<rustc_middle[18c13081b174ae21]::mir::Local>>::from\r\n  29:     0x7ffc9343a7a3 - <rustc_mir_dataflow[d6a7f112d5d60ad2]::framework::EffectIndex as core[a1be09f172195029]::fmt::Deb\r\nug>::fmt\r\n  30:     0x7ffc8fcc8bda - <&rustc_index[b766228394234ab1]::vec::IndexVec<rustc_middle[18c13081b174ae21]::mir::Promoted, rus\r\ntc_middle[18c13081b174ae21]::mir::Body> as rustc_serialize[5fa760e9e07a81b9]::serialize::Decodable<rustc_query_impl[d4313462\r\ncac9d76]::on_disk_cache::CacheDecoder>>::decode\r\n  31:     0x7ffc912d03c9 - <rustc_span[c61407085697e619]::def_id::DefId as rustc_serialize[5fa760e9e07a81b9]::serialize::Enc\r\nodable<rustc_query_impl[d4313462cac9d76]::on_disk_cache::CacheEncoder>>::encode\r\n  32:     0x7ffc911e8d25 - <rustc_query_impl[d4313462cac9d76]::Queries as rustc_middle[18c13081b174ae21]::ty::query::QueryEn\r\ngine>::as_any\r\n  33:     0x7ffc917ac3ef - <rustc_middle[18c13081b174ae21]::ty::context::TyCtxt>::mir_borrowck_opt_const_arg\r\n  34:     0x7ffc90c77fd7 - <rustc_mir_transform[6e221779ab8adbe]::lower_intrinsics::LowerIntrinsics as rustc_middle[18c13081\r\nb174ae21]::mir::MirPass>::run_pass\r\n  35:     0x7ffc8fb23002 - <rustc_const_eval[3c1611e98d29229f]::transform::check_consts::resolver::State as core[a1be09f1721\r\n95029]::clone::Clone>::clone_from\r\n  36:     0x7ffc8fb9b545 - <&rustc_index[b766228394234ab1]::vec::IndexVec<rustc_middle[18c13081b174ae21]::mir::Promoted, rus\r\ntc_middle[18c13081b174ae21]::mir::Body> as rustc_serialize[5fa760e9e07a81b9]::serialize::Decodable<rustc_query_impl[d4313462\r\ncac9d76]::on_disk_cache::CacheDecoder>>::decode\r\n  37:     0x7ffc912bb26d - <rustc_span[c61407085697e619]::def_id::DefId as rustc_serialize[5fa760e9e07a81b9]::serialize::Enc\r\nodable<rustc_query_impl[d4313462cac9d76]::on_disk_cache::CacheEncoder>>::encode\r\n  38:     0x7ffc911e6e1b - <rustc_query_impl[d4313462cac9d76]::Queries as rustc_middle[18c13081b174ae21]::ty::query::QueryEn\r\ngine>::as_any\r\n  39:     0x7ffc90c7b6c7 - <rustc_mir_transform[6e221779ab8adbe]::lower_intrinsics::LowerIntrinsics as rustc_middle[18c13081\r\nb174ae21]::mir::MirPass>::run_pass\r\n  40:     0x7ffc8fb25031 - <rustc_const_eval[3c1611e98d29229f]::transform::check_consts::resolver::State as core[a1be09f1721\r\n95029]::clone::Clone>::clone_from\r\n  41:     0x7ffc8fbade25 - <&rustc_index[b766228394234ab1]::vec::IndexVec<rustc_middle[18c13081b174ae21]::mir::Promoted, rus\r\ntc_middle[18c13081b174ae21]::mir::Body> as rustc_serialize[5fa760e9e07a81b9]::serialize::Decodable<rustc_query_impl[d4313462\r\ncac9d76]::on_disk_cache::CacheDecoder>>::decode\r\n  42:     0x7ffc912f1bc0 - <rustc_span[c61407085697e619]::def_id::DefId as rustc_serialize[5fa760e9e07a81b9]::serialize::Enc\r\nodable<rustc_query_impl[d4313462cac9d76]::on_disk_cache::CacheEncoder>>::encode\r\n  43:     0x7ffc911e7208 - <rustc_query_impl[d4313462cac9d76]::Queries as rustc_middle[18c13081b174ae21]::ty::query::QueryEn\r\ngine>::as_any\r\n  44:     0x7ffc917cad2d - <rustc_middle[18c13081b174ae21]::ty::context::TyCtxt>::instance_mir\r\n  45:     0x7ffc90c49f31 - <rustc_monomorphize[c5e62122062f1e21]::collector::MirNeighborCollector as rustc_middle[18c13081b1\r\n74ae21]::mir::visit::Visitor>::visit_operand\r\n  46:     0x7ffc90c46fb5 - <rustc_monomorphize[c5e62122062f1e21]::collector::MirNeighborCollector as rustc_middle[18c13081b1\r\n74ae21]::mir::visit::Visitor>::visit_operand\r\n  47:     0x7ffc90c473a9 - <rustc_monomorphize[c5e62122062f1e21]::collector::MirNeighborCollector as rustc_middle[18c13081b1\r\n74ae21]::mir::visit::Visitor>::visit_operand\r\n  48:     0x7ffc90c473a9 - <rustc_monomorphize[c5e62122062f1e21]::collector::MirNeighborCollector as rustc_middle[18c13081b1\r\n74ae21]::mir::visit::Visitor>::visit_operand\r\n  49:     0x7ffc8f8f0b36 - rustc_monomorphize[c5e62122062f1e21]::provide\r\n  50:     0x7ffc8f8f5dfd - <rustc_monomorphize[c5e62122062f1e21]::partitioning::default::DefaultPartitioning as rustc_monomo\r\nrphize[c5e62122062f1e21]::partitioning::Partitioner>::place_inlined_mono_items\r\n  51:     0x7ffc8f8eef41 - <rustc_hir_analysis[22eaa20e65e5d190]::constrained_generic_params::ParameterCollector as rustc_mi\r\nddle[18c13081b174ae21]::ty::visit::TypeVisitor>::visit_const\r\n  52:     0x7ffc8fb260c5 - <rustc_const_eval[3c1611e98d29229f]::transform::check_consts::resolver::State as core[a1be09f1721\r\n95029]::clone::Clone>::clone_from\r\n  53:     0x7ffc8fbca0f3 - <&rustc_index[b766228394234ab1]::vec::IndexVec<rustc_middle[18c13081b174ae21]::mir::Promoted, rus\r\ntc_middle[18c13081b174ae21]::mir::Body> as rustc_serialize[5fa760e9e07a81b9]::serialize::Decodable<rustc_query_impl[d4313462\r\ncac9d76]::on_disk_cache::CacheDecoder>>::decode\r\n  54:     0x7ffc8fcaacb6 - <&rustc_index[b766228394234ab1]::vec::IndexVec<rustc_middle[18c13081b174ae21]::mir::Promoted, rus\r\ntc_middle[18c13081b174ae21]::mir::Body> as rustc_serialize[5fa760e9e07a81b9]::serialize::Decodable<rustc_query_impl[d4313462\r\ncac9d76]::on_disk_cache::CacheDecoder>>::decode\r\n  55:     0x7ffc8fce9795 - <&rustc_index[b766228394234ab1]::vec::IndexVec<rustc_middle[18c13081b174ae21]::mir::Promoted, rus\r\ntc_middle[18c13081b174ae21]::mir::Body> as rustc_serialize[5fa760e9e07a81b9]::serialize::Decodable<rustc_query_impl[d4313462\r\ncac9d76]::on_disk_cache::CacheDecoder>>::decode\r\n  56:     0x7ffc8fb387aa - <rustc_query_impl[d4313462cac9d76]::Queries as rustc_middle[18c13081b174ae21]::ty::query::QueryEn\r\ngine>::try_mark_green\r\n  57:     0x7ffc8f18fdf7 - <rustc_codegen_llvm[17e8957a58a1ad3e]::llvm_::ffi::Type>::i8p_llcx\r\n  58:     0x7ffc8f17f4bc - <rustc_codegen_llvm[17e8957a58a1ad3e]::LlvmCodegenBackend as rustc_codegen_ssa[4b7a4ae8d1514f58]:\r\n:traits::backend::CodegenBackend>::codegen_crate\r\n  59:     0x7ffc8f169264 - rustc_interface[10a7111f9310fd6d]::passes::analysis\r\n  60:     0x7ffc8f15c639 - <rustc_interface[10a7111f9310fd6d]::passes::LintStoreExpandImpl as rustc_expand[c56eb5aee4619b21]\r\n::base::LintStoreExpand>::pre_expansion_lint\r\n  61:     0x7ffc8f14b04c - <rustc_interface[10a7111f9310fd6d]::queries::Queries>::ongoing_codegen\r\n  62:     0x7ffc8f11c5c3 - <rustc_middle[18c13081b174ae21]::ty::SymbolName as core[a1be09f172195029]::fmt::Display>::fmt\r\n  63:     0x7ffc8f11b6dd - rustc_driver[e9de03b45d14c171]::args::arg_expand_all\r\n  64:     0x7ffc8f10c809 - <unknown>\r\n  65:     0x7ffc8f103990 - <unknown>\r\n  66:     0x7ffcf6efeabc - std::sys::windows::thread::Thread::new::haf1327b4da6a4ac1\r\n  67:     0x7ffd35c37614 - BaseThreadInitThunk\r\n  68:     0x7ffd37a226a1 - RtlUserThreadStart\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&tem\r\nplate=ice.md\r\n\r\nnote: rustc 1.66.1 (90743e729 2023-01-10) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental=[REDACTED]\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [mir_built] building MIR for `tests::add_signatory`\r\n#1 [mir_const] preparing `tests::add_signatory` for borrow checking\r\n#2 [mir_promoted] processing MIR for `tests::add_signatory`\r\n#3 [mir_borrowck] borrow-checking `tests::add_signatory`\r\n#4 [mir_drops_elaborated_and_const_checked] elaborating drops for `tests::add_signatory`\r\n#5 [optimized_mir] optimizing MIR for `tests::add_signatory`\r\n#6 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\nwarning: `server` (bin \"server\" test) generated 22 warnings\r\nerror: could not compile `server` due to previous error; 22 warnings emitted\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nThis was the first time I'm submitting a bug report for anything, so any feedback is appreciated. Thank you! \r\nAnd I apologize once more that I'm unable to find a code snippet which replicates the error. Unreplicable errors are the worst.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107665/timeline", "performed_via_github_app": null, "state_reason": null}