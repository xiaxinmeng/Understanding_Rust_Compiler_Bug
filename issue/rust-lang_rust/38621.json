{"url": "https://api.github.com/repos/rust-lang/rust/issues/38621", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38621/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38621/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38621/events", "html_url": "https://github.com/rust-lang/rust/issues/38621", "id": 197623007, "node_id": "MDU6SXNzdWUxOTc2MjMwMDc=", "number": 38621, "title": "Error about \"does not live long enough\" could be more helpful", "user": {"login": "learnopengles", "id": 1077059, "node_id": "MDQ6VXNlcjEwNzcwNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1077059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/learnopengles", "html_url": "https://github.com/learnopengles", "followers_url": "https://api.github.com/users/learnopengles/followers", "following_url": "https://api.github.com/users/learnopengles/following{/other_user}", "gists_url": "https://api.github.com/users/learnopengles/gists{/gist_id}", "starred_url": "https://api.github.com/users/learnopengles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/learnopengles/subscriptions", "organizations_url": "https://api.github.com/users/learnopengles/orgs", "repos_url": "https://api.github.com/users/learnopengles/repos", "events_url": "https://api.github.com/users/learnopengles/events{/privacy}", "received_events_url": "https://api.github.com/users/learnopengles/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-26T22:08:59Z", "updated_at": "2022-12-15T20:03:28Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "When we receive a \"`(var)` does not live long enough\" error message, the compiler doesn't always tell you which line is actually causing the problem. For example (extracted from a larger program):\r\n\r\n```\r\nuse std::collections::HashMap;\r\nuse std::env;\r\nuse std::fs::File;\r\nuse std::io;\r\nuse std::io::{BufRead, BufReader, BufWriter, Read, Seek, SeekFrom, Write};\r\n\r\nfn main() {\r\n    let args: Vec<String> = env::args().collect();\r\n    match args.len() {\r\n        3 => {\r\n            let in_name = &args[1];\r\n            let out_name = &args[2];\r\n            assemble(in_name, out_name).unwrap();\r\n        }\r\n        _ => {\r\n            println!(\"Usage: hack-asm input_file output_file\");\r\n        }\r\n    }\r\n}\r\n\r\nfn assemble(in_name: &str, out_name: &str) -> io::Result<()> {\r\n    let in_file = try!(File::open(in_name));\r\n    let out_file = try!(File::create(out_name));\r\n\r\n    let mut reader = BufReader::new(in_file);\r\n    let mut writer = BufWriter::new(out_file);\r\n\r\n    // First, build up all labels\r\n    let mut label_map = HashMap::new();\r\n    let mut instruction_address = 0;\r\n\r\n    for line in reader.by_ref().lines() {\r\n        let line = line.unwrap();\r\n        let mut line = line.trim();     \r\n\r\n        // Strip any comments\r\n        if let Some(idx_comment) = line.find(\"//\") {\r\n            line = &line[0..idx_comment].trim();\r\n        }\r\n\r\n        if line.is_empty() {\r\n            // Not an instruction, skip.\r\n        } else if line.starts_with('(') && line.ends_with(')') {\r\n            let label = &line[1..line.len() - 1];\r\n\r\n            if label.is_empty() {\r\n                panic!(\"Empty label\");\r\n            } else if let Some(label) = label_map.insert(label, instruction_address) {\r\n                panic!(\"Label {:?} was already defined.\", label);\r\n            }\r\n        } else {\r\n            // Assume it's an instruction. If it's not, validation will fail further below anyways.\r\n            instruction_address += 1;\r\n        }\r\n    }\r\n\r\n    Ok(())\r\n}\r\n```\r\n\r\nCompiling this will give the following error:\r\n\r\n```\r\nerror: `line` does not live long enough\r\n  --> main.rs:57:5\r\n   |\r\n36 |         let mut line = line.trim();     \r\n   |                        ---- borrow occurs here\r\n...\r\n57 |     }\r\n   |     ^ `line` dropped here while still borrowed\r\n...\r\n60 | }\r\n   | - borrowed value needs to live until here\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nNeither of the shown lines are that close to where the problem actually is, on line 50:\r\n\r\n`} else if let Some(label) = label_map.insert(label, instruction_address) {`\r\n\r\nChanging `label` to `label.to_string()` fixes the error and allows the borrow check to pass.\r\n\r\nIt would definitely be an improvement (particularly for beginners to the language) if the compiler could tell you which line is holding onto the value, preventing the borrow check from passing.\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38621/timeline", "performed_via_github_app": null, "state_reason": null}