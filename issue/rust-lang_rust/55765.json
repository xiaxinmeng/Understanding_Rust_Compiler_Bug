{"url": "https://api.github.com/repos/rust-lang/rust/issues/55765", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55765/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55765/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55765/events", "html_url": "https://github.com/rust-lang/rust/issues/55765", "id": 378417094, "node_id": "MDU6SXNzdWUzNzg0MTcwOTQ=", "number": 55765, "title": "ICE compiler panics on type inference when using proc macro (stable)", "user": {"login": "RustyYato", "id": 16103364, "node_id": "MDQ6VXNlcjE2MTAzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/16103364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RustyYato", "html_url": "https://github.com/RustyYato", "followers_url": "https://api.github.com/users/RustyYato/followers", "following_url": "https://api.github.com/users/RustyYato/following{/other_user}", "gists_url": "https://api.github.com/users/RustyYato/gists{/gist_id}", "starred_url": "https://api.github.com/users/RustyYato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RustyYato/subscriptions", "organizations_url": "https://api.github.com/users/RustyYato/orgs", "repos_url": "https://api.github.com/users/RustyYato/repos", "events_url": "https://api.github.com/users/RustyYato/events{/privacy}", "received_events_url": "https://api.github.com/users/RustyYato/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-07T18:37:52Z", "updated_at": "2019-08-06T12:07:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was working on yet another implementation of the builder pattern, and pushing the type system to hold info about whether a type has been initialized. I used a proc macro to handle the boiler plate code. When I was testing it I ran into this ICE.\r\n\r\nThe code I wrote should fail to compile, but it shouldn't cause an ICE.\r\n\r\nI tried creating a minimal example, but when I inline the macro call, the ICE disappears.\r\n\r\n```rust\r\n#[macro_use]\r\nextern crate partial_init_derive;\r\nextern crate partial_init_core;\r\n\r\n#[derive(PartialInit)]\r\nstruct Foo<T> {\r\n    thing: (T,),\r\n}\r\n\r\nfn main() {\r\n    let foo = <Foo<_> as partial_init_core::PartialInit>::uninit().build();\r\n}\r\n```\r\nnote removing type inference by changing `main` to the code below, also gets rid of hte ICE.\r\n```rust\r\nfn main() {\r\n    let foo = <Foo<()> as partial_init_core::PartialInit>::uninit().build();\r\n}\r\n```\r\n\r\n\r\nThe `PartialInit` derive macro creates this code (comments have been stripped for brevity):\r\n\r\n```rust\r\n#[allow(non_camel_case_types)]\r\nmod __Foo__ {\r\n    pub enum thing {}\r\n    impl ::partial_init_core::FieldName for thing {}\r\n    pub mod uninit {\r\n        use super::super::*;\r\n        pub type thing<T> = ::partial_init_core::Uninit<super::thing, T>;\r\n    }\r\n}\r\n\r\n#[allow(non_camel_case_types)]\r\n#[derive(Clone, Copy)]\r\nstruct PartialFoo<T, thing: ::partial_init_core::MaybeInit<__Foo__::thing, T>> {\r\n    thing: thing,\r\n    __phantom_data__partial_init_: ::partial_init_core::PhantomData<(T)>,\r\n}\r\n\r\n#[allow(non_camel_case_types)]\r\nimpl<T> ::partial_init_core::PartialInit for Foo<T> {\r\n    type Uninitialized = PartialFoo<T, ::partial_init_core::Uninit<__Foo__::thing, T>>;\r\n\r\n    #[inline(always)]\r\n    fn uninit() -> Self::Uninitialized {\r\n        Default::default()\r\n    }\r\n}\r\n\r\nimpl<T> Default for PartialFoo<T, ::partial_init_core::Uninit<__Foo__::thing, T>> {\r\n    #[inline(always)]\r\n    fn default() -> Self {\r\n        PartialFoo {\r\n            __phantom_data__partial_init_: Default::default(),\r\n            thing: Default::default(),\r\n        }\r\n    }\r\n}\r\n#[allow(non_camel_case_types)]\r\nimpl<T, thing: ::partial_init_core::Init<__Foo__::thing, T>> PartialFoo<T, thing> {\r\n    #[inline(always)]\r\n    fn build(self) -> Foo<T> {\r\n        Foo {\r\n            thing: ::partial_init_core::Init::get(self.thing),\r\n        }\r\n    }\r\n}\r\n\r\n#[allow(non_camel_case_types)]\r\nimpl<T> PartialFoo<T, ::partial_init_core::Uninit<__Foo__::thing, T>> {\r\n    #[inline(always)]\r\n    fn thing<thing: ::partial_init_core::Init<__Foo__::thing, T>>(\r\n        self,\r\n        thing: thing,\r\n    ) -> PartialFoo<T, thing> {\r\n        PartialFoo {\r\n            __phantom_data__partial_init_: Default::default(),\r\n            thing,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd the relevant code can be seen [here](https://github.com/KrishnaSannasi/partial-init/tree/Rust-ICE-Issue).\r\n\r\nthe `run` crate contains the test code\r\nthe `partial-init-core` contains necessary traits and structs for partial-init-derive\r\nthe `partial-init-derive` crate contains the proc-macro\r\n\r\nstack trace\r\n```\r\nerror: internal compiler error: librustc\\traits\\select.rs:3189: Impl DefId(10/0:33 ~ partial_init_core[903a]::init_impl[0]::{{impl}}[4]) was matchable against Obligation(predicate=Binder(TraitPredicate(<partial_init_core::Uninit<__Foo__::thing, (_,)> as partial_init_core::Init<__Foo__::thing, (_,)>>)),depth=0) but now is not\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors\\lib.rs:587:9\r\nstack backtrace:\r\n   0: <std::sys::windows::args::Args as core::ops::drop::Drop>::drop\r\n   1: <std::path::PathBuf as core::convert::From<std::ffi::os_str::OsString>>::from\r\n   2: std::panicking::take_hook\r\n   3: std::panicking::take_hook\r\n   4: <rustc::ty::sty::Binder<rustc::ty::ProjectionPredicate<'tcx>> as rustc::ty::ToPredicate<'tcx>>::to_predicate\r\n   5: std::panicking::rust_panic_with_hook\r\n   6: <rustc_errors::diagnostic::SubDiagnostic as core::fmt::Debug>::fmt\r\n   7: rustc_errors::Handler::bug\r\n   8: rustc::ty::context::tls::track_diagnostic\r\n   9: rustc::ty::context::tls::track_diagnostic\r\n  10: rustc::ty::context::tls::track_diagnostic\r\n  11: rustc::ty::context::tls::track_diagnostic\r\n  12: rustc::util::bug::bug_fmt\r\n  13: rustc::util::bug::bug_fmt\r\n  14: rustc::infer::InferCtxt::commit_from\r\n  15: rustc::traits::select::SelectionContext::coinductive_predicate\r\n  16: rustc::traits::select::SelectionContext::select\r\n  17: rustc::ty::context::TypeckTables::expr_ty\r\n  18: <rustc::traits::fulfill::FulfillmentContext<'tcx> as rustc::traits::engine::TraitEngine<'tcx>>::select_where_possible\r\n  19: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  20: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  21: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  22: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  23: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  24: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  25: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  26: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  27: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  28: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  29: <rustc_typeck::check::GatherLocalsVisitor<'a, 'gcx, 'tcx> as rustc::hir::intravisit::Visitor<'gcx>>::visit_pat\r\n  30: <rustc_typeck::check::method::suggest::TraitInfo as core::cmp::PartialOrd>::partial_cmp\r\n  31: <rustc_typeck::astconv::Bounds<'tcx> as core::fmt::Debug>::fmt\r\n  32: <rustc_typeck::check::CheckItemTypesVisitor<'a, 'tcx> as rustc::hir::itemlikevisit::ItemLikeVisitor<'tcx>>::visit_item\r\n  33: <rustc::traits::query::dropck_outlives::DropckOutlivesResult<'a> as rustc::ty::context::Lift<'tcx>>::lift_to_tcx\r\n  34: rustc::ty::query::on_disk_cache::__ty_decoder_impl::<impl serialize::serialize::Decoder for rustc::ty::query::on_disk_cache::CacheDecoder<'a, 'tcx, 'x>>::read_str\r\n  35: rustc::ty::context::tls::track_diagnostic\r\n  36: rustc::dep_graph::graph::DepGraph::assert_ignored\r\n  37: rustc::ty::context::tls::track_diagnostic\r\n  38: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_print_query_stack\r\n  39: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_print_query_stack\r\n  40: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_print_query_stack\r\n  41: <rustc_typeck::check::CheckItemTypesVisitor<'a, 'tcx> as rustc::hir::itemlikevisit::ItemLikeVisitor<'tcx>>::visit_item\r\n  42: rustc::ty::query::on_disk_cache::__ty_decoder_impl::<impl serialize::serialize::Decoder for rustc::ty::query::on_disk_cache::CacheDecoder<'a, 'tcx, 'x>>::read_str\r\n  43: rustc::ty::context::tls::track_diagnostic\r\n  44: rustc::dep_graph::graph::DepGraph::assert_ignored\r\n  45: rustc::ty::context::tls::track_diagnostic\r\n  46: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_print_query_stack\r\n  47: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_print_query_stack\r\n  48: rustc_typeck::check_crate\r\n  49: <unknown>\r\n  50: <rustc_driver::pretty::NoAnn<'hir> as rustc_driver::pretty::HirPrinterSupport<'hir>>::sess\r\n  51: <rustc_driver::CompilationFailure as core::fmt::Debug>::fmt\r\n  52: rustc_driver::driver::compile_input\r\n  53: rustc_driver::run_compiler\r\n  54: rustc_driver::target_features::add_configuration\r\n  55: rustc_driver::run_compiler\r\n  56: rustc_driver::target_features::add_configuration\r\n  57: _rust_maybe_catch_panic\r\n  58: rustc_driver::profile::dump\r\n  59: rustc_driver::main\r\n  60: <unknown>\r\n  61: std::panicking::update_panic_count\r\n  62: _rust_maybe_catch_panic\r\n  63: std::rt::lang_start_internal\r\n  64: <unknown>\r\n  65: <unknown>\r\n  66: BaseThreadInitThunk\r\n  67: RtlUserThreadStart\r\nquery stack during panic:\r\n#0 [typeck_tables_of] processing `main`\r\n#1 [typeck_item_bodies] type-checking all item bodies\r\nend of query stack\r\nerror: aborting due to previous error\r\n\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.30.0 (da5f414c2 2018-10-24) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `run`.\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55765/timeline", "performed_via_github_app": null, "state_reason": null}