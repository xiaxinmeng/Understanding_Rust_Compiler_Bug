{"url": "https://api.github.com/repos/rust-lang/rust/issues/112618", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112618/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112618/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112618/events", "html_url": "https://github.com/rust-lang/rust/issues/112618", "id": 1756935779, "node_id": "I_kwDOAAsO6M5ouLZj", "number": 112618, "title": "Const-eval `InterpError`: error enum variants vs `throw_ub_custom!`", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-06-14T13:38:47Z", "updated_at": "2023-06-14T13:40:49Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently we have dedicated error variants for many interpreter errors in our `InterpError` enum, but for some errors we use `throw_ub_custom!` to directly pick a translatable diagnostic instead of a variant.\r\n\r\nThe original purpose of these variants was to\r\n- make sure the same error looks the same when raised from multiple locations\r\n- avoid expensive operations such as string formatting when constructing an error, if it is never actually shown to the user (because it is caught again later, e.g. during value validation)\r\n\r\nThe first point doesn't really apply any more with translatable diagnostics. And the overhead of these error variants is quite significant; they each need an arm in `diagnostic_message` and `add_args`. (And these two things need to be carefully synced, since `diagnostic_message` decides which arguments need to be added later! Would be nice if these could be syntactically together somehow. Right now not only are we using an entirely untyped system here without any checks whether the right arguments are being added, we also have setting the arguments quite far removed from the only place that could potentially tell us which arguments are the right ones. That's pretty bad for maintenance.) That makes it tempting to convert errors to `throw_ub_custom!` and reduce this boilerplate, but I don't know if that is a good idea -- @fee1-dead suggested we should avoid `throw_ub_custom!`.\r\n\r\nI also see some `throw_ub_custom!` do expensive work on error creation (such as [this](https://github.com/rust-lang/rust/blob/dbe31bb693b8d7a44a52162132c7e1f4a84cdeb5/compiler/rustc_const_eval/src/interpret/intrinsics.rs#L549-L553)), though under the hood the macro puts this into a thunk so -- if the error is never rendered, does the `format!` ever happen?\r\n\r\nEither way, we should come up with some kind of consistent policy here. We have a lot of `throw_ub_custom!` currently (34 to be precise), I don't quite see the point of turning them all into variants -- that would be a lot of work, for which gain?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112618/timeline", "performed_via_github_app": null, "state_reason": null}