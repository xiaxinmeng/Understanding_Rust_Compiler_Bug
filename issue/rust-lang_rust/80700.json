{"url": "https://api.github.com/repos/rust-lang/rust/issues/80700", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80700/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80700/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80700/events", "html_url": "https://github.com/rust-lang/rust/issues/80700", "id": 778288177, "node_id": "MDU6SXNzdWU3NzgyODgxNzc=", "number": 80700, "title": "Overflow in checking recursive trait requirements with specialization", "user": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-01-04T18:48:54Z", "updated_at": "2021-01-04T18:48:54Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# The issue\r\n\r\nI'm making a small type-level program that computes the last element of a type-level list. Compiler is `rustc 1.51.0-nightly (80184183b 2021-01-03)`. This program works correctly:\r\n\r\n```rust\r\nstruct Nil;\r\nstruct Cons<Head, Tail>(std::marker::PhantomData<(Head, Tail)>);\r\n\r\ntrait GetLast {\r\n  type Output;\r\n}\r\n\r\nimpl<Head> GetLast for Cons<Head, Nil> {\r\n  type Output = Nil;\r\n}\r\n\r\nimpl<Head, Head2, Tail2> GetLast for Cons<Head, Cons<Head2, Tail2>> \r\nwhere Cons<Head2, Tail2>: GetLast {\r\n  type Output = <Cons<Head2, Tail2> as GetLast>::Output;\r\n}\r\n```\r\n\r\nMy goal is to turn `GetLast` into a higher-order type function, via the [family pattern](http://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/) and GATs.\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\ntrait Family {\r\n  type Func<T>;\r\n}\r\n\r\nstruct GetLastFamily;\r\nimpl Family for GetLastFamily {\r\n  type Func<T> = <T as GetLast>::Output;\r\n}\r\n```\r\n\r\nHowever, this code doesn't compile unless `GetLast` is implemented for all types `T`. So I'm trying to use specialization to achieve this:\r\n\r\n```rust\r\n#![feature(specialization)]\r\nstruct Error;\r\nimpl<T> GetLast for T {\r\n  default type Output = Error;\r\n}\r\n```\r\n\r\nThen the compiler returns the error:\r\n\r\n```\r\nerror[E0275]: overflow evaluating the requirement `Cons<_, _>: GetLast`\r\n  |\r\n  = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`test`)\r\n  = note: required because of the requirements on the impl of `GetLast` for `Cons<_, Cons<_, _>>`\r\n  = note: 127 redundant requirements hidden\r\n  = note: required because of the requirements on the impl of `GetLast` for `Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, Cons<_, _>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\r\n```\r\n\r\nI tried increasing the recursion limit, but rustc just eventually segfaults.\r\n\r\n# An undesirable fix\r\n\r\nI determined that if I change the logic of the `GetLast` impls, then I can get the code to compile. Specifically, rather than enforcing `Cons<Head, Nil>` and `Cons<Head, Cons<Head2, Tail2>>` to be distinct types, I can make the latter also a default type.\r\n\r\n```rust\r\nimpl<Head> GetLast for Cons<Head, Nil> {\r\n  type Output = Nil;\r\n}\r\n\r\nimpl<Head, Tail> GetLast for Cons<Head, Tail> \r\nwhere Tail: GetLast {\r\n  default type Output = <Tail as GetLast>::Output;\r\n}\r\n```\r\n\r\nHowever, I'd like to avoid this solution because my goal is to produce an [automated translation](https://github.com/willcrichton/tyrade) from a high-level language, and this default trickery isn't straightforward.\r\n\r\nI recognize this issue is using two unstable features (GATs and specialization), so it's not surprising that this didn't work. But I wanted to raise the issue in case it helps solve an issue in specialization phase.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80700/timeline", "performed_via_github_app": null, "state_reason": null}