{"url": "https://api.github.com/repos/rust-lang/rust/issues/84506", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84506/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84506/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84506/events", "html_url": "https://github.com/rust-lang/rust/issues/84506", "id": 866697923, "node_id": "MDU6SXNzdWU4NjY2OTc5MjM=", "number": 84506, "title": "Unexpected memory alignment with thumbv7em target", "user": {"login": "qiuchengxuan", "id": 693553, "node_id": "MDQ6VXNlcjY5MzU1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/693553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qiuchengxuan", "html_url": "https://github.com/qiuchengxuan", "followers_url": "https://api.github.com/users/qiuchengxuan/followers", "following_url": "https://api.github.com/users/qiuchengxuan/following{/other_user}", "gists_url": "https://api.github.com/users/qiuchengxuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/qiuchengxuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qiuchengxuan/subscriptions", "organizations_url": "https://api.github.com/users/qiuchengxuan/orgs", "repos_url": "https://api.github.com/users/qiuchengxuan/repos", "events_url": "https://api.github.com/users/qiuchengxuan/events{/privacy}", "received_events_url": "https://api.github.com/users/qiuchengxuan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-04-24T08:55:31Z", "updated_at": "2021-04-25T13:09:38Z", "closed_at": "2021-04-25T13:05:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nSorry for unable to pick piece of code to reproduce this problem, the target is thumbv7em-non-eabihf, the full source code is located at [link][link]\r\n\r\n[link]: https://github.com/qiuchengxuan/pro-flight/tree/unexpected-memory-alignment\r\n\r\nProject profile:\r\n\r\n```\r\n[profile.release]                                                                                                                              \r\nlto = true                                                                                                                                     \r\ndebug = true                                                                                                                                   \r\npanic = \"abort\"                                                                                                                                \r\ncodegen-units = 1                                                                                                                              \r\nopt-level = \"z\"\r\n```\r\n\r\nI expected to see this happen: *explanation*\r\n\r\nThe related code is \r\ndrone-os/drone-core/src/fib/chain.rs:13\r\n\r\n```rust\r\n#[repr(C)]                                                                                                                                     \r\npub struct Node<F> {                                                                                                                           \r\n    advance: unsafe fn(*mut ListNode<Node<()>>) -> bool,                                                                                       \r\n    deallocate: unsafe fn(*mut ListNode<Node<()>>),                                                                                            \r\n    fib: F,                                                                                                                                    \r\n}\r\n```\r\n\r\ndrone-os/drone-core/src/sync/linked_list.rs:18\r\n\r\n```rust\r\n#[repr(C)]                                                                                                                                     \r\npub struct Node<T> {                                                                                                                           \r\n    next: *mut Node<T>,                                                                                                                        \r\n    /// The value attached to this node.                                                                                                       \r\n    pub value: T,                                                                                                                              \r\n}\r\n```\r\n\r\ndrone-os/drone-core/src/sync/linked_list.rs:108\r\n\r\n```rust\r\n    #[inline]                                                                                                                                  \r\n    pub fn push(&self, data: T) {                                                                                                              \r\n        unsafe { self.push_raw(Box::into_raw(Box::new(Node::from(data)))) };                                                                   \r\n    }\r\n```\r\n\r\nso the memory layout expected to be\r\n```\r\nnext: 4\r\nadvance: 4\r\ndeallocate: 4\r\nfib: ?\r\n```\r\n\r\nThe above code will compile to assembly like this:\r\n\r\n```asm\r\n 8021c02:       f44f 6081       mov.w   r0, #1032       ; 0x408              <=============== size\r\n 8021c06:       2108            movs    r1, #8                               <=============== align\r\n 8021c08:       f7f7 ff0e       bl      8019a28 <_ZN5alloc5alloc15exchange_malloc17h67616433718b59d0E.206>\r\n 8021c0c:       4606            mov     r6, r0\r\n 8021c0e:       f8df 0450       ldr.w   r0, [pc, #1104] ; 8022060 <_ZN11omnibusf4v35tasks4root7handler17h175e9b15f5978a6aE+0x2378>\r\n 8021c12:       f8df 1450       ldr.w   r1, [pc, #1104] ; 8022064 <_ZN11omnibusf4v35tasks4root7handler17h175e9b15f5978a6aE+0x237c>\r\n 8021c16:       f44f 727e       mov.w   r2, #1016       ; 0x3f8\r\n 8021c1a:       6035            str     r5, [r6, #0]\r\n 8021c1c:       e9c6 1002       strd    r1, r0, [r6, #8]                     <================== expected #4 as offset of Node.advance\r\n 8021c20:       f106 0010       add.w   r0, r6, #16\r\n 8021c24:       4641            mov     r1, r8\r\n 8021c26:       f007 fc4f       bl      80294c8 <__aeabi_memcpy4>\r\n 8021c2a:       f8df 039c       ldr.w   r0, [pc, #924]  ; 8021fc8 <_ZN11omnibusf4v35tasks4root7handler17h175e9b15f5978a6aE+0x22e0>\r\n 8021c2e:       4631            mov     r1, r6\r\n 8021c30:       f100 0524       add.w   r5, r0, #36     ; 0x24\r\n 8021c34:       4628            mov     r0, r5\r\n 8021c36:       f7fd fe57       bl      801f8e8 <_ZN10drone_core4sync11linked_list19LinkedList$LT$T$GT$8push_raw17h503118e9b23ec8ebE>\r\n 8021c3a:       48df            ldr     r0, [pc, #892]  ; (8021fb8 <_ZN11omnibusf4v35tasks4root7handler17h175e9b15f5978a6aE+0x22d0>)\r\n```\r\n\r\n> Search write 8 to 0x40013C00 as `thread.enable_int();` to locate\r\n\r\nI expected alignment of 4 which is the same with cortex-m machine word size, instead it's aligned to 8 and caused incorrect field assignment\r\n\r\nwhile another call to make_softint is correct:\r\n\r\n```asm\r\n 8021c48:       2900            cmp     r1, #0\r\n 8021c4a:       d1f7            bne.n   8021c3c <_ZN11omnibusf4v35tasks4root7handler17h175e9b15f5978a6aE+0x1f54>\r\n 8021c4c:       2010            movs    r0, #16\r\n 8021c4e:       f006 ff4f       bl      8028af0 <OUTLINED_FUNCTION_27>\r\n 8021c52:       4601            mov     r1, r0\r\n 8021c54:       2001            movs    r0, #1\r\n 8021c56:       f8df 2414       ldr.w   r2, [pc, #1044] ; 802206c <_ZN11omnibusf4v35tasks4root7handler17h175e9b15f5978a6aE+0x2384>\r\n 8021c5a:       2600            movs    r6, #0\r\n 8021c5c:       7308            strb    r0, [r1, #12]\r\n 8021c5e:       f8df 0408       ldr.w   r0, [pc, #1032] ; 8022068 <_ZN11omnibusf4v35tasks4root7handler17h175e9b15f5978a6aE+0x2380>\r\n 8021c62:       6088            str     r0, [r1, #8]   <==== assign deallocate\r\n 8021c64:       4628            mov     r0, r5\r\n 8021c66:       e9c1 6200       strd    r6, r2, [r1]    <==== assign next and allocate\r\n 8021c6a:       f7fd fe3d       bl      801f8e8 <_ZN10drone_core4sync11linked_list19LinkedList$LT$T$GT$8push_raw17h503118e9b23ec8ebE>\r\n```\r\n\r\nand if add compiler instinct to prevent inline like this:\r\n\r\nchips/src/stm32f4/softint.rs:21\r\n\r\n```rust\r\n[inline(never)]\r\npub fn make_trigger<T, M>(thread: T, regs: ExtiPeriph<M>) -> impl Notifier\r\n```\r\n\r\nThe assembly will both looks correct\r\n\r\n```asm\r\n 801f9ae:       2010            movs    r0, #16         <======= size\r\n 801f9b0:       f009 f878       bl      8028aa4 <OUTLINED_FUNCTION_22>\r\n 801f9b4:       f009 f94a       bl      8028c4c <OUTLINED_FUNCTION_58>\r\n 801f9b8:       4806            ldr     r0, [pc, #24]   ; (801f9d4 <_ZN5chips7stm32f47softint12make_trigger17h27298897bf66e08bE+0x3c>)\r\n 801f9ba:       6088            str     r0, [r1, #8]    <======= deallocate\r\n        unsafe { self.list.push_raw(Node::allocate(fib)) };\r\n 801f9bc:       4807            ldr     r0, [pc, #28]   ; (801f9dc <_ZN5chips7stm32f47softint12make_trigger17h27298897bf66e08bE+0x44>)\r\n 801f9be:       4a06            ldr     r2, [pc, #24]   ; (801f9d8 <_ZN5chips7stm32f47softint12make_trigger17h27298897bf66e08bE+0x40>)\r\n 801f9c0:       3020            adds    r0, #32\r\n 801f9c2:       f009 f90e       bl      8028be2 <OUTLINED_FUNCTION_50>\r\n...\r\n 801f9ee:       f041 0108       orr.w   r1, r1, #8      <===== write 0x40013C00 with 8\r\n 801f9fa:       2010            movs    r0, #16\r\n 801f9fc:       f009 f852       bl      8028aa4 <OUTLINED_FUNCTION_22>\r\n 801fa00:       f009 f924       bl      8028c4c <OUTLINED_FUNCTION_58>\r\n 801fa04:       4806            ldr     r0, [pc, #24]   ; (801fa20 <_ZN5chips7stm32f47softint12make_trigger17hcc35a54171941b5fE+0x3c>)\r\n 801fa06:       6088            str     r0, [r1, #8]\r\n 801fa08:       4807            ldr     r0, [pc, #28]   ; (801fa28 <_ZN5chips7stm32f47softint12make_trigger17hcc35a54171941b5fE+0x44>)\r\n 801fa0a:       4a06            ldr     r2, [pc, #24]   ; (801fa24 <_ZN5chips7stm32f47softint12make_trigger17hcc35a54171941b5fE+0x40>)\r\n 801fa0c:       3024            adds    r0, #36 ; 0x24\r\n 801fa0e:       f009 f8e8       bl      8028be2 <OUTLINED_FUNCTION_50>\r\n...\r\n08028be2 <OUTLINED_FUNCTION_50>:\r\n 8028be2:       e9c1 3200       strd    r3, r2, [r1]    <====== assign next and allocate\r\n 8028be6:       f7f6 be7f       b.w     801f8e8 <_ZN10drone_core4sync11linked_list19LinkedList$LT$T$GT$8push_raw17h503118e9b23ec8ebE>\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n```\r\ncat boards/omnibusf4v3/rust-toolchain\r\nnightly-2021-03-25\r\n```\r\n\r\nlinker:\r\n```\r\n[target.armv4t-unknown-linux-gnueabi]                                                                                                          \r\nlinker = \"/opt/gcc-arm-none-eabi-10-2020-q4-update/bin/arm-none-eabi-gcc\"\r\n```", "closed_by": {"login": "qiuchengxuan", "id": 693553, "node_id": "MDQ6VXNlcjY5MzU1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/693553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qiuchengxuan", "html_url": "https://github.com/qiuchengxuan", "followers_url": "https://api.github.com/users/qiuchengxuan/followers", "following_url": "https://api.github.com/users/qiuchengxuan/following{/other_user}", "gists_url": "https://api.github.com/users/qiuchengxuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/qiuchengxuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qiuchengxuan/subscriptions", "organizations_url": "https://api.github.com/users/qiuchengxuan/orgs", "repos_url": "https://api.github.com/users/qiuchengxuan/repos", "events_url": "https://api.github.com/users/qiuchengxuan/events{/privacy}", "received_events_url": "https://api.github.com/users/qiuchengxuan/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84506/timeline", "performed_via_github_app": null, "state_reason": "completed"}