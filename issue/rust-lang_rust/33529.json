{"url": "https://api.github.com/repos/rust-lang/rust/issues/33529", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33529/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33529/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33529/events", "html_url": "https://github.com/rust-lang/rust/issues/33529", "id": 153925534, "node_id": "MDU6SXNzdWUxNTM5MjU1MzQ=", "number": 33529, "title": "confusing lifetime inference", "user": {"login": "BusyJay", "id": 1701473, "node_id": "MDQ6VXNlcjE3MDE0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1701473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BusyJay", "html_url": "https://github.com/BusyJay", "followers_url": "https://api.github.com/users/BusyJay/followers", "following_url": "https://api.github.com/users/BusyJay/following{/other_user}", "gists_url": "https://api.github.com/users/BusyJay/gists{/gist_id}", "starred_url": "https://api.github.com/users/BusyJay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BusyJay/subscriptions", "organizations_url": "https://api.github.com/users/BusyJay/orgs", "repos_url": "https://api.github.com/users/BusyJay/repos", "events_url": "https://api.github.com/users/BusyJay/events{/privacy}", "received_events_url": "https://api.github.com/users/BusyJay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-05-10T05:16:44Z", "updated_at": "2020-06-11T18:02:17Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider following snippet:\n\n``` rust\nuse std::error::Error;\n\nuse std::io::{self, ErrorKind};\n\nfn caused_of<'a>(mut err: &'a (Error + 'static)) -> Option<&'a io::Error> {\n    loop {\n        match err.downcast_ref::<io::Error>() {\n            None => match err.cause() {\n                None => return None,\n                Some(cause) => err = cause,\n            },\n            d => return d,\n        }\n    }\n}\n\nfn main() {\n    let e = io::Error::new(ErrorKind::Other, \"oh no!\");\n    println!(\"{:?}\", caused_of(&e));\n}\n\n```\n\nAccording to [Book](https://doc.rust-lang.org/book/lifetimes.html#lifetime-elision), cause's lifetime should be err's lifetime. which is 'a, so it should be safe to assign cause to err directly. But I got following warnnings:\n\n```\ntest.rs:8:34: 8:39 error: cannot infer an appropriate lifetime for autoref due to conflicting requirements [E0495]\ntest.rs:8                       None => match err.cause() {\n                                           ^~~~~\ntest.rs:8:30: 8:41 note: first, the lifetime cannot outlive the method call at 8:29...\ntest.rs:8                       None => match err.cause() {\n                                       ^~~~~~~~~~~\ntest.rs:8:30: 8:33 note: ...so that method receiver is valid for the method call\ntest.rs:8                       None => match err.cause() {\n                                       ^~~\ntest.rs:5:75: 15:25 note: but, the lifetime must be valid for the lifetime 'a as defined on the block at 5:74...\ntest.rs:5 fn caused_of<'a>(mut err: &'a (Error + 'static)) -> Option<&'a io::Error> {\n                                                                                    ^\ntest.rs:10:48: 10:53 note: ...so that trait type parameters matches those specified on the impl (expected std::ops::CoerceUnsized<&'a std::error::Error + 'static>, found std::ops::CoerceUnsized<&std::error::Error + 'static>)\ntest.rs:10                                                      Some(cause) => err = cause,\n                                                          ^~~~~\nerror: aborting due to previous error\n```\n\nAm I missing something here?\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33529/timeline", "performed_via_github_app": null, "state_reason": null}