{"url": "https://api.github.com/repos/rust-lang/rust/issues/28984", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/28984/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/28984/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/28984/events", "html_url": "https://github.com/rust-lang/rust/issues/28984", "id": 110924704, "node_id": "MDU6SXNzdWUxMTA5MjQ3MDQ=", "number": 28984, "title": "Cannot add prefixes or suffixes to macro-generated function names", "user": {"login": "ebkalderon", "id": 322831, "node_id": "MDQ6VXNlcjMyMjgzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/322831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebkalderon", "html_url": "https://github.com/ebkalderon", "followers_url": "https://api.github.com/users/ebkalderon/followers", "following_url": "https://api.github.com/users/ebkalderon/following{/other_user}", "gists_url": "https://api.github.com/users/ebkalderon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebkalderon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebkalderon/subscriptions", "organizations_url": "https://api.github.com/users/ebkalderon/orgs", "repos_url": "https://api.github.com/users/ebkalderon/repos", "events_url": "https://api.github.com/users/ebkalderon/events{/privacy}", "received_events_url": "https://api.github.com/users/ebkalderon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-10-12T07:52:26Z", "updated_at": "2015-10-13T19:04:20Z", "closed_at": "2015-10-12T16:19:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I write a macro intended to generate new functions at compile time, I am able to name the functions according to individual `ident`s, but I cannot annotate or concatenate anything onto the `ident` if I wish.\n\nConsider the code below:\n\n``` rust\n#[macro_export]\nmacro_rules! components {\n    ( $($cfield:ident => $component:ident),+ ) => {\n        pub struct ComponentManager {\n            $(pub $cfield: ComponentMap<$component>,)+\n        }\n\n        impl ComponentManager {\n            pub fn new() -> ComponentManager {\n                use std::collections::HashMap;\n                ComponentManager {\n                    $($cfield: HashMap::new(),)+\n                }\n            }\n\n            // This below is the code in question!\n            $(\n            pub fn $cfield(&self) {\n                println!(\"{}\", self.$cfield.len()); // Placeholder\n            }\n            )+\n\n            pub fn delete_all_belonging_to(&mut self, id: EntityId) {\n                $(self.$cfield.remove(&id);)+\n            }\n        }\n    };\n}\n```\n\nAssuming that I write the following:\n\n``` rust\npub struct Position {\n    pub x: f32,\n    pub y: f32,\n    pub z: f32\n}\n\ncomponents! {\n    positions => Position\n}\n```\n\nthen the ComponentManager now has a `positions(&self)` method. But if I wanted the method to be called `print_positions(&self)`, and in the macro I were to try to implement the code in question like this:\n\n``` rust\n// This below is the code in question!\n$(\npub fn print_$cfield(&self) {\n    println!(\"{}\", self.$cfield.len()); // Placeholder\n}\n)+\n```\n\nthen I am presented with the following error:\n\n```\necs/mod.rs:53:27: 53:34 error: expected one of `(` or `<`, found `light`\necs/mod.rs:53             pub fn print_$cfield(&self) {\n                                        ^~~~~~~\necs/mod.rs:53:27: 53:34 error: expected one of `(` or `<`, found `light`\necs/mod.rs:53             pub fn print_$cfield(&self) {\n                                        ^~~~~~~\nBuild failed, waiting for other jobs to finish...\nCould not compile `project`.\n```\n\n**TL; DR:** When using macros to generate function names, I am forced to use individual identifiers and cannot prefix/suffix them with other text. Is this behavior a bug in my code, a bug in `rustc`, or by design?\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/28984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/28984/timeline", "performed_via_github_app": null, "state_reason": "completed"}