{"url": "https://api.github.com/repos/rust-lang/rust/issues/20318", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/20318/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/20318/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/20318/events", "html_url": "https://github.com/rust-lang/rust/issues/20318", "id": 53089078, "node_id": "MDU6SXNzdWU1MzA4OTA3OA==", "number": 20318, "title": "\"can't monomorphize ...\" ICE with use of generic intrinsic as a value", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-12-30T02:40:44Z", "updated_at": "2016-01-14T22:52:10Z", "closed_at": "2016-01-14T22:52:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "``` rust\nfn main() {\n    let _f = std::intrinsics::offset::<u8>;\n}\n```\n\n```\nerror: internal compiler error: can't monomorphize a NodeForeignItem(ForeignItem { ident: \"offset\"(63)#0, attrs: [Spanned { node: Attribute_ { id: AttrId(1061), style: AttrOuter, value: Spanned { node: MetaNameValue(doc, Spanned { node: LitStr(/// Calculates the offset from a pointer. The offset *must* be in-bounds of, CookedStr), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, is_sugared_doc: true }, span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, Spanned { node: Attribute_ { id: AttrId(1062), style: AttrOuter, value: Spanned { node: MetaNameValue(doc, Spanned { node: LitStr(/// the object, or one-byte-past-the-end. An arithmetic overflow is also, CookedStr), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, is_sugared_doc: true }, span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, Spanned { node: Attribute_ { id: AttrId(1063), style: AttrOuter, value: Spanned { node: MetaNameValue(doc, Spanned { node: LitStr(/// undefined behaviour., CookedStr), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, is_sugared_doc: true }, span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, Spanned { node: Attribute_ { id: AttrId(1064), style: AttrOuter, value: Spanned { node: MetaNameValue(doc, Spanned { node: LitStr(///, CookedStr), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, is_sugared_doc: true }, span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, Spanned { node: Attribute_ { id: AttrId(1065), style: AttrOuter, value: Spanned { node: MetaNameValue(doc, Spanned { node: LitStr(/// This is implemented as an intrinsic to avoid converting to and from an, CookedStr), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, is_sugared_doc: true }, span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, Spanned { node: Attribute_ { id: AttrId(1066), style: AttrOuter, value: Spanned { node: MetaNameValue(doc, Spanned { node: LitStr(/// integer, since the conversion would throw away aliasing information., CookedStr), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, is_sugared_doc: true }, span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }], node: ForeignItemFn(FnDecl { inputs: [Arg { ty: Ty { id: 18, node: TyPtr(MutTy { ty: Ty { id: 19, node: TyPath(Path { span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) }, global: false, segments: [PathSegment { identifier: \"T\"(212)#0, parameters: AngleBracketedParameters(AngleBracketedParameterData { lifetimes: [], types: [], bindings: [] }) }] }, 20), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, mutbl: MutImmutable }), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, pat: Pat { id: 17, node: PatIdent(BindByValue(MutImmutable), Spanned { node: \"dst\"(144)#0, span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, None), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, id: 16 }, Arg { ty: Ty { id: 23, node: TyPath(Path { span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) }, global: false, segments: [PathSegment { identifier: \"int\"(335)#0, parameters: AngleBracketedParameters(AngleBracketedParameterData { lifetimes: [], types: [], bindings: [] }) }] }, 24), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, pat: Pat { id: 22, node: PatIdent(BindByValue(MutImmutable), Spanned { node: \"offset\"(63)#0, span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, None), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, id: 21 }], output: Return(Ty { id: 25, node: TyPtr(MutTy { ty: Ty { id: 26, node: TyPath(Path { span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) }, global: false, segments: [PathSegment { identifier: \"T\"(212)#0, parameters: AngleBracketedParameters(AngleBracketedParameterData { lifetimes: [], types: [], bindings: [] }) }] }, 27), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }, mutbl: MutImmutable }), span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }), variadic: false }, Generics { lifetimes: [], ty_params: [TyParam { ident: \"T\"(212)#0, id: 28, bounds: [], unbound: None, default: None, span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) } }], where_clause: WhereClause { id: 29, predicates: [] } }), id: 15, span: Span { lo: BytePos(0), hi: BytePos(0), expn_id: ExpnId(4294967295) }, vis: Public })\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: http://doc.rust-lang.org/complement-bugreport.html\nnote: run with `RUST_BACKTRACE=1` for a backtrace\nthread 'rustc' panicked at 'Box<Any>', /build/rust-git/src/rust/src/libsyntax/diagnostic.rs:182\n```\n\ncc #20319\n", "closed_by": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/20318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/20318/timeline", "performed_via_github_app": null, "state_reason": "completed"}