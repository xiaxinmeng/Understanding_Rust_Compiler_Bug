{"url": "https://api.github.com/repos/rust-lang/rust/issues/108851", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108851/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108851/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108851/events", "html_url": "https://github.com/rust-lang/rust/issues/108851", "id": 1613017671, "node_id": "I_kwDOAAsO6M5gJLJH", "number": 108851, "title": "error[[E0401]] and errors with constants", "user": {"login": "RyanDamerell", "id": 23424092, "node_id": "MDQ6VXNlcjIzNDI0MDky", "avatar_url": "https://avatars.githubusercontent.com/u/23424092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RyanDamerell", "html_url": "https://github.com/RyanDamerell", "followers_url": "https://api.github.com/users/RyanDamerell/followers", "following_url": "https://api.github.com/users/RyanDamerell/following{/other_user}", "gists_url": "https://api.github.com/users/RyanDamerell/gists{/gist_id}", "starred_url": "https://api.github.com/users/RyanDamerell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RyanDamerell/subscriptions", "organizations_url": "https://api.github.com/users/RyanDamerell/orgs", "repos_url": "https://api.github.com/users/RyanDamerell/repos", "events_url": "https://api.github.com/users/RyanDamerell/events{/privacy}", "received_events_url": "https://api.github.com/users/RyanDamerell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-03-07T09:08:39Z", "updated_at": "2023-04-05T17:25:30Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "So I was trying to use the `static_assertions` crate when I ran into a weird compiler error. I kept simplifying down until I got this:\r\n\r\n```rust\r\nstruct X {}\r\nimpl X{\r\n    const CHECK: bool = false;\r\n    fn new()->Self {\r\n        const _: bool = Self::CHECK;\r\n        Self {}\r\n     }\r\n}\r\n```\r\n\r\nThis provided the error:\r\n\r\n```\r\nerror[[E0401]](https://doc.rust-lang.org/stable/error_codes/E0401.html): can't use generic parameters from outer function\r\n --> src/lib.rs:5:26\r\n  |\r\n2 | impl X{\r\n  | ---- `Self` type implicitly declared here, by this `impl`\r\n...\r\n5 |         const _: bool = Self::CHECK;\r\n  |                         ^^^^^^^^^^^\r\n  |                         |\r\n  |                         use of generic parameter from outer function\r\n  |                         use a type here instead\r\n  ```\r\n\r\nThis error is fairly bizarre, as it seems to imply that you can't use a `const` value inside a different scope? Obviously that's not true, as you can replace that line with a standard `assert!(Self::CHECK);`. However, as addressed in [this post](https://github.com/rust-lang/rust/issues/108850#issue-1613000506) there's an entirely separate bug involving that. Regardless, it seems that you can't use an `impl`-scoped `const` to define a `fn`-scoped `const`. \r\n\r\nAll of this started because I wanted to produce a compile-time error when a const generic parameter was outside a given range, but as far as I can tell there's currently no way to do this short of writing a custom procedural macro.\r\n\r\n### Meta\r\nThis applies to both the stable and nightly versions of `rustc`. \r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108851/timeline", "performed_via_github_app": null, "state_reason": null}