{"url": "https://api.github.com/repos/rust-lang/rust/issues/54513", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54513/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54513/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54513/events", "html_url": "https://github.com/rust-lang/rust/issues/54513", "id": 362975668, "node_id": "MDU6SXNzdWUzNjI5NzU2Njg=", "number": 54513, "title": "#[derive(Clone)] placing Clone bounds on associated types", "user": {"login": "iitalics", "id": 1772927, "node_id": "MDQ6VXNlcjE3NzI5Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1772927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iitalics", "html_url": "https://github.com/iitalics", "followers_url": "https://api.github.com/users/iitalics/followers", "following_url": "https://api.github.com/users/iitalics/following{/other_user}", "gists_url": "https://api.github.com/users/iitalics/gists{/gist_id}", "starred_url": "https://api.github.com/users/iitalics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iitalics/subscriptions", "organizations_url": "https://api.github.com/users/iitalics/orgs", "repos_url": "https://api.github.com/users/iitalics/repos", "events_url": "https://api.github.com/users/iitalics/events{/privacy}", "received_events_url": "https://api.github.com/users/iitalics/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-23T20:42:23Z", "updated_at": "2018-09-23T22:41:51Z", "closed_at": "2018-09-23T22:41:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "With `#[derive(Clone)]`, when we reference an associating type directly, `Clone` correctly places a `Clone` constraint on the associated type, like below:\r\n\r\n```rust\r\ntrait Tr {\r\n  type AT;\r\n}\r\n\r\n// This is fine, it only enables First<T>: Clone when T::AT: Clone\r\n#[derive(Clone)]\r\nstruct First<T: Tr> { at: T::AT }\r\n```\r\n\r\nHowever making another type that references this struct causes `#[derive(Clone)]` to complain that the `Clone` constraint on the associated type is not explicitly specified. This is problematic when we want `Clone` to be conditionally available when the associated type is `Clone` (like in `First<T>`)\r\n\r\n```rust\r\n// This is an error:\r\n#[derive(Clone)]\r\nstruct Second<T: Tr>(First<T>);\r\n```\r\n\r\nError text:\r\n```\r\nerror[E0277]: the trait bound `<T as Tr>::AT: std::clone::Clone` is not satisfied\r\n  --> src/lib.rs:10:22\r\n   |\r\n10 | struct Second<T: Tr>(First<T>);\r\n   |                      ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `<T as Tr>::AT`\r\n   |\r\n   = help: consider adding a `where <T as Tr>::AT: std::clone::Clone` bound\r\n   = note: required because of the requirements on the impl of `std::clone::Clone` for `First<T>`\r\n   = note: required by `std::clone::Clone::clone`\r\n```\r\n\r\nThe suggested workaround makes `Second<T>` too restrictive, since we may want to enable creating instances where `T::AT` is not `Clone`. The only sufficient workaround is to manually implement `Clone` for this type. \r\n\r\n**Expected behavior:** `#[derive(Clone)]` should have been able to generate something like the following implementation:\r\n\r\n```rust\r\nimpl <T> Clone for Second<T>\r\nwhere T: Tr, First<T>: Clone {\r\n    fn clone(&self) -> Self {\r\n        Second(self.0.clone())\r\n    }\r\n}\r\n```", "closed_by": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54513/timeline", "performed_via_github_app": null, "state_reason": "completed"}