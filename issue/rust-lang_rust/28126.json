{"url": "https://api.github.com/repos/rust-lang/rust/issues/28126", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/28126/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/28126/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/28126/events", "html_url": "https://github.com/rust-lang/rust/issues/28126", "id": 104047356, "node_id": "MDU6SXNzdWUxMDQwNDczNTY=", "number": 28126, "title": "Methods behind a feature gate are still visible to the compiler even when the feature is not on", "user": {"login": "mlalic", "id": 229614, "node_id": "MDQ6VXNlcjIyOTYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/229614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlalic", "html_url": "https://github.com/mlalic", "followers_url": "https://api.github.com/users/mlalic/followers", "following_url": "https://api.github.com/users/mlalic/following{/other_user}", "gists_url": "https://api.github.com/users/mlalic/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlalic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlalic/subscriptions", "organizations_url": "https://api.github.com/users/mlalic/orgs", "repos_url": "https://api.github.com/users/mlalic/repos", "events_url": "https://api.github.com/users/mlalic/events{/privacy}", "received_events_url": "https://api.github.com/users/mlalic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 201852178, "node_id": "MDU6TGFiZWwyMDE4NTIxNzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-stability", "name": "A-stability", "color": "f7e101", "default": false, "description": "Area: issues related to #[stable] and #[unstable] attributes themselves."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-31T12:48:01Z", "updated_at": "2017-05-04T16:40:08Z", "closed_at": "2017-05-04T16:40:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When a new trait method is found behind a feature gate (such as the `read_exact` method of `io::Read`, which is behind the correspondingly named feature) `rustc` will see the method in scope even if the feature has not been explicitly turned on for the crate.\n\nThis causes a problem when a different trait has a method with the same name as the newly added one. I would expect that `rustc` should not even \"see\" the method in scope if it has not been explicitly asked for by flipping the feature gate?\n\nThe following code snippet demonstrates the issue on the current nightly (`rustc 1.4.0-nightly (fe9cef7da 2015-08-30)`).\n\n``` rust\nuse std::io;\n\ntrait MyExt: io::Read {\n    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n        // Real implementation would go here...\n        Ok(())\n    }\n}\n\nimpl<T> MyExt for T where T: io::Read {}\n\nfn foo<R: MyExt>(mut r: R) {\n    let mut target = [0; 2];\n    r.read_exact(&mut target).unwrap();\n    println!(\"{:?}\", target);\n}\n\nfn main() {\n    let mut buf: &[u8] = &[1, 2, 3, 4, 5];\n    foo(&mut buf);\n}\n```\n\nThe compiler would say that there are multiple _applicable_ items in scope for the `read_exact` method (the one from `MyExt` and the one from `io::Read`), but the method on `io::Read` is not really applicable in this case -- it would require `#![feature(read_exact)]`, which is not used here. It is also, in my opinion, slightly strange for the introduction of a trait method behind a feature gate to break a build when no one requested the feature be used... Therefore, I would expect the code given here to compile all right as long as `#![feature(read_exact)]` is not used.\n\nIs it possible for the compiler to resolve names after considering the features that are used or is this inherently \"working as intended\"?\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/28126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/28126/timeline", "performed_via_github_app": null, "state_reason": "completed"}