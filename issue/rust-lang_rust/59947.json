{"url": "https://api.github.com/repos/rust-lang/rust/issues/59947", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59947/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59947/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59947/events", "html_url": "https://github.com/rust-lang/rust/issues/59947", "id": 432893926, "node_id": "MDU6SXNzdWU0MzI4OTM5MjY=", "number": 59947, "title": "Max & Min on BTreeMap are unexpectedly slow", "user": {"login": "jeremycochoy", "id": 4193259, "node_id": "MDQ6VXNlcjQxOTMyNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4193259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremycochoy", "html_url": "https://github.com/jeremycochoy", "followers_url": "https://api.github.com/users/jeremycochoy/followers", "following_url": "https://api.github.com/users/jeremycochoy/following{/other_user}", "gists_url": "https://api.github.com/users/jeremycochoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremycochoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremycochoy/subscriptions", "organizations_url": "https://api.github.com/users/jeremycochoy/orgs", "repos_url": "https://api.github.com/users/jeremycochoy/repos", "events_url": "https://api.github.com/users/jeremycochoy/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremycochoy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-04-13T20:08:36Z", "updated_at": "2020-06-27T06:35:21Z", "closed_at": "2020-06-27T06:35:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThe use of iterator's `max` and `min` function do not seams to take advantage of the specific ordering of BTreeMap and looks like it is browsing the whole container.\r\nAlthough it is still possible to have fast access to minimum and maximum element by using `first` and `first_back`, this is not semantically explicite and you can expect that developers may not know the subtilities regarding BTreeMap's implementation and could assume the complexity should be the same.\r\n\r\nHere is the benchmark result\r\n```\r\nrunning 4 tests\r\ntest bench_first ... bench:           9 ns/iter (+/- 0)\r\ntest bench_last  ... bench:           8 ns/iter (+/- 0)\r\ntest bench_max   ... bench:       3,603 ns/iter (+/- 536)\r\ntest bench_min   ... bench:       3,755 ns/iter (+/- 328)\r\n```\r\n\r\nand here is the benchmark code:\r\n```\r\n#![feature(test)]\r\n\r\nextern crate test;\r\n#[macro_use]\r\nextern crate lazy_static;\r\n\r\nuse test::Bencher;\r\nuse std::collections::BTreeMap;\r\n\r\nlazy_static! {\r\n    static ref MAP: BTreeMap<i32, i32> = {\r\n        let mut map = BTreeMap::new();\r\n\r\n        for i in 0..1000 {map.insert(i, i);}\r\n\r\n        map\r\n    };\r\n}\r\n#[bench]\r\nfn bench_max(b: &mut Bencher) {\r\n\r\n    b.iter(|| {MAP.iter().max()});\r\n}\r\n\r\n#[bench]\r\nfn bench_first(b: &mut Bencher) {\r\n\r\n    b.iter(|| {MAP.iter().next()});\r\n}\r\n\r\n#[bench]\r\nfn bench_last(b: &mut Bencher) {\r\n    b.iter(|| {MAP.iter().next_back()});\r\n}\r\n\r\n#[bench]\r\nfn bench_min(b: &mut Bencher) {\r\n    b.iter(|| {MAP.iter().min()});\r\n}\r\n```\r\n\r\nI don't know the details of the trait implementation, but I think it would be very nice for the community if you can make `std::collections::btree_map::Iter` take advantage of the ordering. :)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59947/reactions", "total_count": 4, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59947/timeline", "performed_via_github_app": null, "state_reason": "completed"}