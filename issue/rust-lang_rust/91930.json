{"url": "https://api.github.com/repos/rust-lang/rust/issues/91930", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91930/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91930/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91930/events", "html_url": "https://github.com/rust-lang/rust/issues/91930", "id": 1080065485, "node_id": "I_kwDOAAsO6M5AYH3N", "number": 91930, "title": "Tracking Issue for `const_option_ext`", "user": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1769279746, "node_id": "MDU6TGFiZWwxNzY5Mjc5NzQ2", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_trait_impl", "name": "F-const_trait_impl", "color": "f9c0cc", "default": false, "description": "`#![feature(const_trait_impl)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2021-12-14T18:08:26Z", "updated_at": "2023-03-24T16:26:18Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(const_option_ext)]`\r\n\r\nThis is a tracking issue for option methods mostly requiring `const_trait_impl` to work.\r\n\r\n`as_pin_ref`, `as_pin_mut`, `unwrap_unchecked` do not require `const_trait_impl`.\r\n\r\n`Option::<&mut T>::copied` does not require `const_trait_impl` as well, but it requires `const_mut_refs`.\r\n\r\n<!--\r\nInclude a short description of the feature.\r\n-->\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\n// core::option\r\n\r\nimpl<T> Option<T> {\r\n    pub const fn contains<U>(&self, x: &U) -> bool\r\n    where\r\n        U: ~const PartialEq<T>;\r\n    pub const fn as_pin_ref(self: Pin<&Self>) -> Option<Pin<&T>>;\r\n    pub const fn as_pin_mut(self: Pin<&mut Self>) -> Option<Pin<&mut T>>;\r\n    pub const fn unwrap_or(self, default: T) -> T\r\n    where\r\n        T: ~const Drop;\r\n    pub const fn unwrap_or_else<F>(self, f: F) -> T\r\n    where\r\n        F: ~const FnOnce() -> T,\r\n        F: ~const Drop;\r\n    pub const unsafe fn unwrap_unchecked(self) -> T;\r\n    pub const fn map<U, F>(self, f: F) -> Option<U>\r\n    where\r\n        F: ~const FnOnce(T) -> U,\r\n        F: ~const Drop;\r\n    pub const fn inspect<F>(self, f: F) -> Self\r\n    where\r\n        F: ~const FnOnce(&T),\r\n        F: ~const Drop;\r\n    pub const fn map_or<U, F>(self, default: U, f: F) -> U\r\n    where\r\n        F: ~const FnOnce(T) -> U,\r\n        F: ~const Drop,\r\n        U: ~const Drop;\r\n    pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U\r\n    where\r\n        D: ~const FnOnce() -> U,\r\n        D: ~const Drop,\r\n        F: ~const FnOnce(T) -> U,\r\n        F: ~const Drop;\r\n    pub const fn ok_or<E>(self, err: E) -> Result<T, E>\r\n    where\r\n        E: ~const Drop;\r\n    pub const fn and<U>(self, optb: Option<U>) -> Option<U>\r\n    where\r\n        T: ~const Drop,\r\n        U: ~const Drop;\r\n    pub const fn and_then<U, F>(self, f: F) -> Option<U>\r\n    where\r\n        F: ~const FnOnce(T) -> Option<U>,\r\n        F: ~const Drop;\r\n    pub const fn filter<P>(self, predicate: P) -> Self\r\n    where\r\n        T: ~const Drop,\r\n        P: ~const FnOnce(&T) -> bool,\r\n        P: ~const Drop;\r\n    pub const fn or(self, optb: Option<T>) -> Option<T>\r\n    where\r\n        T: ~const Drop;\r\n    pub const fn or_else<F>(self, f: F) -> Option<T>\r\n    where\r\n        F: ~const FnOnce() -> Option<T>,\r\n        F: ~const Drop;\r\n    pub const fn xor(self, optb: Option<T>) -> Option<T>\r\n    where\r\n        T: ~const Drop;\r\n    pub const fn insert(&mut self, value: T) -> &mut T\r\n    where\r\n        T: ~const Drop;\r\n    pub const fn get_or_insert(&mut self, value: T) -> &mut T\r\n    where\r\n        T: ~const Drop;\r\n    pub const fn get_or_insert_default(&mut self) -> &mut T\r\n    where\r\n        T: ~const Default;\r\n    pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T\r\n    where\r\n        F: ~const FnOnce() -> T,\r\n        F: ~const Drop;\r\n    pub const fn zip<U>(self, other: Option<U>) -> Option<(T, U)>\r\n    where\r\n        T: ~const Drop,\r\n        U: ~const Drop;\r\n    pub const fn zip_with<U, F, R>(self, other: Option<U>, f: F) -> Option<R>\r\n    where\r\n        F: ~const FnOnce(T, U) -> R,\r\n        F: ~const Drop,\r\n        T: ~const Drop,\r\n        U: ~const Drop;\r\n    pub const fn unwrap_or_default(self) -> T\r\n    where\r\n        T: ~const Default;\r\n    pub const fn as_deref(&self) -> Option<&T::Target>\r\n    where\r\n        T: ~const Deref;\r\n    pub const fn as_deref_mut(&mut self) -> Option<&mut T::Target>\r\n    where\r\n        T: ~const DerefMut;\r\n}\r\n\r\nimpl<T: Copy> Option<&mut T> {\r\n    pub const fn copied(self) -> Option<T>\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: #91928\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- None yet.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91930/reactions", "total_count": 5, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 5, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91930/timeline", "performed_via_github_app": null, "state_reason": null}