{"url": "https://api.github.com/repos/rust-lang/rust/issues/107594", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107594/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107594/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107594/events", "html_url": "https://github.com/rust-lang/rust/issues/107594", "id": 1567997970, "node_id": "I_kwDOAAsO6M5ddcAS", "number": 107594, "title": "`Path::components()` vs. `collect::<PathBuf>()` inconsistency ?!", "user": {"login": "dEajL3kA", "id": 13333150, "node_id": "MDQ6VXNlcjEzMzMzMTUw", "avatar_url": "https://avatars.githubusercontent.com/u/13333150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dEajL3kA", "html_url": "https://github.com/dEajL3kA", "followers_url": "https://api.github.com/users/dEajL3kA/followers", "following_url": "https://api.github.com/users/dEajL3kA/following{/other_user}", "gists_url": "https://api.github.com/users/dEajL3kA/gists{/gist_id}", "starred_url": "https://api.github.com/users/dEajL3kA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dEajL3kA/subscriptions", "organizations_url": "https://api.github.com/users/dEajL3kA/orgs", "repos_url": "https://api.github.com/users/dEajL3kA/repos", "events_url": "https://api.github.com/users/dEajL3kA/events{/privacy}", "received_events_url": "https://api.github.com/users/dEajL3kA/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2023-02-02T12:47:10Z", "updated_at": "2023-03-19T09:40:38Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nThe function `Path::components()` is used to split a path into its components. Calling `collect::<PathBuf>()` on an iterator of `Component` is the \"reverse\" operation, i.e. it is used to build a path from its individual components.\r\n\r\nExcept for some basic normalization rules implied by `Path::components()`, the functions `components()` \u27f7 `collect()` should be inverse functions. That is, if I split a path using `Path::components()`, and then re-combine the resulting components via `collect()`, the resulting path **should** resemble the *original path* \u2013 except for minor normalization differences, of course!\r\n\r\nBut, I'm getting a \"weird\" behavior when it comes to drive letters on Windows! :thinking: \r\n\r\nConsidering this code:\r\n```\r\nfn normalize(path: &Path) {\r\n    println!(\"{:?}\", path);\r\n    let mut components = Vec::with_capacity(8);\r\n    let mut n = 0usize;\r\n    for component in path.components() {\r\n        println!(\"[{}] = {:?}\", n, component);\r\n        n += 1;\r\n        components.push(component);\r\n    }\r\n    println!(\"--> {:?}\\n\", components.into_iter().collect::<PathBuf>());\r\n}\r\n```\r\n\r\nResult is:\r\n```\r\n\"/foo/bar/\"\r\n[0] = RootDir\r\n[1] = Normal(\"foo\")\r\n[2] = Normal(\"bar\")\r\n--> \"\\\\foo\\\\bar\"\r\n\r\n\"C:\\\\foo\\\\bar\"\r\n[0] = Prefix(PrefixComponent { raw: \"C:\", parsed: Disk(67) })\r\n[1] = RootDir\r\n[2] = Normal(\"foo\")\r\n[3] = Normal(\"bar\")\r\n--> \"C:\\\\foo\\\\bar\"\r\n\r\n\"meh\\\\C:\\\\foo\\\\bar\"\r\n[0] = Normal(\"meh\")\r\n[1] = Normal(\"C:\")\r\n[2] = Normal(\"foo\")\r\n[3] = Normal(\"bar\")\r\n--> \"C:foo\\\\bar\" // <-- expected: \"meh\\\\C\\\\foo\\\\bar\"\r\n```\r\n\r\nProblem is with the **last** example. The drive letter `C:` is detected as a \"normal\" component, rather than as \"prefix\" \u2013 which probably is fine here, as it appears in the middle of the path. But weird things happen when the components are joined together again! Even though `C:` ***explicitly*** is a \"normal\" component here \u2013 **not** a \"prefix\" component \u2013 it suddenly is treated as if it was a *prefix* (apparently), completely throwing away the other \"normal\" component(s) that come(s) before it! This is totally **not** what would be expected from re-joining the components of the *original* path. Even worse, the resulting path is **not** even well-formed, missing a required directory separator between the `C:` and `foo` components. If at all, we should get something like `C:\\\\foo\\\\bar`. But even that shouldn't happen, I think, as the `C:` component ***explicitly*** was a \"normal\" component, **not** a prefix.\r\n\r\n*Note:* This behaviour has been present since at least Rust 1.10.\r\n\r\nThank you!", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107594/timeline", "performed_via_github_app": null, "state_reason": null}