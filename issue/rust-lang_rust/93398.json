{"url": "https://api.github.com/repos/rust-lang/rust/issues/93398", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93398/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93398/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93398/events", "html_url": "https://github.com/rust-lang/rust/issues/93398", "id": 1116854376, "node_id": "I_kwDOAAsO6M5Ckdho", "number": 93398, "title": "Intra-doc links do not support disambiguating methods overloaded with generics", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1118567289, "node_id": "MDU6TGFiZWwxMTE4NTY3Mjg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-intra-doc-links", "name": "A-intra-doc-links", "color": "f7e101", "default": false, "description": "Area: Intra-doc links, the ability to link to items in docs by name"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-01-27T23:53:23Z", "updated_at": "2023-03-28T17:37:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello all! I couldn't find any tickets that discuss this problem, so hopefully this isn't a duplicate report.\r\n\r\nI'm experimenting with the [typestate pattern](http://cliffle.com/blog/rust-typestate/), where I'm using it in a builder to cascade a series of transformations. Here's a simple version:\r\n\r\n```rust\r\npub trait State {}\r\n\r\npub struct Add;\r\nimpl State for Add {}\r\n\r\npub struct Mul;\r\nimpl State for Mul {}\r\n\r\npub struct Calculator<T: State = Add> { value: usize, _state: T }\r\n\r\nimpl Calculator {\r\n    pub fn new() -> Calculator<Add> {\r\n        Calculator { value: 0, _state: Add }\r\n    }\r\n\r\n    pub fn add_1(mut self) -> Self {\r\n        self.value += 1;\r\n        self\r\n    }\r\n\r\n    pub fn next(self) -> Calculator<Mul> {\r\n        Calculator { value: self.value, _state: Mul }\r\n    }\r\n\r\n    /// See [Calculator<Mul>::done].\r\n    pub fn done(self) -> usize {\r\n        self.next().done()\r\n    }\r\n}\r\n\r\nimpl Calculator<Mul> {\r\n    pub fn multiply_2(mut self) -> Self {\r\n        self.value *= 2;\r\n        self\r\n    }\r\n\r\n    /// I'm done.\r\n    pub fn done(self) -> usize {\r\n        self.value\r\n    }\r\n}\r\n```\r\n\r\nIt seems though that rustdoc does not handle overloading the name particularly well. When running `cargo doc`, the documentation for the `Calculator<Add>::done()` just links to itself, rather than the doc on `Calculator<Mul>::done()`. I'm guessing it's just stripping out the type parameter and linking to the first entry.\r\n\r\nI expected to see this happen:\r\n\r\nI hoped that we could link to the doc comment on the overloaded method\r\n\r\nInstead, this happened:\r\n\r\nrustdoc linked to the first method's comment.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.58.0 (02072b482 2022-01-11)\r\nbinary: rustc\r\ncommit-hash: 02072b482a8b5357f7fb5e5637444ae30e423c40\r\ncommit-date: 2022-01-11\r\nhost: x86_64-apple-darwin\r\nrelease: 1.58.0\r\nLLVM version: 13.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93398/timeline", "performed_via_github_app": null, "state_reason": null}