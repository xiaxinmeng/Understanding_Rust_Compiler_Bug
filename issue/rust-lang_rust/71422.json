{"url": "https://api.github.com/repos/rust-lang/rust/issues/71422", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71422/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71422/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71422/events", "html_url": "https://github.com/rust-lang/rust/issues/71422", "id": 604618981, "node_id": "MDU6SXNzdWU2MDQ2MTg5ODE=", "number": 71422, "title": "macro_rules! and empty :vis metavariables", "user": {"login": "ratijas", "id": 6737986, "node_id": "MDQ6VXNlcjY3Mzc5ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/6737986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ratijas", "html_url": "https://github.com/ratijas", "followers_url": "https://api.github.com/users/ratijas/followers", "following_url": "https://api.github.com/users/ratijas/following{/other_user}", "gists_url": "https://api.github.com/users/ratijas/gists{/gist_id}", "starred_url": "https://api.github.com/users/ratijas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ratijas/subscriptions", "organizations_url": "https://api.github.com/users/ratijas/orgs", "repos_url": "https://api.github.com/users/ratijas/repos", "events_url": "https://api.github.com/users/ratijas/events{/privacy}", "received_events_url": "https://api.github.com/users/ratijas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-22T09:52:18Z", "updated_at": "2020-04-22T11:54:26Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi.\r\nI founds some bugs, did a research, and created a repository with reproducible examples, README, and instructions. Here is the content of README, and the whole repo is [attached as zip archive](https://github.com/rust-lang/rust/files/4515299/rustc-issues-vis-parse.zip). Code is highly documented, so please take a look. Code snippets and rust-playground are mostly useless, because we'are dealing with proc_macro multi-crate builds.\r\n\r\n### Issues with macros and `:vis` meta-variable\r\n\r\nI did a lot of experiments, and I think I found three issues at once:\r\n\r\n1. Empty :vis meta-variable\r\n\r\n    According to the [documentation][doc-vis], `:vis` entity in `macro_rules!` should match empty visibility modifier:\r\n        `vis:` a possibly empty Visibility qualifier\r\n\r\n    While this is the case when visibility modifier is followed by some more stuff, it fails on its own:\r\n\r\n    ```rust\r\n    macro_rules! q1 {\r\n        ($visibility:vis) => {}\r\n    }\r\n\r\n    q1!(); // error: unexpected end of macro invocation\r\n    ```\r\n\r\n    Followed by stuff:\r\n    ```\r\n    macro_rules! q2 {\r\n        ($visibility:vis $item:ident) => {}\r\n    }\r\n\r\n    q2!(foobar); // ok\r\n    ```\r\n\r\n    Even though, adding ident-only branch still matches the first one (with `:vis`):\r\n    ```\r\n    macro_rules! q3 {\r\n        ($visibility:vis $item:ident) => {};\r\n        ($item:ident) => {\r\n            compile_error!(\"Ident-only branch chosen instead of branch with empty vis\");\r\n        };\r\n    }\r\n\r\n    q3!(foobar); // ok\r\n    ```\r\n\r\n    Live rust code of these examples can be found in `./mac/src/q.rs`.\r\n\r\n2. Forwarding empty :vis meta-variable\r\n\r\n    When rustc forwards empty `:vis` meta-variable, it creates an empty `proc_macro::TokenTree::Group` which has no delimiter (`proc_macro::Delimiter::None` aka \u00d8) nor inner stream content (empty `proc_macro::TokenStream`). While [`None`][doc-Delimiter] delimiters is a documented feature (quoted) \"important to preserve operator priorities\", they \"may not survive roundtrip of a token stream through a string\".\r\n\r\n    That leads to a workaround, but at the cost of losing context and spans of tokens:\r\n    ```rust\r\n    let stream: proc_macro2::TokenStream = /* ... */;\r\n    let stream =\r\n        stream.to_string()\r\n            .parse::<proc_macro2::TokenStream>()\r\n            .unwrap();\r\n    ```\r\n\r\n    Live rust code using this workaround can be found in `./usage/src/main.rs` (at the bottom) and `./mac/src/lib.rs` (turn the `USE_ROUNDTRIP` switch on).\r\n\r\n    Also, `quote!` macro does not produce empty groups like that, so it is higly inconsistent behavior.\r\n\r\n    Unlike `None` delimiter, completely empty group is not documented as a useful feature.\r\n\r\n3. Parsing empty group with syn crate\r\n\r\n    Syn crate is somewhat inconsistent when it comes to parsing empty TokenTree Group.\r\n\r\n    Steps to reproduce:\r\n\r\n    1. Enable `mac_with_ident!(bar);` line in `./usage/src/with_ident.rs` by commenting out/removing `#[cfg!(none)]` attribute.\r\n    2. Turn off the `USE_ROUNDTRIP` switch in proc macro.\r\n    3. Try to build.\r\n\r\n    As can be seen from the error message `TAG_B: Error(\"unexpected token\")`, `syn::parse2` has no problems parsing `syn::Visibility` out of the ParseStream with single empty group, but it fails to \"complete\" parsing because `ParseBuffer` is not [considered empty][ParseBuffer::is_empty] (it sees some \"tokens\" left in the buffer).\r\n\r\n### Proposal:\r\n\r\n1. Rustc macro matching\r\n\r\n    Fix rustc macro matching subsystem to accept calls without arguments (e.g. `q!()`) as matching arms with single `:vis` meta-variable (e.g. `macro_rules! q { ($v:vis) => {} }`)\r\n\r\n2. Rust macro expansion\r\n\r\n    Fix rustc macro expansion subsystem to stop forwarding empty `vis` tokens as an empty groups.\r\n\r\n3. Syn parser robustness\r\n\r\n    Regardless of fixed in rustc, syn/proc_macro2 crates should handle those empty groups gracefully AND uniformly.\r\n    Probably, skip those blank groups altogether. It's no good that they handle a \"blank group\" and a \"blank group which is followed by stuff\" cases differently.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.42.0 (b8cedc004 2020-03-09)\r\nbinary: rustc\r\ncommit-hash: b8cedc00407a4c56a3bda1ed605c6fc166655447\r\ncommit-date: 2020-03-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.42.0\r\nLLVM version: 9.0\r\n\r\nOS: Arch Linux\r\nKernel: x86_64 Linux 5.6.4-arch1-1\r\n```\r\n\r\n[doc-vis]: https://doc.rust-lang.org/reference/macros-by-example.html#metavariables\r\n[ParseBuffer::is_empty]: https://docs.rs/syn/1.0.17/syn/parse/struct.ParseBuffer.html#method.is_empty\r\n[doc-Delimiter]: https://doc.rust-lang.org/nightly/proc_macro/enum.Delimiter.html#variant.None\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71422/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71422/timeline", "performed_via_github_app": null, "state_reason": null}