{"url": "https://api.github.com/repos/rust-lang/rust/issues/63021", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63021/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63021/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63021/events", "html_url": "https://github.com/rust-lang/rust/issues/63021", "id": 473504169, "node_id": "MDU6SXNzdWU0NzM1MDQxNjk=", "number": 63021, "title": "Strange Arc::ptr_eq behaviour (duplicate vtables?)", "user": {"login": "TrionProg", "id": 10674043, "node_id": "MDQ6VXNlcjEwNjc0MDQz", "avatar_url": "https://avatars.githubusercontent.com/u/10674043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TrionProg", "html_url": "https://github.com/TrionProg", "followers_url": "https://api.github.com/users/TrionProg/followers", "following_url": "https://api.github.com/users/TrionProg/following{/other_user}", "gists_url": "https://api.github.com/users/TrionProg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TrionProg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TrionProg/subscriptions", "organizations_url": "https://api.github.com/users/TrionProg/orgs", "repos_url": "https://api.github.com/users/TrionProg/repos", "events_url": "https://api.github.com/users/TrionProg/events{/privacy}", "received_events_url": "https://api.github.com/users/TrionProg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-07-26T19:31:12Z", "updated_at": "2020-03-07T08:13:45Z", "closed_at": "2020-03-07T08:13:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. This issue is simmilar to https://github.com/rust-lang/rust/issues/48795 and https://github.com/rust-lang/rust/issues/46139 but have more strange behaviour and suggestion.\r\n\r\nThe problem is located when we clone `Arc` to `Arc<Trait>` in one function, return `Arc` and then clone `Arc` to `Arc<Trait>` in \"parent\" function, but `Arc::ptr_eq` says, that `Arc<Trait>`(called function) != `Arc<Trait>`(parent function).\r\n\r\nWhere is example of this problem, but Arc::ptr_eq works!\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=95eef8742b08ab94f3fbf3048dc514b2\r\n\r\nWe see, that data pointer is equal, but vtables are different, but implementations are correct.\r\n\r\nIn my case I have more traits, etc, project in 14k lines, and Arc::ptr_eq do not works, but this objects/traits are located in same crate. Note this problem is still occured in build --release cause, and implementations of vtables eat memory.\r\n\r\nSo..\r\n1) Why Arc::ptr_eq match pointers to vtable, but I just need to know, points Arc to object that I search. This behaviour looks strange for user and may cause problems, when project will be large, as in my case (previously it worked correctly).\r\n2) How should I match Arc-s? \r\n\r\n```\r\nlet ptr_equal = unsafe {\r\n                    let (a,_):(usize, usize) = std::mem::transmute_copy(&node.widget_instance);\r\n                    let (b,_):(usize, usize) = std::mem::transmute_copy(widget);\r\n\r\n                    a==b // Addresses of ArcInner\r\n                };\r\n```\r\n\r\nor\r\n\r\n```\r\nimpl WidgetInstanceTrait {\r\n    pub fn ref_eq(&self, other:&Arc<WidgetTrait>) -> bool {\r\n        self.ptr_eq(&**other)\r\n    }\r\n\r\n    pub fn ptr_eq(&self, other:&WidgetTrait) -> bool {\r\n        unsafe {\r\n            let (a,_):(usize, usize) = std::mem::transmute_copy(&self);\r\n            let (b,_):(usize, usize) = std::mem::transmute_copy(&other);\r\n\r\n            a==b // Addresses of data (self)\r\n        }\r\n    }\r\n}\r\n\r\nand\r\n\r\nif node.widget_instance.ptr_eq(&**widget) { ... }\r\nif node.widget_instance.ptr_eq(widget) { ... }\r\n", "closed_by": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63021/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63021/timeline", "performed_via_github_app": null, "state_reason": "completed"}