{"url": "https://api.github.com/repos/rust-lang/rust/issues/91050", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91050/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91050/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91050/events", "html_url": "https://github.com/rust-lang/rust/issues/91050", "id": 1058829580, "node_id": "I_kwDOAAsO6M4_HHUM", "number": 91050, "title": "llvm::Module::getOrInsertGlobal returns a Constant*, not always GlobalValue*", "user": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-11-19T19:06:52Z", "updated_at": "2021-12-08T12:32:22Z", "closed_at": "2021-11-21T13:26:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "xref: https://bugzilla.redhat.com/show_bug.cgi?id=1990657\r\n\r\nIn Fedora, one particular crate has been seeing non-deterministic errors or crashes in the compiler, and I was able to reproduce it with a `rustup`-installed compiler as well. Valgrind gave the following error report, even on runs that otherwise appeared to succeed.\r\n\r\n<details><summary>Valgrind error</summary>\r\n<p>\r\n\r\n```\r\n==325== Invalid read of size 1\r\n==325==    at 0x93E6CF4: getVisibility (GlobalValue.h:229)\r\n==325==    by 0x93E6CF4: LLVMGetVisibility (Core.cpp:1992)\r\n==325==    by 0x4F6D05C: LLVMRustGetVisibility (RustWrapper.cpp:1602)\r\n==325==    by 0x51AE144: rustc_codegen_llvm::mono_item::<impl rustc_codegen_llvm::context::CodegenCx>::should_assume_dso_local (mono_item.rs:106)\r\n==325==    by 0x51A41DF: rustc_codegen_llvm::consts::<impl rustc_codegen_llvm::context::CodegenCx>::get_static (consts.rs:289)\r\n==325==    by 0x51A1E05: rustc_codegen_llvm::common::<impl rustc_codegen_ssa::traits::consts::ConstMethods for rustc_codegen_llvm::context::CodegenCx>::scalar_to_backend (common.rs:267)\r\n==325==    by 0x521D477: rustc_codegen_ssa::mir::operand::OperandRef<V>::from_const (operand.rs:85)\r\n==325==    by 0x523D07A: eval_mir_constant_to_operand<rustc_codegen_llvm::builder::Builder> (constant.rs:20)\r\n==325==    by 0x523D07A: rustc_codegen_ssa::mir::operand::<impl rustc_codegen_ssa::mir::FunctionCx<Bx>>::codegen_operand (operand.rs:450)\r\n==325==    by 0x5238B33: rustc_codegen_ssa::mir::rvalue::<impl rustc_codegen_ssa::mir::FunctionCx<Bx>>::codegen_rvalue_operand (rvalue.rs:546)\r\n==325==    by 0x522DB68: codegen_statement<rustc_codegen_llvm::builder::Builder> (statement.rs:24)\r\n==325==    by 0x522DB68: codegen_block<rustc_codegen_llvm::builder::Builder> (block.rs:901)\r\n==325==    by 0x522DB68: rustc_codegen_ssa::mir::codegen_mir (mod.rs:258)\r\n==325==    by 0x51B6E09: rustc_codegen_ssa::base::codegen_instance (base.rs:342)\r\n==325==    by 0x51E249C: <rustc_middle::mir::mono::MonoItem as rustc_codegen_ssa::mono_item::MonoItemExt>::define (mono_item.rs:70)\r\n==325==    by 0x51F713E: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen (base.rs:141)\r\n==325==  Address 0x1734a400 is 8 bytes after a block of size 56 alloc'd\r\n==325==    at 0x4840FF5: operator new(unsigned long) (vg_replace_malloc.c:417)\r\n==325==    by 0x94DDFE4: allocateFixedOperandUser (User.cpp:127)\r\n==325==    by 0x94DDFE4: llvm::User::operator new(unsigned long, unsigned int) (User.cpp:146)\r\n==325==    by 0x93CE0C6: operator new (ConstantsContext.h:55)\r\n==325==    by 0x93CE0C6: llvm::ConstantExprKeyType::create(llvm::Type*) const (ConstantsContext.h:612)\r\n==325==    by 0x93DA482: create (ConstantsContext.h:715)\r\n==325==    by 0x93DA482: llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(llvm::Type*, llvm::ConstantExprKeyType) (ConstantsContext.h:734)\r\n==325==    by 0x93E02F2: getFoldedCast (Constants.cpp:1937)\r\n==325==    by 0x93E02F2: getBitCast (Constants.cpp:2194)\r\n==325==    by 0x93E02F2: llvm::ConstantExpr::getBitCast(llvm::Constant*, llvm::Type*, bool) (Constants.cpp:2185)\r\n==325==    by 0x94AA7E0: llvm::Module::getOrInsertGlobal(llvm::StringRef, llvm::Type*) (Module.cpp:226)\r\n==325==    by 0x51C67D5: declare_global (declare.rs:60)\r\n==325==    by 0x51C67D5: rustc_codegen_llvm::consts::check_and_apply_linkage (consts.rs:157)\r\n==325==    by 0x51A34BC: rustc_codegen_llvm::consts::<impl rustc_codegen_llvm::context::CodegenCx>::get_static (consts.rs:234)\r\n==325==    by 0x51A1E05: rustc_codegen_llvm::common::<impl rustc_codegen_ssa::traits::consts::ConstMethods for rustc_codegen_llvm::context::CodegenCx>::scalar_to_backend (common.rs:267)\r\n==325==    by 0x521D477: rustc_codegen_ssa::mir::operand::OperandRef<V>::from_const (operand.rs:85)\r\n==325==    by 0x523D07A: eval_mir_constant_to_operand<rustc_codegen_llvm::builder::Builder> (constant.rs:20)\r\n==325==    by 0x523D07A: rustc_codegen_ssa::mir::operand::<impl rustc_codegen_ssa::mir::FunctionCx<Bx>>::codegen_operand (operand.rs:450)\r\n==325==    by 0x5238B33: rustc_codegen_ssa::mir::rvalue::<impl rustc_codegen_ssa::mir::FunctionCx<Bx>>::codegen_rvalue_operand (rvalue.rs:546)\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nNote that `llvm::Module::getOrInsertGlobal` returns a `Constant*`, but `LLVMGetVisibility` casts its argument to a `GlobalValue*`, which is a subclass. Most of the time you do get a `GlobalVariable*` (a further subclass), except when `getOrInsertGlobal` is given different types it instead returns a constant bitcast expression, as you can see in the error backtrace with `getBitCast`.\r\n\r\nI ran a new rustc with LLVM assertions, and it does fail there trying to cast `GlobalValue*`:\r\n\r\n```\r\nrustc: /checkout/src/llvm-project/llvm/include/llvm/Support/Casting.h:269: typename cast_retty<X, Y *>::ret_type llvm::cast(Y *) [X = llvm::GlobalValue, Y = llvm::Value]: Assertion `isa<X>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\r\n```\r\n\r\nSo, casting the wrong pointer type is Undefined Behavior, and the non-reproducible aspect of this bug is just \"luck\" of whatever happens to be in memory there.\r\n\r\nI'm not yet sure why `rustc` would have a type mismatch in what it's feeding `getOrInsertGlobal`, but my first suspicion is this `real_name` indirection in `check_and_apply_linkage`.\r\n\r\nhttps://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler/rustc_codegen_llvm/src/consts.rs#L180-L200", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91050/timeline", "performed_via_github_app": null, "state_reason": "completed"}