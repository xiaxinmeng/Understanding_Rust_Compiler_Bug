{"url": "https://api.github.com/repos/rust-lang/rust/issues/55984", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55984/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55984/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55984/events", "html_url": "https://github.com/rust-lang/rust/issues/55984", "id": 381218226, "node_id": "MDU6SXNzdWUzODEyMTgyMjY=", "number": 55984, "title": "`?` can not use assiciated type constraints usable by `.into()`", "user": {"login": "chrysn", "id": 442326, "node_id": "MDQ6VXNlcjQ0MjMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/442326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrysn", "html_url": "https://github.com/chrysn", "followers_url": "https://api.github.com/users/chrysn/followers", "following_url": "https://api.github.com/users/chrysn/following{/other_user}", "gists_url": "https://api.github.com/users/chrysn/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrysn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrysn/subscriptions", "organizations_url": "https://api.github.com/users/chrysn/orgs", "repos_url": "https://api.github.com/users/chrysn/repos", "events_url": "https://api.github.com/users/chrysn/events{/privacy}", "received_events_url": "https://api.github.com/users/chrysn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-15T15:40:53Z", "updated_at": "2019-01-27T14:34:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When an error type is guaranteed to come `From<>` a result error type by means of a trait constraint in a generic function with a constant result type, the idiom `some_result.map_err(|e| e.into())` works, but the should-be equivalent `Ok(some_result?)` does not and produces:\r\n\r\n    the trait `std::convert::From<<W as Worker>::Error>` is not implemented for `GenericError`\r\n\r\nThat can be alleviated by explicitly demanding that `From<<W as Worker>::Error>` of the generic function's error type, but my expectation would be that this is implied by the type constraint -- especially since the `.map_err` version that should be equivalent to the `?` one does \"get it\".\r\n\r\nFull example:\r\n\r\n    #[derive(Debug)]\r\n    struct GenericError();\r\n    \r\n    // impl Into<GenericError> for i32 {\r\n    //     fn into(self) -> GenericError {\r\n    //         GenericError()\r\n    //     }\r\n    // }\r\n    \r\n    impl From<i32> for GenericError {\r\n        fn from(_: i32) -> Self {\r\n            GenericError()\r\n        }\r\n    }\r\n    \r\n    trait Worker {\r\n        type Error: Into<GenericError>;\r\n    \r\n        fn do_something(&self) -> Result<(), Self::Error>;\r\n    }\r\n    \r\n    struct IntegerWorker();\r\n    \r\n    impl Worker for IntegerWorker {\r\n        type Error = i32;\r\n    \r\n        fn do_something(&self) -> Result<(), Self::Error> {\r\n            Err(42)\r\n        }\r\n    }\r\n    \r\n    fn process<W>(w: W) -> Result<(), GenericError> where\r\n        W: Worker,\r\n        // GenericError: From<<W as Worker>::Error>\r\n    {\r\n        let some_result = w.do_something();\r\n        // // This works:\r\n        // some_result.map_err(|e| e.into())\r\n        // This doesn't\r\n        Ok(some_result?)\r\n    }\r\n    \r\n    fn main() {\r\n        let w = IntegerWorker();\r\n        println!(\"Result: {:?}\", process(w));\r\n    }\r\n\r\nThis fails to build with the above error message, while the commented-out version with `.map_err(|e| e.into())` builds fine. Adding the `GenericError: From<...>` \"where\" clause solves the build error, but is unergonomic (it'd clutter all functions working on that type).\r\n\r\nIn case it is relevant: If `Into<>` is implemented instead of the equivalent `From<>` (top comment block), then the problem still exists, but adding the additional constraint does not solve it any more but produces a different error message.\r\n\r\n## Meta\r\n\r\nPrevious research on web and issue tracker search turned out dry, and disucssion on IRC just helped rule out some possible oversights. The behavior is the same with 1.29.0, 1.30.0 and current nightly; full example version:\r\n\r\n    rustc 1.30.1 (1433507eb 2018-11-07)                                                                                                                            \r\n    binary: rustc                                                                                                                                                  \r\n    commit-hash: 1433507eba7d1a114e4c6f27ae0e1a74f60f20de                                                                                                          \r\n    commit-date: 2018-11-07                                                                                                                                        \r\n    host: x86_64-unknown-linux-gnu                                                                                                                                 \r\n    release: 1.30.1                                                                                                                                                \r\n    LLVM version: 8.0\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55984/timeline", "performed_via_github_app": null, "state_reason": null}