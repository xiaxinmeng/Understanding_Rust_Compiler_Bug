{"url": "https://api.github.com/repos/rust-lang/rust/issues/86899", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86899/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86899/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86899/events", "html_url": "https://github.com/rust-lang/rust/issues/86899", "id": 937464785, "node_id": "MDU6SXNzdWU5Mzc0NjQ3ODU=", "number": 86899, "title": "SIGABRT on `std::env::current_dir()` after closedir", "user": {"login": "pymongo", "id": 42347370, "node_id": "MDQ6VXNlcjQyMzQ3Mzcw", "avatar_url": "https://avatars.githubusercontent.com/u/42347370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pymongo", "html_url": "https://github.com/pymongo", "followers_url": "https://api.github.com/users/pymongo/followers", "following_url": "https://api.github.com/users/pymongo/following{/other_user}", "gists_url": "https://api.github.com/users/pymongo/gists{/gist_id}", "starred_url": "https://api.github.com/users/pymongo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pymongo/subscriptions", "organizations_url": "https://api.github.com/users/pymongo/orgs", "repos_url": "https://api.github.com/users/pymongo/repos", "events_url": "https://api.github.com/users/pymongo/events{/privacy}", "received_events_url": "https://api.github.com/users/pymongo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-07-06T02:28:57Z", "updated_at": "2021-07-06T03:35:19Z", "closed_at": "2021-07-06T03:35:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried to traverse directory recursive from `/` diretory:\r\n\r\n```rust\r\nfn main() {\r\n    let args = std::env::args().collect::<Vec<_>>();\r\n    let input_filename = if let Some(filename) = args.get(1) {\r\n        format!(\"{}\\0\", filename)\r\n    } else {\r\n        \"/\\0\".to_string() //\".\\0\".to_string()\r\n    };\r\n\r\n    let input_filename_cstr = input_filename.as_ptr().cast();\r\n    let dirp = unsafe { libc::opendir(input_filename_cstr) };\r\n    if dirp.is_null() {\r\n        unsafe {\r\n            libc::perror(input_filename_cstr);\r\n        }\r\n        return;\r\n    }\r\n    unsafe { libc::chdir(input_filename_cstr) };\r\n    unsafe {\r\n        traverse_dir_dfs(dirp, 0);\r\n    }\r\n}\r\n\r\nunsafe fn traverse_dir_dfs(dirp: *mut libc::DIR, indent: usize) {\r\n    loop {\r\n        let dir_entry = libc::readdir(dirp);\r\n        if dir_entry.is_null() {\r\n            let _sigabrt_line = std::env::current_dir().unwrap(); // SIGABRT here\r\n            return;\r\n        }\r\n        let dir_entry = *dir_entry;\r\n        let filename_cstr = dir_entry.d_name.as_ptr();\r\n\r\n        // skip current directory and parent directory\r\n        if libc::strcmp(filename_cstr, \".\\0\".as_ptr().cast()) == 0\r\n            || libc::strcmp(filename_cstr, \"..\\0\".as_ptr().cast()) == 0\r\n        {\r\n            continue;\r\n        }\r\n\r\n        // check file whether a directory\r\n        let mut stat_buf = std::mem::zeroed();\r\n        let stat_ret = libc::lstat(filename_cstr, &mut stat_buf); // lstat doesn't follow link\r\n        if stat_ret == -1 {\r\n            panic!(\"{}\", std::io::Error::last_os_error());\r\n        }\r\n        let is_dir = stat_buf.st_mode & libc::S_IFMT == libc::S_IFDIR;\r\n\r\n        // convert filename from [c_char; 256] to String\r\n        let filename_len = libc::strlen(filename_cstr);\r\n        let filename_bytes = &*(&dir_entry.d_name[..filename_len] as *const [i8] as *const [u8]);\r\n        let filename_string = String::from_utf8_unchecked(filename_bytes.to_owned());\r\n        println!(\r\n            \"{}{}{}\",\r\n            \" \".repeat(indent),\r\n            filename_string,\r\n            if is_dir { \"/\" } else { \"\" }\r\n        );\r\n\r\n        if is_dir {\r\n            // backtracking: opendir<->closedir, chdir(filename_cstr)<->chdir(\"..\\0\")\r\n            let dirp_inner_dir = libc::opendir(filename_cstr);\r\n            libc::chdir(filename_cstr);\r\n            traverse_dir_dfs(dirp_inner_dir, indent + 4);\r\n            libc::chdir(\"..\\0\".as_ptr().cast());\r\n            libc::closedir(dirp); // Bug is here, this should be `closedir(dirp_inner_dir)`\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThese code SIGABRT output:\r\n\r\n```\r\nmalloc(): unsorted double linked list corrupted\r\n\r\nProcess finished with exit code 134 (interrupted by signal 6: SIGABRT)\r\n```\r\n\r\n**these code also SIGABRT on playground** run on stable: [playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=37ae5b3324fd951dcfe572a2f664169b)\r\n\r\nI know this line is a bug\r\n\r\n> libc::closedir(dirp);\r\n\r\nshould be\r\n\r\n> libc::closedir(dirp_inner_dir); // this would not cause SIGABRT\r\n\r\nWhy **`closedir`** wrong would cause **`std::env::current_dir()`** SIGABRT ?\r\n\r\n---\r\n\r\nIf I replace `current_dir` call to these(call libc::getcwd) **would not SIGABRT**:\r\n\r\n```rust\r\nconst BUF_LEN: usize = 256;\r\nlet mut buf = [0_u8; BUF_LEN];\r\ndbg!(unsafe {\r\n    libc::getcwd(buf.as_mut_ptr().cast(), BUF_LEN);\r\n    String::from_utf8_unchecked(buf[..libc::strlen(buf.as_ptr().cast())].to_vec())\r\n})\r\n```\r\n\r\nSo I think the problem maybe a **alloc problem**, libc::getcwd call is success.\r\n\r\n### Some lldb backtrace\r\n\r\n```\r\n    frame #5: 0x00007ffff7e1e397 libc.so.6`malloc + 119\r\n    frame #6: 0x000055555557c276 tree`std::env::current_dir::h80f60e4f60c480dd [inlined] alloc::alloc::alloc::hc3054103076ddf54 at alloc.rs:86:14\r\n    frame #7: 0x000055555557c266 tree`std::env::current_dir::h80f60e4f60c480dd [inlined] alloc::alloc::Global::alloc_impl::h8fd26fadfbd0c5c2 at alloc.rs:166\r\n    frame #8: 0x000055555557c266 tree`std::env::current_dir::h80f60e4f60c480dd [inlined] _$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$::allocate::h21a7a965143e2aee at alloc.rs:226\r\n    frame #9: 0x000055555557c266 tree`std::env::current_dir::h80f60e4f60c480dd [inlined] alloc::raw_vec::RawVec$LT$T$C$A$GT$::allocate_in::h7a9dce660a321607 at raw_vec.rs:203\r\n    frame #10: 0x000055555557c266 tree`std::env::current_dir::h80f60e4f60c480dd [inlined] alloc::raw_vec::RawVec$LT$T$C$A$GT$::with_capacity_in::haa19e91338d529ed at raw_vec.rs:142\r\n    frame #11: 0x000055555557c266 tree`std::env::current_dir::h80f60e4f60c480dd [inlined] alloc::vec::Vec$LT$T$C$A$GT$::with_capacity_in::h448e519b4feb83e3 at mod.rs:604\r\n    frame #12: 0x000055555557c266 tree`std::env::current_dir::h80f60e4f60c480dd [inlined] alloc::vec::Vec$LT$T$GT$::with_capacity::h8ad5f0ab19c18348 at mod.rs:465\r\n    frame #13: 0x000055555557c266 tree`std::env::current_dir::h80f60e4f60c480dd [inlined] std::sys::unix::os::getcwd::hf12089dc520e0272 at os.rs:129\r\n    frame #14: 0x000055555557c266 tree`std::env::current_dir::h80f60e4f60c480dd at env.rs:47\r\n    frame #15: 0x000055555556ace6 tree`tree::traverse_dir_dfs::h1bf926ef8b82579c(dirp=0x00005555555bcd80, indent=12) at tree.rs:30:33\r\n```\r\n\r\nthe last Rust's frame is:\r\n\r\n```rust\r\npub unsafe fn alloc(layout: Layout) -> *mut u8 {\r\n    unsafe { __rust_alloc(layout.size(), layout.align()) }\r\n}\r\n```\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.55.0-nightly (798baebde 2021-07-02)\r\nbinary: rustc\r\ncommit-hash: 798baebde1fe77e5a660490ec64e727a5d79970d\r\ncommit-date: 2021-07-02\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.55.0-nightly\r\nLLVM version: 12.0.1\r\n```", "closed_by": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86899/timeline", "performed_via_github_app": null, "state_reason": "completed"}