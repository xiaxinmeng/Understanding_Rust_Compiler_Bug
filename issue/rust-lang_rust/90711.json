{"url": "https://api.github.com/repos/rust-lang/rust/issues/90711", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90711/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90711/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90711/events", "html_url": "https://github.com/rust-lang/rust/issues/90711", "id": 1047891398, "node_id": "I_kwDOAAsO6M4-dY3G", "number": 90711, "title": "Can't get gdb-usable debuginfo for MSVC-like target", "user": {"login": "kosmas12", "id": 32873536, "node_id": "MDQ6VXNlcjMyODczNTM2", "avatar_url": "https://avatars.githubusercontent.com/u/32873536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kosmas12", "html_url": "https://github.com/kosmas12", "followers_url": "https://api.github.com/users/kosmas12/followers", "following_url": "https://api.github.com/users/kosmas12/following{/other_user}", "gists_url": "https://api.github.com/users/kosmas12/gists{/gist_id}", "starred_url": "https://api.github.com/users/kosmas12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kosmas12/subscriptions", "organizations_url": "https://api.github.com/users/kosmas12/orgs", "repos_url": "https://api.github.com/users/kosmas12/repos", "events_url": "https://api.github.com/users/kosmas12/events{/privacy}", "received_events_url": "https://api.github.com/users/kosmas12/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 55301991, "node_id": "MDU6TGFiZWw1NTMwMTk5MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86", "name": "O-x86", "color": "6e6ec0", "default": false, "description": "Target: x86 processors"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-11-08T20:31:20Z", "updated_at": "2023-03-04T01:22:32Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\nHello!\r\n\r\nI've been trying to get Rust running on the original Xbox from 2001, however, when trying to compile the `core` crate I get an internal compiler error, whose details you can find below. This also happened to me when trying to make an i386 operating system. I have not been able to find a fix anywhere, including previous issues here.\r\n\r\n### Code\r\nCompile the `core` crate with a freestanding binary using the command `cargo build -Zbuild-std=core --target xbox.json` with the following `xbox.json`:\r\n\r\n```\r\n{\r\n  \"llvm-target\": \"i686-pc-win32\",\r\n  \"data-layout\": \"e-p:32:32-e-m:e-i64:64-f80:64-n8:16:32-S128\",\r\n  \"arch\": \"i686\",\r\n  \"target-endian\": \"little\",\r\n  \"target-pointer-width\": \"32\",\r\n  \"target-c-int-width\": \"32\",\r\n  \"os\": \"windows\",\r\n  \"executables\": true,\r\n  \"linker-flavor\": \"ld.lld\",\r\n  \"linker\": \"rust-lld\",\r\n  \"panic-strategy\": \"abort\",\r\n  \"is-like-windows\": true\r\n}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.58.0-nightly (547a6ffee 2021-10-21)\r\nbinary: rustc\r\ncommit-hash: 547a6ffee0cf4da9929a9e3d49546dc87d607735\r\ncommit-date: 2021-10-21\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.58.0-nightly\r\nLLVM version: 13.0.0\r\n\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: compiler/rustc_codegen_llvm/src/context.rs:889:21: `fn_abi_of_instance(slice::cmp::memcmp, [])` failed: target architecture \"i686\" does not support `extern \"C\"` ABI\r\n  --> /home/kosmas/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/cmp.rs:18:5\r\n   |\r\n18 |     fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nCompiling core v0.0.0 (/home/kosmas/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core)\r\n   Compiling rustc-std-workspace-core v1.99.0 (/home/kosmas/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/rustc-std-workspace-core)\r\nerror: internal compiler error: compiler/rustc_codegen_llvm/src/context.rs:889:21: `fn_abi_of_instance(slice::cmp::memcmp, [])` failed: target architecture \"i686\" does not support `extern \"C\"` ABI\r\n  --> /home/kosmas/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/cmp.rs:18:5\r\n   |\r\n18 |     fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/547a6ffee0cf4da9929a9e3d49546dc87d607735/compiler/rustc_errors/src/lib.rs:1093:9\r\nstack backtrace:\r\n   0: std::panicking::begin_panic\r\n   1: std::panic::panic_any\r\n   2: rustc_errors::HandlerInner::span_bug\r\n   Compiling compiler_builtins v0.1.49\r\n   3: rustc_errors::Handler::span_bug\r\n   4: rustc_middle::ty::context::tls::with_opt\r\n   5: rustc_middle::util::bug::opt_span_bug_fmt\r\n   6: rustc_middle::util::bug::span_bug_fmt\r\n   7: <rustc_codegen_llvm::context::CodegenCx as rustc_middle::ty::layout::FnAbiOfHelpers>::handle_fn_abi_err\r\n   8: <rustc_codegen_llvm::builder::Builder as rustc_middle::ty::layout::FnAbiOfHelpers>::handle_fn_abi_err\r\n   9: rustc_middle::ty::layout::FnAbiOf::fn_abi_of_instance::{{closure}}\r\n  10: rustc_codegen_ssa::mir::codegen_mir\r\n  11: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\r\n  12: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  13: rustc_codegen_llvm::base::compile_codegen_unit\r\n  14: rustc_codegen_ssa::base::codegen_crate\r\n  15: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  16: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  17: rustc_interface::queries::Queries::ongoing_codegen\r\n  18: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  19: rustc_span::with_source_map\r\n  20: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.58.0-nightly (547a6ffee 2021-10-21) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -Z force-unstable-if-unmarked -C panic=abort -C embed-bitcode=no -C debuginfo=2 --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: could not compile `core`\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror: internal compiler error: compiler/rustc_codegen_llvm/src/context.rs:889:21: `fn_abi_of_instance(conv::__floatsisf, [])` failed: target architecture \"i686\" does not support `extern \"C\"` ABI\r\n   --> /home/kosmas/.cargo/registry/src/github.com-1ecc6299db9ec823/compiler_builtins-0.1.49/src/macros.rs:278:9\r\n    |\r\n278 |           pub extern $abi fn $name( $($argname: $ty),* ) -> $ret {\r\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n   ::: /home/kosmas/.cargo/registry/src/github.com-1ecc6299db9ec823/compiler_builtins-0.1.49/src/float/conv.rs:77:1\r\n    |\r\n77  | / intrinsics! {\r\n78  | |     #[arm_aeabi_alias = __aeabi_i2f]\r\n79  | |     pub extern \"C\" fn __floatsisf(i: i32) -> f32 {\r\n80  | |         int_to_float(i)\r\n...   |\r\n152 | |     }\r\n153 | | }\r\n    | |_- in this macro invocation\r\n    |\r\n    = note: this error: internal compiler error originates in the macro `intrinsics` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/547a6ffee0cf4da9929a9e3d49546dc87d607735/compiler/rustc_errors/src/lib.rs:1093:9\r\nstack backtrace:\r\n   0: std::panicking::begin_panic\r\n   1: std::panic::panic_any\r\n   2: rustc_errors::HandlerInner::span_bug\r\n   3: rustc_errors::Handler::span_bug\r\n   4: rustc_middle::ty::context::tls::with_opt\r\n   5: rustc_middle::util::bug::opt_span_bug_fmt\r\n   6: rustc_middle::util::bug::span_bug_fmt\r\n   7: <rustc_codegen_llvm::context::CodegenCx as rustc_middle::ty::layout::FnAbiOfHelpers>::handle_fn_abi_err\r\n   8: rustc_middle::ty::layout::FnAbiOf::fn_abi_of_instance::{{closure}}\r\n   9: rustc_codegen_llvm::mono_item::<impl rustc_codegen_ssa::traits::declare::PreDefineMethods for rustc_codegen_llvm::context::CodegenCx>::predefine_fn\r\n  10: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\r\n  11: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  12: rustc_codegen_llvm::base::compile_codegen_unit\r\n  13: rustc_codegen_ssa::base::codegen_crate\r\n  14: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  15: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  16: rustc_interface::queries::Queries::ongoing_codegen\r\n  17: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  18: rustc_span::with_source_map\r\n  19: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.58.0-nightly (547a6ffee 2021-10-21) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -Z force-unstable-if-unmarked -C panic=abort -C embed-bitcode=no -C debuginfo=2 --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: build failed\r\n```\r\n\r\nAll help is welcome and appreciated. Thank you and have a great day!\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90711/timeline", "performed_via_github_app": null, "state_reason": null}