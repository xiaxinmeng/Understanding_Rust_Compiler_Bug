{"url": "https://api.github.com/repos/rust-lang/rust/issues/101879", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101879/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101879/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101879/events", "html_url": "https://github.com/rust-lang/rust/issues/101879", "id": 1375406537, "node_id": "I_kwDOAAsO6M5R-wnJ", "number": 101879, "title": "Generic unsafe traits require bounding that already exists", "user": {"login": "Threadzless", "id": 20520890, "node_id": "MDQ6VXNlcjIwNTIwODkw", "avatar_url": "https://avatars.githubusercontent.com/u/20520890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Threadzless", "html_url": "https://github.com/Threadzless", "followers_url": "https://api.github.com/users/Threadzless/followers", "following_url": "https://api.github.com/users/Threadzless/following{/other_user}", "gists_url": "https://api.github.com/users/Threadzless/gists{/gist_id}", "starred_url": "https://api.github.com/users/Threadzless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Threadzless/subscriptions", "organizations_url": "https://api.github.com/users/Threadzless/orgs", "repos_url": "https://api.github.com/users/Threadzless/repos", "events_url": "https://api.github.com/users/Threadzless/events{/privacy}", "received_events_url": "https://api.github.com/users/Threadzless/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-09-16T04:52:49Z", "updated_at": "2022-09-17T00:06:16Z", "closed_at": "2022-09-17T00:06:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\npub struct Foo<'a, W>\r\nwhere\r\n    W: raw_window_handle::HasRawWindowHandle\r\n{\r\n    bar: &'a W,\r\n}\r\n\r\nimpl<'a, W> Foo<'a, W>\r\nwhere\r\n    W: raw_window_handle::HasRawWindowHandle\r\n{\r\n    pub fn new(foobar: &'a W) -> Self {\r\n        Self { bar: foobar }\r\n    }\r\n\r\n    pub fn use_instance( self ) -> Result<wgpu::Surface, ()> {\r\n        let instance = wgpu::Instance::new(wgpu::Backends::GL);\r\n        let surface = unsafe { instance.create_surface(self.bar) };\r\n        Ok(surface)\r\n    }\r\n}\r\n```\r\n\r\nI expected this to compile, but cargo emits error E0277:\r\n\r\n```\r\nerror[E0277]: the trait bound `W: raw_window_handle::HasRawWindowHandle` is not satisfied\r\n    --> src/lib.rs:18:56\r\n     |\r\n18   |         let surface = unsafe { instance.create_surface(self.bar) };\r\n     |                                         -------------- ^^^^^^^^ the trait `raw_window_handle::HasRawWindowHandle` is not implemented for `W`\r\n     |                                         |\r\n     |                                         required by a bound introduced by this call\r\n     |\r\nnote: required by a bound in `wgpu::Instance::create_surface`\r\n    --> /home/josh/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-0.13.1/src/lib.rs:1757:37\r\n     |\r\n1757 |     pub unsafe fn create_surface<W: raw_window_handle::HasRawWindowHandle>(\r\n     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `wgpu::Instance::create_surface`\r\nhelp: consider further restricting this bound\r\n     |\r\n10   |     W: raw_window_handle::HasRawWindowHandle + raw_window_handle::HasRawWindowHandle\r\n     |                                              +++++++++++++++++++++++++++++++++++++++\r\n```\r\n\r\nSince the compiler is telling me to add a bound that is already present, I assume at the very least this is not the correct error message for my code. \r\n\r\nWhat I find to be notable is that this only happens under these conditions:\r\n- Passing a generic reference of an unsafe trait (`raw_window_handle::HasRawWindowHandle`)...\r\n- ...Into an unsafe method (`create_surface`)\r\n- Where both the trait and method exist in separate crates from the one my code is in.\r\n\r\nWhen any of these conditions were not true, no error is emitted.\r\n\r\n### Meta\r\nThe nightly compiler produces the same error for this code\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.63.0 (4b91a6ea7 2022-08-08)\r\nbinary: rustc\r\ncommit-hash: 4b91a6ea7258a947e59c6522cd5898e7c0a6a88f\r\ncommit-date: 2022-08-08\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.63.0\r\nLLVM version: 14.0.5\r\n```", "closed_by": {"login": "Threadzless", "id": 20520890, "node_id": "MDQ6VXNlcjIwNTIwODkw", "avatar_url": "https://avatars.githubusercontent.com/u/20520890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Threadzless", "html_url": "https://github.com/Threadzless", "followers_url": "https://api.github.com/users/Threadzless/followers", "following_url": "https://api.github.com/users/Threadzless/following{/other_user}", "gists_url": "https://api.github.com/users/Threadzless/gists{/gist_id}", "starred_url": "https://api.github.com/users/Threadzless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Threadzless/subscriptions", "organizations_url": "https://api.github.com/users/Threadzless/orgs", "repos_url": "https://api.github.com/users/Threadzless/repos", "events_url": "https://api.github.com/users/Threadzless/events{/privacy}", "received_events_url": "https://api.github.com/users/Threadzless/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101879/timeline", "performed_via_github_app": null, "state_reason": "completed"}