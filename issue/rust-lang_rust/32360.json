{"url": "https://api.github.com/repos/rust-lang/rust/issues/32360", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32360/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32360/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32360/events", "html_url": "https://github.com/rust-lang/rust/issues/32360", "id": 142096287, "node_id": "MDU6SXNzdWUxNDIwOTYyODc=", "number": 32360, "title": "ARM compilers always hit an LLVM assertion (if enabled) during codegen.", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2016-03-19T19:59:19Z", "updated_at": "2016-03-26T19:41:01Z", "closed_at": "2016-03-26T19:41:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### STR\n\n``` rust\n// minified ansi-term-0.7.2\n// src/lib.rs\n#![crate_type = \"rlib\"]\n\nuse std::default::Default;\n\n/// A style is a collection of properties that can format a string\n/// using ANSI escape codes.\n#[derive(PartialEq, Clone, Copy, Debug)]\npub struct Style {\n    is_italic: bool,\n    is_underline: bool,\n    is_blink: bool,\n    is_reverse: bool,\n    is_hidden: bool\n}\n\nimpl Style {\n    /// Creates a new Style with no differences.\n    pub fn new() -> Style {\n        Style::default()\n    }\n}\n\nimpl Default for Style {\n    fn default() -> Style {\n        Style {\n            is_italic: false,\n            is_underline: false,\n            is_blink: false,\n            is_reverse: false,\n            is_hidden: false\n        }\n    }\n}\n```\n\n```\n$ rustc src/lib.rs\nrustc: /buildslave/rust/src/llvm/lib/IR/Attributes.cpp:876: llvm::AttributeSet llvm::AttributeSet::removeAttributes(llvm::LLVMContext&, unsigned int, llvm::AttributeSet) const: Assertion `!Attrs.hasAttribute(Index, Attribute::Alignment) && \"Attempt to change alignment!\"' failed.\n```\n\nBacktrace\n\n```\n#0  __libc_do_syscall () at ../ports/sysdeps/unix/sysv/linux/arm/libc-do-syscall.S:44\n#1  0xb6801f0e in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56\n#2  0xb6804766 in __GI_abort () at abort.c:89\n#3  0xb67fd150 in __assert_fail_base (fmt=0x1 <error: Cannot access memory at address 0x1>, assertion=0xb461b76c \"!Attrs.hasAttribute(Index, Attribute::Alignment) && \\\"Attempt to change alignment!\\\"\", assertion@entry=0x0, file=0xb461addc \"/buildslave/rust/src/llvm/lib/IR/Attributes.cpp\",\n    file@entry=0xb21ff270 \"\\001\", line=876, line@entry=3062628524,\n    function=function@entry=0xb461be10 <llvm::AttributeSet::removeAttributes(llvm::LLVMContext&, unsigned int, llvm::AttributeSet) const::__PRETTY_FUNCTION__> \"llvm::AttributeSet llvm::AttributeSet::removeAttributes(llvm::LLVMContext&, unsigned int, llvm::AttributeSet) const\") at assert.c:92\n#4  0xb67fd1e6 in __GI___assert_fail (assertion=0x0, file=0xb21ff270 \"\\001\", line=3062628524,\n    function=0xb461be10 <llvm::AttributeSet::removeAttributes(llvm::LLVMContext&, unsigned int, llvm::AttributeSet) const::__PRETTY_FUNCTION__> \"llvm::AttributeSet llvm::AttributeSet::removeAttributes(llvm::LLVMContext&, unsigned int, llvm::AttributeSet) const\") at assert.c:101\n#5  0xb38b041c in llvm::AttributeSet::removeAttributes(llvm::LLVMContext&, unsigned int, llvm::AttributeSet) const () from /home/japaric/stage2-C/lib/librustc_llvm-9fb2c48c1d571895.so\n#6  0xb38dad54 in LLVMRemoveFunctionAttr () from /home/japaric/stage2-C/lib/librustc_llvm-9fb2c48c1d571895.so\n#7  0xb5dc1020 in inline (val=<optimized out>, inline={void (union Value_opaque *, enum InlineAttr)} 0xb5dc0fe8 <rustc_trans::trans::attributes::from_fn_attrs+64>) at /buildslave/rust/src/librustc_trans/trans/attributes.rs:32\n#8  rustc_trans::trans::attributes::from_fn_attrs (ccx=<optimized out>, attrs=..., llfn=0xadeb4f64) at /buildslave/rust/src/librustc_trans/trans/attributes.rs:88\n#9  0xb5e2e650 in rustc_trans::trans::callee::get_fn (ccx=<optimized out>, def_id=..., substs=<optimized out>) at /buildslave/rust/src/librustc_trans/trans/callee.rs:543\n#10 0xb5dc3718 in rustc_trans::trans::callee::Callee<'tcx>::def (ccx=0xb21f5090, def_id=..., substs=<optimized out>) at /buildslave/rust/src/librustc_trans/trans/callee.rs:140\n#11 0xb5df5f50 in rustc_trans::trans::base::trans_item (ccx=<optimized out>, item=<optimized out>) at /buildslave/rust/src/librustc_trans/trans/base.rs:2302\n#12 0xb5e19bf4 in fnfn () at /buildslave/rust/src/librustc_trans/trans/base.rs:2919\n#13 with_task<closure,()> (self=0xb21f9e6c, key=..., op=...) at /buildslave/rust/src/librustc/dep_graph/mod.rs:165\n#14 rustc_trans::trans::base::TransItemsWithinModVisitor<'a, 'tcx>.Visitor<'v>::visit_item (self=0xb21f5be0, i=0xb189386c) at /buildslave/rust/src/librustc_trans/trans/base.rs:2909\n#15 0xb5dfde20 in visit_nested_item (self=0xb21f5be0, item_id=...) at /buildslave/rust/src/librustc_trans/trans/base.rs:2895\n#16 walk_mod<rustc_trans::trans::base::TransItemsWithinModVisitor> (visitor=<optimized out>, module=<optimized out>) at /buildslave/rust/src/librustc_front/intravisit.rs:225\n#17 rustc_trans::trans::base::trans_crate (tcx=<optimized out>, mir_map=<optimized out>, analysis=<error reading variable: Cannot access memory at address 0x0>) at /buildslave/rust/src/librustc_trans/trans/base.rs:2752\n#18 0xb6ea6904 in fnfn () at /buildslave/rust/src/librustc_driver/driver.rs:941\n#19 time<rustc_trans::trans::CrateTranslation,closure> (f=..., do_it=<optimized out>, what=...) at /buildslave/rust/src/librustc/util/common.rs:38\n#20 rustc_driver::driver::phase_4_translate_to_llvm (tcx=<optimized out>, mir_map=<error reading variable: Cannot access memory at address 0x0>, analysis=...) at /buildslave/rust/src/librustc_driver/driver.rs:939\n#21 0xb6ea48f8 in fnfn (tcx=<optimized out>, mir_map=..., analysis=<error reading variable: Cannot access memory at address 0x0>, result=...) at /buildslave/rust/src/librustc_driver/driver.rs:205\n#22 0xb6e9e544 in fnfn (tcx=0xb21f9e18) at /buildslave/rust/src/librustc_driver/driver.rs:923\n#23 0xb6e98e58 in with<closure,core::result::Result<core::result::Result<(rustc::session::config::OutputFilenames, rustc_trans::trans::CrateTranslation), usize>, usize>> (self=<optimized out>, f=...) at /buildslave/rust/src/libstd/thread/local.rs:211\n#24 with<closure,core::result::Result<core::result::Result<(rustc::session::config::OutputFilenames, rustc_trans::trans::CrateTranslation), usize>, usize>> (self=<optimized out>, f=...) at /buildslave/rust/src/libstd/thread/local.rs:211\n#25 enter<closure,core::result::Result<core::result::Result<(rustc::session::config::OutputFilenames, rustc_trans::trans::CrateTranslation), usize>, usize>> (tcx=..., f=...) at /buildslave/rust/src/librustc/middle/ty/context.rs:642\n#26 rustc_driver::middle::ty::context::TyCtxt<'tcx>::create_and_enter<closure,core::result::Result<core::result::Result<(rustc::session::config::OutputFilenames, rustc_trans::trans::CrateTranslation), usize>, usize>> (s=<optimized out>, arenas=<optimized out>,\n    def_map=<error reading variable: Cannot access memory at address 0x0>, named_region_map=<error reading variable: Cannot access memory at address 0x0>, map=..., freevars=<error reading variable: Cannot access memory at address 0x0>, region_maps=<error reading variable: Cannot access memory at address 0x0>,\n    lang_items=..., stability=<error reading variable: Cannot access memory at address 0x0>, f=...) at /buildslave/rust/src/librustc/middle/ty/context.rs:521\n#27 0xb6e94b1c in rustc_driver::driver::phase_3_run_analysis_passes<closure,core::result::Result<(rustc::session::config::OutputFilenames, rustc_trans::trans::CrateTranslation), usize>> (sess=<optimized out>, cstore=<optimized out>, hir_map=..., arenas=<optimized out>, name=..., make_glob_map=<optimized out>, f=...)\n    at /buildslave/rust/src/librustc_driver/driver.rs:811\n#28 0xb6e69e60 in rustc_driver::driver::compile_input (sess=0xb21fd0b8, cstore=<optimized out>, cfg=..., input=<optimized out>, outdir=<optimized out>, output=<optimized out>, addl_plugins=..., control=<optimized out>) at /buildslave/rust/src/librustc_driver/driver.rs:171\n#29 0xb6e58360 in rustc_driver::run_compiler (args=..., callbacks=...) at /buildslave/rust/src/librustc_driver/lib.rs:207\n#30 0xb6e55b48 in fnfn () at /buildslave/rust/src/librustc_driver/lib.rs:130\n#31 fnfn () at /buildslave/rust/src/librustc_driver/lib.rs:1038\n#32 rustc_driver::sys_common::unwind::try::try_fn<closure> (opt_closure=<optimized out>) at /buildslave/rust/src/libstd/sys/common/unwind/mod.rs:127\n#33 0xb69a92a0 in __rust_try () from /home/japaric/stage2-C/lib/libstd-6183d680ed4f21d9.so\n#34 0xb69a9224 in fnfn (s=<optimized out>) at /buildslave/rust/src/libstd/sys/common/unwind/mod.rs:148\n#35 with<closure,core::result::Result<(), Box<Any>>> (self=<optimized out>, f=...) at /buildslave/rust/src/libstd/thread/local.rs:211\n#36 std::sys_common::unwind::inner_try (f=0xb6e55a1c <rustc_driver::sys_common::unwind::try::try_fn<closure>>, data=0xb21febe8 \"\") at /buildslave/rust/src/libstd/sys/common/unwind/mod.rs:133\n#37 0xb6e56330 in try<closure> (f=...) at /buildslave/rust/src/libstd/sys/common/unwind/mod.rs:123\n#38 rustc_driver::boxed::F.FnBox<A>::call_box (self=0xb2211c90, args=<optimized out>) at /buildslave/rust/src/liballoc/boxed.rs:541\n#39 0xb69b65ac in call_once (self=..., args=<optimized out>) at /buildslave/rust/src/liballoc/boxed.rs:550\n#40 start_thread (main=0xb227a020) at /buildslave/rust/src/libstd/sys/common/thread.rs:23\n#41 std::sys::thread::Thread::new::thread_start (main=0xb227a020) at /buildslave/rust/src/libstd/sys/unix/thread.rs:74\n#42 0xb28d2fbc in start_thread (arg=0xb21ff270) at pthread_create.c:314\n#43 0xb686f97c in ?? () at ../ports/sysdeps/unix/sysv/linux/arm/nptl/../clone.S:92 from /lib/arm-linux-gnueabihf/libc.so.6\n```\n\nRemoving any line that's not just whitespace from `src/lib.rs` makes the LLVM assertion disappear.\n### Meta\n\n```\n$ rustc -Vv\nrustc 1.9.0-nightly (151be0933 2016-03-19)\nbinary: rustc\ncommit-hash: 151be09333b53a761c847107bc659769632ae6c6\ncommit-date: 2016-03-19\nhost: armv7-unknown-linux-gnueabihf\nrelease: 1.9.0-nightly\n```\n\nCompiler produced with:\n\n```\n$ configure --enable-llvm-static-stdcpp --enable-rustbuild --release-channel=nightly --enable-debug --enable-optimize --host=armv7-unknown-linux-gnueabihf\n```\n\n---\n\nA compiler built without optimizations (see `configure` arguments below) never hits the LLVM assertion.\n\n```\n$ configure --enable-llvm-static-stdcpp --enable-rustbuild --release-channel=nightly --enable-debug --host=armv7-unknown-linux-gnueabihf\n```\n\nA compiler built with optimizations and without debug information (see `configure` arguments below) also hits the LLVM assertion.\n\n```\nconfigure --enable-llvm-static-stdcpp --enable-rustbuild --release-channel=nightly --host=armv7-unknown-linux-gnueabihf\n```\n\nThis is a rather old regression that I tried to bisect long time ago, and if my memory serves me right I tracked it down to rust-lang/rust#23011.\n\ncc @alexcrichton \n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32360/timeline", "performed_via_github_app": null, "state_reason": "completed"}