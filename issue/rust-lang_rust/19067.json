{"url": "https://api.github.com/repos/rust-lang/rust/issues/19067", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19067/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19067/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19067/events", "html_url": "https://github.com/rust-lang/rust/issues/19067", "id": 49199885, "node_id": "MDU6SXNzdWU0OTE5OTg4NQ==", "number": 19067, "title": "The Rust Pointer Guide: Section 6 can be made clearer", "user": {"login": "genbattle", "id": 483375, "node_id": "MDQ6VXNlcjQ4MzM3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/483375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/genbattle", "html_url": "https://github.com/genbattle", "followers_url": "https://api.github.com/users/genbattle/followers", "following_url": "https://api.github.com/users/genbattle/following{/other_user}", "gists_url": "https://api.github.com/users/genbattle/gists{/gist_id}", "starred_url": "https://api.github.com/users/genbattle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/genbattle/subscriptions", "organizations_url": "https://api.github.com/users/genbattle/orgs", "repos_url": "https://api.github.com/users/genbattle/repos", "events_url": "https://api.github.com/users/genbattle/events{/privacy}", "received_events_url": "https://api.github.com/users/genbattle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2014-11-18T09:39:08Z", "updated_at": "2015-01-16T06:03:07Z", "closed_at": "2015-01-16T06:03:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[Section 6 of The Rust Pointer Guide](http://doc.rust-lang.org/guide-pointers.html#returning-pointers) is as follows:\n\n> In many languages with pointers, you'd return a pointer from a function\n> so as to avoid copying a large data structure. For example:\n> \n> ``` rust\n> struct BigStruct {\n>     one: int,\n>     two: int,\n>     // etc\n>     one_hundred: int,\n> }\n> \n> fn foo(x: Box<BigStruct>) -> Box<BigStruct> {\n>     return box *x;\n> }\n> \n> fn main() {\n>     let x = box BigStruct {\n>         one: 1,\n>         two: 2,\n>         one_hundred: 100,\n>     };\n> \n>     let y = foo(x);\n> }\n> ```\n> \n> The idea is that by passing around a box, you're only copying a pointer, rather\n> than the hundred `int`s that make up the `BigStruct`.\n> \n> This is an antipattern in Rust. Instead, write this:\n> \n> ``` rust\n> struct BigStruct {\n>     one: int,\n>     two: int,\n>     // etc\n>     one_hundred: int,\n> }\n> \n> fn foo(x: Box<BigStruct>) -> BigStruct {\n>     return *x;\n> }\n> \n> fn main() {\n>     let x = box BigStruct {\n>         one: 1,\n>         two: 2,\n>         one_hundred: 100,\n>     };\n> \n>     let y = box foo(x);\n> }\n> ```\n> \n> This gives you flexibility without sacrificing performance.\n> \n> You may think that this gives us terrible performance: return a value and then\n> immediately box it up ?! Isn't that the worst of both worlds? Rust is smarter\n> than that. There is no copy in this code. main allocates enough room for the\n> `box , passes a pointer to that memory into foo as x, and then foo writes the\n> value straight into that pointer. This writes the return value directly into\n> the allocated box.\n> \n> This is important enough that it bears repeating: pointers are not for\n> optimizing returning values from your code. Allow the caller to choose how they\n> want to use your output.\n\nI was [very confused](http://www.reddit.com/r/rust/comments/2mmd03/can_i_get_clarification_on_something_in_the_rust/) by the second to last paragraph of this section. The paragraph uses the word \"_that_\" when referencing a memory location and a pointer. The first reference is clear, but the second isn't. This isn't helped by the fact that in the example the label `x` is used for both the variable passed into the function `foo()` and the parameter inside the function, making it hard to clearly express where and when values are being assigned. It also says the same thing twice\n\nThe disambiguation should make it clear that both the pointer to x and the pointer to y are being used in the function, where x is explicity passed as a parameter and y is implicitly passed as the return location. The general idea the paragraph expresses is already communicated, but I think it could be more explicit about the mechanics. Currently it almost makes it sound like `foo()` is returning a value via the passed parameter, or that it is moving the value rather than copying from one heap location to another.\n\nAlso someone mentioned that the \"`box\" in the second paragraph may be missing another \"`\".\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19067/timeline", "performed_via_github_app": null, "state_reason": "completed"}