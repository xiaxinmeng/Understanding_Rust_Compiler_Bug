{"url": "https://api.github.com/repos/rust-lang/rust/issues/66031", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66031/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66031/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66031/events", "html_url": "https://github.com/rust-lang/rust/issues/66031", "id": 516390013, "node_id": "MDU6SXNzdWU1MTYzOTAwMTM=", "number": 66031, "title": "Chain iterator adaptor shold drop exhausted subiterator", "user": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-01T23:03:59Z", "updated_at": "2021-12-22T00:54:15Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider the following program:\r\n\r\n```rust\r\nuse std::sync::mpsc::channel;\r\n\r\nfn main() {\r\n    let (sender, reciever) = channel();\r\n\r\n    let source = (1..10).map(move |i| {sender.send(i).unwrap(); i});\r\n    let sink = reciever;\r\n\r\n    let iter = source.chain(sink);\r\n    for x in iter {\r\n        println!(\"{}\", x);\r\n    }\r\n\r\n    println!(\"done\");\r\n}\r\n```\r\n\r\nCurrently, it deadlocks. It can be argued, however, that this program should finish, given that \"equivalent\" program without chain finishes:\r\n\r\n```rust\r\nuse std::sync::mpsc::channel;\r\n\r\nfn main() {\r\n    let (sender, reciever) = channel();\r\n\r\n    let source = (1..10).map(move |i| {sender.send(i).unwrap(); i});\r\n    let sink = reciever;\r\n\r\n    for x in source {\r\n        println!(\"{}\", x)\r\n    }\r\n    for x in sink {\r\n        println!(\"{}\", x);\r\n    }\r\n\r\n    println!(\"done\");\r\n}\r\n```\r\n\r\nI think this can be achieved by changing the `Chain` definition from \r\n\r\n```rust\r\nstruct Chain<A, B> {\r\n  left: A,\r\n  right: B,\r\n  state: State,\r\n}\r\n\r\nenum State { Left, Right, Both }\r\n```\r\n\r\nto \r\n\r\n```rust\r\nstruct Chain<A, B> {\r\n  state: State<A, B>,\r\n}\r\n\r\nenum State<A, B> { Left(A), Right(B), Both(A, B) }\r\n```\r\n\r\nthis will require some unsafe code to flip from `Both` to `Left`, using only `&mut Both`, but should be doable. \r\n\r\nContext: I've discovered similarly-shaped code when trying to simplify [this code](https://github.com/async-rs/async-std/pull/419/files#diff-c497dc8de6d1e1471ddca482854b7634R137). Basically, this is an event loop, which works on the stream of events, and some events can feed new events back into the loop. The goal is to make sure the loop is cleanly exhausted. \r\n\r\nNot sure if this actually worth it, given super-obscure use-case and potential complications during implementation...\r\n\r\ncc @bluss ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66031/timeline", "performed_via_github_app": null, "state_reason": null}