{"url": "https://api.github.com/repos/rust-lang/rust/issues/9036", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9036/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9036/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9036/events", "html_url": "https://github.com/rust-lang/rust/issues/9036", "id": 19139912, "node_id": "MDU6SXNzdWUxOTEzOTkxMg==", "number": 9036, "title": "Cross-crate global constants aren't being inlined", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-09-07T07:50:25Z", "updated_at": "2013-09-17T07:55:48Z", "closed_at": "2013-09-17T07:55:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I've got a project which uses `extra::bitv::Bitv` heavily, and I was looking at some time profiles of it recently. Currently the hottest function is `bitv::Bitv::get`, but if you look at the actual assembly heat map, there are two \"hot\" instructions, both of which are `div` operations.\n\nNow this is very odd, because the only division/remainder done in `bitv::Bitv::get` is by `uint::bits`, a power-of-two constant. Hence, I would expect that these operations get optimized to shifts and ands.\n\nI tried to reproduce this with a smaller test case, but LLVM's optimizations ended up thwarting me. I ended up generating the `ll` file for my project (282k lines of assembly), and found the definition of the get function. It appears that because it's marked `#[inline]`, we inline it into the current crate. Because the division is done by the path `uint::bits`, this is translated to the load of a global constant before then passed to the `udiv` instruction for llvm.\n\nApparently, even though we inlined the entire function into another crate, we did _not_ inline the constant. This global (`uint::generated::bits`) is then reflected in the LLVM module as:\n\n```\n@\"...uint::generated::bits...\" = external global i64\n```\n\nWhich means that LLVM can no longer optimize based on the values of globals.\n\nSo my question is, is this something that we intend to support for optimizations? In a specific case like `bitv` perhaps we could remove the `#[inline]` annotation, but that's a bit of a shame. I'm not entirely sure that we can inline the values of global constants because that's only possible if the addresses are insignificant (which they're not by default right now).\n\nIn theory the values of constants could be inlined, but not much beyond immediates (constants with addresses to other constants may get tricky).\n\nI'm not entirely sure what the best course of action to take here, but I wanted to see what others thought about this. The answer may just be removing `#[inline]` from bitv with a comment explaining why it can't be marked as such. This may have repercussions elsewhere though...\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9036/timeline", "performed_via_github_app": null, "state_reason": "completed"}