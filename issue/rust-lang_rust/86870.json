{"url": "https://api.github.com/repos/rust-lang/rust/issues/86870", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86870/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86870/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86870/events", "html_url": "https://github.com/rust-lang/rust/issues/86870", "id": 936520237, "node_id": "MDU6SXNzdWU5MzY1MjAyMzc=", "number": 86870, "title": "Compiling small program with -C opt-level=2 takes hours or never finishes without -Cinline-threshold flag", "user": {"login": "ajdust", "id": 9620665, "node_id": "MDQ6VXNlcjk2MjA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9620665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajdust", "html_url": "https://github.com/ajdust", "followers_url": "https://api.github.com/users/ajdust/followers", "following_url": "https://api.github.com/users/ajdust/following{/other_user}", "gists_url": "https://api.github.com/users/ajdust/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajdust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajdust/subscriptions", "organizations_url": "https://api.github.com/users/ajdust/orgs", "repos_url": "https://api.github.com/users/ajdust/repos", "events_url": "https://api.github.com/users/ajdust/events{/privacy}", "received_events_url": "https://api.github.com/users/ajdust/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-07-04T19:04:31Z", "updated_at": "2021-07-06T20:37:03Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\n### Background\r\n\r\nI generated a small identical program in Rust and C++. See for instance:\r\n\r\n- [C++ with 20 functions](https://gist.github.com/ajdust/5e92cab52ffab5ea2a52edbd47aa348a)\r\n- [Rust with 20 functions](https://gist.github.com/ajdust/9cf976ed2935ad428ee5465cbdef7d56)\r\n- [C++ with 500 functions](https://gist.github.com/ajdust/64abc3434ada7d9439df8e0a24923d68)\r\n- [Rust with 500 functions](https://gist.github.com/ajdust/270c33eff3340a705a22fd15a2b01e12)\r\n\r\nBenchmarking the compilation of this code (using [hyperfine](https://github.com/sharkdp/hyperfine)) I find:\r\n\r\n```\r\n# equivalent C++ code compiles in under 4 seconds to compile 500 functions with clang\r\ntest> hyperfine 'clang++ -O2 test_500.cpp -Wno-xor-used-as-pow' --warmup 1\r\nBenchmark 1: clang++ -O2 test_500.cpp -Wno-xor-used-as-pow\r\n  Time (mean \u00b1 \u03c3):      3.224 s \u00b1  0.066 s    [User: 2.8 ms, System: 7.3 ms]\r\n  Range (min \u2026 max):    3.181 s \u2026  3.348 s    10 runs\r\n\r\n# trying to compile with equivalent Rust with 500 functions goes nowhere... cancelled after leaving this running for 12 hours\r\ntest> hyperfine 'rustc -C opt-level=2 test_500.rs' --min-runs 2\r\nBenchmark 1: rustc -C opt-level=2 test_500.rs\r\n | Initial time measurement       \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 ETA 00:00:00\r\n\r\n# code compiles quickly with -Cinline-threshold passed, back to under 4 seconds like clang\r\ntest> hyperfine 'rustc -C opt-level=2 test_500.rs -Cinline-threshold=1000' --min-runs 2\r\nBenchmark 1: rustc -C opt-level=2 test_500.rs -Cinline-threshold=1000\r\n  Time (mean \u00b1 \u03c3):      3.888 s \u00b1  0.246 s    [User: 0.0 ms, System: 5.6 ms]\r\n  Range (min \u2026 max):    3.714 s \u2026  4.062 s    2 runs\r\n\r\n# smaller sample for 20 functions takes a second to compile with clang\r\ntest> hyperfine 'clang++ -O2 test_20.cpp -Wno-xor-used-as-pow' --warmup 1\r\nBenchmark 1: clang++ -O2 test_20.cpp -Wno-xor-used-as-pow\r\n  Time (mean \u00b1 \u03c3):      1.143 s \u00b1  0.022 s    [User: 2.7 ms, System: 6.6 ms]\r\n  Range (min \u2026 max):    1.122 s \u2026  1.201 s    10 runs\r\n\r\n# smaller sample with 20 functions takes nearly two minutes to compile with rustc\r\ntest> hyperfine 'rustc -C opt-level=2 test_20.rs' --min-runs 2\r\nBenchmark 1: rustc -C opt-level=2 test_20.rs\r\n  Time (mean \u00b1 \u03c3):     100.216 s \u00b1  0.008 s    [User: 0.0 ms, System: 11.6 ms]\r\n  Range (min \u2026 max):   100.210 s \u2026 100.221 s    2 runs\r\n```\r\n\r\n### Expectation vs. reality\r\n\r\nI would expect Rust to have similar optimizing performance to clang in this case. That is, compiling in seconds without an obscure compiler flag. Instead, it effectively fails to compile by never finishing. As a Rust newb this behavior is not very friendly. Is there a reasonable limit like comes into play with the `-Cinline-threshold` flag that should be included in the optimization flags (such `opt-level=2`) by default, or a way to otherwise stop the compiler from falling down an endless or futile pit?\r\n\r\n### Thank you\r\n\r\nThank you for you time, I hope this issue can improve Rust. There is the accompanying [StackOverflow](https://stackoverflow.com/questions/53696057/why-does-rustc-take-over-a-minute-to-compile-this-250-line-program-with-optimiza) posting where I learned about the `-Cinline-threshold` flag and user `bluss` recommended a bug report here.\r\n\r\n`rustc` versions used; I previously replicated this on Linux and OS X as well.\r\n\r\n```\r\nrustc 1.53.0 (53cb7b09b 2021-06-17)\r\nbinary: rustc\r\ncommit-hash: 53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\r\ncommit-date: 2021-06-17\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.53.0\r\nLLVM version: 12.0.1\r\n\r\nrustc 1.55.0-nightly (71b8742bb 2021-07-03)\r\nbinary: rustc\r\ncommit-hash: 71b8742bbcbed2cd908dbc031d6552d8b528c037\r\ncommit-date: 2021-07-03\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.55.0-nightly\r\nLLVM version: 12.0.1\r\n```\r\n\r\nHere is the 20 function Rust code for reference if the gists ever stops working:\r\n\r\n```rs\r\n//$ rustc -C opt-level=2 test_20.rs\r\n//  takes over a minute to compile, rustc 1.55.0\r\n//  see https://gist.github.com/johnsabr/5e92cab52ffab5ea2a52edbd47aa348a\r\n#![allow(unused_parens)]\r\n\r\nfn f0(p: i32) -> i32 {\r\n    let x1: i32 = (p - ((((21 | 1) | p) ^ 84) & ((48 ^ (52 | (p & (2 ^ 61)))) - 67)));\r\n    let x2: i32 = x1;\r\n    let mut x3: i32 = 54;\r\n    let x4: i32 = 75;\r\n    let x5: i32 = (77 & 39);\r\n    let x6: i32 = (x2 * x5);\r\n    let x7: i32 = (88 * (8 + x1));\r\n    x3 = (x3 + 60);\r\n    ((((((((32 * p) & x1) ^ x2) - x3) ^ x4) & x5) | x6) | x7)\r\n}\r\n\r\nfn f1(p: i32) -> i32 {\r\n    let mut x1: i32 = f0(78);\r\n    x1 = (x1 ^ p);\r\n    let mut x2: i32 = f0(x1);\r\n    x2 = (x2 * 3);\r\n    let x3: i32 = f0(x1);\r\n    let x4: i32 = ((21 & (x3 - ((93 * (x3 - (f0(x3) - (x2 - (f0(x1) | 43))))) | (f0(p) - f0(x1))))) * 41);\r\n    ((((((f0(p) | x2) ^ p) & x1) ^ x2) | x3) - x4)\r\n}\r\n\r\nfn f2(p: i32) -> i32 {\r\n    let mut x1: i32 = f1(50);\r\n    x1 = (x1 * p);\r\n    x1 = (x1 | f0(p));\r\n    let mut x2: i32 = f1(x1);\r\n    x2 = (x2 | f1(x2));\r\n    let mut x3: i32 = (24 * f0(x1));\r\n    x2 = (x2 & f0(p));\r\n    x3 = (x3 ^ x1);\r\n    let x4: i32 = x1;\r\n    (((((x4 ^ p) | x1) * x2) + x3) | x4)\r\n}\r\n\r\nfn f3(p: i32) -> i32 {\r\n    let mut x1: i32 = f2(75);\r\n    let x2: i32 = x1;\r\n    x1 = (x1 & x2);\r\n    let x3: i32 = f0(p);\r\n    let x4: i32 = ((f1(x3) ^ f1(x2)) + 92);\r\n    x1 = (x1 | (x2 ^ 94));\r\n    x1 = (x1 * x2);\r\n    let x5: i32 = (f0(x1) & (3 ^ (f0(x1) * f2(x4))));\r\n    x1 = (x1 + x2);\r\n    (((((((x1 * x5) * p) - x1) | x2) * x3) - x4) - x5)\r\n}\r\n\r\nfn f4(p: i32) -> i32 {\r\n    let mut x1: i32 = f3(14);\r\n    x1 = (x1 + f0(p));\r\n    let mut x2: i32 = f1(x1);\r\n    x1 = (x1 - 41);\r\n    x2 = (x2 ^ 61);\r\n    let x3: i32 = f2(p);\r\n    x2 = (x2 ^ p);\r\n    let x4: i32 = x2;\r\n    x1 = (x1 - p);\r\n    x1 = (x1 * x4);\r\n    ((((((88 & 11) & p) - x1) * x2) ^ x3) | x4)\r\n}\r\n\r\nfn f5(p: i32) -> i32 {\r\n    let mut x1: i32 = f4(50);\r\n    x1 = (x1 ^ 13);\r\n    ((35 + p) | x1)\r\n}\r\n\r\nfn f6(p: i32) -> i32 {\r\n    let mut x1: i32 = f5(51);\r\n    x1 = (x1 + 27);\r\n    let x2: i32 = (p + (p | f1(x1)));\r\n    x1 = (x1 + f0(x2));\r\n    let x3: i32 = f0(x1);\r\n    let mut x4: i32 = 48;\r\n    x1 = (x1 ^ f0(p));\r\n    x1 = (x1 & 26);\r\n    x4 = (x4 * f1(x4));\r\n    (((((99 - p) * x1) ^ x2) & x3) + x4)\r\n}\r\n\r\nfn f7(p: i32) -> i32 {\r\n    let mut x1: i32 = f6(71);\r\n    x1 = (x1 & 66);\r\n    x1 = (x1 & p);\r\n    let x2: i32 = 57;\r\n    x1 = (x1 * 26);\r\n    let x3: i32 = (21 & p);\r\n    let x4: i32 = (f0(x1) & (f3(p) * f2(p)));\r\n    let x5: i32 = f6(x3);\r\n    ((((((x5 + p) | x1) + x2) - x3) & x4) * x5)\r\n}\r\n\r\nfn f8(p: i32) -> i32 {\r\n    let mut x1: i32 = f7(57);\r\n    x1 = (x1 & f5(p));\r\n    x1 = (x1 ^ (x1 & f1(p)));\r\n    let x2: i32 = 25;\r\n    let x3: i32 = f5(x1);\r\n    ((((x1 - p) * x1) & x2) ^ x3)\r\n}\r\n\r\nfn f9(p: i32) -> i32 {\r\n    let mut x1: i32 = f8(23);\r\n    x1 = (x1 | (((26 | f4(x1)) - f0(p)) | f8(p)));\r\n    let x2: i32 = x1;\r\n    let mut x3: i32 = 58;\r\n    x3 = (x3 - p);\r\n    let x4: i32 = f7(x1);\r\n    let x5: i32 = f7(x2);\r\n    let x6: i32 = (f7(x1) & 79);\r\n    (((((((33 | p) - x1) + x2) + x3) * x4) ^ x5) + x6)\r\n}\r\n\r\nfn f10(p: i32) -> i32 {\r\n    let mut x1: i32 = f9(75);\r\n    x1 = (x1 | 37);\r\n    (((f8(x1) + f3(x1)) | p) * x1)\r\n}\r\n\r\nfn f11(p: i32) -> i32 {\r\n    let mut x1: i32 = f10(8);\r\n    x1 = (x1 ^ f6(x1));\r\n    let mut x2: i32 = p;\r\n    x2 = (x2 ^ 84);\r\n    let x3: i32 = (f5(p) ^ f5(p));\r\n    x1 = (x1 * f5(p));\r\n    x1 = (x1 | f1(x2));\r\n    x1 = (x1 * f8(p));\r\n    ((((((f0(x3) | f9(p)) - f4(x1)) + p) & x1) & x2) - x3)\r\n}\r\n\r\nfn f12(p: i32) -> i32 {\r\n    let mut x1: i32 = f11(33);\r\n    x1 = (x1 * 84);\r\n    let mut x2: i32 = (67 - f0(p));\r\n    x2 = (x2 | x1);\r\n    x1 = (x1 - 67);\r\n    x2 = (x2 - f6(p));\r\n    (((p - p) * x1) | x2)\r\n}\r\n\r\nfn f13(p: i32) -> i32 {\r\n    let mut x1: i32 = f12(90);\r\n    x1 = (x1 + (f6(x1) - f4(p)));\r\n    x1 = (x1 - 19);\r\n    let x2: i32 = 92;\r\n    let mut x3: i32 = f9(x1);\r\n    let mut x4: i32 = x3;\r\n    x4 = (x4 - (87 | f5(x3)));\r\n    x3 = (x3 | 49);\r\n    let x5: i32 = 25;\r\n    let x6: i32 = x3;\r\n    (((((((2 & p) - x1) ^ x2) ^ x3) ^ x4) | x5) | x6)\r\n}\r\n\r\nfn f14(p: i32) -> i32 {\r\n    let mut x1: i32 = f13(66);\r\n    let x2: i32 = f2(p);\r\n    x1 = (x1 - 11);\r\n    let mut x3: i32 = 69;\r\n    x3 = (x3 * x2);\r\n    let x4: i32 = 91;\r\n    (((((19 * p) + x1) | x2) ^ x3) & x4)\r\n}\r\n\r\nfn f15(p: i32) -> i32 {\r\n    let mut x1: i32 = f14(79);\r\n    x1 = (x1 + (f8(p) & p));\r\n    let x2: i32 = p;\r\n    x1 = (x1 | ((f5(p) & x2) ^ x2));\r\n    let mut x3: i32 = x1;\r\n    x1 = (x1 - p);\r\n    x3 = (x3 * p);\r\n    ((((40 * p) ^ x1) + x2) + x3)\r\n}\r\n\r\nfn f16(p: i32) -> i32 {\r\n    let x1: i32 = f15(77);\r\n    let mut x2: i32 = 5;\r\n    let mut x3: i32 = x1;\r\n    let x4: i32 = p;\r\n    x2 = (x2 + p);\r\n    let x5: i32 = x4;\r\n    x3 = (x3 | f9(x4));\r\n    let x6: i32 = (68 ^ (61 ^ (24 * f14(x4))));\r\n    (((((((88 + p) - x1) & x2) | x3) & x4) ^ x5) | x6)\r\n}\r\n\r\nfn f17(p: i32) -> i32 {\r\n    let mut x1: i32 = f16(41);\r\n    x1 = (x1 | 4);\r\n    let mut x2: i32 = x1;\r\n    x1 = (x1 | 52);\r\n    x1 = (x1 & 49);\r\n    x2 = (x2 & (f8(x2) ^ p));\r\n    let mut x3: i32 = x2;\r\n    x3 = (x3 ^ ((x1 ^ x2) + f15(x2)));\r\n    let mut x4: i32 = (f13(x2) ^ 73);\r\n    x4 = (x4 - f12(x1));\r\n    (((((x3 - p) + x1) ^ x2) + x3) | x4)\r\n}\r\n\r\nfn f18(p: i32) -> i32 {\r\n    let mut x1: i32 = f17(3);\r\n    x1 = (x1 & (p - ((33 * (95 | 87)) | (9 - f1(x1)))));\r\n    x1 = (x1 & (80 - f16(x1)));\r\n    x1 = (x1 & p);\r\n    x1 = (x1 + p);\r\n    x1 = (x1 | (82 - ((81 ^ p) - 97)));\r\n    ((20 - p) * x1)\r\n}\r\n\r\nfn f19(p: i32) -> i32 {\r\n    let x1: i32 = f18(24);\r\n    let x2: i32 = (p & p);\r\n    let mut x3: i32 = 82;\r\n    let x4: i32 = (4 + x1);\r\n    x3 = (x3 | ((f10(p) + (f16(x3) - 34)) - f10(x1)));\r\n    let x5: i32 = (x4 | (x1 * (((f16(x1) + f4(x4)) - 43) & f7(x3))));\r\n    (((((((f14(x3) | f9(x5)) - p) & x1) * x2) & x3) * x4) + x5)\r\n}\r\n\r\nfn f20(p: i32) -> i32 {\r\n    let x1: i32 = f19(78);\r\n    let x2: i32 = 81;\r\n    let x3: i32 = (x2 + (59 & x1));\r\n    (((((f9(x3) ^ f11(x3)) * p) * x1) - x2) ^ x3)\r\n}\r\n\r\nfn main() {\r\n    let mut x0: i32 = f20(65);\r\n    x0 = (x0 * (53 + 37));\r\n    let mut x1: i32 = (x0 - ((41 | ((f20(x0) * f9(x0)) + ((((f20(x0) + (77 + (f14(x0) ^ 60))) * 27) & 62) + x0))) & f20(x0)));\r\n    let x2: i32 = f15(x1);\r\n    x1 = (x1 | (x0 * (4 ^ 37)));\r\n    let m: i32 = (((x2 | x0) | x1) | x2);\r\n    println!(\"{}\", m);\r\n\r\n}\r\n```\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86870/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86870/timeline", "performed_via_github_app": null, "state_reason": null}