{"url": "https://api.github.com/repos/rust-lang/rust/issues/73226", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73226/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73226/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73226/events", "html_url": "https://github.com/rust-lang/rust/issues/73226", "id": 636633749, "node_id": "MDU6SXNzdWU2MzY2MzM3NDk=", "number": 73226, "title": "Cannot unify associated type parameter in `impl Fn` with concrete instantiation", "user": {"login": "rphmeier", "id": 10121380, "node_id": "MDQ6VXNlcjEwMTIxMzgw", "avatar_url": "https://avatars.githubusercontent.com/u/10121380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rphmeier", "html_url": "https://github.com/rphmeier", "followers_url": "https://api.github.com/users/rphmeier/followers", "following_url": "https://api.github.com/users/rphmeier/following{/other_user}", "gists_url": "https://api.github.com/users/rphmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/rphmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rphmeier/subscriptions", "organizations_url": "https://api.github.com/users/rphmeier/orgs", "repos_url": "https://api.github.com/users/rphmeier/repos", "events_url": "https://api.github.com/users/rphmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/rphmeier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1405345617, "node_id": "MDU6TGFiZWwxNDA1MzQ1NjE3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lazy-normalization", "name": "A-lazy-normalization", "color": "f7e101", "default": false, "description": "Area: lazy normalization (tracking issue: #60471)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-11T00:29:42Z", "updated_at": "2020-06-11T10:08:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, I'm running into a strange behavior where the compiler has difficulty unifying an associated type in an `impl Fn` with a concrete type in a certain instantiation of it.\r\n\r\nLink to playpen: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=1d0d2fd109dd2c691f2b2051b8a2d33a\r\n\r\nI have also reproduced the code below.\r\n```rust\r\ntrait Trait {\r\n    type Num: Copy;\r\n}\r\n\r\nstruct NumIsU32;\r\nimpl Trait for NumIsU32 {\r\n    type Num = u32;\r\n}\r\n\r\nstruct Foo<T>(std::marker::PhantomData<T>);\r\n\r\nimpl<T: Trait> Foo<T> {\r\n    fn make_predicate() -> impl Fn(T::Num) -> bool {\r\n        |num| true\r\n    }\r\n    \r\n    fn make_predicate_boxed() -> Box<dyn Fn(T::Num) -> bool> {\r\n        Box::new(|num| true)\r\n    }\r\n}\r\n\r\ntype FooForYou = Foo<NumIsU32>;\r\n\r\nfn main() {\r\n    // doesn't compile: can't reconcile u32 with <NumIsU32 as Trait>::Num\r\n    // let pred = FooForYou::make_predicate();\r\n    // assert!(pred(5u32));\r\n    \r\n    // does compile.\r\n    let pred = FooForYou::make_predicate_boxed();\r\n    assert!(pred(5u32));\r\n}\r\n```\r\n\r\nHere is the error output for the portion that doesn't compile:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:27:18\r\n   |\r\n27 |     assert!(pred(5u32));\r\n   |                  ^^^^ expected associated type, found `u32`\r\n   |\r\n   = note: expected associated type `<NumIsU32 as Trait>::Num`\r\n                         found type `u32`\r\n   = note: consider constraining the associated type `<NumIsU32 as Trait>::Num` to `u32` or calling a method that returns `<NumIsU32 as Trait>::Num`\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\r\n\r\nerror[E0277]: expected a `std::ops::Fn<(u32,)>` closure, found `impl std::ops::Fn<(<NumIsU32 as Trait>::Num,)>`\r\n  --> src/main.rs:27:13\r\n   |\r\n27 |     assert!(pred(5u32));\r\n   |             ^^^^^^^^^^ expected an `Fn<(u32,)>` closure, found `impl std::ops::Fn<(<NumIsU32 as Trait>::Num,)>`\r\n   |\r\n   = help: the trait `std::ops::Fn<(u32,)>` is not implemented for `impl std::ops::Fn<(<NumIsU32 as Trait>::Num,)>`\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\n```\r\n\r\nWhat is unclear to me is whether this is an intended restriction of the `impl Trait` feature or an unintended compiler issue. I believe specialization imposes some artificial restrictions on unifying specialized associated types with their concrete counterparts as a soundness protection. Is the same happening here?\r\n\r\nI have also posted this on the users.rust-lang-org forum where it was suggested this is a bug.\r\n\r\nThanks for your help in advance :)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73226/timeline", "performed_via_github_app": null, "state_reason": null}