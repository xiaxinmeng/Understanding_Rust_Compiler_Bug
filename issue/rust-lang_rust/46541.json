{"url": "https://api.github.com/repos/rust-lang/rust/issues/46541", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46541/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46541/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46541/events", "html_url": "https://github.com/rust-lang/rust/issues/46541", "id": 279839046, "node_id": "MDU6SXNzdWUyNzk4MzkwNDY=", "number": 46541, "title": "\ud83d\ude80 existential impl Trait allows lifetimes that would not be allowed by abstract type", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 693557542, "node_id": "MDU6TGFiZWw2OTM1NTc1NDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-traits", "name": "WG-traits", "color": "c2e0c6", "default": false, "description": "Working group: Traits, https://internals.rust-lang.org/t/announcing-traits-working-group/6804"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-06T17:25:27Z", "updated_at": "2018-03-22T09:46:25Z", "closed_at": "2018-03-22T09:46:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider [this curious case](https://play.rust-lang.org/?gist=d9a635ff3417aecc141d059e0db69e81&version=nightly):\r\n\r\n```rust\r\n#![allow(dead_code)]\r\n#![feature(conservative_impl_trait)]\r\n#![feature(in_band_lifetimes)]\r\n\r\nuse std::cell::Cell;\r\n\r\ntrait Trait<'a> { }\r\n\r\nimpl Trait<'b> for Cell<&'a u32> { }\r\n\r\nfn foo(x: Cell<&'x u32>) -> impl Trait<'y>\r\nwhere 'x: 'y\r\n{\r\n    x\r\n}\r\n\r\nfn main() { }\r\n```\r\n\r\nHere, the value we are returning is of type `Cell<&'x u32>`, but the return type ought only to be able to mention `'y`. In other words, we are inferring something like\r\n\r\n```rust\r\nabstract type Foo<'z>: Trait<'z> = Cell<&'x u32>\r\n```\r\n\r\nwhich is clearly malformed. We allow this because the current code has regionck bound all lifetimes with `'y` and considers that sufficient to ensure that nothing is \"leaking\" that shouldn't -- but, as can be seen here, that's not always true.\r\n\r\nI don't think we should accept this  -- at least for now. However, I also could not find an obvious way to weaponize it. There may not be one. Consider that [this variant](https://play.rust-lang.org/?gist=6ebc8027d5bd6eee0eb598e29adea553&version=nightly), using `Box<dyn Trait<'y> + 'y>` in place of `impl Trait<'y>`, type-checks and ought to be sound (afaik). (In part, though, this relies on the fact that we expand `impl Trait<'y>` to `impl Trait<'y> + 'y` internally, but it seems like `impl Trait<'y>` must outlive `'y` just by construction, since it could not name any other lifetime.)\r\n\r\nOne could imagine permitting the example via some sort of subtyping relation on abstract types -- that is, perhaps we might determine a variance for `Foo` with respect to its type parameters based on the traits that it implements. Not sure if that would be sound, but you could imagine it. Until we have such a justification, though, I think we should not accept the example.\r\n\r\nI'll probably fix this en passane while doing some refactoring to support `impl Trait` in the NLL code.\r\n\r\ncc https://github.com/rust-lang/rust/issues/34511", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46541/timeline", "performed_via_github_app": null, "state_reason": "completed"}