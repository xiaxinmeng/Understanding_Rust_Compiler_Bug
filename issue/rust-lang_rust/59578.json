{"url": "https://api.github.com/repos/rust-lang/rust/issues/59578", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59578/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59578/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59578/events", "html_url": "https://github.com/rust-lang/rust/issues/59578", "id": 427372406, "node_id": "MDU6SXNzdWU0MjczNzI0MDY=", "number": 59578, "title": "Check that non-overwrite accesses to downcast projections are dominated by variant checks.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-31T08:36:28Z", "updated_at": "2020-03-23T00:28:27Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Pattern-matching in Rust, e.g.:\r\n```rust\r\nfn f<T>(_: T) {}\r\nfn g<T>(_: T) {}\r\n\r\n// T and E have Copy bounds to reduce MIR verbosity. \r\npub fn foo<T: Copy, E: Copy>(r: Result<T, E>) {\r\n    match r {\r\n        Ok(x) => f(x),\r\n        Err(e) => g(e),\r\n    }\r\n}\r\n\r\n```\r\nturns into this MIR (slightly cleaned up):\r\n```rust\r\nfn foo(_1: std::result::Result<T, E>) -> () {\r\n    let mut _0: ();                      // return place\r\n    let mut _2: isize;\r\n    let mut _3: T;\r\n    let mut _4: E;\r\n\r\n    bb0: {\r\n        _2 = discriminant(_1);\r\n        switchInt(move _2) -> [0isize: bb2, 1isize: bb3, otherwise: bb1];\r\n    }\r\n\r\n    bb1: {\r\n        unreachable;\r\n    }\r\n\r\n    bb2: {\r\n        _3 = ((_1 as Ok).0: T);\r\n        _0 = const f(move _3) -> bb4;\r\n    }\r\n\r\n    bb3: {\r\n        _4 = ((_1 as Err).0: E);\r\n        _0 = const g(move _4) -> bb4;\r\n    }\r\n\r\n    bb4: {\r\n        return;\r\n    }\r\n}\r\n```\r\n\r\nWe already have a dominator tree for MIR, so we can build on top of that and compute the known variants for places (in this case, `Ok` and `Err` for `_1`).\r\n\r\nThen we can just check that any read/borrow/etc. access (any access with does not fully overwrite the previous value, really) within a downcast (e.g. `(_1 as Ok).0`) is dominated by a variant check for that variant (i.e. `_1` being `Ok`, via `_2` being `discriminant(_1)`).\r\n\r\nThat said, the kind of dataflow borrowck already needs to do might easily include this too (e.g. treating `(_1 as Ok)` as initialized iff `_1` is initialized and `discriminant(_1) == 0` was checked).\r\n\r\n(Also tempting: moving `Discriminant` into `Operand` to be able to get rid of the `_2` and have `switchInt(discriminant(_1))` directly)\r\n\r\ncc @rust-lang/wg-compiler-nll @oli", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59578/timeline", "performed_via_github_app": null, "state_reason": null}