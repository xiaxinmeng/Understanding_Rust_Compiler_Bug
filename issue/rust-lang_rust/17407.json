{"url": "https://api.github.com/repos/rust-lang/rust/issues/17407", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/17407/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/17407/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/17407/events", "html_url": "https://github.com/rust-lang/rust/issues/17407", "id": 43309446, "node_id": "MDU6SXNzdWU0MzMwOTQ0Ng==", "number": 17407, "title": "Consider eliding long macro backtraces of recursive macros", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-09-20T12:41:08Z", "updated_at": "2017-05-30T22:17:19Z", "closed_at": "2017-05-30T22:17:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "A recursive macro can easily cause long useless error messages:\n\n``` rust\n#![feature(macro_rules)]\n\nmacro_rules! go {\n    () => { fn main() { undefined } };\n    ($_x:tt $($rest: tt)*) => {\n        go!($($rest)*)\n    }\n}\n\ngo!(1 2 3 4 5 6 7 8 9 10)\n```\n\n```\n<anon>:4:25: 4:34 error: unresolved name `undefined`.\n<anon>:4     () => { fn main() { undefined } };\n                                 ^~~~~~~~~\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:10:1: 10:26 note: expansion site\nerror: aborting due to previous error\n```\n\nWe could detect the repeating backtrace and replace it with:\n\n```\n<anon>:4:25: 4:34 error: unresolved name `undefined`.\n<anon>:4     () => { fn main() { undefined } };\n                                 ^~~~~~~~~\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n[... 8 repeats ...]\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:6:9: 6:23 note: expansion site\n<anon>:3:1: 8:2 note: in expansion of go!\n<anon>:10:1: 10:26 note: expansion site\nerror: aborting due to previous error\n```\n\nIn the best case, this would detect sequences of mutually recursive macro invocations of any length, but 1 is almost certainly the most common case, and if not that, then 2. It should also only elide the identical frames.\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/17407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/17407/timeline", "performed_via_github_app": null, "state_reason": "completed"}