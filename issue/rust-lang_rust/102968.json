{"url": "https://api.github.com/repos/rust-lang/rust/issues/102968", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102968/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102968/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102968/events", "html_url": "https://github.com/rust-lang/rust/issues/102968", "id": 1406337160, "node_id": "I_kwDOAAsO6M5T0wCI", "number": 102968, "title": "Missing implied lifetime bounds for method with GAT in return position", "user": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-12T14:41:01Z", "updated_at": "2022-10-12T14:46:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following example fails to compile:\r\n\r\n```rust\r\npub trait Foo<'foo>: 'foo {\r\n    type Bar<'bar>\r\n    where\r\n        'foo: 'bar;\r\n\r\n    fn baz(&self) -> Self::Bar<'_>;\r\n}\r\n\r\nimpl<'foo, T, U> Foo<'foo> for T\r\nwhere\r\n    T: Deref<Target = U> + 'foo,\r\n    U: Foo<'foo>,\r\n{\r\n    type Bar<'bar> = <U as Foo<'foo>>::Bar<'bar>\r\n    where\r\n        'foo: 'bar;\r\n\r\n    fn baz(&self) -> Self::Bar<'_> {\r\n        (**self).baz()\r\n    }\r\n}\r\n```\r\n\r\nThe error message is:\r\n\r\n```quote\r\nerror[E0478]: lifetime bound not satisfied\r\n  --> examples/implicit.rs:69:5\r\n   |\r\n69 | /     fn baz(&self) -> Self::Bar<'_> {\r\n70 | |         (**self).baz()\r\n71 | |     }\r\n   | |_____^\r\n   |\r\nnote: lifetime parameter instantiated with the lifetime `'foo` as defined here\r\n  --> examples/implicit.rs:60:6\r\n   |\r\n60 | impl<'foo, T, U> Foo<'foo> for T\r\n   |      ^^^^\r\nnote: but lifetime parameter must outlive the anonymous lifetime defined here\r\n  --> examples/implicit.rs:69:12\r\n   |\r\n69 |     fn baz(&self) -> Self::Bar<'_> {\r\n   |            ^^^^^\r\n\r\nFor more information about this error, try `rustc --explain E0478`.\r\n```\r\n\r\nThis error message is a bit surprising, because the lifetime bounds are specified on the generic associated type: `type Bar<'bar> where 'foo: 'bar;` . I had expected that Rust would be able to automatically infer these bounds from the GAT declaration instead of giving an error. By using the information that the GAT is used in the return position, these implicit lifetime bounds could be automatically applied.\r\n\r\n<details>\r\n<summary>If we explicitly spell out all the implicit bounds on `fn baz`, then it does compile:</summary>\r\n\r\n```rust\r\npub trait Foo<'foo>: 'foo {\r\n    type Bar<'bar>\r\n    where\r\n        'foo: 'bar;\r\n\r\n    fn baz<'bar>(&'bar self) -> Self::Bar<'bar>\r\n    where\r\n        'foo: 'bar;\r\n}\r\n\r\nimpl<'foo, T, U> Foo<'foo> for T\r\nwhere\r\n    T: Deref<Target = U> + 'foo,\r\n    U: Foo<'foo>,\r\n{\r\n    type Bar<'bar> = <U as Foo<'foo>>::Bar<'bar>\r\n    where\r\n        'foo: 'bar;\r\n\r\n    fn baz<'bar>(&'bar self) -> Self::Bar<'bar>\r\n    where\r\n        'foo: 'bar,\r\n    {\r\n        (**self).baz()\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>p.s. I am on this Rust version</summary>\r\n\r\n```quote\r\nrustc 1.66.0-nightly (0ca356586 2022-10-06)\r\nbinary: rustc\r\ncommit-hash: 0ca356586fed56002b10920fd21ddf6fb12de797\r\ncommit-date: 2022-10-06\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.66.0-nightly\r\nLLVM version: 15.0.2\r\n```\r\n\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102968/timeline", "performed_via_github_app": null, "state_reason": null}