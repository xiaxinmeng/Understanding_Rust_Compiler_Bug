{"url": "https://api.github.com/repos/rust-lang/rust/issues/100290", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100290/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100290/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100290/events", "html_url": "https://github.com/rust-lang/rust/issues/100290", "id": 1332497166, "node_id": "I_kwDOAAsO6M5PbEsO", "number": 100290, "title": "E0495 Diagnostic regression - missing actual source of error", "user": {"login": "RustyYato", "id": 16103364, "node_id": "MDQ6VXNlcjE2MTAzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/16103364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RustyYato", "html_url": "https://github.com/RustyYato", "followers_url": "https://api.github.com/users/RustyYato/followers", "following_url": "https://api.github.com/users/RustyYato/following{/other_user}", "gists_url": "https://api.github.com/users/RustyYato/gists{/gist_id}", "starred_url": "https://api.github.com/users/RustyYato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RustyYato/subscriptions", "organizations_url": "https://api.github.com/users/RustyYato/orgs", "repos_url": "https://api.github.com/users/RustyYato/repos", "events_url": "https://api.github.com/users/RustyYato/events{/privacy}", "received_events_url": "https://api.github.com/users/RustyYato/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-08-08T23:04:41Z", "updated_at": "2022-08-08T23:16:29Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: [playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=8fd726cb8a57173a376f00028de996f8) on nightly `2022-08-07`\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\nstruct Invariant<'ctx>(&'ctx mut &'ctx ());\r\n#[derive(Clone, Copy)]\r\nstruct Token<'ctx>(PhantomData<Invariant<'ctx>>);\r\n\r\npub struct Builder<'ctx> {\r\n    _ctx: PhantomData<Invariant<'ctx>>,\r\n}\r\n\r\n#[derive(Clone, Copy)]\r\npub struct State<'ctx> {\r\n    _ctx: PhantomData<Invariant<'ctx>>,\r\n}\r\n\r\nimpl<'ctx> Builder<'ctx> {\r\n    pub fn with(f: impl FnOnce(&mut Builder<'_>)) {\r\n        let mut builder = Builder {\r\n            _ctx: PhantomData,\r\n        };\r\n\r\n        f(&mut builder);\r\n    }\r\n\r\n    pub fn new_state(&mut self) -> State<'ctx> {\r\n        State { _ctx: PhantomData }\r\n    }\r\n\r\n    pub fn accept(&mut self, _state: State<'ctx>) {}\r\n}\r\n\r\nfn test() {\r\n    Builder::with(|b1| {\r\n        Builder::with(|b2| {\r\n            let state = b2.new_state();\r\n            b1.accept(state);\r\n        });\r\n    });\r\n}\r\n```\r\n\r\nThe current output is as follows:\r\n\r\nNote how the actual erroneous function call is completely missing! (`a.check_same(b.0)`)\r\n\r\n```rs\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0521]](https://doc.rust-lang.org/nightly/error-index.html#E0521): borrowed data escapes outside of closure\r\n  --> src/lib.rs:35:25\r\n   |\r\n33 |     Builder::with(|b1| {\r\n   |                    -- `b1` declared here, outside of the closure body\r\n34 |         Builder::with(|b2| {\r\n   |                        -- `b2` is a reference that is only valid in the closure body\r\n35 |             let state = b2.new_state();\r\n   |                         ^^^^^^^^^^^^^^ `b2` escapes the closure body here\r\n   |\r\n   = note: requirement occurs because of a mutable reference to `Builder<'_>`\r\n   = note: mutable references are invariant over their type parameter\r\n   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\r\n\r\nerror[[E0521]](https://doc.rust-lang.org/nightly/error-index.html#E0521): borrowed data escapes outside of closure\r\n  --> src/lib.rs:35:25\r\n   |\r\n33 |     Builder::with(|b1| {\r\n   |                    --\r\n   |                    |\r\n   |                    `b1` is a reference that is only valid in the closure body\r\n   |                    has type `&mut Builder<'1>`\r\n34 |         Builder::with(|b2| {\r\n35 |             let state = b2.new_state();\r\n   |                         ^^^^^^^^^^^^^^\r\n   |                         |\r\n   |                         `b1` escapes the closure body here\r\n   |                         argument requires that `'1` must outlive `'static`\r\n\r\nFor more information about this error, try `rustc --explain E0521`.\r\nerror: could not compile `playground` due to 2 previous errors\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like: (NOTE: this is the output of the last stable release, `1.62.1`)\r\n\r\nNote how the actual erroneous function call listed as the source of the error.\r\n\r\n```rs\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0495]](https://doc.rust-lang.org/stable/error-index.html#E0495): cannot infer an appropriate lifetime for lifetime parameter `'ctx` due to conflicting requirements\r\n  --> src/lib.rs:35:28\r\n   |\r\n35 |             let state = b2.new_state();\r\n   |                            ^^^^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #2 defined here...\r\n  --> src/lib.rs:33:19\r\n   |\r\n33 |       Builder::with(|b1| {\r\n   |  ___________________^\r\n34 | |         Builder::with(|b2| {\r\n35 | |             let state = b2.new_state();\r\n36 | |             b1.accept(state);\r\n37 | |         });\r\n38 | |     });\r\n   | |_____^\r\nnote: ...but the lifetime must also be valid for the anonymous lifetime #2 defined here...\r\n  --> src/lib.rs:34:23\r\n   |\r\n34 |           Builder::with(|b2| {\r\n   |  _______________________^\r\n35 | |             let state = b2.new_state();\r\n36 | |             b1.accept(state);\r\n37 | |         });\r\n   | |_________^\r\nnote: ...so that the types are compatible\r\n  --> src/lib.rs:36:16\r\n   |\r\n36 |             b1.accept(state);\r\n   |                ^^^^^^\r\n   = note: expected `&mut Builder<'_>`\r\n              found `&mut Builder<'_>`\r\n\r\nFor more information about this error, try `rustc --explain E0495`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": {"login": "RustyYato", "id": 16103364, "node_id": "MDQ6VXNlcjE2MTAzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/16103364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RustyYato", "html_url": "https://github.com/RustyYato", "followers_url": "https://api.github.com/users/RustyYato/followers", "following_url": "https://api.github.com/users/RustyYato/following{/other_user}", "gists_url": "https://api.github.com/users/RustyYato/gists{/gist_id}", "starred_url": "https://api.github.com/users/RustyYato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RustyYato/subscriptions", "organizations_url": "https://api.github.com/users/RustyYato/orgs", "repos_url": "https://api.github.com/users/RustyYato/repos", "events_url": "https://api.github.com/users/RustyYato/events{/privacy}", "received_events_url": "https://api.github.com/users/RustyYato/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100290/timeline", "performed_via_github_app": null, "state_reason": "reopened"}