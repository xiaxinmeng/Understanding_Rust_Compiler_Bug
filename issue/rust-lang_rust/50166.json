{"url": "https://api.github.com/repos/rust-lang/rust/issues/50166", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50166/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50166/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50166/events", "html_url": "https://github.com/rust-lang/rust/issues/50166", "id": 316606474, "node_id": "MDU6SXNzdWUzMTY2MDY0NzQ=", "number": 50166, "title": "Rustc should be able to unify `<T as A<'static>>::B>` with `<T as A<'a>>::B>` for all `'a`, given `A::B: 'static`", "user": {"login": "Boscop", "id": 535593, "node_id": "MDQ6VXNlcjUzNTU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/535593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Boscop", "html_url": "https://github.com/Boscop", "followers_url": "https://api.github.com/users/Boscop/followers", "following_url": "https://api.github.com/users/Boscop/following{/other_user}", "gists_url": "https://api.github.com/users/Boscop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Boscop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Boscop/subscriptions", "organizations_url": "https://api.github.com/users/Boscop/orgs", "repos_url": "https://api.github.com/users/Boscop/repos", "events_url": "https://api.github.com/users/Boscop/events{/privacy}", "received_events_url": "https://api.github.com/users/Boscop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-22T19:34:05Z", "updated_at": "2020-06-07T22:12:53Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I had to use [this trick](https://github.com/rust-lang/rfcs/pull/1598#issuecomment-215962891) to work around the [lack of working GATs](https://github.com/rust-lang/rust/issues/50115):\r\nEnded up with this code: https://play.rust-lang.org/?gist=5f14fd0600bf0b1e1e9eac2c8a3d194a&version=stable\r\nIt works but to be able to do \r\n```rust\r\npub struct AppMgr<T: for<'a> DeviceApp<'a>> {\r\n\tdevice: Option<T::Dev>,\r\n\tapp: T,\r\n\t// ...\r\n}\r\n```\r\n\r\nI had to split up my trait\r\n```rust\r\npub trait DeviceApp<'a> {\r\n\ttype Dev: Device;\r\n\t// ...\r\n```\r\ninto two\r\n```rust\r\npub trait DeviceSpecific {\r\n\ttype Dev: Device;\r\n}\r\n\r\npub trait DeviceApp<'a>: DeviceSpecific {\r\n\t// ...\r\n```\r\nto pull `Dev` out of the quantification scope of `'a`.\r\n\r\nI thought it should work if I put `Dev` back inside `DeviceApp` but make it `: 'static` so that `rustc` can infer that it's the same for all `'a`:\r\n```rust\r\n/*\r\npub trait DeviceSpecific {\r\n\ttype Dev: Device;\r\n}\r\n\r\npub trait DeviceApp<'a>: DeviceSpecific {\r\n*/\r\npub trait DeviceApp<'a> {\r\n\ttype Dev: Device + 'static;\r\n\r\n// ...\r\n\r\npub struct AppMgr<T: for<'a> DeviceApp<'a>> {\r\n\t// device: Option<T::Dev>,\r\n\tdevice: Option<<T as DeviceApp<'static>>::Dev>, // because Dev: 'static, i thought it will be unifyable with any 'a\r\n\tapp: T,\r\n\t// ...\r\n}\r\n```\r\n\r\nBut it doesn't work. Now I get this error:\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in function call due to conflicting requirements\r\n  --> src/main.rs:79:53\r\n   |\r\n79 |             device.frame(now, |device, input| { app.process(device, input, v) })\r\n   |                                                     ^^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the lifetime 'a as defined on the method body at 75:5...\r\n  --> src/main.rs:75:5\r\n   |\r\n75 |     pub fn process<'a>(&mut self, now: u64, msgs: Vec<<T as DeviceApp<'a>>::Msg>, v: &'a mut <T as DeviceApp<'a>>::BorrowedState) -> Vec<<T as DeviceApp<'a>>::Event> {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: ...so that the expression is assignable:\r\n           expected &mut <T as DeviceApp<'_>>::BorrowedState\r\n              found &mut <T as DeviceApp<'a>>::BorrowedState\r\n   = note: but, the lifetime must be valid for the static lifetime...\r\n   = note: ...so that the expression is assignable:\r\n           expected &mut <T as DeviceApp<'_>>::Dev\r\n              found &mut <T as DeviceApp<'static>>::Dev\r\n```\r\nhttps://play.rust-lang.org/?gist=d4084c0a87890d4ed17d0491e453565b&version=stable\r\n\r\nWhy can't `rustc` unify `<T as DeviceApp<'static>>::Dev>` with `<T as DeviceApp<'a>>::Dev>` for all `'a`, when it **KNOWS** that `Dev: 'static` (the type doesn't depend on `'a`, so it can only be the same for all `'a`)?\r\n\r\nIt should be able to infer it..", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50166/timeline", "performed_via_github_app": null, "state_reason": null}