{"url": "https://api.github.com/repos/rust-lang/rust/issues/88035", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88035/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88035/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88035/events", "html_url": "https://github.com/rust-lang/rust/issues/88035", "id": 970985101, "node_id": "MDU6SXNzdWU5NzA5ODUxMDE=", "number": 88035, "title": "`T: TraitA` doesn't coerce to `impl TraitA` and error messages could explain it better", "user": {"login": "CPerezz", "id": 37264926, "node_id": "MDQ6VXNlcjM3MjY0OTI2", "avatar_url": "https://avatars.githubusercontent.com/u/37264926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CPerezz", "html_url": "https://github.com/CPerezz", "followers_url": "https://api.github.com/users/CPerezz/followers", "following_url": "https://api.github.com/users/CPerezz/following{/other_user}", "gists_url": "https://api.github.com/users/CPerezz/gists{/gist_id}", "starred_url": "https://api.github.com/users/CPerezz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CPerezz/subscriptions", "organizations_url": "https://api.github.com/users/CPerezz/orgs", "repos_url": "https://api.github.com/users/CPerezz/repos", "events_url": "https://api.github.com/users/CPerezz/events{/privacy}", "received_events_url": "https://api.github.com/users/CPerezz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-08-14T19:57:17Z", "updated_at": "2021-08-15T17:01:33Z", "closed_at": "2021-08-15T10:27:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Rustc version: rustc 1.56.0-nightly (ae90dcf02 2021-08-09)**\r\n**`uname -a => Linux arch 5.12.2-arch1-1`**\r\n\r\nGiven the following Rust code [playground link here](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=a5947dd9634030222b10b858942de3f4):\r\n\r\n```rust\r\nuse std::collections::BinaryHeap;\r\nuse std::iter::IntoIterator;\r\n\r\npub trait TraitA where\r\n    Self: Sized + Ord + PartialOrd,{}\r\n\r\npub enum Target {\r\n    Stack, Memory, Storage\r\n}\r\n\r\n#[derive(Debug, Clone)]\r\nstruct OperationContainer<T: TraitA> {\r\n    memory: BinaryHeap<T>,\r\n    stack: BinaryHeap<T>,\r\n    storage: BinaryHeap<T>,\r\n}\r\n\r\nimpl<T: TraitA> OperationContainer<T> {\r\n    pub fn into_inner(&self, target: Target) -> &BinaryHeap<impl TraitA> {\r\n        match target {\r\n            Target::Memory => &self.memory,\r\n            Target::Stack => &self.stack,\r\n            Target::Storage => &self.storage,\r\n        }\r\n    }\r\n    pub fn sorted_ops(&self, target: Target) -> impl IntoIterator<Item = T> {\r\n        self.into_inner(target).into_sorted_vec()\r\n    }\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n Compiling playground v0.0.1 (/playground)\r\nerror[E0271]: type mismatch resolving `<Vec<impl TraitA> as IntoIterator>::Item == T`\r\n  --> src/lib.rs:26:49\r\n   |\r\n18 | impl<T: TraitA> OperationContainer<T> {\r\n   |      - this type parameter\r\n...\r\n26 |     pub fn sorted_ops(&self, target: Target) -> impl IntoIterator<Item = T> {\r\n   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found opaque type\r\n   |\r\n   = note: expected type parameter `T`\r\n                        found type `impl TraitA`\r\n   = help: type parameters must be constrained to match other types\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n\r\nFor more information about this error, try `rustc --explain E0271`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nFirst of all, I ignore the internals of the compiler and the trait system in this regard. But I would expect `impl TraitA` to be able to coerce to `T` in this example and viceversa.\r\n\r\nAnyway, assumming that this coercion is not possible or it doesn't make sense for some reason, the error message should at least explain this a bit better maybe.\r\nSince from a user perspective, `impl TraitA` is the same as writing `T` (ignoring the edition/convention mixure).\r\n\r\nSo if coercion between these two expressions is not going to happen or doesn't make sense, I would at least add into the error explanation, the fact that since coercion is not possible/due to convention/syntax mixture, you should either use `impl TRAIT` or `T: TRAIT` everywhere, but not mix them.\r\n", "closed_by": {"login": "CPerezz", "id": 37264926, "node_id": "MDQ6VXNlcjM3MjY0OTI2", "avatar_url": "https://avatars.githubusercontent.com/u/37264926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CPerezz", "html_url": "https://github.com/CPerezz", "followers_url": "https://api.github.com/users/CPerezz/followers", "following_url": "https://api.github.com/users/CPerezz/following{/other_user}", "gists_url": "https://api.github.com/users/CPerezz/gists{/gist_id}", "starred_url": "https://api.github.com/users/CPerezz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CPerezz/subscriptions", "organizations_url": "https://api.github.com/users/CPerezz/orgs", "repos_url": "https://api.github.com/users/CPerezz/repos", "events_url": "https://api.github.com/users/CPerezz/events{/privacy}", "received_events_url": "https://api.github.com/users/CPerezz/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88035/timeline", "performed_via_github_app": null, "state_reason": "completed"}