{"url": "https://api.github.com/repos/rust-lang/rust/issues/55544", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55544/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55544/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55544/events", "html_url": "https://github.com/rust-lang/rust/issues/55544", "id": 376045226, "node_id": "MDU6SXNzdWUzNzYwNDUyMjY=", "number": 55544, "title": "bare-metal: Panics can bloat binary. No handling at all possible?", "user": {"login": "andre-richter", "id": 4130005, "node_id": "MDQ6VXNlcjQxMzAwMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/4130005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andre-richter", "html_url": "https://github.com/andre-richter", "followers_url": "https://api.github.com/users/andre-richter/followers", "following_url": "https://api.github.com/users/andre-richter/following{/other_user}", "gists_url": "https://api.github.com/users/andre-richter/gists{/gist_id}", "starred_url": "https://api.github.com/users/andre-richter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andre-richter/subscriptions", "organizations_url": "https://api.github.com/users/andre-richter/orgs", "repos_url": "https://api.github.com/users/andre-richter/repos", "events_url": "https://api.github.com/users/andre-richter/events{/privacy}", "received_events_url": "https://api.github.com/users/andre-richter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-31T16:15:48Z", "updated_at": "2018-10-31T16:28:39Z", "closed_at": "2018-10-31T16:28:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hi,\r\n\r\nwhen building a bare-metal binary, in certain use-cases, it can happen that the compiler pulls in code and data that bloats the binary  but is in the end unwanted and ineffective. I provided an example here: https://github.com/andre-richter/panic-test\r\n\r\nThis is a bare-metal binary with `panic = \"abort\"` strategy.\r\n\r\n```rust\r\n#![no_main]\r\n#![no_std]\r\n#![feature(core_intrinsics)]\r\n\r\nuse core::intrinsics;\r\nuse core::panic::PanicInfo;\r\n\r\n#[panic_handler]\r\n#[inline(never)]\r\nfn panic(_info: &PanicInfo) -> ! {\r\n    unsafe { intrinsics::abort() }\r\n}\r\n\r\n#[no_mangle]\r\npub unsafe extern \"C\" fn _start() -> ! {\r\n    const ARBITRARY_ADDR: *mut u64 = 0x1337 as *mut u64;\r\n\r\n    let mut x = core::ptr::read_volatile(ARBITRARY_ADDR);\r\n\r\n    x = 0x100 / x; // The division here pulls in core::panic* functions that\r\n                   // have unneeded overhead given the panic handler above.\r\n                   //\r\n                   // Also adds debug strings to .rodata that can/will not be\r\n                   // used (struct PanicInfo).\r\n\r\n    // get rid of compiler warnings\r\n    core::ptr::write_volatile(ARBITRARY_ADDR, x);\r\n\r\n    loop {}\r\n}\r\n```\r\n\r\nLooking at the generated assembly, it seems the compiler is inserting a software-test to catch a division by zero, and if detecting one, pulls in our custom panic handler (which is inlined after making some preparatory calls, I guess). Here is a snippet, in the repository linked above you'll find the whole objdump containing more `core::panic*` code.\r\n\r\n```asm\r\n  201010:\t48 8b 0c 25 37 13 00 00 \tmovq\t0x1337, %rcx\r\n  201018:\t48 85 c9 \ttestq\t%rcx, %rcx\r\n  20101b:\t74 15 \tje\t0x15 <_start+0x22>\r\n  20101d:\tb8 00 01 00 00 \tmovl\t$0x100, %eax\r\n  201022:\t31 d2 \txorl\t%edx, %edx\r\n  201024:\t48 f7 f1 \tdivq\t%rcx\r\n  201027:\t48 89 04 25 37 13 00 00 \tmovq\t%rax, 0x1337\r\n  20102f:\t90 \tnop\r\n  201030:\teb fe \tjmp\t-0x2 <_start+0x20>\r\n  201032:\t50 \tpushq\t%rax\r\n  201033:\t48 8d 3d c6 0f 00 00 \tleaq\t0xfc6(%rip), %rdi\r\n  20103a:\te8 21 00 00 00 \tcallq\t0x21 <core::panicking::panic::h505722727939be58>\r\n```\r\n\r\nAlso, the `.rodata` section of the binary is filled with error handling strings (for `struct PanicInfo`?) that won't be used at all:\r\n```text\r\nHex dump of section '.rodata':\r\n  0x00200190 7372632f 6d61696e 2e727300 00000000 src/main.rs.....\r\n  0x002001a0 61747465 6d707420 746f2064 69766964 attempt to divid\r\n  0x002001b0 65206279 207a6572 6f000000 00000000 e by zero.......\r\n```\r\n\r\nMy point is that when writing a bare-metal binary, e.g. an OS Kernel, in that specific case, I don't want the software check for divison by zero, but rather let the CPU invoke it's hardware exception and handle it from there on.\r\nSuch a test might happen at an early time where I don't even have a vehicle for printing out information from `PanicInfo` ready yet.\r\n\r\nIs there a way to turn these kinds of software checks of?\r\n\r\nBR,\r\nAndre\r\n\r\nCC @therealprof  @japaric @phil-opp   \r\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55544/timeline", "performed_via_github_app": null, "state_reason": "completed"}