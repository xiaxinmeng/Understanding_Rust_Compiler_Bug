{"url": "https://api.github.com/repos/rust-lang/rust/issues/85846", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85846/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85846/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85846/events", "html_url": "https://github.com/rust-lang/rust/issues/85846", "id": 907011164, "node_id": "MDU6SXNzdWU5MDcwMTExNjQ=", "number": 85846, "title": "Documentation request: include_str and format_args combination", "user": {"login": "jkelleyrtp", "id": 10237910, "node_id": "MDQ6VXNlcjEwMjM3OTEw", "avatar_url": "https://avatars.githubusercontent.com/u/10237910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkelleyrtp", "html_url": "https://github.com/jkelleyrtp", "followers_url": "https://api.github.com/users/jkelleyrtp/followers", "following_url": "https://api.github.com/users/jkelleyrtp/following{/other_user}", "gists_url": "https://api.github.com/users/jkelleyrtp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkelleyrtp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkelleyrtp/subscriptions", "organizations_url": "https://api.github.com/users/jkelleyrtp/orgs", "repos_url": "https://api.github.com/users/jkelleyrtp/repos", "events_url": "https://api.github.com/users/jkelleyrtp/events{/privacy}", "received_events_url": "https://api.github.com/users/jkelleyrtp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-05-31T03:40:56Z", "updated_at": "2021-06-05T23:14:26Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I noticed some weird behavior today and couldn't find *any* documentation on how it works. It seems that `format_args!` and `include_str!`can actually work together to do compile-time validation of file inputs. Like so:\r\n\r\n```rust\r\nlet html = format_args!(include_str!(\"./index.html\"), title=\"test\");\r\n```\r\n\r\nBoth of these are compiler builtins so their sources aren't easily accessible. However, in neither of their documentation did I see any mention of this behavior. Contrast this with a proc/decl macro that tries to parse the inners as a LitStr/literal:\r\n```rust\r\nmacro_rules! parse_args {\r\n    ($a:literal) => {};\r\n}\r\n\r\nfn test() {\r\n    let nodes = parse_args!(include_str!(\"./htmlexample.html\"));\r\n}\r\n```\r\nwith error:\r\n```\r\n   |\r\n12 | macro_rules! parse_args {\r\n   | ----------------------- when calling this macro\r\n...\r\n17 |     let nodes = parse_args!(include_str!(\"./htmlexample.html\"));\r\n   |                             ^^^^^^^^^^^ no rules expected this token in macro call\r\n```\r\nIs there any documentation for this behavior? Is there any way for macro developers to also leverage this mechanic for parse a str literal returned by `include_str!`?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85846/timeline", "performed_via_github_app": null, "state_reason": null}