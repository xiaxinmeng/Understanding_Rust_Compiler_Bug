{"url": "https://api.github.com/repos/rust-lang/rust/issues/49288", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49288/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49288/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49288/events", "html_url": "https://github.com/rust-lang/rust/issues/49288", "id": 307848948, "node_id": "MDU6SXNzdWUzMDc4NDg5NDg=", "number": 49288, "title": "`impl Trait` Associated Types Do Not Leak Auto Traits", "user": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-22T23:22:35Z", "updated_at": "2020-05-27T18:14:56Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "While auto trait impls of `impl Trait` types leak, the auto trait impls of their associated types do not:\r\n\r\n```rust\r\n#![feature(conservative_impl_trait)]\r\n\r\ntrait Foo {\r\n    type Bar;\r\n}\r\n\r\nfn require_bar_send<F>(_: F) where F: Foo, F::Bar: Send {}\r\n\r\nfn foo() -> impl Foo {\r\n    struct Fooey;\r\n    impl Foo for Fooey {\r\n        type Bar = ();\r\n    }\r\n    Fooey\r\n}\r\n\r\nfn main() {\r\n    require_bar_send(foo()); // ERROR\r\n}\r\n```\r\n\r\nThis can be fixed by writing `impl Foo<Bar=impl Send>`, but this can get annoying quickly: async traits, whose methods each return a separate associated type implementing `Future`, need to have a `Bar=impl Send` for each method:\r\n\r\n```rust\r\ntrait Foo {\r\n    type FooFut: Future<...>;\r\n    fn foo(&self) -> Self::FooFut;\r\n\r\n    type BarFut: Future<...>;\r\n    fn bar(&self) -> Self::BarFut;\r\n\r\n    type BazFut: Future<...>;\r\n    fn baz(&self) -> Self::BazFut;\r\n}\r\n\r\nfn foo() -> impl Foo<FooFut=impl Send, BarFut=impl Send, BazFut=impl Send> { ... }\r\n```\r\n\r\nThis isn't a bug, but I'm interested in seeing if there're ways we can improve here-- should associated type auto traits leak? I can see that becoming a huge problem since you'd then want the associated types of associated types auto traits to leak, etc, but there's not an obvious solution to me. I really just want an \"everything you care about here is thread-safe\" button, but I don't know how to supply that easily.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49288/timeline", "performed_via_github_app": null, "state_reason": null}