{"url": "https://api.github.com/repos/rust-lang/rust/issues/109325", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109325/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109325/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109325/events", "html_url": "https://github.com/rust-lang/rust/issues/109325", "id": 1630582891, "node_id": "I_kwDOAAsO6M5hMLhr", "number": 109325, "title": "Trait bounds for generic types do not imply themselves when they restrict associated types", "user": {"login": "Yttiricon", "id": 59745661, "node_id": "MDQ6VXNlcjU5NzQ1NjYx", "avatar_url": "https://avatars.githubusercontent.com/u/59745661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yttiricon", "html_url": "https://github.com/Yttiricon", "followers_url": "https://api.github.com/users/Yttiricon/followers", "following_url": "https://api.github.com/users/Yttiricon/following{/other_user}", "gists_url": "https://api.github.com/users/Yttiricon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yttiricon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yttiricon/subscriptions", "organizations_url": "https://api.github.com/users/Yttiricon/orgs", "repos_url": "https://api.github.com/users/Yttiricon/repos", "events_url": "https://api.github.com/users/Yttiricon/events{/privacy}", "received_events_url": "https://api.github.com/users/Yttiricon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-03-18T20:23:58Z", "updated_at": "2023-04-26T03:53:18Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "When restricting a generic type parameter to a trait which is a super trait of another trait, and also places trait bounds on an associated type of the other trait.\r\n\r\nFor example:\r\n```\r\ntrait TypeRestriction {}\r\n\r\ntrait SubTrait {\r\n    type AssociatedType;\r\n}\r\n\r\ntrait SuperTrait: SubTrait where Self::AssociatedType: TypeRestriction {}\r\n\r\nfn function<T: SuperTrait>(_arg: T) {}\r\n```\r\n\r\ngives the error:\r\n```\r\nerror[E0277]: the trait bound `<T as SubTrait>::AssociatedType: TypeRestriction` is not satisfied\r\n --> file.rs:9:16\r\n  |\r\n9 | fn function<T: SuperTrait>(_arg: T) {}\r\n  |                ^^^^^^^^^^ the trait `TypeRestriction` is not implemented for `<T as SubTrait>::AssociatedType`\r\n  |\r\nnote: required by a bound in `SuperTrait`\r\n --> file.rs:7:56\r\n  |\r\n7 | trait SuperTrait: SubTrait where Self::AssociatedType: TypeRestriction {}\r\n  |                                                        ^^^^^^^^^^^^^^^ required by this bound in `SuperTrait`\r\nhelp: consider further restricting the associated type\r\n  |\r\n9 | fn function<T: SuperTrait>(_arg: T) where <T as SubTrait>::AssociatedType: TypeRestriction {}\r\n  |                                     ++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n```\r\n\r\nHowever, `T` must be able to implement `Supertrait`, since we asserted that it does with the trait bound `T: SuperTrait`.\r\n\r\nIn general, I think checking the trait bounds for trait requirements for generics (in a `where` clause, in `<T: Trait>` or `(arg: impl Trait)` is unnecessary, since if the trait *is* implemented then it shouldn't matter how, it inherently must satisfy the trait bounds, and if it does *not* implement the trait, then it cannot be used as that generic type, so nothing breaks.\r\n\r\nIn the example above, the function doesn't do anything at all, so any arbitrary restrictions on `T` should be valid, since they have no effect on the function.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109325/timeline", "performed_via_github_app": null, "state_reason": null}