{"url": "https://api.github.com/repos/rust-lang/rust/issues/98425", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98425/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98425/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98425/events", "html_url": "https://github.com/rust-lang/rust/issues/98425", "id": 1282549277, "node_id": "I_kwDOAAsO6M5MciYd", "number": 98425, "title": "Leak if using `slice::fill`", "user": {"login": "ZetaNumbers", "id": 53300196, "node_id": "MDQ6VXNlcjUzMzAwMTk2", "avatar_url": "https://avatars.githubusercontent.com/u/53300196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZetaNumbers", "html_url": "https://github.com/ZetaNumbers", "followers_url": "https://api.github.com/users/ZetaNumbers/followers", "following_url": "https://api.github.com/users/ZetaNumbers/following{/other_user}", "gists_url": "https://api.github.com/users/ZetaNumbers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZetaNumbers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZetaNumbers/subscriptions", "organizations_url": "https://api.github.com/users/ZetaNumbers/orgs", "repos_url": "https://api.github.com/users/ZetaNumbers/repos", "events_url": "https://api.github.com/users/ZetaNumbers/events{/privacy}", "received_events_url": "https://api.github.com/users/ZetaNumbers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2022-06-23T14:58:55Z", "updated_at": "2022-06-27T04:52:38Z", "closed_at": "2022-06-27T04:52:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#[repr(transparent)]\r\n#[derive(Clone, Debug, PartialEq, Eq)]\r\nstruct Foo(i32);\r\n\r\nimpl Drop for Foo {\r\n    fn drop(&mut self) {\r\n        println!(\"Drop: {self:?}\")\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let len = 4;\r\n    let layout = std::alloc::Layout::array::<Vec<Foo>>(len).unwrap();\r\n    let base = unsafe { std::alloc::alloc(layout) };\r\n    assert!(!base.is_null());\r\n\r\n    {\r\n        let base = base.cast::<Vec<_>>();\r\n        for i in 0..len {\r\n            unsafe { base.add(i).write(vec![Foo(i as i32)]) };\r\n        }\r\n        let slice = unsafe { std::slice::from_raw_parts_mut(base, len) };\r\n\r\n        for (i, v) in slice.iter().enumerate() {\r\n            let foo = [Foo(i as i32)];\r\n            assert_eq!(v, &foo);\r\n            drop(foo);\r\n        }\r\n\r\n        println!(\"Fill start\");\r\n        slice.fill(Vec::new());\r\n        // slice.fill_with(Vec::new);\r\n        println!(\"Fill end\");\r\n\r\n        assert_eq!(slice, vec![Vec::new(); len]);\r\n    }\r\n\r\n    unsafe { std::alloc::dealloc(base, layout) };\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: no leaks\r\n\r\nInstead, this happened:\r\n\r\n<details>\r\n<summary>cargo valgrind run</summary>\r\n\r\n```\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.00s\r\n     Running `/home/zeta/.cargo/bin/cargo-valgrind target/debug/miri-core-fill-leak`\r\nDrop: Foo(0)\r\nDrop: Foo(1)\r\nDrop: Foo(2)\r\nDrop: Foo(3)\r\nFill start\r\nDrop: Foo(0)\r\nDrop: Foo(1)\r\nDrop: Foo(2)\r\nDrop: Foo(3)\r\nFill end\r\n       Error leaked 12 B in 3 blocks\r\n        Info at malloc\r\n             at alloc::alloc::alloc (alloc.rs:89)\r\n             at alloc::alloc::Global::alloc_impl (alloc.rs:171)\r\n             at <alloc::alloc::Global as core::alloc::Allocator>::allocate (alloc.rs:231)\r\n             at alloc::alloc::exchange_malloc (alloc.rs:320)\r\n             at miri_core_fill_leak::main (main.rs:20)\r\n             at core::ops::function::FnOnce::call_once (function.rs:248)\r\n             at std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:122)\r\n             at std::rt::lang_start::{{closure}} (rt.rs:145)\r\n             at std::rt::lang_start_internal (function.rs:280)\r\n             at std::rt::lang_start (rt.rs:144)\r\n             at main\r\n     Summary Leaked 12 B total\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>cargo miri run</summary>\r\n\r\n```\r\nFinished dev [unoptimized + debuginfo] target(s) in 0.00s\r\n     Running `/home/zeta/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri target/miri/x86_64-unknown-linux-gnu/debug/miri-core-fill-leak`\r\nDrop: Foo(0)\r\nDrop: Foo(1)\r\nDrop: Foo(2)\r\nDrop: Foo(3)\r\nFill start\r\nDrop: Foo(0)\r\nDrop: Foo(1)\r\nDrop: Foo(2)\r\nDrop: Foo(3)\r\nFill end\r\nThe following memory was leaked: alloc1840 (Rust heap, size: 4, align: 4) {\r\n    00 00 00 00                                     \u2502 ....\r\n}\r\nalloc1954 (Rust heap, size: 4, align: 4) {\r\n    01 00 00 00                                     \u2502 ....\r\n}\r\nalloc2068 (Rust heap, size: 4, align: 4) {\r\n    02 00 00 00                                     \u2502 ....\r\n}\r\n\r\nerror: the evaluated program leaked memory\r\n\r\nnote: pass `-Zmiri-ignore-leaks` to disable this check\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\n</details>\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.63.0-nightly (dc80ca78b 2022-06-21)\r\nbinary: rustc\r\ncommit-hash: dc80ca78b6ec2b6bba02560470347433bcd0bb3c\r\ncommit-date: 2022-06-21\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.63.0-nightly\r\nLLVM version: 14.0.5\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\nBacktrace: N/A", "closed_by": {"login": "ZetaNumbers", "id": 53300196, "node_id": "MDQ6VXNlcjUzMzAwMTk2", "avatar_url": "https://avatars.githubusercontent.com/u/53300196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZetaNumbers", "html_url": "https://github.com/ZetaNumbers", "followers_url": "https://api.github.com/users/ZetaNumbers/followers", "following_url": "https://api.github.com/users/ZetaNumbers/following{/other_user}", "gists_url": "https://api.github.com/users/ZetaNumbers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZetaNumbers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZetaNumbers/subscriptions", "organizations_url": "https://api.github.com/users/ZetaNumbers/orgs", "repos_url": "https://api.github.com/users/ZetaNumbers/repos", "events_url": "https://api.github.com/users/ZetaNumbers/events{/privacy}", "received_events_url": "https://api.github.com/users/ZetaNumbers/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98425/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}