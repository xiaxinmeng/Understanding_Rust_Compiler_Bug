{"url": "https://api.github.com/repos/rust-lang/rust/issues/69835", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69835/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69835/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69835/events", "html_url": "https://github.com/rust-lang/rust/issues/69835", "id": 577564628, "node_id": "MDU6SXNzdWU1Nzc1NjQ2Mjg=", "number": 69835, "title": "Tracking Issue for layout information behind pointers", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}, {"id": 2242906716, "node_id": "MDU6TGFiZWwyMjQyOTA2NzE2", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-raw-pointers", "name": "A-raw-pointers", "color": "f7e101", "default": false, "description": "Area: raw pointers, MaybeUninit, NonNull"}, {"id": 3537216018, "node_id": "LA_kwDOAAsO6M7S1aIS", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-design-concerns", "name": "S-tracking-design-concerns", "color": "4682b4", "default": false, "description": "Blocking design concerns"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-03-08T20:56:32Z", "updated_at": "2022-10-21T21:49:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilization. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThe feature gate for the issue is `#![feature(layout_for_ptr)]`.\r\n\r\nThis tracks three functions:\r\n\r\n- `core::mem::size_of_val_raw<T: ?Sized>(val: *const T) -> usize`\r\n- `core::mem::align_of_val_raw<T: ?Sized>(val: *const T) -> usize`\r\n- `core::alloc::Layout::for_value_raw<T: ?Sized>(t: *const T) -> Layout`\r\n\r\nThese provide raw-pointer variants of the existing `mem::size_of_val`, `mem::align_of_val`, and `Layout::for_value`.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also uses as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Unresolved Questions\r\n\r\n- [ ] What should the exact safety requirements of these functions be? It is currently possible to create raw pointers that have metadata that would make size wrap via [`ptr::slice_from_raw_parts`](https://doc.rust-lang.org/nightly/std/ptr/fn.slice_from_raw_parts.html). Trait vtable pointers are *currently* required to always be valid, but this is not guaranteed and an open question whether this is required of invalid pointers.\r\n  - [`A`]`Rc`'s current implementation [requires calling `Layout::for_value_raw` on a pointer that has been `drop_in_place`'d](https://github.com/rust-lang/rust/pull/80488), so this likely needs to stay possible.\r\n- [ ] How should this interact with [extern types](https://github.com/rust-lang/rust/issues/43467)? As this is a new API surface, we could potentially handle them properly [whereas the `_of_val` cannot](https://github.com/rust-lang/rust/issues/49708). Additionally, extern types may want to access the value to determine the size (e.g. a null terminated cstr).\r\n\r\nhttps://github.com/rust-lang/lang-team/pull/166 is tangentially related, as it serves to document what requirements currently exist on pointee types and getting a known layout from them.\r\n\r\n### Implementation history\r\n\r\n- #69079 implemented these functions, including the intrinsic adjustments required to support them.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69835/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69835/timeline", "performed_via_github_app": null, "state_reason": null}