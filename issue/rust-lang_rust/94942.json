{"url": "https://api.github.com/repos/rust-lang/rust/issues/94942", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94942/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94942/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94942/events", "html_url": "https://github.com/rust-lang/rust/issues/94942", "id": 1168854413, "node_id": "I_kwDOAAsO6M5Fq02N", "number": 94942, "title": "Suggestions when a single-field enum variant pattern is needed", "user": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-14T20:13:11Z", "updated_at": "2022-03-14T20:13:13Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Beginners are often confused by the pattern where a set of types are combined using an `enum`, especially when the name of the enum variant is the same as the name of the variant's field's type. Even knowing how it works, I've myself forgotten to write out enum variant patterns containing struct patterns where they are needed. It would be useful if the compiler could give suggestions that understand this mistake.\r\n\r\nGiven [the following code:](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=dfd5194a1dc236b243654bfe56eb830f)\r\n\r\n```rust\r\nenum Foo {\r\n    Bar(Bar),\r\n}\r\nstruct Bar {\r\n    x: i32,\r\n}\r\n\r\nfn oops_1(f: Foo) {\r\n    match f {\r\n        Foo::Bar { x } => todo!()\r\n    }\r\n}\r\nfn oops_2(f: Foo) {\r\n    match f {\r\n        Bar { x } => todo!()\r\n    }\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0769]: tuple variant `Foo::Bar` written as struct variant\r\n  --> src/lib.rs:10:9\r\n   |\r\n10 |         Foo::Bar { x } => todo!()\r\n   |         ^^^^^^^^^^^^^^\r\n   |\r\nhelp: use the tuple variant pattern syntax instead\r\n   |\r\n10 |         Foo::Bar(x) => todo!()\r\n   |                 ~~~\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:15:9\r\n   |\r\n14 |     match f {\r\n   |           - this expression has type `Foo`\r\n15 |         Bar { x } => todo!()\r\n   |         ^^^^^^^^^ expected enum `Foo`, found struct `Bar`\r\n```\r\n\r\nThe compiler could instead recognize these cases, and produce the suggestion `Foo::Bar(Bar { x }) =>` as well as a message specific to the situation:\r\n\r\n* A variant pattern with fields which do not match the variant, but do match the fields of the variant's sole field.\r\n* A pattern not of enum type where an enum pattern is expected, but the enum has a variant whose sole field is of the pattern's type.\r\n\r\n@rustbot label +A-suggestion-diagnostics +C-enhancement +D-newcomer-roadblock\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94942/timeline", "performed_via_github_app": null, "state_reason": null}