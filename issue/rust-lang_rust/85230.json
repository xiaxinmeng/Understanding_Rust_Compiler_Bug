{"url": "https://api.github.com/repos/rust-lang/rust/issues/85230", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85230/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85230/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85230/events", "html_url": "https://github.com/rust-lang/rust/issues/85230", "id": 890189525, "node_id": "MDU6SXNzdWU4OTAxODk1MjU=", "number": 85230, "title": "Stack space not reused ", "user": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-05-12T15:09:04Z", "updated_at": "2021-05-20T19:44:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given this code:\r\n\r\n```rust\r\nstruct Obj([u8; 8]);\r\n\r\nextern \"C\" { fn f(o: &Obj); }\r\n\r\npub unsafe fn main()\r\n{\r\n    let s = Obj([1,2,3,4,5,6,7,8]);\r\n    f(&s);\r\n    std::mem::drop(s);\r\n    \r\n    let r = Obj([11,12,13,14,15,16,17,18]);\r\n    f(&r);\r\n    std::mem::drop(r);\r\n}\r\n\r\n```\r\nIt compiles to:\r\n```asm\r\nexample::main:\r\n        push    rbx\r\n        sub     rsp, 16\r\n        movabs  rax, 578437695752307201\r\n        mov     qword ptr [rsp], rax\r\n        mov     rbx, qword ptr [rip + f@GOTPCREL]\r\n        mov     rdi, rsp\r\n        call    rbx\r\n        movabs  rax, 1301839424133073931\r\n        mov     qword ptr [rsp + 8], rax\r\n        lea     rdi, [rsp + 8]\r\n        call    rbx\r\n        add     rsp, 16\r\n        pop     rbx\r\n        ret\r\n```\r\n\r\nThe first value is stored at `[rsp]` and the second value at `[rsp + 8]`\r\n\r\nThe LLVM IR looks like:\r\n\r\n```llvm\r\n; example::main\r\n; Function Attrs: nounwind nonlazybind uwtable\r\ndefine void @_ZN7example4main17h377fad6dc64462c1E() unnamed_addr #0 !dbg !6 {\r\nstart:\r\n  %r = alloca %Obj, align 1\r\n  %s = alloca %Obj, align 1\r\n  %0 = getelementptr inbounds %Obj, %Obj* %s, i64 0, i32 0, i64 0, !dbg !10\r\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0), !dbg !10\r\n  store i8 1, i8* %0, align 1, !dbg !11\r\n  %1 = getelementptr inbounds %Obj, %Obj* %s, i64 0, i32 1, i64 1, !dbg !11\r\n  store i8 2, i8* %1, align 1, !dbg !11\r\n  %2 = getelementptr inbounds %Obj, %Obj* %s, i64 0, i32 1, i64 2, !dbg !11\r\n  store i8 3, i8* %2, align 1, !dbg !11\r\n  %3 = getelementptr inbounds %Obj, %Obj* %s, i64 0, i32 1, i64 3, !dbg !11\r\n  store i8 4, i8* %3, align 1, !dbg !11\r\n  %4 = getelementptr inbounds %Obj, %Obj* %s, i64 0, i32 1, i64 4, !dbg !11\r\n  store i8 5, i8* %4, align 1, !dbg !11\r\n  %5 = getelementptr inbounds %Obj, %Obj* %s, i64 0, i32 1, i64 5, !dbg !11\r\n  store i8 6, i8* %5, align 1, !dbg !11\r\n  %6 = getelementptr inbounds %Obj, %Obj* %s, i64 0, i32 1, i64 6, !dbg !11\r\n  store i8 7, i8* %6, align 1, !dbg !11\r\n  %7 = getelementptr inbounds %Obj, %Obj* %s, i64 0, i32 1, i64 7, !dbg !11\r\n  store i8 8, i8* %7, align 1, !dbg !11\r\n  call void @f(%Obj* noalias nonnull readonly align 1 dereferenceable(8) %s), !dbg !12\r\n  %8 = getelementptr inbounds %Obj, %Obj* %r, i64 0, i32 0, i64 0, !dbg !13\r\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8), !dbg !13\r\n  store i8 11, i8* %8, align 1, !dbg !14\r\n  %9 = getelementptr inbounds %Obj, %Obj* %r, i64 0, i32 1, i64 1, !dbg !14\r\n  store i8 12, i8* %9, align 1, !dbg !14\r\n  %10 = getelementptr inbounds %Obj, %Obj* %r, i64 0, i32 1, i64 2, !dbg !14\r\n  store i8 13, i8* %10, align 1, !dbg !14\r\n  %11 = getelementptr inbounds %Obj, %Obj* %r, i64 0, i32 1, i64 3, !dbg !14\r\n  store i8 14, i8* %11, align 1, !dbg !14\r\n  %12 = getelementptr inbounds %Obj, %Obj* %r, i64 0, i32 1, i64 4, !dbg !14\r\n  store i8 15, i8* %12, align 1, !dbg !14\r\n  %13 = getelementptr inbounds %Obj, %Obj* %r, i64 0, i32 1, i64 5, !dbg !14\r\n  store i8 16, i8* %13, align 1, !dbg !14\r\n  %14 = getelementptr inbounds %Obj, %Obj* %r, i64 0, i32 1, i64 6, !dbg !14\r\n  store i8 17, i8* %14, align 1, !dbg !14\r\n  %15 = getelementptr inbounds %Obj, %Obj* %r, i64 0, i32 1, i64 7, !dbg !14\r\n  store i8 18, i8* %15, align 1, !dbg !14\r\n  call void @f(%Obj* noalias nonnull readonly align 1 dereferenceable(8) %r), !dbg !15\r\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8), !dbg !16\r\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0), !dbg !16\r\n  ret void, !dbg !17\r\n}\r\n```\r\n\r\nThe llvm.lifetime.end intrinsic for the first value shows up at the end instead of after the call to drop. If I move it earlier then LLVM does reuse the stack slot.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85230/reactions", "total_count": 20, "+1": 20, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85230/timeline", "performed_via_github_app": null, "state_reason": null}