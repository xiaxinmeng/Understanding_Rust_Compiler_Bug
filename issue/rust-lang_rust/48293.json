{"url": "https://api.github.com/repos/rust-lang/rust/issues/48293", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48293/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48293/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48293/events", "html_url": "https://github.com/rust-lang/rust/issues/48293", "id": 297992657, "node_id": "MDU6SXNzdWUyOTc5OTI2NTc=", "number": 48293, "title": "Removing useless small array initializations", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-17T09:40:31Z", "updated_at": "2018-02-17T10:57:09Z", "closed_at": "2018-02-17T10:57:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Rustc should detect and remove useless small array intializations.\r\n\r\nThis is C++ code:\r\n\r\n```\r\n#include <stdint.h>\r\n\r\ntypedef struct { int32_t arr[16]; } V;\r\n\r\nV test(V a, V b) {\r\n    V res;\r\n    for (int i = 0; i < 16; i++)\r\n        res.arr[i] = a.arr[i] + b.arr[i];\r\n    return res;\r\n}\r\n```\r\n\r\n\r\nCompiling it with Clang v.5\r\n`g++ -O3 -march=skylake-avx512`\r\n\r\n```\r\n\r\ntest(V, V): # @test(V, V)\r\n  vmovdqu32 zmm0, zmmword ptr [rsp + 72]\r\n  vpaddd zmm0, zmm0, zmmword ptr [rsp + 8]\r\n  vmovdqu32 zmmword ptr [rdi], zmm0\r\n  mov rax, rdi\r\n  vzeroupper\r\n  ret\r\n\r\n```\r\n------------------------------\r\n\r\nSimilar Rustc code:\r\n\r\n\r\n```\r\npub struct V { arr: [i32; 16] }\r\n\r\npub fn test(a: V, b: V) -> V {\r\n    let mut res = V { arr: [0; 16] };\r\n    for i in 0 .. 16 {\r\n        res.arr[i] = a.arr[i] + b.arr[i];\r\n    }\r\n    res\r\n}\r\n```\r\n\r\n\r\n```\r\nrustc 1.25.0-nightly (3ec5a99aa 2018-02-14)\r\n--crate-type lib -C opt-level=3 -C target-cpu=skylake-avx512 --emit asm\r\n\r\n_ZN4test4test17hf0a28b117be5fee8E:\r\n\tsubq\t$64, %rsp\r\n\tvmovdqu\t(%r8), %ymm0\r\n\tvpaddd\t(%rdx), %ymm0, %ymm0\r\n\tmovq\t$0, 56(%rsp)\r\n\tvmovdqu\t%ymm0, (%rsp)\r\n\tmovl\t32(%r8), %eax\r\n\taddl\t32(%rdx), %eax\r\n\tmovl\t%eax, 32(%rsp)\r\n\tmovl\t36(%r8), %eax\r\n\taddl\t36(%rdx), %eax\r\n\tmovl\t%eax, 36(%rsp)\r\n\tmovl\t40(%r8), %eax\r\n\taddl\t40(%rdx), %eax\r\n\tmovl\t%eax, 40(%rsp)\r\n\tmovl\t44(%r8), %eax\r\n\taddl\t44(%rdx), %eax\r\n\tmovl\t%eax, 44(%rsp)\r\n\tmovl\t48(%r8), %eax\r\n\taddl\t48(%rdx), %eax\r\n\tmovl\t%eax, 48(%rsp)\r\n\tmovl\t52(%r8), %eax\r\n\taddl\t52(%rdx), %eax\r\n\tmovl\t%eax, 52(%rsp)\r\n\tmovl\t56(%r8), %eax\r\n\taddl\t56(%rdx), %eax\r\n\tmovl\t%eax, 56(%rsp)\r\n\tmovl\t60(%r8), %eax\r\n\taddl\t60(%rdx), %eax\r\n\tmovl\t%eax, 60(%rsp)\r\n\tvmovups\t(%rsp), %zmm0\r\n\tvmovups\t%zmm0, (%rcx)\r\n\tmovq\t%rcx, %rax\r\n\taddq\t$64, %rsp\r\n\tvzeroupper\r\n\tretq\r\n```\r\n\r\n------------------------------\r\n\r\nNot initializing the small result array:\r\n\r\n```\r\nrustc 1.25.0-nightly (3ec5a99aa 2018-02-14)\r\n--crate-type lib -C opt-level=3 -C target-cpu=skylake-avx512 --emit asm\r\n\r\n\r\npub struct V { arr: [i32; 16] }\r\n\r\npub fn test(a: V, b: V) -> V {\r\n    let mut res: V = unsafe { std::mem::uninitialized() };\r\n    for i in 0 .. 16 {\r\n        res.arr[i] = a.arr[i] + b.arr[i];\r\n    }\r\n    res\r\n}\r\n\r\n_ZN4test4test17hf0a28b117be5fee8E:\r\n    pushq   %rbp\r\n    subq    $112, %rsp\r\n    leaq    112(%rsp), %rbp\r\n    andq    $-64, %rsp\r\n    vmovdqu32   (%r8), %zmm0\r\n    vpaddd  (%rdx), %zmm0, %zmm0\r\n    vmovdqa32   %zmm0, (%rsp)\r\n    vmovaps (%rsp), %zmm0\r\n    vmovups %zmm0, (%rcx)\r\n    movq    %rcx, %rax\r\n    movq    %rbp, %rsp\r\n    popq    %rbp\r\n    vzeroupper\r\n    retq\r\n```\r\n\r\n------------------------------\r\n\r\nRust should remove the need to use mem::uninitialized() in such situations.\r\n", "closed_by": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48293/timeline", "performed_via_github_app": null, "state_reason": "completed"}