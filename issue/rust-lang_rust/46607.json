{"url": "https://api.github.com/repos/rust-lang/rust/issues/46607", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46607/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46607/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46607/events", "html_url": "https://github.com/rust-lang/rust/issues/46607", "id": 280752614, "node_id": "MDU6SXNzdWUyODA3NTI2MTQ=", "number": 46607, "title": "Move oom test out of line with -C panic=abort", "user": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-12-09T20:34:31Z", "updated_at": "2020-06-10T20:52:13Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code:\r\n```rust\r\n#[inline(never)]\r\npub fn foo() -> Vec<u8> {\r\n  vec![0; 900]\r\n}\r\n```\r\ncompiles to \r\n```assembly\r\nexample::foo:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        push    rbx\r\n        sub     rsp, 40\r\n        mov     rbx, rdi\r\n        lea     rdx, [rbp - 32]\r\n        mov     edi, 900\r\n        mov     esi, 1\r\n        call    __rust_alloc_zeroed@PLT\r\n        test    rax, rax\r\n        je      .LBB0_1\r\n        mov     qword ptr [rbx], rax\r\n        mov     qword ptr [rbx + 8], 900\r\n        mov     qword ptr [rbx + 16], 900\r\n        mov     rax, rbx\r\n        add     rsp, 40\r\n        pop     rbx\r\n        pop     rbp\r\n        ret\r\n.LBB0_1:\r\n        mov     rax, qword ptr [rbp - 32]\r\n        movups  xmm0, xmmword ptr [rbp - 24]\r\n        movaps  xmmword ptr [rbp - 48], xmm0\r\n        mov     qword ptr [rbp - 32], rax\r\n        movaps  xmm0, xmmword ptr [rbp - 48]\r\n        movups  xmmword ptr [rbp - 24], xmm0\r\n        lea     rdi, [rbp - 32]\r\n        call    __rust_oom@PLT\r\n        ud2\r\n```\r\n\r\nIt would be a good code size improvement for the oom handling to be moved into __rust_alloc_zeroed when compiling with panic=abort. This will also make the branch on null better predicted because it's not duplicated all around the code base, but in just one spot.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46607/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46607/timeline", "performed_via_github_app": null, "state_reason": null}