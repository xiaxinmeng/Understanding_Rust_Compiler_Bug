{"url": "https://api.github.com/repos/rust-lang/rust/issues/64176", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64176/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64176/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64176/events", "html_url": "https://github.com/rust-lang/rust/issues/64176", "id": 489784242, "node_id": "MDU6SXNzdWU0ODk3ODQyNDI=", "number": 64176, "title": "Lifetime error when Send is enforced on async function return type", "user": {"login": "tomaka", "id": 1412254, "node_id": "MDQ6VXNlcjE0MTIyNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1412254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomaka", "html_url": "https://github.com/tomaka", "followers_url": "https://api.github.com/users/tomaka/followers", "following_url": "https://api.github.com/users/tomaka/following{/other_user}", "gists_url": "https://api.github.com/users/tomaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomaka/subscriptions", "organizations_url": "https://api.github.com/users/tomaka/orgs", "repos_url": "https://api.github.com/users/tomaka/repos", "events_url": "https://api.github.com/users/tomaka/events{/privacy}", "received_events_url": "https://api.github.com/users/tomaka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-05T14:17:50Z", "updated_at": "2020-02-25T09:33:56Z", "closed_at": "2020-02-25T09:33:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Just like a lot of lifetime issues, I'm not actually sure whether this is a bug in the compiler or a bug in my code.\r\n\r\nThe following code:\r\n\r\n```rust\r\nuse std::pin::Pin;\r\nuse std::future::Future;\r\n\r\ntrait FooRef<'a> {\r\n    type Elem;\r\n    fn next_elem(self) -> Pin<Box<dyn Future<Output = Self::Elem> + Send + Sync + 'a>>;\r\n}\r\n\r\nstruct FooImpl;\r\nimpl<'a> FooRef<'a> for &'a mut FooImpl {\r\n    type Elem = &'a mut FooImpl;\r\n    fn next_elem(self) -> Pin<Box<dyn Future<Output = Self::Elem> + Send + Sync + 'a>> {\r\n        Box::pin(async move { self })\r\n    }\r\n}\r\n\r\n\r\nasync fn run<F>(mut foo: F)\r\n    where for<'r> &'r mut F: FooRef<'r>\r\n{\r\n    loop {\r\n        foo.next_elem().await;\r\n    }\r\n}\r\n\r\n\r\nfn test() {\r\n    fn req<T: Send>(_: T) {}\r\n    req(run(FooImpl))\r\n}\r\n```\r\n\r\nTriggers the following compilation error:\r\n\r\n```\r\nerror: implementation of `FooRef` is not general enough\r\n  --> src/lib.rs:29:5\r\n   |\r\n29 |     req(run(FooImpl))\r\n   |     ^^^\r\n   |\r\n   = note: `FooRef<'1>` would have to be implemented for the type `&'0 mut FooImpl`, for any two lifetimes `'0` and `'1`\r\n   = note: but `FooRef<'2>` is actually implemented for the type `&'2 mut FooImpl`, for some specific lifetime `'2`\r\n```\r\n\r\nReplacing `T: Send` with just `T` makes it compile fine.\r\n\r\nReplacing `async fn run<F>(mut foo: F)` with `async fn run(mut foo: FooImpl)` (ie. removing the generic parameter) also works fine.\r\n\r\nCode explanation: calling `foo.next_elem()` return a `Future` that should keep `foo` borrowed, and produces an element (`type Elem;`) that still keeps `foo` borrowed.\r\n\r\nI don't really see the relationship between this behaviour and `Send`. All the types used in this code do implement `Send`.\r\n\r\nMy compiler version is `rustc 1.39.0-nightly (c6e9c76c5 2019-09-04)`.\r\n", "closed_by": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64176/timeline", "performed_via_github_app": null, "state_reason": "completed"}