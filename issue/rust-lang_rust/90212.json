{"url": "https://api.github.com/repos/rust-lang/rust/issues/90212", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90212/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90212/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90212/events", "html_url": "https://github.com/rust-lang/rust/issues/90212", "id": 1034215267, "node_id": "I_kwDOAAsO6M49pN9j", "number": 90212, "title": "Recursive rustc error not solved by #89576  - error[E0275]: overflow evaluating the requirement `&HashSet<_, _>: std::ops::Sub`", "user": {"login": "apps4uco", "id": 4217422, "node_id": "MDQ6VXNlcjQyMTc0MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/4217422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apps4uco", "html_url": "https://github.com/apps4uco", "followers_url": "https://api.github.com/users/apps4uco/followers", "following_url": "https://api.github.com/users/apps4uco/following{/other_user}", "gists_url": "https://api.github.com/users/apps4uco/gists{/gist_id}", "starred_url": "https://api.github.com/users/apps4uco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apps4uco/subscriptions", "organizations_url": "https://api.github.com/users/apps4uco/orgs", "repos_url": "https://api.github.com/users/apps4uco/repos", "events_url": "https://api.github.com/users/apps4uco/events{/privacy}", "received_events_url": "https://api.github.com/users/apps4uco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-23T17:28:03Z", "updated_at": "2021-10-23T17:28:03Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Im still getting a recursion error even after:\r\n\r\n#https://github.com/rust-lang/rust/pull/89576\r\n\r\nMaybe related #77291  #89576 #75397\r\n\r\n\r\nI tried this code:\r\n\r\n```rust\r\npub async fn products( params: Query<QueryParams>, Extension(pool): Extension<Pool<Postgres>>)\r\n                       -> impl IntoResponse {\r\n    async move {\r\n        let mut connection=pool.acquire().await.unwrap();\r\n\r\n        connection.transaction(|conn| async move {\r\n            let products: Pin<Box<dyn futures::Stream<Item=Result<Bytes, sqlx::Error>> + Send>> = query_as!(\r\n        Product,\r\n        \"select * from products order by product_name\")\r\n                .map(|p| {\r\n                    let json = format!(\"{}\\n\", serde_json::to_string(&p).unwrap());\r\n                    Bytes::from(json)\r\n                })\r\n                .fetch(&mut connection);\r\n            Ok(StreamBody::new(products))\r\n        })\r\n    }.await\r\n}\r\n\r\n#[derive(Debug,Serialize, Deserialize, ormx::Table, sqlx::FromRow)]\r\n#[ormx(table = \"Products\", id = product_id, insertable, deletable)]\r\nstruct Product {\r\n    product_id: i16,\r\n    product_name: String,\r\n    supplier_id: i16,\r\n    category_id: i16,\r\n    quantity_per_unit: String,\r\n    unit_price: f32,\r\n    units_in_stock: i16,\r\n    units_on_order: i16,\r\n    reorder_level: i16,\r\n    discontinued: i32,\r\n}\r\n```\r\nI know there is an error in the code I meant to put conn where it is presently\r\n.fetch(&mut connection);\r\n\r\nI expected to see this happen:\r\na non recursive compiler error\r\n\r\nInstead, this happened:\r\n\r\ncargo +nightly build\r\n\r\nerror[E0275]: overflow evaluating the requirement `&HashSet<_, _>: std::ops::Sub`\r\n   --> src/northwind.rs:92:39\r\n    |\r\n92  |           connection.transaction(|conn| async move {\r\n    |  _______________________________________^\r\n93  | |             let products: Pin<Box<dyn futures::Stream<Item=Result<Bytes, sqlx::Error>> + Send>> = query_as!(\r\n94  | |         Product,\r\n95  | |         \"select * from products order by product_name\")\r\n...   |\r\n101 | |             Ok(StreamBody::new(products))\r\n102 | |         })\r\n    | |_________^\r\n    |\r\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`server`)\r\n    = note: required because of the requirements on the impl of `std::ops::Sub` for `&ordered_float::OrderedFloat<HashSet<_, _>>`\r\n    = note: 126 redundant requirements hidden\r\n    = note: required because of the requirements on the impl of `std::ops::Sub<&ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::OrderedFloat<ordered_float::....etc\r\n\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.58.0-nightly (547a6ffee 2021-10-21)\r\nbinary: rustc\r\ncommit-hash: 547a6ffee0cf4da9929a9e3d49546dc87d607735\r\ncommit-date: 2021-10-21\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.58.0-nightly\r\nLLVM version: 13.0.0\r\n\r\ncargo --version --verbose\r\ncargo 1.57.0-nightly (7fbbf4e8f 2021-10-19)\r\nrelease: 1.57.0\r\ncommit-hash: 7fbbf4e8f23e3c24b8afff541dcb17e53eb5ff88\r\ncommit-date: 2021-10-19\r\nhost: x86_64-unknown-linux-gnu\r\nlibgit2: 1.3.0 (sys:0.13.23 vendored)\r\nlibcurl: 7.79.1-DEV (sys:0.4.49+curl-7.79.1 vendored ssl:OpenSSL/1.1.1l)\r\nos: Ubuntu 20.04 (focal) [64-bit]\r\n```\r\n\r\nAnother version of the code compiles and works fine \r\n\r\n```rust\r\npub async fn products_via_vec( params: Query<QueryParams>, Extension(pool): Extension<Pool<Postgres>>)\r\n    -> impl IntoResponse {\r\n\r\n    let products:Vec<Result<_, std::io::Error>>=query_as!(\r\n        Product,\r\n        \"select * from products order by product_name\")\r\n            .map(|p| {\r\n                let json=format!(\"{}\\n\",serde_json::to_string(&p).unwrap());\r\n                Ok(Bytes::from(json)) })\r\n            .fetch_all(&pool).await.unwrap();\r\n\r\n    let stream = stream::iter(products);\r\n    StreamBody::new(stream)\r\n}\r\n```\r\n\r\nIm not sure how to create a minimal test case of what is occurring.\r\nI can provide the cargo toml if required \r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90212/timeline", "performed_via_github_app": null, "state_reason": null}