{"url": "https://api.github.com/repos/rust-lang/rust/issues/70710", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70710/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70710/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70710/events", "html_url": "https://github.com/rust-lang/rust/issues/70710", "id": 592855090, "node_id": "MDU6SXNzdWU1OTI4NTUwOTA=", "number": 70710, "title": "An std::fmt syntax to propagate formatting parameters", "user": {"login": "nical", "id": 264854, "node_id": "MDQ6VXNlcjI2NDg1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/264854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nical", "html_url": "https://github.com/nical", "followers_url": "https://api.github.com/users/nical/followers", "following_url": "https://api.github.com/users/nical/following{/other_user}", "gists_url": "https://api.github.com/users/nical/gists{/gist_id}", "starred_url": "https://api.github.com/users/nical/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nical/subscriptions", "organizations_url": "https://api.github.com/users/nical/orgs", "repos_url": "https://api.github.com/users/nical/repos", "events_url": "https://api.github.com/users/nical/events{/privacy}", "received_events_url": "https://api.github.com/users/nical/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-02T18:54:57Z", "updated_at": "2020-06-13T18:27:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When implementing custom `fmt::Debug`/`Display` formatters for simple types such as in the following example, the straightforward implementation does not propagate formatting parameters:\r\n\r\n```rust\r\npub struct Rectangle {\r\n    pub origin: Point,\r\n    pub size: Size,\r\n}\r\n\r\nimpl fmt::Display for Rectangle {\r\n    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\r\n        write!(formatter, \"Rectangle({} at {})\", size, origin)\r\n    }\r\n}\r\n```\r\n\r\nThe implementation above unfortunately does not propagate formatting parameters.\r\n\r\n```rust\r\n// Prints each field ignoring formatting option, although we asked to show\r\n// only a certain number of digits.\r\nprintln!(\"rectangle = {:.2}\", my_rectangle);\r\n```\r\n\r\nWould it make sense to allow the formatter to preserve its parameters through some syntax or another?\r\n\r\nFor example:\r\n\r\n```rust\r\nimpl fmt::Display for Rectangle {\r\n    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\r\n        // ~ or some other symbol informs the formatter to use formatting parameters\r\n        // from the parent invocation.\r\n        write!(formatter, \"Rectangle({~} at {~})\", size, origin)\r\n    }\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70710/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70710/timeline", "performed_via_github_app": null, "state_reason": null}