{"url": "https://api.github.com/repos/rust-lang/rust/issues/60249", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60249/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60249/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60249/events", "html_url": "https://github.com/rust-lang/rust/issues/60249", "id": 436956990, "node_id": "MDU6SXNzdWU0MzY5NTY5OTA=", "number": 60249, "title": "Compiler fails to identify type mismatch on function that returns impl Trait", "user": {"login": "jxs", "id": 1204690, "node_id": "MDQ6VXNlcjEyMDQ2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1204690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jxs", "html_url": "https://github.com/jxs", "followers_url": "https://api.github.com/users/jxs/followers", "following_url": "https://api.github.com/users/jxs/following{/other_user}", "gists_url": "https://api.github.com/users/jxs/gists{/gist_id}", "starred_url": "https://api.github.com/users/jxs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jxs/subscriptions", "organizations_url": "https://api.github.com/users/jxs/orgs", "repos_url": "https://api.github.com/users/jxs/repos", "events_url": "https://api.github.com/users/jxs/events{/privacy}", "received_events_url": "https://api.github.com/users/jxs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-25T00:10:09Z", "updated_at": "2022-12-29T17:47:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "the following function, added to  [tower-grpc](https://github.com/tower-rs/tower-grpc/) hello world client [example,](https://github.com/tower-rs/tower-grpc/blob/master/tower-grpc-examples/src/helloworld/client.rs) to wrap the service connection setup, when used, the compiler fails to identify the type mismatch, `()` in the return type should be `BoxBody` \r\n```rust\r\npub fn get_service() -> impl Future<\r\n    Item = hello_world::client::Greeter<\r\n        RequestModifier<Connection<TcpStream, DefaultExecutor, BoxBody>, ()>,\r\n    >,\r\n    Error = ConnectError<std::io::Error>,\r\n> {\r\n    let uri: http::Uri = format!(\"http://localhost:50051\")\r\n        .parse()\r\n        .expect(\"could not parse grpc address as uri\");\r\n    let h2_settings = Default::default();\r\n    let mut make_client = Connect::new(Dst, h2_settings, DefaultExecutor::current());\r\n\r\n    make_client.make_service(()).map(|conn| {\r\n        let conn = tower_request_modifier::Builder::new()\r\n            .set_origin(uri)\r\n            .build(conn)\r\n            .unwrap();\r\n\r\n        hello_world::client::Greeter::new(conn)\r\n    })\r\n}\r\n\r\n```\r\n\r\nand gives the following error:\r\n```\r\nerror[E0599]: no method named `say_hello` found for type `hello_world::client::Greeter<tower_request_modifier::RequestModifier<tower_h2::client::connection::Connection<tokio_tcp::stream::TcpStream, tokio_executor::global::DefaultExecutor, tower_grpc::body::BoxBody>, ()>>` in the current scope\r\n  --> src/main.rs:22:18\r\n   |\r\n22 |                 .say_hello(Request::new(HelloRequest {\r\n   |                  ^^^^^^^^^\r\n   |\r\n  ::: /Volumes/data/dev/jxs/tower-error-example/target/debug/build/tower-error-example-5d3017ffe78d8a92/out/helloworld.rs:19:5\r\n   |\r\n19 |     pub struct Greeter<T> {\r\n   |     --------------------- method `say_hello` not found for this\r\n   |\r\n   = help: items from traits can only be used if the trait is implemented and in scope\r\n   = note: the following trait defines an item `say_hello`, perhaps you need to implement it:\r\n           candidate #1: `hello_world::server::Greeter`\r\n\r\n```\r\n\r\nbut if the following code is added just before the function return: \r\n```rust\r\n        let hello = hello_world::client::Greeter::new(conn).say_hello(Request::new(HelloRequest {\r\n            name: \"What is in a name?\".to_string(),\r\n        }));\r\n```\r\nthe error given by the compiler becomes a lot more useful:\r\n```\r\nerror[E0271]: type mismatch resolving `<[closure@src/main.rs:67:38: 78:6 uri:_] as std::ops::FnOnce<(tower_h2::client::connection::Connection<tokio_tcp::stream::TcpStream, tokio_executor::global::DefaultExecutor, tower_grpc::body::BoxBody>,)>>::Output == hello_world::client::Greeter<tower_request_modifier::RequestModifier<tower_h2::client::connection::Connection<tokio_tcp::stream::TcpStream, tokio_executor::global::DefaultExecutor, tower_grpc::body::BoxBody>, ()>>`\r\n  --> src/main.rs:55:25\r\n   |\r\n55 |   pub fn get_service() -> impl Future<\r\n   |  _________________________^\r\n56 | |     Item = hello_world::client::Greeter<\r\n57 | |         RequestModifier<Connection<TcpStream, DefaultExecutor, BoxBody>, ()>,\r\n58 | |     >,\r\n59 | |     Error = ConnectError<std::io::Error>,\r\n60 | | > {\r\n   | |_^ expected struct `tower_grpc::body::BoxBody`, found ()\r\n```\r\n\r\npushed the whole example [here](https://github.com/jxs/tower-error-example/blob/master/src/main.rs)\r\n\r\nthanks ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60249/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60249/timeline", "performed_via_github_app": null, "state_reason": null}