{"url": "https://api.github.com/repos/rust-lang/rust/issues/87850", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87850/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87850/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87850/events", "html_url": "https://github.com/rust-lang/rust/issues/87850", "id": 963258197, "node_id": "MDU6SXNzdWU5NjMyNTgxOTc=", "number": 87850, "title": "Cycle when computing type of recursive opaque type", "user": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1568304854, "node_id": "MDU6TGFiZWwxNTY4MzA0ODU0", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-rustc_attrs", "name": "F-rustc_attrs", "color": "f9c0cc", "default": false, "description": "Internal rustc attributes gated on the `#[rustc_attrs]` feature gate."}, {"id": 3202880947, "node_id": "MDU6TGFiZWwzMjAyODgwOTQ3", "url": "https://api.github.com/repos/rust-lang/rust/labels/thir-unsafeck", "name": "thir-unsafeck", "color": "f9c0cc", "default": false, "description": "-Z thir-unsafeck"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-08-07T16:08:08Z", "updated_at": "2023-03-14T07:33:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\n#![feature(rustc_attrs)]\r\n\r\n#[rustc_layout_scalar_valid_range_start(1)]\r\nstruct NonZero<T>(T);\r\n\r\nfn closure_ref_capture() -> NonZero<impl Sized> {\r\n    let x = closure_ref_capture();\r\n    unsafe { NonZero(move || { &x.0; }) }\r\n}\r\n```\r\n\r\n`rustc` gives the following output:\r\n\r\n```\r\nerror[E0391]: cycle detected when computing type of `closure_ref_capture::{opaque#0}`\r\n --> test.rs:6:37\r\n  |\r\n6 | fn closure_ref_capture() -> NonZero<impl Sized> {\r\n  |                                     ^^^^^^^^^^\r\n  |\r\nnote: ...which requires borrow-checking `closure_ref_capture`...\r\n --> test.rs:6:1\r\n  |\r\n6 | fn closure_ref_capture() -> NonZero<impl Sized> {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...which requires processing `closure_ref_capture`...\r\n --> test.rs:6:1\r\n  |\r\n6 | fn closure_ref_capture() -> NonZero<impl Sized> {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...which requires processing MIR for `closure_ref_capture`...\r\n --> test.rs:6:1\r\n  |\r\n6 | fn closure_ref_capture() -> NonZero<impl Sized> {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...which requires building MIR for `closure_ref_capture`...\r\n --> test.rs:6:1\r\n  |\r\n6 | fn closure_ref_capture() -> NonZero<impl Sized> {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...which requires unsafety-checking `closure_ref_capture`...\r\n --> test.rs:8:33\r\n  |\r\n8 |     unsafe { NonZero(move || { &x.0; }) }\r\n  |                                 ^^^\r\n  = note: ...which requires computing whether `impl Sized` is freeze...\r\n  = note: ...which requires evaluating trait selection obligation `impl Sized: std::marker::Freeze`...\r\n  = note: ...which again requires computing type of `closure_ref_capture::{opaque#0}`, completing the cycle\r\nnote: cycle used when checking item types in top-level module\r\n --> test.rs:1:1\r\n  |\r\n1 | / #![feature(rustc_attrs)]\r\n2 | |\r\n3 | | #[rustc_layout_scalar_valid_range_start(1)]\r\n4 | | struct NonZero<T>(T);\r\n... |\r\n8 | |     unsafe { NonZero(move || { &x.0; }) }\r\n9 | | }\r\n  | |_^\r\n\r\nwarning: function cannot return without recursing\r\n --> test.rs:6:1\r\n  |\r\n6 | fn closure_ref_capture() -> NonZero<impl Sized> {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\r\n7 |     let x = closure_ref_capture();\r\n  |             --------------------- recursive call site\r\n  |\r\n  = note: `#[warn(unconditional_recursion)]` on by default\r\n  = help: a `loop` may express intention better if this is on purpose\r\n\r\nerror[E0720]: cannot resolve opaque type\r\n --> test.rs:6:37\r\n  |\r\n6 | fn closure_ref_capture() -> NonZero<impl Sized> {\r\n  |                                     ^^^^^^^^^^ recursive opaque type\r\n7 |     let x = closure_ref_capture();\r\n8 |     unsafe { NonZero(move || { &x.0; }) }\r\n  |              -------------------------- returning here with type `NonZero<[closure@test.rs:8:22: 8:39]>`\r\n\r\nerror: aborting due to 3 previous errors; 1 warning emitted\r\n```\r\n\r\nThis affects both the MIR and the THIR unsafety checkers. However, since the code is obviously wrong and the relevant errors are still emitted, I'd expect this to be closed as wontfix.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.0-nightly (5ad7389bd 2021-08-06)\r\nbinary: rustc\r\ncommit-hash: 5ad7389bdd1abe7d2c6f73a233af1a7a69e96285\r\ncommit-date: 2021-08-06\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.56.0-nightly\r\nLLVM version: 12.0.1\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87850/timeline", "performed_via_github_app": null, "state_reason": null}