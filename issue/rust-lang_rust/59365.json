{"url": "https://api.github.com/repos/rust-lang/rust/issues/59365", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59365/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59365/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59365/events", "html_url": "https://github.com/rust-lang/rust/issues/59365", "id": 424269925, "node_id": "MDU6SXNzdWU0MjQyNjk5MjU=", "number": 59365, "title": "Function with impl trait in argument position does not see all impls of trait on value returned from function with impl trait in return position", "user": {"login": "mwchase", "id": 882845, "node_id": "MDQ6VXNlcjg4Mjg0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/882845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwchase", "html_url": "https://github.com/mwchase", "followers_url": "https://api.github.com/users/mwchase/followers", "following_url": "https://api.github.com/users/mwchase/following{/other_user}", "gists_url": "https://api.github.com/users/mwchase/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwchase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwchase/subscriptions", "organizations_url": "https://api.github.com/users/mwchase/orgs", "repos_url": "https://api.github.com/users/mwchase/repos", "events_url": "https://api.github.com/users/mwchase/events{/privacy}", "received_events_url": "https://api.github.com/users/mwchase/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-22T15:34:57Z", "updated_at": "2019-03-22T18:01:08Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "```rust\r\nstruct A {}\r\nstruct B {}\r\n\r\ntrait Marker {}\r\n\r\nimpl Marker for A {}\r\nimpl Marker for B {}\r\n\r\ntrait Marked<M: Marker> {}\r\n\r\nstruct Singleton {}\r\n\r\nimpl<M: Marker> Marked<M> for Singleton {}\r\n\r\nfn produce_a() -> impl Marked<A> {\r\n    Singleton{}\r\n}\r\n\r\nfn produce_b() -> impl Marked<B> {\r\n    Singleton{}\r\n}\r\n\r\nfn combine<M1: Marker, M2: Marker>(_t1: &impl Marked<M1>, _t2: &impl Marked<M2>) -> impl Marked<M1> + Marked<M2> {\r\n    Singleton{}\r\n}\r\n\r\nfn consume_a(_: &impl Marked<A>) {}\r\n\r\nfn main() {\r\n    let an_a = produce_a();\r\n    consume_a(&an_a);\r\n    consume_a(&an_a);\r\n    let a_b = produce_b();\r\n    //consume_a(&a_b); // Errors, as hoped.\r\n    let combined1 = combine(&a_b, &an_a);\r\n    let combined2 = combine(&an_a, &a_b);\r\n    consume_a(&combined1);\r\n    consume_a(&combined2);\r\n    let combined3 = combine(&combined1, &a_b);\r\n    let combined4 = combine(&combined2, &a_b);\r\n    consume_a(&combined3);\r\n    //consume_a(&combined4); // Errors???\r\n    println!(\"Hello, world!\");\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7bcaa61db633a11912b9a6ebd2688ed8))\r\n\r\nOutput:\r\n\r\n```\r\nHello, world!\r\n\r\n```\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nwarning: unused variable: `combined4`\r\n  --> src/main.rs:40:9\r\n   |\r\n40 |     let combined4 = combine(&combined2, &a_b);\r\n   |         ^^^^^^^^^ help: consider using `_combined4` instead\r\n   |\r\n   = note: #[warn(unused_variables)] on by default\r\n\r\nwarning: struct is never constructed: `B`\r\n --> src/main.rs:2:1\r\n  |\r\n2 | struct B {}\r\n  | ^^^^^^^^\r\n  |\r\n  = note: #[warn(dead_code)] on by default\r\n\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.77s\r\n     Running `target/debug/playground`\r\n\r\n```\r\n\r\nWith the second commented line uncommented:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: the trait bound `impl Marked<B>+Marked<B>: Marked<A>` is not satisfied\r\n  --> src/main.rs:42:5\r\n   |\r\n42 |     consume_a(&combined4); // Errors???\r\n   |     ^^^^^^^^^ the trait `Marked<A>` is not implemented for `impl Marked<B>+Marked<B>`\r\n   |\r\nnote: required by `consume_a`\r\n  --> src/main.rs:27:1\r\n   |\r\n27 | fn consume_a(_: &impl Marked<A>) {}\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: Could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\nI tested this across Stable, Beta, and Nightly in the playground, same behavior in all of them.\r\n\r\nMy intent with this code was to have a set of \"markers\" that could be associated with a type purely at a type-system level, with the actual implementation being a single concrete ZST. As the first commented-out line shows, this works in the simple case, but things get confused if you compose markers together multiple times.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59365/timeline", "performed_via_github_app": null, "state_reason": null}