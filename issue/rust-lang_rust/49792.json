{"url": "https://api.github.com/repos/rust-lang/rust/issues/49792", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49792/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49792/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49792/events", "html_url": "https://github.com/rust-lang/rust/issues/49792", "id": 312341129, "node_id": "MDU6SXNzdWUzMTIzNDExMjk=", "number": 49792, "title": "Tracking issue for the to_bytes and from_bytes methods of integers", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-04-08T21:03:53Z", "updated_at": "2018-08-01T22:44:41Z", "closed_at": "2018-08-01T22:44:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This tracks the stabilization of two methods on each primitive integer type, added in PR #49871:\r\n\r\n```rust\r\nimpl $Int {\r\n    pub fn to_bytes(self) -> [u8; mem::size_of::<Self>()] {\r\n        unsafe { mem::transmute(self) }\r\n    }\r\n    pub fn from_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\r\n        unsafe { mem::transmute(bytes) }\r\n    }\r\n}\r\n```\r\n\r\nPrevious issue message:\r\n\r\n----\r\n\r\n\r\nI\u2019d like to propose adding to the standard library between various integer types `$Int` and byte arrays `[u8; size_of::<$Int>()]` (which by the way is literally a valid type today). The implementation would be exactly `transmute`, but since the signature is much more restricted and all bit patterns are valid for each of the types involved, these conversions are safe.\r\n\r\nTransmuting produces arrays with the target platform\u2019s endianness. When something different is desired, the existing `to_be`/`to_le`/`from_be`/`from_le` methods can be combined with these new conversions. Keeping these concerns orthogonal (instead of multiplying ad-hoc conversions) allows to keep the API surface small.\r\n\r\nWrapping specific forms of `transmute` into safe APIs makes good candidates for the standard library IMO since they can save users from needing writing (and reviewing and maintaining) `unsafe` code themselves. See `Box::into_raw` for example. Together with the existing `{to,from}_{be,le}` methods and `TryFrom<&[T]> for &[T; $N]` impls, these new conversions would cover much of the functionality of the popular [byteorder](https://crates.io/crates/byteorder) crate with little code and a relatively small API surface.\r\n\r\nWhat I\u2019m less certain about (and why this isn\u2019t a PR yet) is what API should we expose these conversions as. Options are:\r\n\r\n* Impls of the `From` trait, or\r\n* Named methods, similar to `f32::to_bits` and `f32::from_bits`. The advantage over `From` is that we can give specific names to these conversions in order to communicate what they do. The downside is that we need to pick names.\r\n  * I initially thought of `to_native_endian_bytes` and `from_native_endian_bytes` but that\u2019s not great because:\r\n    - It\u2019s somewhat inconsistent with `to_be` and friends which are much more abbreviated. (But maybe they shouldn\u2019t be. It is worth adding `to_big_endian` & co and deprecating the short ones?)\r\n    - It looks weird when combining them for writing portable code: `n.to_be().to_native_endian()`: now \"native endian\" is inaccurate, but that\u2019s partly the fault of `to_be` for changing the meaning of a value without changing its type.\r\n  * Another idea is simply `to_bytes` and `from_bytes`, but that\u2019s uninformative enough that they could just as well be `From` impls.\r\n\r\n@rust-lang/libs or anyone, any thoughts?", "closed_by": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49792/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49792/timeline", "performed_via_github_app": null, "state_reason": "completed"}