{"url": "https://api.github.com/repos/rust-lang/rust/issues/44755", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44755/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44755/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44755/events", "html_url": "https://github.com/rust-lang/rust/issues/44755", "id": 259606269, "node_id": "MDU6SXNzdWUyNTk2MDYyNjk=", "number": 44755, "title": "Introduce `matches(T: Trait)` condition to rustc_on_unimplemented", "user": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-09-21T19:30:05Z", "updated_at": "2018-06-22T02:21:00Z", "closed_at": "2018-06-22T02:21:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We want to allow `rustc_on_unimplemented` to check arbitrary type conditions to make the error message depend on the input types. The sanest way to do that is to allow conditioning on traits. For example, for #42526 we want something like:\r\n\r\n```Rust\r\ntrait IsNoneError {}\r\nimpl IsNoneError for NoneError {}\r\n\r\n#[rustc_on_unimplemented(\r\n               on(all(from_method=\"from\",\r\n                      from_desugaring=\"?\",\r\n                      matches(\"IsNoneError\", Self=\"T\")),\r\n                  message=\"can't use Try on Option in a function returning Result\")\r\n                  )]\r\ntrait From<T> {\r\n    // ...\r\n}\r\n```\r\n\r\nThe syntax I prefer is `matches(\"TRAIT_NAME\", Self=\"SELF_NAME\", \"PARAM_1_NAME\", ..)` where `TRAIT_NAME` and `SELF_NAME` are mandatory, but probably any syntax can work (this is all feature gated under the `rustc_on_unimplemented` attribute, so we can experiment).\r\n\r\nAt least for now, we can limit the parameters to be type parameters from our generics - the `on_unimplemented` code already knows how to look these up. You can use these to implement anything you like with the proper trait bound.\r\n\r\n[Mentoring notes here.](https://github.com/rust-lang/rust/issues/44755#issuecomment-331720879)", "closed_by": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44755/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44755/timeline", "performed_via_github_app": null, "state_reason": "completed"}