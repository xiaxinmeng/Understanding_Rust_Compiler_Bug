{"url": "https://api.github.com/repos/rust-lang/rust/issues/105857", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105857/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105857/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105857/events", "html_url": "https://github.com/rust-lang/rust/issues/105857", "id": 1501704965, "node_id": "I_kwDOAAsO6M5ZgjMF", "number": 105857, "title": "Loop unrolled on `x86_64` and `ppc64el` but not on `aarch64`, leading to poor performance", "user": {"login": "Shnatsel", "id": 291257, "node_id": "MDQ6VXNlcjI5MTI1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/291257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shnatsel", "html_url": "https://github.com/Shnatsel", "followers_url": "https://api.github.com/users/Shnatsel/followers", "following_url": "https://api.github.com/users/Shnatsel/following{/other_user}", "gists_url": "https://api.github.com/users/Shnatsel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shnatsel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shnatsel/subscriptions", "organizations_url": "https://api.github.com/users/Shnatsel/orgs", "repos_url": "https://api.github.com/users/Shnatsel/repos", "events_url": "https://api.github.com/users/Shnatsel/events{/privacy}", "received_events_url": "https://api.github.com/users/Shnatsel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-12-18T02:21:36Z", "updated_at": "2023-04-05T17:32:46Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\n#[inline(never)] // so that we can easily view the assembly\r\nfn fibonacci_vec(length: usize) -> Vec<u64> {\r\n    let mut fib = vec![0; length];\r\n    {\r\n        // Unlike a `Vec`, a slice is not resizable\r\n        let fib = fib.as_mut_slice();\r\n        if length > 1 {\r\n            fib[1] = 1;\r\n        }\r\n        if length > 2 {\r\n            // The compiler now knows that `fib` is fixed-size\r\n            // and we are iterating exactly up to its length\r\n            for i in 2..fib.len() {\r\n                fib[i] = fib[i-1] + fib[i-2]; // no more bounds checks!\r\n            }\r\n        }\r\n    }\r\n\r\n    fib\r\n}\r\n\r\npub fn main() {\r\n    // read the length at runtime so that the compiler can't just precompute Fibonacci\r\n    let arg = std::env::args().nth(1).expect(\"Please specify length\");\r\n    let length: usize = arg.parse().expect(\"That's not a number!\");\r\n    // actually call the function we care about\r\n    let fibonacci = fibonacci_vec(length);\r\n    // and print the result so that the compiler doesn't remove it as dead code\r\n    println!(\"{:?}\", fibonacci.last());\r\n}\r\n```\r\n\r\nI expected loop unrolling to work uniformly on all 64-bit little-endian targets. \r\n\r\nBut on `aarch64` the loop with the line ` fib[i] = fib[i-1] + fib[i-2]; ` is not getting unrolled, leading to significantly worse performance.\r\n\r\n### Assembly\r\n\r\nI've inspected the assembly attributed to the ` fib[i] = fib[i-1] + fib[i-2];` line with https://github.com/pacak/cargo-show-asm to confirm. You can reproduce the results using:\r\n\r\n```bash\r\ncargo install cargo-show-asm\r\ngit clone https://github.com/Shnatsel/bounds-check-cookbook\r\ncd bounds-check-cookbook\r\ncargo asm --rust --bin fibvec_clever_indexing fibonacci_vec\r\n```\r\n\r\nResults on rustc 1.66 stable:\r\n\r\n - **x86_64:** https://gist.github.com/Shnatsel/5ae855298d8f35e9a9a513b044d8e294\r\n - **ppc64el:** https://gist.github.com/Shnatsel/862cbed11b3d88fcea31db1633433b05\r\n - **aarch64 (not unrolled):** https://gist.github.com/Shnatsel/9fcd5b220b8852531e3b0298c29912f4\r\n\r\n### Benchmarks\r\n\r\nI've benchmarked each implementation against a [naive version with bounds checks](https://github.com/Shnatsel/bounds-check-cookbook/blob/4dc0630fff4fca865f6f34ffef2cfc8b70db1d8e/src/bin/comparison_naive.rs). To reproduce:\r\n\r\n```bash\r\ncargo install hyperfine\r\ngit clone https://github.com/Shnatsel/bounds-check-cookbook\r\ncd bounds-check-cookbook\r\ncargo build --release\r\nhyperfine 'target/release/fibvec_naive_indexing 1000000000' 'target/release/fibvec_clever_indexing 1000000000'\r\n```\r\n\r\n#### x86_64\r\n\r\nmeasured on a Zen+ desktop CPU\r\n\r\n```\r\n$ hyperfine 'target/release/fibvec_naive_indexing 1000000000' 'target/release/fibvec_clever_indexing 1000000000'\r\n\r\nBenchmark 1: target/release/fibvec_naive_indexing 1000000000\r\n  Time (mean \u00b1 \u03c3):      3.612 s \u00b1  0.040 s    [User: 1.435 s, System: 2.132 s]\r\n  Range (min \u2026 max):    3.546 s \u2026  3.693 s    10 runs\r\n \r\nBenchmark 2: target/release/fibvec_clever_indexing 1000000000\r\n  Time (mean \u00b1 \u03c3):      3.133 s \u00b1  0.019 s    [User: 0.995 s, System: 2.103 s]\r\n  Range (min \u2026 max):    3.106 s \u2026  3.163 s    10 runs\r\n \r\nSummary\r\n  'target/release/fibvec_clever_indexing 1000000000' ran\r\n    1.15 \u00b1 0.01 times faster than 'target/release/fibvec_naive_indexing 1000000000'\r\n```\r\n\r\n#### ppc64el\r\n\r\nmeasured on a POWER9 system from IntegriCloud\r\n\r\nmassive improvement, correlated with unrolling the loop more than on x86_64\r\n\r\n```\r\n$ hyperfine 'target/release/fibvec_naive_indexing 1000000000' 'target/release/fibvec_clever_indexing 1000000000'\r\nBenchmark 1: target/release/fibvec_naive_indexing 1000000000\r\n  Time (mean \u00b1 \u03c3):      2.853 s \u00b1  0.052 s    [User: 2.149 s, System: 0.694 s]\r\n  Range (min \u2026 max):    2.810 s \u2026  2.980 s    10 runs\r\n \r\nBenchmark 2: target/release/fibvec_clever_indexing 1000000000\r\n  Time (mean \u00b1 \u03c3):      1.604 s \u00b1  0.017 s    [User: 0.919 s, System: 0.681 s]\r\n  Range (min \u2026 max):    1.586 s \u2026  1.636 s    10 runs\r\n \r\nSummary\r\n  'target/release/fibvec_clever_indexing 1000000000' ran\r\n    1.78 \u00b1 0.04 times faster than 'target/release/fibvec_naive_indexing 1000000000'\r\n```\r\n\r\n#### Aarch64\r\n\r\nMeasured on an Ampere Altra VM from Google Cloud \r\n\r\nvery small improvement due to lack of loop unrolling\r\n\r\n```\r\n$ hyperfine 'target/release/fibvec_naive_indexing 1000000000' 'target/release/fibvec_clever_indexing 1000000000' \r\nBenchmark 1: target/release/fibvec_naive_indexing 1000000000\r\n  Time (mean \u00b1 \u03c3):      3.320 s \u00b1  0.024 s    [User: 1.131 s, System: 2.179 s]\r\n  Range (min \u2026 max):    3.263 s \u2026  3.346 s    10 runs\r\n \r\nBenchmark 2: target/release/fibvec_clever_indexing 1000000000\r\n  Time (mean \u00b1 \u03c3):      3.226 s \u00b1  0.019 s    [User: 1.092 s, System: 2.127 s]\r\n  Range (min \u2026 max):    3.209 s \u2026  3.263 s    10 runs\r\n \r\nSummary\r\n  'target/release/fibvec_clever_indexing 1000000000' ran\r\n    1.03 \u00b1 0.01 times faster than 'target/release/fibvec_naive_indexing 1000000000'\r\n```\r\n\r\n### Meta\r\n\r\nTested on rustc 1.66 stable installed from Rustup. All code built on the target natively, no cross-compilation. \r\n\r\nThe exact targets used are  `aarch64-unknown-linux-gnu`, `x86_64-unknown-linux-gnu` and `powerpc64le-unknown-linux-gnu`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105857/timeline", "performed_via_github_app": null, "state_reason": null}