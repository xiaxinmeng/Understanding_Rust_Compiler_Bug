{"url": "https://api.github.com/repos/rust-lang/rust/issues/107528", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107528/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107528/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107528/events", "html_url": "https://github.com/rust-lang/rust/issues/107528", "id": 1564816366, "node_id": "I_kwDOAAsO6M5dRTPu", "number": 107528, "title": "async_fn_in_trait: default fn impl calling fn of same trait with default impl doesn't dispatch properly", "user": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2023-01-31T18:34:56Z", "updated_at": "2023-01-31T19:09:42Z", "closed_at": "2023-01-31T19:09:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "cf. https://octodon.social/@fasterthanlime/109785229512000455\r\n\r\nRelevant PR: https://github.com/hapsoc/hring/pull/74#issuecomment-1410868336 (but it's annoying to run - requires Linux, with a recent enough kernel to have io_uring support)\r\n\r\nHere's essentially the shape of the problem, I'll try to come up with a MVCE:\r\n\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(async_fn_in_trait)]\r\n\r\ntrait WriteOwned {\r\n  async fn writev_all(&self) {\r\n    self.writev();\r\n  }\r\n\r\n  async fn writev(&self) {\r\n   self.write();\r\n  }\r\n\r\n  async fn write(&self);\r\n}\r\n\r\nimpl WriteOwned for TcpStream {\r\n  async fn write(&self) {\r\n    // forward to actual impl\r\n  }\r\n\r\n  async fn writev(&self) {\r\n    // forward to actual impl\r\n  }\r\n}\r\n```\r\n\r\nWhen the concrete type is `TcpStream`, not only does `stream.writev_all` call `WriteOwned::writev` (the default impl) instead of `<TcpStream as WriteOwned>::writev`, it seems to call it with.. the wrong calling convention? Valgrind is very unhappy and the program ends up segfaulting.\r\n\r\n<details>\r\n<summary>\r\nValgrind output:\r\n</summary>\r\n\r\n```\r\n2023-01-31T18:20:45.691210Z DEBUG hring_bingo_ktls: Connected to httpbingo\r\nWriteOwned::writev_all, calling writev with 13 items\r\n==125831== Use of uninitialised value of size 8\r\n==125831==    at 0x196CB6: hring_buffet::io::WriteOwned::writev::{{closure}} (io.rs:0)\r\n==125831==    by 0x19664B: hring_buffet::io::WriteOwned::writev_all::{{closure}} (io.rs:96)\r\n==125831==    by 0x19ED21: hring::h1::client::request::{{closure}} (client.rs:57)\r\n==125831==    by 0x1DB7B4: <hring_bingo_ktls::SDriver as hring::ServerDriver>::handle::{{closure}} (main.rs:234)\r\n==125831==    by 0x2AAA9D: hring::h2::server::end_headers::{{closure}} (server.rs:764)\r\n==125831==    by 0x2CDEA9: tokio::runtime::task::core::Core<T,S>::poll::{{closure}} (core.rs:223)\r\n==125831==    by 0x1B5A60: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut (unsafe_cell.rs:14)\r\n==125831==    by 0x2CDC85: tokio::runtime::task::core::Core<T,S>::poll (core.rs:212)\r\n==125831==    by 0x21D819: tokio::runtime::task::harness::poll_future::{{closure}} (harness.rs:476)\r\n==125831==    by 0x2DB032: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once (unwind_safe.rs:271)\r\n==125831==    by 0x2C867B: std::panicking::try::do_call (panicking.rs:483)\r\n==125831==    by 0x2C99AA: __rust_try (in /home/amos/bearcove/hring/target/debug/hring-bingo-ktls)\r\n==125831== \r\nWriteOwned::write_v with \ud83d\udc48 ==125831== Conditional jump or move depends on uninitialised value(s)\r\n==125831==    at 0x52CEF6: core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt (num.rs:230)\r\n==125831==    by 0x525D7D: core::fmt::write (mod.rs:1213)\r\n==125831==    by 0x4FE153: <&std::io::stdio::Stderr as std::io::Write>::write_fmt (mod.rs:1682)\r\n==125831==    by 0x4FE97A: std::io::stdio::_eprint (stdio.rs:908)\r\n==125831==    by 0x196EB1: hring_buffet::io::WriteOwned::writev::{{closure}} (io.rs:46)\r\n==125831==    by 0x19664B: hring_buffet::io::WriteOwned::writev_all::{{closure}} (io.rs:96)\r\n==125831==    by 0x19ED21: hring::h1::client::request::{{closure}} (client.rs:57)\r\n==125831==    by 0x1DB7B4: <hring_bingo_ktls::SDriver as hring::ServerDriver>::handle::{{closure}} (main.rs:234)\r\n==125831==    by 0x2AAA9D: hring::h2::server::end_headers::{{closure}} (server.rs:764)\r\n==125831==    by 0x2CDEA9: tokio::runtime::task::core::Core<T,S>::poll::{{closure}} (core.rs:223)\r\n==125831==    by 0x1B5A60: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut (unsafe_cell.rs:14)\r\n==125831==    by 0x2CDC85: tokio::runtime::task::core::Core<T,S>::poll (core.rs:212)\r\n==125831== \r\n==125831== Conditional jump or move depends on uninitialised value(s)\r\n==125831==    at 0x52CFBF: core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt (num.rs:249)\r\n==125831==    by 0x525D7D: core::fmt::write (mod.rs:1213)\r\n==125831==    by 0x4FE153: <&std::io::stdio::Stderr as std::io::Write>::write_fmt (mod.rs:1682)\r\n==125831==    by 0x4FE97A: std::io::stdio::_eprint (stdio.rs:908)\r\n==125831==    by 0x196EB1: hring_buffet::io::WriteOwned::writev::{{closure}} (io.rs:46)\r\n==125831==    by 0x19664B: hring_buffet::io::WriteOwned::writev_all::{{closure}} (io.rs:96)\r\n==125831==    by 0x19ED21: hring::h1::client::request::{{closure}} (client.rs:57)\r\n==125831==    by 0x1DB7B4: <hring_bingo_ktls::SDriver as hring::ServerDriver>::handle::{{closure}} (main.rs:234)\r\n==125831==    by 0x2AAA9D: hring::h2::server::end_headers::{{closure}} (server.rs:764)\r\n==125831==    by 0x2CDEA9: tokio::runtime::task::core::Core<T,S>::poll::{{closure}} (core.rs:223)\r\n==125831==    by 0x1B5A60: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut (unsafe_cell.rs:14)\r\n==125831==    by 0x2CDC85: tokio::runtime::task::core::Core<T,S>::poll (core.rs:212)\r\n==125831== \r\n==125831== Conditional jump or move depends on uninitialised value(s)\r\n==125831==    at 0x52CFAB: core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt (num.rs:257)\r\n==125831==    by 0x525D7D: core::fmt::write (mod.rs:1213)\r\n==125831==    by 0x4FE153: <&std::io::stdio::Stderr as std::io::Write>::write_fmt (mod.rs:1682)\r\n==125831==    by 0x4FE97A: std::io::stdio::_eprint (stdio.rs:908)\r\n==125831==    by 0x196EB1: hring_buffet::io::WriteOwned::writev::{{closure}} (io.rs:46)\r\n==125831==    by 0x19664B: hring_buffet::io::WriteOwned::writev_all::{{closure}} (io.rs:96)\r\n==125831==    by 0x19ED21: hring::h1::client::request::{{closure}} (client.rs:57)\r\n==125831==    by 0x1DB7B4: <hring_bingo_ktls::SDriver as hring::ServerDriver>::handle::{{closure}} (main.rs:234)\r\n==125831==    by 0x2AAA9D: hring::h2::server::end_headers::{{closure}} (server.rs:764)\r\n==125831==    by 0x2CDEA9: tokio::runtime::task::core::Core<T,S>::poll::{{closure}} (core.rs:223)\r\n==125831==    by 0x1B5A60: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut (unsafe_cell.rs:14)\r\n==125831==    by 0x2CDC85: tokio::runtime::task::core::Core<T,S>::poll (core.rs:212)\r\n==125831== \r\n==125831== Syscall param write(buf) points to uninitialised byte(s)\r\n==125831==    at 0x4A81D94: write (write.c:26)\r\n==125831==    by 0x4FE2FE: <std::io::stdio::StderrLock as std::io::Write>::write_all (fd.rs:152)\r\n==125831==    by 0x4FF5D5: <std::io::Write::write_fmt::Adapter<T> as core::fmt::Write>::write_str (mod.rs:1671)\r\n==125831==    by 0x52CFFD: core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt (num.rs:273)\r\n==125831==    by 0x525D7D: core::fmt::write (mod.rs:1213)\r\n==125831==    by 0x4FE153: <&std::io::stdio::Stderr as std::io::Write>::write_fmt (mod.rs:1682)\r\n==125831==    by 0x4FE97A: std::io::stdio::_eprint (stdio.rs:908)\r\n==125831==    by 0x196EB1: hring_buffet::io::WriteOwned::writev::{{closure}} (io.rs:46)\r\n==125831==    by 0x19664B: hring_buffet::io::WriteOwned::writev_all::{{closure}} (io.rs:96)\r\n==125831==    by 0x19ED21: hring::h1::client::request::{{closure}} (client.rs:57)\r\n==125831==    by 0x1DB7B4: <hring_bingo_ktls::SDriver as hring::ServerDriver>::handle::{{closure}} (main.rs:234)\r\n==125831==    by 0x2AAA9D: hring::h2::server::end_headers::{{closure}} (server.rs:764)\r\n==125831==  Address 0x1ffeff3187 is on thread 1's stack\r\n==125831==  in frame #3, created by core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt (num.rs:279)\r\n==125831== \r\n2 buffers \ud83d\udc48\r\n```\r\n\r\n</details>\r\n\r\nNote that a rustc bug wasn't my first guess here, since there's \"mmap a large chunk of memory and use unsafe code to divvy it up\" and \"pass ownership of buffers to the kernel for io_uring\" fuckery going on, but I feel reasonably confident I can come up with a MVCE if someone doesn't beat me to the punch.", "closed_by": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107528/timeline", "performed_via_github_app": null, "state_reason": "completed"}