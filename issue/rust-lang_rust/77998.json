{"url": "https://api.github.com/repos/rust-lang/rust/issues/77998", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77998/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77998/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77998/events", "html_url": "https://github.com/rust-lang/rust/issues/77998", "id": 722706950, "node_id": "MDU6SXNzdWU3MjI3MDY5NTA=", "number": 77998, "title": "Tracking Issue for `remainder` methods for `str` split iterators", "user": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}, {"id": 2238196890, "node_id": "MDU6TGFiZWwyMjM4MTk2ODkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-str", "name": "A-str", "color": "f7e101", "default": false, "description": "Area: str and String"}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-10-15T22:06:54Z", "updated_at": "2023-01-31T07:10:32Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis is a tracking issue for the methods implemented in #75265 and #82570, which allow viewing the remainder of the underlying string in str-split iterators. E.g.:\r\n\r\n```rust\r\nlet mut split = \"Mary had a little lamb\".split(' '); \r\nassert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\r\n\r\n_ = split.next();\r\nassert_eq!(split.remainder(), Some(\"had a little lamb\"));\r\n\r\nsplit.by_ref().for_each(drop);\r\nassert_eq!(split.remainder(), None);\r\n```\r\n\r\nThe feature gates for the issue are `#![feature(str_split_remainder)]` (for most split iterators), `#![feature(str_split_inclusive_remainder)]` (for `SplitInclusive`) and `#![feature(str_split_whitespace_remainder)]` (for `SplitWhitespace` and `SplitAsciiWhitespace`).\r\n\r\n### Public API\r\n\r\n```rust\r\n// mod core::str\r\nimpl<'a, P: Pattern<'a>> Split<'a, P> {\r\n    fn remainder(&self) -> Option<&'a str>;\r\n}\r\n\r\n// And the same for\r\n// - `RSplit<'a, P>`\r\n// - `SplitTerminator<'a, P>`\r\n// - `RSplitTerminator<'a, P>`\r\n// - `SplitN<'a, P>`\r\n// - `RSplitN<'a, P>`\r\n// - `SplitWhitespace<'a>`\r\n// - `SplitAsciiWhitespace<'a>`\r\n// - `SplitInclusive<'a, P>`\r\n```\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [x] Implement the feature\r\n- [x] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\n- ~~Should empty strings point to the end of the haystack, or they can be arbitrary constants? (see https://github.com/rust-lang/rust/pull/75265#discussion_r487358752)~~ `None` is now returned instead of an empty string, making this irrelevant\r\n\r\n### Implementation history\r\n\r\n- #75265 \u2014 implemented `as_str` methods on `core::str::{Split,RSplit,SplitN,RSplitN,SplitTerminator,RSplitTerminator,SplitInclusive}`\r\n\r\n- #82570 \u2014 implemented `as_str` methods on `core::str::{SplitWhitespace, SplitAsciiWhitespace}`\r\n- #95644 \u2014 renamed `as_str`=>`remainder` and changed return type to `Option<&str>`", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77998/reactions", "total_count": 18, "+1": 11, "-1": 0, "laugh": 0, "hooray": 7, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77998/timeline", "performed_via_github_app": null, "state_reason": null}