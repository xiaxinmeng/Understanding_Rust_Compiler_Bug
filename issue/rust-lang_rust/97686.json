{"url": "https://api.github.com/repos/rust-lang/rust/issues/97686", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97686/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97686/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97686/events", "html_url": "https://github.com/rust-lang/rust/issues/97686", "id": 1259852454, "node_id": "I_kwDOAAsO6M5LF9Km", "number": 97686, "title": "bad diagnostic on using `impl Trait` in recursive function", "user": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-06-03T12:27:00Z", "updated_at": "2022-12-06T08:38:30Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Given the following code: [[link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=6b309eac6df6ba52dfd8aef5d60ba3b8)]\r\n\r\n```rust\r\nstruct Tree<'a> {\r\n    nested: std::collections::BTreeMap<&'a str, Tree<'a>>,\r\n}\r\n\r\nimpl<'a> Tree<'a> {\r\n    fn flatten(&self) -> impl Iterator<Item = &Tree<'a>> {\r\n        std::iter::once(self).chain(self.nested.values().flat_map(|tree| tree.flatten()))\r\n    }\r\n}\r\n```\r\n\r\nThe current output on stable is:\r\n\r\n```\r\nerror: hidden type `impl Iterator<Item = &Tree<'a>>` differed from previous `std::iter::Chain<std::iter::Once<&Tree<'a>>, FlatMap<std::collections::btree_map::Values<'_, &str, Tree<'a>>, impl Iterator<Item = &Tree<'a>>, [closure@src/lib.rs:7:67: 7:88]>>`\r\n --> src/lib.rs:7:9\r\n  |\r\n7 |         std::iter::once(self).chain(self.nested.values().flat_map(|tree| tree.flatten()))\r\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\nnote: previous hidden type bound here\r\n --> src/lib.rs:7:9\r\n  |\r\n7 |         std::iter::once(self).chain(self.nested.values().flat_map(|tree| tree.flatten()))\r\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nand on nightly:\r\n\r\n```\r\nerror: concrete type differs from previous defining opaque type use\r\n --> src/lib.rs:7:9\r\n  |\r\n7 |         std::iter::once(self).chain(self.nested.values().flat_map(|tree| tree.flatten()))\r\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |         |\r\n  |         expected `std::iter::Chain<std::iter::Once<&Tree<'a>>, FlatMap<std::collections::btree_map::Values<'_, &str, Tree<'a>>, impl Iterator<Item = &Tree<'a>>, [closure@src/lib.rs:7:67: 7:88]>>`, got `impl Iterator<Item = &Tree<'a>>`\r\n  |         this expression supplies two conflicting concrete types for the same opaque type\r\n```\r\n\r\nIdeally this code should compile, but if it cannot be made to compile than the compiler error should use lesson compiler jargon (e.g., \"opaque type\"). \r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97686/timeline", "performed_via_github_app": null, "state_reason": null}