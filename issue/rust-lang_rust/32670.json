{"url": "https://api.github.com/repos/rust-lang/rust/issues/32670", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32670/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32670/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32670/events", "html_url": "https://github.com/rust-lang/rust/issues/32670", "id": 145229889, "node_id": "MDU6SXNzdWUxNDUyMjk4ODk=", "number": 32670, "title": "A soundness bug in std::fs", "user": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 39, "created_at": "2016-04-01T16:53:04Z", "updated_at": "2022-09-20T05:08:32Z", "closed_at": "2016-04-03T15:19:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This program writes to arbitrary memory, violating Rust's safety guarantees, despite using no unsafe code:\n\n``` rust\nuse std::fs;\nuse std::io;\nuse std::io::prelude::*;\n\nfn main() {\n    let i = 0;\n    let j = &i as *const i32 as u64;\n    let mut f = fs::OpenOptions::new().write(true).open(\"/proc/self/mem\").unwrap();\n    f.seek(io::SeekFrom::Start(j+16)).unwrap();\n    let k = [16; 16];\n    f.write(&k).unwrap();\n}\n```\n\nBecause the filesystem APIs cannot be made safe (blocking `/proc` paths specifically will not work, because symlinks can be created to it), `File::create`, `File::open`, and `OpenOptions::open` should be marked unsafe. I am working on an RFC for that right now.\n", "closed_by": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32670/reactions", "total_count": 62, "+1": 3, "-1": 8, "laugh": 51, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32670/timeline", "performed_via_github_app": null, "state_reason": "completed"}