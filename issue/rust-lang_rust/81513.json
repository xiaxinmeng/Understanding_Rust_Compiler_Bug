{"url": "https://api.github.com/repos/rust-lang/rust/issues/81513", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81513/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81513/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81513/events", "html_url": "https://github.com/rust-lang/rust/issues/81513", "id": 796851765, "node_id": "MDU6SXNzdWU3OTY4NTE3NjU=", "number": 81513, "title": "Tracking Issue for pointer metadata APIs", "user": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 3537216018, "node_id": "LA_kwDOAAsO6M7S1aIS", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-design-concerns", "name": "S-tracking-design-concerns", "color": "4682b4", "default": false, "description": "Blocking design concerns"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 140, "created_at": "2021-01-29T12:42:03Z", "updated_at": "2023-03-18T22:44:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for the RFC 2580 \"Pointer metadata & VTable\" (rust-lang/rfcs#2580).\r\nThe feature gate for the issue is `#![feature(ptr_metadata)]`.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n\r\n- [x] Implement the RFC (cc @rust-lang/libs @rust-lang/lang -- can anyone write up mentoring\r\n      instructions?)\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n\r\nLanguage-level:\r\n\r\n* Is it, or should it be UB (through validity or safety invariants) to have a raw trait object wide pointer with an dangling vtable pointer? A null vtable pointer? If not, `DynMetadata` methods like `size` may need to be `unsafe fn`. Or maybe something like `*const ()` should be metadata of trait objects instead of `DynMetadata`. <br>Right now, there is some inconsistency here: `size_of_val_raw(ptr)` is unsafe, but `metadta(ptr).size_of()` does the same thing and is safe.\r\n\r\nAPI level:\r\n\r\n* Is `*const ()` appropriate for the data component of pointers? Or should it be `*const u8`? Or `*const Opaque` with some new `Opaque` type? (Respectively `*mut ()` and `NonNull<()>`)\r\n* Should `ptr::from_raw_parts` and friends be `unsafe fn`?\r\n* Should `Thin` be added as a supertrait of `Sized`? Or could it ever make sense to have fat pointers to statically-sized types?\r\n* Should `DynMetadata` not have a type parameter? This might reduce monomorphization cost, but would force that the size, alignment, and destruction pointers be in the same location (offset) for every vtable. But keeping them in the same location is probaly desirable anyway to keep code size small.\r\n\r\nAPI bikesheds:\r\n\r\n* Name of new items: `Pointee` (v.s. Referent?), `Thin` (`ThinPointee`?), `DynMetadata` (`VTablePtr`?), etc\r\n* Location of new items in `core::ptr`. For example: should `Thin` be in `core::marker` instead?\r\n\r\n\r\n### Implementation history\r\n\r\n- [ ] #81172 Initial implementation\r\n\r\n### Tracked APIs\r\n\r\nLast updated for https://github.com/rust-lang/rust/pull/81172.\r\n\r\n```rust\r\npub trait Pointee {\r\n    /// One of `()`, `usize`, or `DynMetadata<dyn SomeTrait>`\r\n    type Metadata: Copy + Send + Sync + Ord + Hash + Unpin;\r\n}\r\n\r\npub trait Thin = Pointee<Metadata = ()>;\r\n\r\npub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {}\r\n\r\npub const fn from_raw_parts<T: ?Sized>(*const (), <T as Pointee>::Metadata) -> *const T {}\r\npub const fn from_raw_parts_mut<T: ?Sized>(*mut (), <T as Pointee>::Metadata) -> *mut T {}\r\n\r\nimpl<T: ?Sized> NonNull<T> {\r\n    pub const fn from_raw_parts(NonNull<()>, <T as Pointee>::Metadata) -> NonNull<T> {}\r\n\r\n    /// Convenience for `(ptr.cast(), metadata(ptr))`\r\n    pub const fn to_raw_parts(self) -> (NonNull<()>, <T as Pointee>::Metadata) {}\r\n}\r\n\r\nimpl<T: ?Sized> *const T {\r\n    pub const fn to_raw_parts(self) -> (*const (), <T as Pointee>::Metadata) {}\r\n}\r\n\r\nimpl<T: ?Sized> *mut T {\r\n    pub const fn to_raw_parts(self) -> (*mut (), <T as Pointee>::Metadata) {}\r\n}\r\n\r\n/// `<dyn SomeTrait as Pointee>::Metadata == DynMetadata<dyn SomeTrait>`\r\npub struct DynMetadata<Dyn: ?Sized> {\r\n    // Private pointer to vtable\r\n}\r\n\r\nimpl<Dyn: ?Sized> DynMetadata<Dyn> {\r\n    pub fn size_of(self) -> usize {}\r\n    pub fn align_of(self) -> usize {}\r\n    pub fn layout(self) -> crate::alloc::Layout {}\r\n}\r\n\r\nunsafe impl<Dyn: ?Sized> Send for DynMetadata<Dyn> {}\r\nunsafe impl<Dyn: ?Sized> Sync for DynMetadata<Dyn> {}\r\nimpl<Dyn: ?Sized> Debug for DynMetadata<Dyn> {}\r\nimpl<Dyn: ?Sized> Unpin for DynMetadata<Dyn> {}\r\nimpl<Dyn: ?Sized> Copy for DynMetadata<Dyn> {}\r\nimpl<Dyn: ?Sized> Clone for DynMetadata<Dyn> {}\r\nimpl<Dyn: ?Sized> Eq for DynMetadata<Dyn> {}\r\nimpl<Dyn: ?Sized> PartialEq for DynMetadata<Dyn> {}\r\nimpl<Dyn: ?Sized> Ord for DynMetadata<Dyn> {}\r\nimpl<Dyn: ?Sized> PartialOrd for DynMetadata<Dyn> {}\r\nimpl<Dyn: ?Sized> Hash for DynMetadata<Dyn> {}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81513/reactions", "total_count": 47, "+1": 2, "-1": 0, "laugh": 0, "hooray": 40, "confused": 0, "heart": 0, "rocket": 5, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81513/timeline", "performed_via_github_app": null, "state_reason": null}