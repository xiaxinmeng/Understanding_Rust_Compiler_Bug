{"url": "https://api.github.com/repos/rust-lang/rust/issues/102291", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102291/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102291/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102291/events", "html_url": "https://github.com/rust-lang/rust/issues/102291", "id": 1385224392, "node_id": "I_kwDOAAsO6M5SkNjI", "number": 102291, "title": "`Self` based method bounds defeat newtype pattern", "user": {"login": "QuineDot", "id": 75067664, "node_id": "MDQ6VXNlcjc1MDY3NjY0", "avatar_url": "https://avatars.githubusercontent.com/u/75067664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuineDot", "html_url": "https://github.com/QuineDot", "followers_url": "https://api.github.com/users/QuineDot/followers", "following_url": "https://api.github.com/users/QuineDot/following{/other_user}", "gists_url": "https://api.github.com/users/QuineDot/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuineDot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuineDot/subscriptions", "organizations_url": "https://api.github.com/users/QuineDot/orgs", "repos_url": "https://api.github.com/users/QuineDot/repos", "events_url": "https://api.github.com/users/QuineDot/events{/privacy}", "received_events_url": "https://api.github.com/users/QuineDot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-09-26T00:29:30Z", "updated_at": "2023-05-05T03:14:49Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "[Inspired by this URLO thread by ChaiTRex.](https://users.rust-lang.org/t/getting-errors-implementing-unzip-in-an-iterator-adapter/81739)\r\n\r\n[Writing a newtype for `Iterator` is not possible in the fully general case:](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=91bad714f68380cecb030a89d000efa5)\r\n```rust\r\nstruct Wrapper<Iter>(Iter);\r\nimpl<Iter: Iterator<Item = Item>, Item> Iterator for Wrapper<Iter> {\r\n    type Item = Item;\r\n    fn next(&mut self) -> Option<Self::Item> { self.0.next() }\r\n    fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)\r\n    where\r\n        FromA: Default + Extend<A>,\r\n        FromB: Default + Extend<B>,\r\n        Self: Sized + Iterator<Item = (A, B)>,\r\n    {\r\n        self.0.unzip()\r\n    }\r\n}\r\n```\r\nAs I understand the issue, the method is not allowed to exploit the type equality of the outer `impl`-level generics.  However, this is necessary in order to call the wrapped iterator's `unzip` implementation (which may not be the default implementation).  Moreover, adding a bound for the wrapped type [also doesn't resolve.](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=39d176091e02e02a7324c41226f91fe1)  Even if it did resolve, it is also flagged as a stricter requirement than that of the trait declaration, even though it is superfluous in the context of the implementation.\r\n\r\nOne can attempt to work around this by using `unsafe` and various forms of `dyn Iterator`.  However, they don't actually do the same thing, as you end up calling the implementations for `&mut dyn Iterator` or `Box<dyn Iterator>`, etc, which do not call the wrapped type's implementation of `unzip`.\r\n\r\nAs far as I can tell, there's no way to recover the bounds on the wrapped type to allow calling the bound-restricted method.\r\n\r\n---\r\n\r\nI have used `Iterator` and `unzip` as an example, but naturally this is a barrier for many cases where type information is unable to cross an implementation / item boundary; the issue title is an attempt at describing the general case.\r\n\r\nI'm not sure if this is by design or not, so I'm filing a blank issue.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102291/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102291/timeline", "performed_via_github_app": null, "state_reason": null}