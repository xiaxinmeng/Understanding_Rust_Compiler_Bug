{"url": "https://api.github.com/repos/rust-lang/rust/issues/34256", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34256/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34256/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34256/events", "html_url": "https://github.com/rust-lang/rust/issues/34256", "id": 159933804, "node_id": "MDU6SXNzdWUxNTk5MzM4MDQ=", "number": 34256, "title": "HKL causes inconsistent behavior with trait bounds.", "user": {"login": "pierzchalski", "id": 1725294, "node_id": "MDQ6VXNlcjE3MjUyOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1725294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierzchalski", "html_url": "https://github.com/pierzchalski", "followers_url": "https://api.github.com/users/pierzchalski/followers", "following_url": "https://api.github.com/users/pierzchalski/following{/other_user}", "gists_url": "https://api.github.com/users/pierzchalski/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierzchalski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierzchalski/subscriptions", "organizations_url": "https://api.github.com/users/pierzchalski/orgs", "repos_url": "https://api.github.com/users/pierzchalski/repos", "events_url": "https://api.github.com/users/pierzchalski/events{/privacy}", "received_events_url": "https://api.github.com/users/pierzchalski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-13T12:00:05Z", "updated_at": "2019-12-25T17:26:26Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Existing code uses trait bounds to force side-conditions on associated types. For instance, `IntoIterator` is defined (in part) as follows:\n\n``` rust\ntrait IntoIterator where Self::IntoIter::Item == Self::Item {\n    type Item;\n    type IntoIter: Iterator;\n}\n```\n\nSimilarly, we can define a side-condition using higher-kinded lifetimes:\n\n``` rust\ntrait BorrowIterator where for<'a> &'a Self: IntoIterator {}\n```\n\nThis is necessary when we want to implement a trait for a (non-reference) type `T`, but want to require trait implementations on `&'a T` where those trait implementations can refer to the borrow lifetime `'a`.\n\nHowever, the former concrete trait bounds are usable as trait bounds in functions. For instance, the following will compile:\n\n``` rust\nfn needs_iter<T: IntoIterator>(){}\n```\n\nWhereas this will fail:\n\n``` rust\nfn needs_borrow_iter<T: BorrowIterator>(){}\n```\n\nWith the error:\n\n```\nerror: the trait bound `for<'a> &'a T: std::iter::Iterator` is not satisfied [--explain E0277]\n  --> <anon>:19:1\n19 |> fn needs_borrow_iter<T: BorrowIterator>()\n   |> ^\nnote: `&'a T` is not an iterator; maybe try calling `.iter()` or a similar method\nnote: required because of the requirements on the impl of `for<'a> std::iter::IntoIterator` for `&'a T`\nnote: required by `BorrowIterator`\n```\n\nThis is doubly puzzling since `T: IntoIterator` doesn't require `T: Iterator`.\n\nSee #34142 which shows similar issues with bounds on function definitions.\nSee #27113 which shows issues with 'outlives' relations in where-clauses.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34256/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34256/timeline", "performed_via_github_app": null, "state_reason": null}