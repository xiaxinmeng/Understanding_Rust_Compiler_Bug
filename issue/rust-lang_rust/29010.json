{"url": "https://api.github.com/repos/rust-lang/rust/issues/29010", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29010/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29010/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29010/events", "html_url": "https://github.com/rust-lang/rust/issues/29010", "id": 111080519, "node_id": "MDU6SXNzdWUxMTEwODA1MTk=", "number": 29010, "title": "Indexed and IndexedMut traits only accept usize", "user": {"login": "peter-bertok", "id": 14988123, "node_id": "MDQ6VXNlcjE0OTg4MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/14988123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bertok", "html_url": "https://github.com/peter-bertok", "followers_url": "https://api.github.com/users/peter-bertok/followers", "following_url": "https://api.github.com/users/peter-bertok/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bertok/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bertok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bertok/subscriptions", "organizations_url": "https://api.github.com/users/peter-bertok/orgs", "repos_url": "https://api.github.com/users/peter-bertok/repos", "events_url": "https://api.github.com/users/peter-bertok/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bertok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-10-13T00:39:15Z", "updated_at": "2015-10-27T05:41:12Z", "closed_at": "2015-10-27T05:41:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sample code: https://play.rust-lang.org/?gist=b9b0fad33060c74095a0&version=nightly\n\nShort sample code that fails to compile:\n\n``` rust\nlet a = [0;5];\nlet x = a[0u8];\n```\n\nI'm working on a native Rust implementation of the Google Brotli compression algorithm (https://github.com/peter-bertok/brotli), which has a lot of low-level bit/byte twiddling and came across this issue.\n- Array indexing using arbitrary integral types works in literally every other mainstream language I can think of. Many other languages allow non-integral types as well, such as their equivalent of `repr(C)` enums.\n- Many unnecessary explicit type casts are required in certain types of code (binary format parsing, native interop, etc...)\n- An implicit cast from small unsigned integral types is never harmful. That is: `u8`, `u16`, and `u32`.\n- Casts from other types can be handled with a new warning or the existing error, with an explicit cast required to ensure the developer understands that truncation/wrapping is possible.\n- Alternatively, the bounds checking in Rust can be relied upon to provide protection. E.g.: indexing with a negative value should always cause a panic. In fact, this can be made SAFER than an explicit cast. Think of the scenario where a large negative signed number is explicitly cast by the programmer to `usize`, like they have to do now. This would wrap to a small positive number, which is a valid index. If the rust compiler provides an implementation for `Indexed<>` with signed types, it can insert a check for negative numbers, improving safety substantially. Currently, this compiles and runs without a panic:\n\n``` rust\nlet offs: i64 = -18446744073709551611;\nlet a = [0;50];\nlet x = a[offs as usize];\n```\n- This issue also causes the compiler to infer the `usize` type unexpectedly, which is confusing to developers. Goes against the rule of least surprise. This fails to compile unexpectedly:\n\n``` rust\nlet offs: u32 = 1; // explicit integral type. Could be a function parameter, struct member, etc...\nlet mut i = 0; // due to slice indexing, this is inferred to be `usize`\nlet a = [0;5]; // any slice of any type, doesn't matter\nlet x = a[i]; \n// This results in: \"the trait `core::ops::Add<u32>` is not implemented for the type `usize`\"\nlet y = a[i+offs]; \n```\n### Proposal\n- Implement the `Indexed` and `IndexedMut` traits for `u8`, `u16`, and `u32` for slice and Vec types with identical behaviour to the `usize` version.\n- Implement the `Indexed` and `IndexedMut` traits for `isize`, `i8`, `i16`, and `i32` for slice and Vec types with new behaviour that panics on negative values, not just out-of-bounds positive values.\n- The `i64` and `u64` implementations are problematic on 32-bit builds. How these are treated is up for debate.\n", "closed_by": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29010/reactions", "total_count": 7, "+1": 6, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29010/timeline", "performed_via_github_app": null, "state_reason": "completed"}