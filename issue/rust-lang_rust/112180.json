{"url": "https://api.github.com/repos/rust-lang/rust/issues/112180", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112180/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112180/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112180/events", "html_url": "https://github.com/rust-lang/rust/issues/112180", "id": 1736801408, "node_id": "I_kwDOAAsO6M5nhXyA", "number": 112180, "title": "assertion failed: key as usize != KEY_SENTVAL in DragonFly BSD", "user": {"login": "tuxillo", "id": 130578, "node_id": "MDQ6VXNlcjEzMDU3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/130578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuxillo", "html_url": "https://github.com/tuxillo", "followers_url": "https://api.github.com/users/tuxillo/followers", "following_url": "https://api.github.com/users/tuxillo/following{/other_user}", "gists_url": "https://api.github.com/users/tuxillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuxillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuxillo/subscriptions", "organizations_url": "https://api.github.com/users/tuxillo/orgs", "repos_url": "https://api.github.com/users/tuxillo/repos", "events_url": "https://api.github.com/users/tuxillo/events{/privacy}", "received_events_url": "https://api.github.com/users/tuxillo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 854301764, "node_id": "MDU6TGFiZWw4NTQzMDE3NjQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-dragonfly", "name": "O-dragonfly", "color": "6e6ec0", "default": false, "description": "Operating system: DragonFly BSD"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-06-01T17:49:21Z", "updated_at": "2023-06-19T12:39:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nWhen running the rust-cbindgen binary I get the following error:\r\n\r\n```\r\nroot@dflyvm# cbindgen --version\r\nfatal runtime error: assertion failed: key as usize != KEY_SENTVAL\r\nAbort (core dumped)\r\n```\r\n\r\nAfter asking around in some IRC channels and in #contribute in discord, the smoking gun seemed this PR:  https://github.com/rust-lang/rust/pull/105359\r\n\r\nSome more digging revealed that DragonFly BSD's `pthread_key_create()` behaves differently depending on whether the resulting binary is linked against libpthread or not, just like in FreeBSD, for example. In DragonFly BSD, for single-threaded programs the key is untouched (undefined behaviour) and the `pthread_key_create()`  will be successful whereas FreeBSD returns an error.\r\n\r\nThe below example illustrates it:\r\n\r\nTest program:\r\n\r\n```\r\n#include <stdio.h>\r\n#include <pthread.h>\r\n\r\npthread_key_t key;\r\n\r\nint\r\nmain(void) {\r\n\r\n    for (int i = 0; i < 8; i++) {\r\n        int rc;\r\n        rc = pthread_key_create(&key, NULL);\r\n        printf(\"k=%d rc=%d\\n\", key, rc);\r\n    }\r\n}\r\n```\r\n\r\n**FreeBSD**\r\n\r\nno pthread linkage:\r\n\r\n```\r\nroot@fbsdvm:~/temp # cc -o p p.c\r\nroot@fbsdvm:~/temp # ./p\r\nk=0 rc=78\r\nk=0 rc=78\r\nk=0 rc=78\r\nk=0 rc=78\r\nk=0 rc=78\r\nk=0 rc=78\r\nk=0 rc=78\r\nk=0 rc=78\r\n```\r\n\r\npthread linkage:\r\n\r\n```\r\nroot@fbsdvm:~/temp # ./p\r\nk=1 rc=0\r\nk=2 rc=0\r\nk=3 rc=0\r\nk=4 rc=0\r\nk=5 rc=0\r\nk=6 rc=0\r\nk=7 rc=0\r\nk=8 rc=0\r\n```\r\n**DragonFly BSD**\r\n\r\nno pthread linkage:\r\n\r\n```\r\nroot@dflyvm:~/temp #  ./p\r\nk=0 rc=0\r\nk=0 rc=0\r\nk=0 rc=0\r\nk=0 rc=0\r\nk=0 rc=0\r\nk=0 rc=0\r\nk=0 rc=0\r\nk=0 rc=0\r\n\r\n```\r\n\r\npthread linkage:\r\n\r\n```\r\nroot@dflyvm:~/temp #  ./p\r\nk=2 rc=0\r\nk=3 rc=0\r\nk=4 rc=0\r\nk=5 rc=0\r\nk=6 rc=0\r\nk=7 rc=0\r\nk=8 rc=0\r\nk=9 rc=0\r\n```\r\n\r\nSince the sentinel here is set to 0  and as DragonFly BSD always returns undefined (if initialized or in bss it will be 0, for the most part) for programs not linked against libpthread, then the assertion in `lazy_init()` is hit: https://github.com/rust-lang/rust/blob/1.68.2/library/std/src/sys_common/thread_local_key.rs#L122\r\n\r\nAdditionally, I have found that FreeBSD links their rust-cbindgen binary against pthread whereas we don't do that for DragonFly BSD, which I think would have covered the issue for them.\r\n\r\nAs a note, we're discussing in the DragonFly BSD side whether we should start our keys at index 1 or not, but my personal opinion is that in this context is that it would just mask the issue already pointed out in the `lazy_init()` comment.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.68.2 (9eb3afe9e 2023-03-27) (built from a source tarball)\r\nbinary: rustc\r\ncommit-hash: 9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0\r\ncommit-date: 2023-03-27\r\nhost: x86_64-unknown-dragonfly\r\nrelease: 1.68.2\r\nLLVM version: 15.0.6\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nN/A\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112180/timeline", "performed_via_github_app": null, "state_reason": null}