{"url": "https://api.github.com/repos/rust-lang/rust/issues/58391", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58391/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58391/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58391/events", "html_url": "https://github.com/rust-lang/rust/issues/58391", "id": 409130353, "node_id": "MDU6SXNzdWU0MDkxMzAzNTM=", "number": 58391, "title": "`std::env` fails every 30 tests (or so)", "user": {"login": "SamuelMarks", "id": 807580, "node_id": "MDQ6VXNlcjgwNzU4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/807580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamuelMarks", "html_url": "https://github.com/SamuelMarks", "followers_url": "https://api.github.com/users/SamuelMarks/followers", "following_url": "https://api.github.com/users/SamuelMarks/following{/other_user}", "gists_url": "https://api.github.com/users/SamuelMarks/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamuelMarks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamuelMarks/subscriptions", "organizations_url": "https://api.github.com/users/SamuelMarks/orgs", "repos_url": "https://api.github.com/users/SamuelMarks/repos", "events_url": "https://api.github.com/users/SamuelMarks/events{/privacy}", "received_events_url": "https://api.github.com/users/SamuelMarks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-12T05:43:11Z", "updated_at": "2019-02-12T06:45:29Z", "closed_at": "2019-02-12T06:45:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Run this piece of code dozens of times, with `cargo test`:\r\n\r\n```rust\r\npub fn env_or<T>(key: &str, default_env: T) -> std::ffi::OsString\r\nwhere\r\n    T: Into<std::ffi::OsString>,\r\n{\r\n    match std::env::var_os(key) {\r\n        Some(val) => val,\r\n        None => default_env.into(),\r\n    }\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::env_or;\r\n    use std::env;\r\n\r\n    const KEY: &'static str = \"FOO\";\r\n    const VALUE: &'static str = \"BAR\";\r\n\r\n    #[test]\r\n    fn env_or_some() {\r\n        env::set_var(KEY, VALUE);\r\n        assert_eq!(env_or(KEY, KEY), VALUE);\r\n    }\r\n\r\n    #[test]\r\n    fn env_or_default() {\r\n        if env::var(KEY).is_ok() {\r\n            env::remove_var(KEY);\r\n        }\r\n        assert_eq!(env_or(KEY, KEY), KEY);\r\n    }\r\n}\r\n```\r\n\r\nAfter mostly successes, you'll get something like:\r\n```\r\nthread 'env::tests::env_or_default' panicked at 'assertion failed: `(left == right)`\r\n  left: `\"BAR\"`,\r\n right: `\"FOO\"`', src/env.rs:36:9\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39\r\n   1: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:70\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/sys_common/backtrace.rs:58\r\n             at src/libstd/panicking.rs:200\r\n   3: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:209\r\n   4: <std::panicking::begin_panic::PanicPayload<A> as core::panic::BoxMeUp>::get\r\n             at src/libstd/panicking.rs:478\r\n   5: std::panicking::continue_panic_fmt\r\n             at src/libstd/panicking.rs:385\r\n   6: std::panicking::try::do_call\r\n             at src/libstd/panicking.rs:340\r\n   7: offregisters_lib::env::tests::env_or_default\r\n             at src/env.rs:36\r\n   8: offregisters_lib::env::tests::env_or_default::{{closure}}\r\n             at src/env.rs:32\r\n   9: core::ops::function::FnOnce::call_once\r\n             at /rustc/d1731801163df1d3a8d4ddfa68adac2ec833ef7f/src/libcore/ops/function.rs:231\r\n  10: <F as alloc::boxed::FnBox<A>>::call_box\r\n             at src/libtest/lib.rs:1497\r\n             at /rustc/d1731801163df1d3a8d4ddfa68adac2ec833ef7f/src/libcore/ops/function.rs:231\r\n             at /rustc/d1731801163df1d3a8d4ddfa68adac2ec833ef7f/src/liballoc/boxed.rs:734\r\n  11: panic_unwind::dwarf::eh::read_encoded_pointer\r\n             at src/libpanic_unwind/lib.rs:90\r\n  12: test::run_test::run_test_inner::{{closure}}\r\n             at /rustc/d1731801163df1d3a8d4ddfa68adac2ec833ef7f/src/libstd/panicking.rs:276\r\n             at /rustc/d1731801163df1d3a8d4ddfa68adac2ec833ef7f/src/libstd/panic.rs:388\r\n             at src/libtest/lib.rs:1452\r\n```", "closed_by": {"login": "SamuelMarks", "id": 807580, "node_id": "MDQ6VXNlcjgwNzU4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/807580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamuelMarks", "html_url": "https://github.com/SamuelMarks", "followers_url": "https://api.github.com/users/SamuelMarks/followers", "following_url": "https://api.github.com/users/SamuelMarks/following{/other_user}", "gists_url": "https://api.github.com/users/SamuelMarks/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamuelMarks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamuelMarks/subscriptions", "organizations_url": "https://api.github.com/users/SamuelMarks/orgs", "repos_url": "https://api.github.com/users/SamuelMarks/repos", "events_url": "https://api.github.com/users/SamuelMarks/events{/privacy}", "received_events_url": "https://api.github.com/users/SamuelMarks/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58391/timeline", "performed_via_github_app": null, "state_reason": "completed"}