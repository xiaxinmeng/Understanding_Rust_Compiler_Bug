{"url": "https://api.github.com/repos/rust-lang/rust/issues/1897", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1897/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1897/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1897/events", "html_url": "https://github.com/rust-lang/rust/issues/1897", "id": 3377107, "node_id": "MDU6SXNzdWUzMzc3MTA3", "number": 1897, "title": "Alt optimizations", "user": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2012-02-24T18:38:30Z", "updated_at": "2014-06-16T21:56:39Z", "closed_at": "2012-03-09T01:06:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Let's take advantage of enum types and alt-expressions to optimize code that uses `alt`. Some of these optimizations might require teaching LLVM about the restrictions on enums, or doing the work ourselves in trans_alt.\n### Algorithm selection\n\nBased on the cases, pick a map structure:\n- For dense enums, use `i = (x - smallest)`\n- For sparse enums, use `i = perfecthash(x)`\n- For strings, look up `i` in a hash table\n- For int ranges, consider a binary search\n- Otherwise (e.g. pattern matching) fall back on testing each case (if/elif/else)\n\nBased on the branches, pick an output type:\n- For constant values, use `i` as an index into an array of values\n- For similar-length blocks, pad the shorter blocks with nops, and jump to `i * block_length`\n- For differing-length blocks, use `i` as an index into an array of jump offsets\n\nIn this example, the cases are a dense enum and the branches are values:\n\n```\ny = alt x { red { 9 } green { 1 } blue { 4 } }\n```\n\nSo it can use an array of values, with no branching (even for a bounds check):\n\n```\nconst_table = [9, 1, 4]\ny = const_table[x as uint]\n```\n\nThis is something Mozilla programmers do in C++ all the time, manually, often [messing it up](http://glandium.org/blog/?p=2361).\n### Optimizations for if/elif/else compilation\n\nOmit the last \"else if\" check when the alt is exhaustive, turning these into a simple \"if\":\n\n```\nalt x { one {} _ {} }\nalt x { one {} two {} }\n```\n\nReorder cases in order to put a difficult case at the end (where it can be omitted):\n\n```\nalt { one, three { 5 } two { 7 } }\n```\n\nCollapse adjacent cases into a single less-than check:\n\n```\nalt x { one, two, three { 7 } four, five, six { 9 } }\n```\n### \"Pass through\" optimization\n\nCompile as \"pass through\" if the arms all match the values. Useful when translating between two enum types.\n\n```\nalt x { one { 1 } two { 2 } }\nalt x { one { one_ } two { two_ } }\n```\n", "closed_by": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1897/timeline", "performed_via_github_app": null, "state_reason": "completed"}