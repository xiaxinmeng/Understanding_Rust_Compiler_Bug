{"url": "https://api.github.com/repos/rust-lang/rust/issues/73840", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73840/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73840/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73840/events", "html_url": "https://github.com/rust-lang/rust/issues/73840", "id": 646958243, "node_id": "MDU6SXNzdWU2NDY5NTgyNDM=", "number": 73840, "title": "Weak::from_raw is practically unusable", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-06-28T16:23:17Z", "updated_at": "2020-07-30T23:18:26Z", "closed_at": "2020-07-30T23:18:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "... as documented.\n\nThe problem: this line from the documentation:\n\n> It is allowed for the strong count to be 0 at the time of calling this, but the weak count must be non-zero or the pointer must have originated from a dangling\u00a0`Weak<T>`\u00a0(one created by `new`).\n\nThe weak count as reported by `Weak::weak_count` is 0 when the strong count is 0, even if there are still outstanding weak references:\n\n> `pub fn weak_count(&self) -> usize`\n> \n> Gets the number of\u00a0Weak\u00a0pointers pointing to this allocation.\n> \n> If no strong pointers remain, this will return zero.\n\nThe combination of these two means that getting a pointer from `Weak::into_raw` is not enough to guarantee that it's safe to use in `Weak::from_raw`. Instead, you have to know that (if it originated from a strong reference) you still have an outstanding strong reference to the allocation, because otherwise the (exposed) weak count is 0, and thus calling `from_raw` is \"documented UB\".\n\nTo properly document when this is intuitively allowed (i.e. it's allowed because I got the pointer from `into_raw` and have called `into_raw` more than `from_raw`, so there are still \"unowned\" raw weak references to claim) (which lines up with what the implementation allows), we need to expose (probably docs only) the fact that there is still being a weak reference count behind the hood being tracked until all of the `Weak`s have been dropped.\n\nThis will probably also require guaranteeing that `Weak` doesn't drop its weak reference and become dangling \"early\" (e.g. note that `upgrade` failed, decrement the (real) weak count (potentially deallocating the place), and become a dangling weak via internal mutability) and that `Weak::clone` on a \"zombie\" `Weak` increments the (real) weak count and creates a new \"zombie\" `Weak`, not a dangling `Weak`.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73840/timeline", "performed_via_github_app": null, "state_reason": "completed"}