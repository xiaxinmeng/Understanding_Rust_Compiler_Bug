{"url": "https://api.github.com/repos/rust-lang/rust/issues/74615", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74615/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74615/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74615/events", "html_url": "https://github.com/rust-lang/rust/issues/74615", "id": 663465056, "node_id": "MDU6SXNzdWU2NjM0NjUwNTY=", "number": 74615, "title": "Performance regression from Rust 1.37 to 1.38 when using unreachable_unchecked", "user": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-22T04:31:21Z", "updated_at": "2021-01-27T21:47:32Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code when looking at the issue #73015.\r\n\r\n```rust\r\nuse std::num::FpCategory;\r\n\r\nfn conv(input: usize) -> FpCategory {\r\n    match input {\r\n        0b10000000 | 0b00000001 => FpCategory::Infinite,\r\n        0b01000000 | 0b00000010 => FpCategory::Normal,\r\n        0b00100000 | 0b00000100 => FpCategory::Subnormal,\r\n        0b00010000 | 0b00001000 => FpCategory::Zero,\r\n        0b100000000 | 0b1000000000 => FpCategory::Nan,\r\n        _ => unsafe  { std::hint::unreachable_unchecked() },\r\n    }\r\n}\r\n\r\npub fn test(input: usize) -> bool {\r\n    conv(input) == FpCategory::Zero\r\n}\r\n```\r\n\r\nI expect all other match arms to be optimised out, so basically the code would be equivalent to\r\n```rust\r\npub fn test(input: usize) -> bool {\r\n    match input {\r\n        0b00010000 | 0b00001000 => true\r\n        _ => false,\r\n    }\r\n}\r\n```\r\nor maybe even\r\n```rust\r\npub fn test(input: usize) -> bool {\r\n    input & 0b00011000 != 0\r\n}\r\n```\r\n\r\nOn Rust 1.37 it is quite optimised but a huge chunk of code is generated for 1.38. Interestingly, if the unreachable_unchecked is replaced with a value such as `FpCategory::Nan`, `test` could still be optimised.\r\n\r\n@rustbot modify labels: +I-slow +I-heavy +T-compiler +A-codegen", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74615/timeline", "performed_via_github_app": null, "state_reason": null}