{"url": "https://api.github.com/repos/rust-lang/rust/issues/34683", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34683/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34683/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34683/events", "html_url": "https://github.com/rust-lang/rust/issues/34683", "id": 164075714, "node_id": "MDU6SXNzdWUxNjQwNzU3MTQ=", "number": 34683, "title": "SliceExt: More flexible binary_search_by and binary_search_by_key", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 178802147, "node_id": "MDU6TGFiZWwxNzg4MDIxNDc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-needs-decision", "name": "I-needs-decision", "color": "e11d21", "default": false, "description": "Issues in need of decision."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-07-06T13:30:03Z", "updated_at": "2016-08-09T07:52:52Z", "closed_at": "2016-08-09T07:52:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Someone in `#rust-beginners` asked why the following code (or something similar) does not compile ([playpen](https://is.gd/nCoDpw)):\n\n``` rust\n#[derive(Debug)]\nstruct Assignment {\n    topic: String,\n    partition: i32,\n}\n\nfn main() {\n    let xs = vec![\n        Assignment { topic: \"abc\".into(), partition: 1 },\n        Assignment { topic: \"def\".into(), partition: 2 },\n        Assignment { topic: \"ghi\".into(), partition: 3 },\n    ];\n\n    let key: &str = \"abc\";\n    let r = xs.binary_search_by_key(&key, |e| &e.topic);\n    println!(\"{:?}\", r.map(|i| (i, &xs[i])));\n}\n```\n\nThe answer, AFAICT, is that the signature for the `fn binary_search_by` and `fn binary_search_by_key` methods in `SliceExt` are a bit more restrictive to their callers than warranted.\n\nHere is their current signature:\n\n``` rust\n#[unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")]\n#[allow(missing_docs)] // documented elsewhere\npub trait SliceExt {\n    type Item;\n    ...\n    #[stable(feature = \"core\", since = \"1.6.0\")]\n    fn binary_search_by<F>(&self, f: F) -> Result<usize, usize>\n        where F: FnMut(&Self::Item) -> Ordering;\n    #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]\n    fn binary_search_by_key<B, F>(&self, b: &B, f: F) -> Result<usize, usize>\n        where F: FnMut(&Self::Item) -> B,\n              B: Ord;\n    ...\n}\n```\n\nSome things to note: \n- The methods are stable, but the trait (and its impl on `[T]`) are not. This _may_ mean we have room to breathe here.\n- The reason the code is not compiling, as I understand it, is that the bounds on the `F` type parameter have their lifetimes elided and can be expanded effectively to this:\n  \n  ``` rust\n  F: for <'b> FnMut(&'b Self::Item) -> B,\n  ```\n- The bound above on `F` is actually quite a _strict_ restriction on the closure `F`. It is saying that the closure cannot assume that the given reference to an item will live any longer than the invocation of that closure.\n  - The reality about how the binary search procedure works means that in practice one can assume something stronger: one can assume that the references passed to the callback actually live as long as the `self` reference of the overall binary search invocation.\n  - In other words, I am suggesting that the signature could (and perhaps should) look like this:\n    \n    ``` rust\n    fn binary_search_by_key<'a, B, F>(&'a self, b: &B, f: F) -> Result<usize, usize>\n    where F: FnMut(&'a Self::Item) -> B, B: Ord, Self::Item: 'a;\n    ```\n  - In this revised signature, the lifetime of each `Self::Item` reference is quite long-lived.\n  - This is enough to allow the original code posted to `#rust-beginners` to compile.\n\nI have a demonstration of the above in the playpen here: https://is.gd/ocGRgw\n\n---\n\nI am pretty sure that if we _can_ make the above change to the signature of `fn binary_search_by_key`, we probably should.\n- We should probably leave the signature of `fn binary_search_by` alone, since I am not convinced there is much benefit to generalizing _that_, though it should, theoretically speaking, be possible to make a test case that would only start compile with an analogous generalization.\n  - (As demonstrated in the playpen https://is.gd/ocGRgw , both methods can be implemented in terms of an appropriately generalized `binary_search_by`.) \n\nThe only question I have at this point is if we _can_ make the change e.g. in 1.11 or 1.12, if 1.10 is released as is.\n\n(I suspect we _can_ make the change. If I understand the stability rules correctly, no one is allowed to implement or even extend the `SliceExt` trait outside of `libstd`, so in changing the signature of a method like this is only going to affect the code making _calls_ to these methods, and I _think_ that the change suggested here will only make code start compiling; it shouldn't cause any code to stop compiling.  Unless I am overlooking some subtle time inference issue or some other problem...)\n\nCc #32110\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34683/timeline", "performed_via_github_app": null, "state_reason": "completed"}