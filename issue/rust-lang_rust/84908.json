{"url": "https://api.github.com/repos/rust-lang/rust/issues/84908", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84908/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84908/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84908/events", "html_url": "https://github.com/rust-lang/rust/issues/84908", "id": 875484593, "node_id": "MDU6SXNzdWU4NzU0ODQ1OTM=", "number": 84908, "title": "Tracking Issue for ExitStatusError", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1448485701, "node_id": "MDU6TGFiZWwxNDQ4NDg1NzAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-error-handling", "name": "A-error-handling", "color": "f7e101", "default": false, "description": "Area: Error handling"}, {"id": 2359545530, "node_id": "MDU6TGFiZWwyMzU5NTQ1NTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/PG-error-handling", "name": "PG-error-handling", "color": "c2e0c6", "default": false, "description": "Project Group: Error handling (https://github.com/rust-lang/project-error-handling)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2021-05-04T13:51:47Z", "updated_at": "2023-01-03T21:08:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(exit_status_error)]`\r\n\r\nThis is a tracking issue for `ExitStatusError` (and `ExitStatus::exit_ok`).\r\n\r\nThis feature makes it convenient to properly check the exit status of subprocesses (such as from `Command`)\r\n\r\n### Example\r\n\r\n```rust\r\nuse std::process::Command;\r\n\r\nlet bad = Command::new(\"false\").status().unwrap().exit_ok().unwrap_err();\r\nassert_eq!(bad.code(), Some(1));\r\n```\r\n### Public API\r\n\r\n(In pseudo-syntax:)\r\n\r\n```rust\r\nimpl ExitStatus {\r\n    fn exit_ok(self) -> Result<(), ExitStatusError> {..}\r\n}\r\n\r\npub struct ExitStatusError(...); // newtype around a NonZero integer\r\nimpl Eq,Copy,Debug,Error,Display for ExitStatusError;\r\nimpl Into<ExitStatus> for ExitStatusError;\r\nimpl ExitStatusError  {\r\n    fn code(&self) -> Option<i32> {..} } // WIFEXITED WEXITSTATUS\r\n    fn code_nonzero(&self) -> Option<NonZeroi32> {..}\r\n    ...\r\n}\r\nimpl ExitStatusExt for ExitStatusError; // .is_signal() etc.\r\n```\r\n\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: #82973\r\n- [ ] Final commenting period (FCP)\r\n- [ ] Stabilization PR (including restoring mentions in `ExitStatus` docs)\r\n- [ ] Add `#[must_use]` to `process::ExitStatus` (previous attempt #81452); see also #73131.\r\n- [ ] Consider implementing `Try` for `ExitStatus`\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final commenting period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncommenting period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- None yet.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84908/reactions", "total_count": 14, "+1": 14, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84908/timeline", "performed_via_github_app": null, "state_reason": null}