{"url": "https://api.github.com/repos/rust-lang/rust/issues/17004", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/17004/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/17004/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/17004/events", "html_url": "https://github.com/rust-lang/rust/issues/17004", "id": 42008833, "node_id": "MDU6SXNzdWU0MjAwODgzMw==", "number": 17004, "title": "Region inference fails for closure parameter", "user": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-09-05T02:57:40Z", "updated_at": "2018-12-05T20:29:29Z", "closed_at": "2016-11-29T21:02:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Test\n\n``` rust\nenum Chain<'a:'b, 'b> {\n    Base(&'a int),\n    Rec(&'a int, &'b Chain<'a,'b>)\n}\n\nfn call_with_rec<'a, 'b>(c: Chain<'a, 'b>,\n                         x: &'a int,\n                         f: <'c>|Chain<'a, 'c>|) {\n    f(Rec(x, &c))\n}\n\nfn main() {\n    let x = 0i;\n    let y = 0i;\n\n    call_with_rec(Base(&x), &y, |mut inner| {\n        loop {\n            match inner {\n                Base(&x) => {\n                    println!(\"Base({})\", x);\n                    break;\n                },\n                Rec(&x, &p) => {\n                    println!(\"Rec({})\", x);\n                    inner = p;\n                }\n            }\n        }\n    });\n}\n```\n# Output\n\n```\ntest.rs:18:19: 18:24 error: cannot infer an appropriate lifetime due to conflicting requirements\ntest.rs:18             match inner {\n                             ^~~~~\ntest.rs:18:19: 18:24 note: first, the lifetime cannot outlive the expression at 18:18...\ntest.rs:18             match inner {\n                             ^~~~~\ntest.rs:18:19: 18:24 note: ...so type `Chain<'_,'_>` of expression is valid during the expression\ntest.rs:18             match inner {\n                             ^~~~~\ntest.rs:16:45: 29:6 note: but, the lifetime must be valid for an anonymous lifetime defined on the block at 16:44...\ntest.rs:16     call_with_rec(Base(&x), &y, |mut inner| {\ntest.rs:17         loop {\ntest.rs:18             match inner {\ntest.rs:19                 Base(&x) => {\ntest.rs:20                     println!(\"Base({})\", x);\ntest.rs:21                     break;\n           ...\ntest.rs:25:21: 25:26 note: ...so that the reference type `Chain<'_,'_>` does not outlive the data it points at\ntest.rs:25                     inner = p;\n                               ^~~~~\n```\n# Workaround\n\nThe program compiles successfully if the closure is converted into a named function.\n\n``` rust\nenum Chain<'a:'b, 'b> {\n    Base(&'a int),\n    Rec(&'a int, &'b Chain<'a,'b>)\n}\n\nfn call_with_rec<'a, 'b>(c: Chain<'a, 'b>,\n                         x: &'a int,\n                         f: <'c>|Chain<'a, 'c>|) {\n    f(Rec(x, &c))\n}\n\nfn helper<'a, 'b>(mut inner: Chain<'a, 'b>) {\n    loop {\n        match inner {\n            Base(&x) => {\n                println!(\"Base({})\", x);\n                break;\n            },\n            Rec(&x, &p) => {\n                println!(\"Rec({})\", x);\n                inner = p;\n            }\n        }\n    }\n}\n\nfn main() {\n    let x = 0i;\n    let y = 0i;\n\n    call_with_rec(Base(&x), &y, helper);\n}\n```\n\ncc @nikomatsakis \n\nI'm not sure if inference is intended to work in this scenario.  It's not particularly serious since there's an easy workaround.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/17004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/17004/timeline", "performed_via_github_app": null, "state_reason": "completed"}