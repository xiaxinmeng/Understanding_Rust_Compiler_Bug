{"url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8826", "repository_url": "https://api.github.com/repos/rust-lang/rust-clippy", "labels_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8826/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8826/comments", "events_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8826/events", "html_url": "https://github.com/rust-lang/rust-clippy/issues/8826", "id": 1234700572, "node_id": "I_kwDOAZm0i85JmAkc", "number": 8826, "title": "Cargo clippy --fix error", "user": {"login": "MMukundi", "id": 45983298, "node_id": "MDQ6VXNlcjQ1OTgzMjk4", "avatar_url": "https://avatars.githubusercontent.com/u/45983298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MMukundi", "html_url": "https://github.com/MMukundi", "followers_url": "https://api.github.com/users/MMukundi/followers", "following_url": "https://api.github.com/users/MMukundi/following{/other_user}", "gists_url": "https://api.github.com/users/MMukundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/MMukundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MMukundi/subscriptions", "organizations_url": "https://api.github.com/users/MMukundi/orgs", "repos_url": "https://api.github.com/users/MMukundi/repos", "events_url": "https://api.github.com/users/MMukundi/events{/privacy}", "received_events_url": "https://api.github.com/users/MMukundi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149309557, "node_id": "MDU6TGFiZWwxNDkzMDk1NTc=", "url": "https://api.github.com/repos/rust-lang/rust-clippy/labels/C-bug", "name": "C-bug", "color": "F5F1FD", "default": false, "description": "Category: Clippy is not doing the correct thing"}, {"id": 246553280, "node_id": "MDU6TGFiZWwyNDY1NTMyODA=", "url": "https://api.github.com/repos/rust-lang/rust-clippy/labels/E-medium", "name": "E-medium", "color": "02E10C", "default": false, "description": "Call for participation: Medium difficulty level problem and requires some initial experience."}, {"id": 1179592412, "node_id": "MDU6TGFiZWwxMTc5NTkyNDEy", "url": "https://api.github.com/repos/rust-lang/rust-clippy/labels/I-suggestion-causes-error", "name": "I-suggestion-causes-error", "color": "E10C02", "default": false, "description": "Issue: The suggestions provided by this Lint cause an ICE/error when applied"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-05-12T18:49:35Z", "updated_at": "2022-05-13T07:46:22Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\ncargo clippy --fix\r\n```\r\nIn this repo: https://github.com/MMukundi/aoc\r\n\r\nI expected to see this happen: Clippy successfully fixes lint issues\r\n\r\nInstead, this happened: Clippy runs into a compiler error after fixing a linting issue; specifically, after changing \r\n```rust\r\n.any(|i| self.all_true(&mut i.into_iter()))\r\n```\r\nto\r\n```rust\r\n.any(|i| self.all_true(&mut i))\r\n```\r\nwhere \r\n```rust\r\nfn all_true<I: Iterator<Item = usize>>(&self, iter: &mut I) -> bool {\r\n    // --snip--\r\n}\r\n```\r\nThe expression thus far was of type `impl Iterator<Item = impl Iterator<Item=usize>>`\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.60.0 (7737e0b5c 2022-04-04)\r\nbinary: rustc\r\ncommit-hash: 7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c\r\ncommit-date: 2022-04-04\r\nhost: x86_64-apple-darwin\r\nrelease: 1.60.0\r\nLLVM version: 14.0.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n\u279c  aoc git:(master) RUST_BACKTRACE=1 cargo clippy --fix\r\n    Checking aoc v0.1.0 (/Users/marcelmukundi/Desktop/Desktop - Marcel\u2019s MacBook Pro/aoc)\r\nwarning: failed to automatically apply fixes suggested by rustc to crate `aoc`\r\n\r\nafter fixes were automatically applied the compiler reported errors within these files:\r\n\r\n  * src/solutions/day4.rs\r\n\r\nThis likely indicates a bug in either rustc or cargo itself,\r\nand we would appreciate a bug report! You're likely to see \r\na number of compiler warnings after this message which cargo\r\nattempted to fix but failed. If you could open an issue at\r\nhttps://github.com/rust-lang/rust/issues\r\nquoting the full output of this command we'd be very appreciative!\r\nNote that you may be able to make some more progress in the near-term\r\nfixing code with the `--broken-code` flag\r\n\r\nThe following errors were reported:\r\nerror[E0596]: cannot borrow `i` as mutable, as it is not declared as mutable\r\n  --> src/solutions/day4.rs:31:40\r\n   |\r\n31 |                 .any(|i| self.all_true(&mut i))\r\n   |                       -                ^^^^^^ cannot borrow as mutable\r\n   |                       |\r\n   |                       help: consider changing this to be mutable: `mut i`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0596`.\r\nOriginal diagnostics will follow.\r\n\r\nwarning: if let .. else expression looks like `matches!` macro\r\n   --> src/solutions/day10/mod.rs:107:13\r\n    |\r\n107 | /             if let SyntaxError::Corrupted(_) = s {\r\n108 | |                 true\r\n109 | |             } else {\r\n110 | |                 false\r\n111 | |             }\r\n    | |_____________^ help: try this: `matches!(s, SyntaxError::Corrupted(_))`\r\n    |\r\n    = note: `#[warn(clippy::match_like_matches_macro)]` on by default\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\r\n\r\nwarning: if let .. else expression looks like `matches!` macro\r\n   --> src/solutions/day10/mod.rs:119:17\r\n    |\r\n119 | /                 if let SyntaxError::Incomplete(_) = s {\r\n120 | |                     true\r\n121 | |                 } else {\r\n122 | |                     false\r\n123 | |                 }\r\n    | |_________________^ help: try this: `matches!(s, SyntaxError::Incomplete(_))`\r\n    |\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\r\n\r\nwarning: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\r\n  --> src/solutions/day4.rs:11:13\r\n   |\r\n11 | /             self.0\r\n12 | |                 .iter()\r\n13 | |                 .position(|b| b == ball)\r\n14 | |                 .map(|i| self.1[i] = true);\r\n   | |__________________________________________^\r\n   |\r\n   = note: `#[warn(clippy::option_map_unit_fn)]` on by default\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\r\nhelp: try this\r\n   |\r\n11 ~             if let Some(i) = self.0\r\n12 +                 .iter()\r\n13 +                 .position(|b| b == ball) { ... }\r\n   |\r\n\r\nwarning: useless conversion to the same type: `std::iter::StepBy<std::iter::Skip<std::ops::Range<usize>>>`\r\n  --> src/solutions/day4.rs:31:45\r\n   |\r\n31 |                 .any(|i| self.all_true(&mut i.into_iter()))\r\n   |                                             ^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `i`\r\n   |\r\n   = note: `#[warn(clippy::useless_conversion)]` on by default\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\r\n\r\nwarning: single-character string constant used as pattern\r\n  --> src/solutions/day6.rs:45:20\r\n   |\r\n45 |             .split(\",\")\r\n   |                    ^^^ help: try using a `char` instead: `','`\r\n   |\r\n   = note: `#[warn(clippy::single_char_pattern)]` on by default\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\r\n\r\nwarning: this `impl` can be derived\r\n  --> src/solutions/day8/entry.rs:15:1\r\n   |\r\n15 | / impl Default for Segments {\r\n16 | |     fn default() -> Self {\r\n17 | |         Self {\r\n18 | |             bits: Default::default(),\r\n19 | |         }\r\n20 | |     }\r\n21 | | }\r\n   | |_^\r\n   |\r\n   = note: `#[warn(clippy::derivable_impls)]` on by default\r\n   = help: try annotating `solutions::day8::entry::Segments` with `#[derive(Default)]`\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\r\n\r\nwarning: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\r\n   --> src/solutions/day8/entry.rs:101:9\r\n    |\r\n101 |            entry_str.next().map(|s| {\r\n    |   _________^\r\n    |  |_________|\r\n    | ||\r\n102 | ||             let pattern_iter = s.split_whitespace();\r\n103 | ||             entry\r\n104 | ||                 .signal_patterns\r\n...   ||\r\n107 | ||                 .for_each(|(dest, src)| *dest = src.parse::<Segments>().unwrap());\r\n108 | ||         });\r\n    | ||__________^- help: try this: `if let Some(s) = entry_str.next() { ... }`\r\n    | |___________|\r\n    | \r\n    |\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\r\n\r\nwarning: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\r\n   --> src/solutions/day8/entry.rs:109:9\r\n    |\r\n109 |            entry_str.next().map(|s| {\r\n    |   _________^\r\n    |  |_________|\r\n    | ||\r\n110 | ||             let outputs_iter = s.split_whitespace();\r\n111 | ||             entry\r\n112 | ||                 .outputs\r\n...   ||\r\n115 | ||                 .for_each(|(dest, src)| *dest = src.parse::<Segments>().unwrap());\r\n116 | ||         });\r\n    | ||__________^- help: try this: `if let Some(s) = entry_str.next() { ... }`\r\n    | |___________|\r\n    | \r\n    |\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\r\n\r\nwarning: match expression looks like `matches!` macro\r\n  --> src/solutions/day8/mod.rs:27:33\r\n   |\r\n27 |                       .filter(|o| match o.count_active() {\r\n   |  _________________________________^\r\n28 | |                         2 | 3 | 4 | 7 => true,\r\n29 | |                         _ => false,\r\n30 | |                     })\r\n   | |_____________________^ help: try this: `matches!(o.count_active(), 2 | 3 | 4 | 7)`\r\n   |\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\r\n\r\nwarning: you are deriving `Hash` but have implemented `PartialEq` explicitly\r\n  --> src/utils/point.rs:5:39\r\n   |\r\n5  | #[derive(Debug, Clone, Copy, Default, Hash, Eq)]\r\n   |                                       ^^^^\r\n   |\r\n   = note: `#[warn(clippy::derive_hash_xor_eq)]` on by default\r\nnote: `PartialEq` implemented here\r\n  --> src/utils/point.rs:93:1\r\n   |\r\n93 | / impl PartialEq for Point {\r\n94 | |     fn eq(&self, other: &Self) -> bool {\r\n95 | |         self.x == other.x && self.y == other.y\r\n96 | |     }\r\n97 | | }\r\n   | |_^\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\r\n   = note: this warning originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nwarning: called `.iter_mut().nth()` on a Vec\r\n  --> src/main.rs:42:38\r\n   |\r\n42 |                     if let Some(s) = solutions.iter_mut().nth(0) { s.solve() }\r\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: `#[warn(clippy::iter_nth)]` on by default\r\n   = help: calling `.get_mut()` is both faster and more readable\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth\r\n\r\nwarning: `aoc` (bin \"aoc\") generated 11 warnings\r\nwarning: `aoc` (bin \"aoc\" test) generated 11 warnings (11 duplicates)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 2.94s\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8826/timeline", "performed_via_github_app": null, "state_reason": null}