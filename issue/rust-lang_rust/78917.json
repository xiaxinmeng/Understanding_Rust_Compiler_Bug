{"url": "https://api.github.com/repos/rust-lang/rust/issues/78917", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78917/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78917/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78917/events", "html_url": "https://github.com/rust-lang/rust/issues/78917", "id": 739725844, "node_id": "MDU6SXNzdWU3Mzk3MjU4NDQ=", "number": 78917, "title": "Alternative highlighting for Rust code block in rustdoc", "user": {"login": "Hywan", "id": 946104, "node_id": "MDQ6VXNlcjk0NjEwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/946104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hywan", "html_url": "https://github.com/Hywan", "followers_url": "https://api.github.com/users/Hywan/followers", "following_url": "https://api.github.com/users/Hywan/following{/other_user}", "gists_url": "https://api.github.com/users/Hywan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hywan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hywan/subscriptions", "organizations_url": "https://api.github.com/users/Hywan/orgs", "repos_url": "https://api.github.com/users/Hywan/repos", "events_url": "https://api.github.com/users/Hywan/events{/privacy}", "received_events_url": "https://api.github.com/users/Hywan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 2499041632, "node_id": "MDU6TGFiZWwyNDk5MDQxNjMy", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-markdown-parsing", "name": "A-markdown-parsing", "color": "f7e101", "default": false, "description": "Area: Markdown parsing for doc-comments"}], "state": "open", "locked": false, "assignee": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 25, "created_at": "2020-11-10T09:09:05Z", "updated_at": "2021-07-06T11:47:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Context https://twitter.com/imperioworld_/status/1325916530257833984 cc @GuillaumeGomez \r\n\r\n# Description\r\n\r\nI'm the author of https://github.com/Hywan/inline-c-rs/. It allows to write C code inside Rust. It's a super basic `proc_macro` that transforms the code into a string (with some extra manipulations), which is saved inside a temp file that is compiled by a C/C++ compiler, and finally run. That's useful for testing C API of a Rust program inside Rust with the Rust tooling (like `cargo test`). It is super useful for us at https://github.com/wasmerio/wasmer.\r\n\r\nRecently, we pushed the concept further: Using `inline-c-rs` inside documentation, like this:\r\n\r\n```rust\r\n/// Blah blah blah.\r\n///\r\n/// # Examples\r\n///\r\n/// ```rust\r\n/// # use inline_c::assert_c;\r\n/// # fn main() {\r\n/// #    (assert_c! {\r\n/// # #include \"tests/wasmer_wasm.h\"\r\n/// #\r\n/// int main() {\r\n///     wasm_engine_t* engine = wasm_engine_new();\r\n///     wasm_store_t* store = wasm_store_new(engine);\r\n///\r\n///     // etc.\r\n///    \r\n///     return 0;\r\n/// }\r\n/// #    })\r\n/// #    .success();\r\n/// # }\r\n/// ```\r\n#[no_mangle]\r\npub unsafe extern \"C\" fn wasm_module_new(/* skipped */) -> /* skipped */ {\r\n    // skipped\r\n}\r\n```\r\n\r\nThis documentation is:\r\n\r\n* \u2705 written in Rust, and contains C,\r\n* \u2705 is **tested** by `cargo test --doc` because the code block is tagged with <code>```rust</code> \u2026 so we can test C with `cargo test` \ud83e\udd2a!\r\n* \u2705 is **compiled to HTML** by `rustdoc`.\r\n\r\nThe result of `cargo doc` looks like this:\r\n\r\n![Screenshot 2020-11-06 at 11 40 44](https://user-images.githubusercontent.com/946104/98651071-0b530e80-233a-11eb-85e9-82730674a6f7.png)\r\n\r\nThat's excellent! All the \u201cRust decoration\u201d is \u201cremoved\u201d (thanks to `# \u2026`), and only the C code stays. That's insane I know, but it works and that's super fun.\r\n\r\nOne problem though:\r\n\r\n* \u274c The highlighting is incorrect.\r\n\r\nBecause it's a <code>```rust</code> code block, there is a special handler for that I assume. I tried to write `rust,language-c` but the `language-c` part is ignored and is not present in the generated HTML code, as it can be seen here:\r\n\r\n```html\r\n<pre class=\"rust rust-example-rendered\">\r\n```\r\n\r\n# Expectation\r\n\r\nI would expect <code>```rust</code> to be a special keyword that unfolds to `rust` + `language-rust`:\r\n\r\n* The former describes that it's a Rust code block, and consequently is a candidate for a test,\r\n* The second describes the syntax highlighting ruleset to apply for the HTML documentation.\r\n\r\nThis keyword could have a different meaning in the presence of `language-<lang_id>` which \u201ccancels\u201d `language-rust`.\r\n\r\nIn other words, writing `rust,language-c` would keep the actual behavior of `rust` but it will disable the default highlighting to allow the user to define another one.\r\n\r\nHow does it sound?\r\n\r\n# Motivation\r\n\r\nThe technique used by `inline-c-rs` can be ported to other languages. It's just super fun to see C code inside Rust documentation that is also tested by `cargo doc`. I'm sure this technique can be used by other languages in the future.\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"poliorcetics\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78917/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78917/timeline", "performed_via_github_app": null, "state_reason": null}