{"url": "https://api.github.com/repos/rust-lang/rust/issues/87067", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87067/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87067/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87067/events", "html_url": "https://github.com/rust-lang/rust/issues/87067", "id": 941511405, "node_id": "MDU6SXNzdWU5NDE1MTE0MDU=", "number": 87067, "title": "Std implementations of PartialOrd are violating the conditions regarding transitivity and symmetry. And the transitivity requirements are i\u0336m\u0336p\u0336o\u0336s\u0336s\u0336i\u0336b\u0336l\u0336e\u0336 hard to ensure in a multi-crate ecosystem anyways.", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 24, "created_at": "2021-07-11T18:44:31Z", "updated_at": "2022-10-19T21:55:40Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "### Std implementations of PartialOrd are violating the conditions regarding transitivity and symmetry.\r\n\r\nFrom the [standard library docs](https://doc.rust-lang.org/nightly/std/cmp/trait.PartialOrd.html):\r\n>The comparison must satisfy, for all `a` , `b` and `c` :\r\n>\r\n>* transitivity: `a < b` and `b < c` implies `a < c` . The same must hold for both `==` and `>` .\r\n>* duality: `a < b` if and only if `b > a` .\r\n>\r\n> Note that these requirements mean that the trait itself must be implemented _**symmetrically**_ and _**transitively**_: if `T: PartialOrd<U>` and `U: PartialOrd<V>` then `U: PartialOrd<T>` and `T: PartialOrd<V>` .\r\n\r\n_(emphasis mine)_\r\n\r\nfocus on the final paragraph in the quote above and look at the following example \r\n```rs\r\nuse std::path::Path;\r\nuse std::ffi::OsStr;\r\nlet c: &str = \"c\";\r\nlet b: &OsStr = \"b\".as_ref();\r\nlet a: &Path = \"a\".as_ref();\r\n\r\nassert!(b < c); // works\r\n// assert!(c > b); // doesn\u2019t compile\r\n\r\nassert!(a < b && b < c); // works\r\n// assert!(a < c); // doesn\u2019t compile\r\n```\r\n([in the playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=210ba219a4c4d5868434d5cb5806aad5))\r\n\r\nSo either the library documentation is off or the implementations are flawed.\r\n\r\n### And the transitivity requirements are ~~impossible~~ hard to ensure in a multi-crate ecosystem anyways.\r\n\r\nNote that, technically, it\u2019s impossible to enforce transitive existence of impls for the trait unless using operands of fully \u201cexternal\u201d types is completely prohibited:\r\n\r\nIf I\u2019m writing a crate `foo` providing a type `struct Foo(\u2026);` and an `impl PartialOrd<i32> for Foo` as well as an `impl PartialOrd<Foo> for i32`, it seems like I\u2019m following the rules set by `PartialOrd`\u2019s documentation.\r\n\r\nIf I\u2019m writing a crate `bar` providing a type `struct Bar(\u2026);` and an `impl PartialOrd<i32> for Bar` as well as an `impl PartialOrd<Bar> for i32`, it seems like I\u2019m following the rules set by `PartialOrd`\u2019s documentation.\r\n\r\nNow, if I\u2019m writing a third crate that imports both `foo` and `bar`, then I\u2019ll have `impl PartialOrd<Foo> for i32` as well as `impl PartialOrd<i32> for Bar`, but obviously `impl PartialOrd<Foo> for Bar` is missing.\r\n\r\nIn this example, the crates `foo` and `bar` each provided an `impl` where one of the operands, `i32`, was a type that\u2019s fully external to the crate itself (in the sense that neither the type nor any of its generic arguments are part of `foo`, or part of a different crate that has the same owners as `foo` \\[`i32` has no generic arguments to begin with]).\r\n\r\n@rustbot label C-bug, T-libs", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87067/timeline", "performed_via_github_app": null, "state_reason": null}