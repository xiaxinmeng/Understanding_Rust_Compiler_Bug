{"url": "https://api.github.com/repos/rust-lang/rust/issues/76038", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76038/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76038/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76038/events", "html_url": "https://github.com/rust-lang/rust/issues/76038", "id": 688286628, "node_id": "MDU6SXNzdWU2ODgyODY2Mjg=", "number": 76038, "title": "rustc `-Clink-dead-code` causes MSVC linker to produce invalid binaries when LLVM InstrProf counters are enabled", "user": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3422528123, "node_id": "LA_kwDOAAsO6M7L_6J7", "url": "https://api.github.com/repos/rust-lang/rust/labels/link-dead-code", "name": "link-dead-code", "color": "D4C5F9", "default": false, "description": "Linkage: using -Clink-dead-code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-08-28T18:45:50Z", "updated_at": "2021-10-06T03:41:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This reports a bug with the `-C link-dead-code` option is enabled, when targeting MSVC and when LLVM InstrProf counter reports are enabled. The bug is probably not specific to InstrProf, but InstrProf sets the conditions for exposing the bug.\r\n\r\nI hope someone with better familiarity with the `-C link-dead-code` option, and the MSVC linker options it enables and/or interacts with, can help determine the root cause of the issue, and provide a fix or better workaround that allows InstrProf and `-Z instrument-coverage` to work with `-C link-dead-code` on MSVC.\r\n\r\n*Brief summary of error:* When running a program compiled with `-Z instrument-coverage` and `-C link-dead-code`, the program should generate an InstrProf counter report upon program exit, but instead it generates a zero-length file and _almost always_ crashes with a `Segmentation fault`.\r\n\r\n*Background:* The InstrProf counter report (a file generated at program exit, called `default.profraw` unless overridden by setting `LLVM_PROFILE_FILE`) is generated by the LLVM `compiler-rt` source that is compiled into a rust library by rust-lang's `rust/library/profiler-builtins/`.\r\n\r\nThe `-Z instrument-coverage` flag injects LLVM intrinsics that increment global counter variables during program execution, and the `profiler-builtins` library sets up `atexit()` callbacks that gather the final counter values and write them to the `default.profraw` file.\r\n\r\nI've [documented my tests and observations](https://github.com/richkadel/rust/blob/coverage-msvc-segfault-discuss/coverage-msvc-segfault-notes.md), in case they are helpful to someone with more knowledge in this area.\r\n\r\nI compared working InstrProf-enabled binaries in a C program compiled by _Clang_ to the failing Rust-based binaries, stepping through the counter report generation code of both programs using Visual Studio debugger, the debugger's disassembled view, and by inspecting the instructions and call graphs in _IDA Pro_ for both.\r\n\r\nI observed that the Rust binary had some notable (and clearly incorrect) differences, such as:\r\n\r\n* Some `jmp` instructions appear to be jumping to the wrong offset (4 bytes off)\r\n* Some instructions and variables (such as instructions initializing fields of a `Header` structure for the counter report) were simply not present in the Rust binary. They are present in the C binary, and map to sequential assignments in the `compiler-rt` source, but they are not shown in the disassembled views. The debugger skips over the source for these statements, and the variables involved cannot be evaluated. The debugger complains that certain variables were \"optimized out\".\r\n\r\nMy best guess is the MSVC linker is first miscalculating the `jmp` addresses for some functions, and then, when the miscalculated addresses don't line up to known functions, an optimization pass may be deciding that some variables are not used (because their functions don't appear to be called), so code that updates those variables is optimized out.\r\n\r\nNote that PR #76002 overcomes what was originally thought to be a bug related to the `-Zinstrument-coverage` implementation. Prior to PR #76002, the `-Zinstrument-coverage` option always automatically *_enabled_* `-Clink-dead-code` by default, to ensure dead code was still counted, as zero executions, in coverage reports. PR #76002 works around the problem by only enabling `-Clink-dead-code` by default for non-MSVC platforms.\r\n\r\nSince PR #76002, the bug can still be reproduced on MSVC by enabling `-Clink-dead-code` explicitly (as shown in the `Code` section below).\r\n\r\n### Code\r\n\r\n```Rust\r\nfn testfunc() {                                                                 \r\n}                                                                               \r\n                                                                                \r\nfn main() {                                                                     \r\n    let mut i = 0;                                                              \r\n    loop {                                                                      \r\n        if i >= 10 {                                                            \r\n            break;                                                              \r\n        }                                                                       \r\n        testfunc();                                                             \r\n        i += 1;                                                                 \r\n    }                                                                           \r\n}    \r\n```\r\n\r\n### Meta\r\n\r\n\r\n`rustc --version --verbose`:\r\n```\r\nbinary: rustc                                                                   \r\ncommit-hash: unknown                                                            \r\ncommit-date: unknown                                                            \r\nhost: x86_64-pc-windows-msvc                                                    \r\nrelease: 1.47.0-dev                                                             \r\nLLVM version: 11.0 \r\n```\r\n\r\n### Error output\r\n\r\nThe following example explicitly enables or disables `-Clink-dead-code`. The default value was to enable this setting, prior to PR #76002, and as of this PR the default is now to _not_ enable this setting.\r\n\r\nFrom an msys2 terminal:\r\n```\r\n$ build/x86_64-pc-windows-msvc/stage1/bin/rustc -Zinstrument-coverage -Clink-dead-code=no basic.rs\r\n$ ./basic\r\nHello world\r\n$ ls -l default.profraw\r\n-rw-r--r-- 1 richkadel Domain Users 168 Aug 28 10:43 default.profraw\r\n\r\n$ build/x86_64-pc-windows-msvc/stage1/bin/rustc -Zinstrument-coverage -Clink-dead-code basic.rs\r\n$ ./basic\r\nHello world\r\nSegmentation fault\r\n```\r\nand also generates an empty `default.profraw` file.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76038/timeline", "performed_via_github_app": null, "state_reason": null}