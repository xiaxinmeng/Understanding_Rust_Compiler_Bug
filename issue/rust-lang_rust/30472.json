{"url": "https://api.github.com/repos/rust-lang/rust/issues/30472", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30472/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30472/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30472/events", "html_url": "https://github.com/rust-lang/rust/issues/30472", "id": 123066098, "node_id": "MDU6SXNzdWUxMjMwNjYwOTg=", "number": 30472, "title": "Associated type projections don't play well with HRTBs and normalization", "user": {"login": "soltanmm", "id": 4889063, "node_id": "MDQ6VXNlcjQ4ODkwNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4889063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm", "html_url": "https://github.com/soltanmm", "followers_url": "https://api.github.com/users/soltanmm/followers", "following_url": "https://api.github.com/users/soltanmm/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm/orgs", "repos_url": "https://api.github.com/users/soltanmm/repos", "events_url": "https://api.github.com/users/soltanmm/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1405345617, "node_id": "MDU6TGFiZWwxNDA1MzQ1NjE3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lazy-normalization", "name": "A-lazy-normalization", "color": "f7e101", "default": false, "description": "Area: lazy normalization (tracking issue: #60471)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2015-12-19T06:22:58Z", "updated_at": "2020-08-10T20:21:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "``` rust\ntrait MyFrom<T> {}\nimpl<T> MyFrom<T> for T {}\n\ntrait MyInto<T> {}\nimpl<T, U> MyInto<U> for T where U: MyFrom<T> {}\n\n\ntrait A<'self_> {\n    type T;\n}\ntrait B: for<'self_> A<'self_> {\n    //type U: for<'self_> MyFrom<<Self as A<'self_>>::T>;  // <-- this won't compile\n    type U: for<'self_> MyInto<<Self as A<'self_>>::T>;  // <-- but this will\n}\n\n\nstruct M;\nimpl<'self_> A<'self_> for M {\n    type T = usize;\n}\nimpl B for M {\n    type U = usize;\n}\n\n\nfn main() {}\n```\n\n[playpen link](http://is.gd/a4V2sj)\n\nThis could've been written with `MyInto` written as `Into` and similarly for `MyFrom`/`From`. It was written this way only to make explicit the necessity of one blanket impl for satisfying the other.\n\nI'm guessing that extensional equality is not judged, even though it is possible to make such a judgment and such a judgment must be made to compile code that compiles today. `<Self as A<'self_>>::T` on line 12 ought to be equated to `usize` (which must be detected at some other point in time else line 13 wouldn't be able to compile).\n\nEDIT: Playing around a bit, it looks more and more like it's all about the HKL bounds...\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30472/reactions", "total_count": 6, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30472/timeline", "performed_via_github_app": null, "state_reason": null}