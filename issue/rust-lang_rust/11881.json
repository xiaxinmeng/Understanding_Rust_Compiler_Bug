{"url": "https://api.github.com/repos/rust-lang/rust/issues/11881", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/11881/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/11881/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/11881/events", "html_url": "https://github.com/rust-lang/rust/issues/11881", "id": 26453035, "node_id": "MDU6SXNzdWUyNjQ1MzAzNQ==", "number": 11881, "title": "ICE when trying to parameterize on ebml::writer::Encoder", "user": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-01-28T16:06:11Z", "updated_at": "2014-04-08T16:55:17Z", "closed_at": "2014-04-08T16:55:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "(pnkfelix: Here is a modern example that ICE's (feel free to replace as necessary as `rustc` changes):)\n\n``` rust\nextern crate ser = \"serialize\";\n\nuse serialize = self::ser; // necessary for deriving(Encodable)\nuse ser::{Encodable, Encoder};\nuse ser::json;\nuse ser::ebml::writer;\nuse std::io::MemWriter;\nuse std::str::from_utf8_owned;\n\n#[deriving(Encodable)]\nstruct Foo {\n    baz: bool,\n}\n\n#[deriving(Encodable)]\nstruct Bar {\n    froboz: uint\n}\n\nenum WireProtocol {\n    JSON,\n    EBML,\n    // ...\n}\n\nfn encode_json<'a, T: Encodable<json::Encoder<'a>>>(val: &T, wr: &'a mut MemWriter) {\n    let mut encoder = json::Encoder::new(wr);\n    val.encode(&mut encoder);\n}\nfn encode_ebml<'a, T: Encodable<writer::Encoder<'a>>>(val: &T, wr: &'a mut MemWriter) {\n    let mut encoder = writer::Encoder(wr);\n    val.encode(&mut encoder);\n}\n\npub fn main() {\n    let target = Foo { baz: false };\n    let mut wr = MemWriter::new();\n    let proto = JSON;\n    match proto {\n        JSON => encode_json(&target, &mut wr),\n        EBML => encode_ebml(&target, &mut wr)\n    }\n}\n```\n## Original bug description follows\n\nConsider the following:\n\n```\nextern mod extra = \"extra#0.10-pre\";\n\nuse extra::serialize::{Encodable, Encoder};\nuse extra::json;\nuse extra::ebml::writer;\nuse std::io::MemWriter;\nuse std::str::from_utf8_owned;\n\n#[deriving(Encodable)]\nstruct Foo {\n    baz: bool,\n}\n\n#[deriving(Encodable)]\nstruct Bar {\n    froboz: uint\n}\n\nenum WireProtocol {\n    JSON,\n    EBML,\n    // ...\n}\n\nfn encode_json<'a, T: Encodable<json::Encoder<'a>>>(val: &T, wr: &'a mut MemWriter) {\n    let mut encoder = json::Encoder::new(wr);\n    val.encode(&mut encoder);\n}\nfn encode_ebml<'a, T: Encodable<writer::Encoder<'a>>>(val: &T, wr: &'a mut MemWriter) {\n    let mut encoder = writer::Encoder(wr);\n    val.encode(&mut encoder);\n}\n\nfn main() {\n    let target = Foo { baz: false };\n    let mut wr = MemWriter::new();\n    let proto = JSON;\n    match proto {\n        JSON => encode_json(&target, &mut wr),\n        EBML => encode_ebml(&target, &mut wr)\n    }\n}\n```\n\nThis fails with the following ICE:\n\n```\nserialization-branch.rs:31:16: 31:28 error: internal compiler error: Cannot relate bound region: ReLateBound(167, BrNamed(syntax::ast::DefId{crate: 0u32, node: 185u32}, a)) <= ReInfer(0)\nThis message reflects a bug in the Rust compiler.\nWe would appreciate a bug report: http://static.rust-lang.org/doc/master/complement-bugreport.html\nserialization-branch.rs:31     val.encode(&mut encoder);\n```\n\nBut if you comment out the EBML code, like so:\n\n```\nextern mod extra = \"extra#0.10-pre\";\n\nuse extra::serialize::{Encodable, Encoder};\nuse extra::json;\nuse extra::ebml::writer;\nuse std::io::MemWriter;\nuse std::str::from_utf8_owned;\n\n#[deriving(Encodable)]\nstruct Foo {\n    baz: bool,\n}\n\n#[deriving(Encodable)]\nstruct Bar {\n    froboz: uint\n}\n\nenum WireProtocol {\n    JSON,\n    EBML,\n    // ...\n}\n\nfn encode_json<'a, T: Encodable<json::Encoder<'a>>>(val: &T, wr: &'a mut MemWriter) {\n    let mut encoder = json::Encoder::new(wr);\n    val.encode(&mut encoder);\n}\n/*\nfn encode_ebml<'a, T: Encodable<writer::Encoder<'a>>>(val: &T, wr: &'a mut MemWriter) {\n    let mut encoder = writer::Encoder(wr);\n    val.encode(&mut encoder);\n}\n*/\n\nfn main() {\n    let target = Foo { baz: false };\n    let mut wr = MemWriter::new();\n    let proto = JSON;\n    match proto {\n        JSON => encode_json(&target, &mut wr),\n        _ => {}\n        //EBML => encode_ebml(&target, &mut wr)\n    }\n}\n```\n\nit compiles.\n\nThe JSON and EBML serialization code is identifical, but their Encoder impls and how they're exposed are slightly different (I assume because of their respective histories). Something about that difference is triggering this ICE, it seems.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/11881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/11881/timeline", "performed_via_github_app": null, "state_reason": "completed"}