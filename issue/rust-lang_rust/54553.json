{"url": "https://api.github.com/repos/rust-lang/rust/issues/54553", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54553/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54553/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54553/events", "html_url": "https://github.com/rust-lang/rust/issues/54553", "id": 363471344, "node_id": "MDU6SXNzdWUzNjM0NzEzNDQ=", "number": 54553, "title": "panic on failed dead code analysis ", "user": {"login": "lu-zero", "id": 239012, "node_id": "MDQ6VXNlcjIzOTAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/239012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lu-zero", "html_url": "https://github.com/lu-zero", "followers_url": "https://api.github.com/users/lu-zero/followers", "following_url": "https://api.github.com/users/lu-zero/following{/other_user}", "gists_url": "https://api.github.com/users/lu-zero/gists{/gist_id}", "starred_url": "https://api.github.com/users/lu-zero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lu-zero/subscriptions", "organizations_url": "https://api.github.com/users/lu-zero/orgs", "repos_url": "https://api.github.com/users/lu-zero/repos", "events_url": "https://api.github.com/users/lu-zero/events{/privacy}", "received_events_url": "https://api.github.com/users/lu-zero/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-09-25T08:48:18Z", "updated_at": "2020-03-15T05:38:01Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[playground](https://play.rust-lang.org/?gist=328f9cc0e4ebf8a32a91d7b235dd1127&version=nightly&mode=release&edition=2018)\r\n\r\n``` rust\r\nconst FOO: [u8; 2] = [42; 2];\r\n\r\nfn main() {\r\n    if FOO.len() > 2 {\r\n        println!(\" {}\", FOO[3]);\r\n    }\r\n}\r\n```\r\nI would expect that the constant propagation pass would prune the `println!` and possibly issue a warning about it.\r\n\r\nthe result instead:\r\n```\r\nthread 'main' panicked at 'Tried to access element 3 of array/slice with length 2', librustc_mir/interpret/place.rs:265:17\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at libstd/sys_common/backtrace.rs:71\r\n             at libstd/sys_common/backtrace.rs:59\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/panicking.rs:211\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:227\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:481\r\n   6: std::panicking::continue_panic_fmt\r\n             at libstd/panicking.rs:391\r\n   7: std::panicking::begin_panic_fmt\r\n             at libstd/panicking.rs:346\r\n   8: rustc_mir::interpret::place::<impl rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, M>>::mplace_projection\r\n   9: rustc_mir::interpret::place::<impl rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, M>>::place_projection\r\n  10: rustc_mir::interpret::place::<impl rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, M>>::eval_place\r\n  11: rustc_mir::interpret::step::<impl rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, M>>::run\r\n  12: rustc_mir::const_eval::eval_body_using_ecx\r\n  13: rustc_mir::const_eval::const_eval_provider\r\n  14: rustc::ty::query::__query_compute::const_eval\r\n  15: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::const_eval<'tcx>>::compute\r\n  16: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  17: rustc::ty::context::tls::with_related_context\r\n  18: <rustc::ty::query::plumbing::JobOwner<'a, 'tcx, Q>>::start\r\n  19: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  20: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  21: rustc::ty::query::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::const_eval\r\n  22: rustc_mir::monomorphize::collector::collect_items_rec\r\n  23: rustc_mir::monomorphize::collector::collect_crate_mono_items::{{closure}}\r\n  24: rustc::util::common::time\r\n  25: rustc_mir::monomorphize::collector::collect_crate_mono_items\r\n  26: rustc::util::common::time\r\n  27: rustc_codegen_llvm::base::collect_and_partition_mono_items\r\n  28: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::collect_and_partition_mono_items<'tcx>>::compute\r\n  29: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  30: rustc::ty::context::tls::with_related_context\r\n  31: <rustc::ty::query::plumbing::JobOwner<'a, 'tcx, Q>>::start\r\n  32: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  33: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  34: rustc_codegen_llvm::base::codegen_crate\r\n  35: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_utils::codegen_backend::CodegenBackend>::codegen_crate\r\n  36: rustc::util::common::time\r\n  37: rustc_driver::driver::phase_4_codegen\r\n  38: rustc_driver::driver::compile_input::{{closure}}\r\n  39: rustc::ty::context::tls::enter_context\r\n  40: <std::thread::local::LocalKey<T>>::with\r\n  41: rustc::ty::context::TyCtxt::create_and_enter\r\n  42: rustc_driver::driver::compile_input\r\n  43: rustc_driver::run_compiler_with_pool\r\n  44: <scoped_tls::ScopedKey<T>>::set\r\n  45: rustc_driver::run_compiler\r\n  46: <scoped_tls::ScopedKey<T>>::set\r\n  47: syntax::with_globals\r\n  48: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:102\r\n  49: rustc_driver::run\r\n  50: rustc_driver::main\r\n  51: std::rt::lang_start::{{closure}}\r\n  52: std::panicking::try::do_call\r\n             at libstd/rt.rs:59\r\n             at libstd/panicking.rs:310\r\n  53: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:102\r\n  54: std::rt::lang_start_internal\r\n             at libstd/panicking.rs:289\r\n             at libstd/panic.rs:392\r\n             at libstd/rt.rs:58\r\n  55: main\r\n  56: __libc_start_main\r\n  57: <unknown>\r\nquery stack during panic:\r\n#0 [const_eval] const-evaluating `main`\r\n#1 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\nerror: aborting due to previous error\r\n\r\n\r\nerror: internal compiler error: unexpected panic\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54553/timeline", "performed_via_github_app": null, "state_reason": null}