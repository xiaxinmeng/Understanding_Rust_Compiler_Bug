{"url": "https://api.github.com/repos/rust-lang/rust/issues/68371", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68371/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68371/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68371/events", "html_url": "https://github.com/rust-lang/rust/issues/68371", "id": 551958954, "node_id": "MDU6SXNzdWU1NTE5NTg5NTQ=", "number": 68371, "title": "Scan is overly specialized", "user": {"login": "mydogisbox", "id": 814869, "node_id": "MDQ6VXNlcjgxNDg2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/814869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mydogisbox", "html_url": "https://github.com/mydogisbox", "followers_url": "https://api.github.com/users/mydogisbox/followers", "following_url": "https://api.github.com/users/mydogisbox/following{/other_user}", "gists_url": "https://api.github.com/users/mydogisbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/mydogisbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mydogisbox/subscriptions", "organizations_url": "https://api.github.com/users/mydogisbox/orgs", "repos_url": "https://api.github.com/users/mydogisbox/repos", "events_url": "https://api.github.com/users/mydogisbox/events{/privacy}", "received_events_url": "https://api.github.com/users/mydogisbox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2020-01-19T18:03:15Z", "updated_at": "2021-11-12T08:28:32Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Here is the existing type signature for std::iter::scan:\r\n`fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> where\r\n    F: FnMut(&mut St, Self::Item) -> Option<B>, `\r\n\r\nIf I were to use a verbose name for `scan` as implemented now, I would call it `map_with_state_until`, this means that if I just want `map_with_state`, things can get really awkward using the existing scan if I want to return an option which _doesn't_ terminate the Iterator for `collect` etc. e.g. `vecter.iter().scan( |state, x| if x > 1 then Some(None) else Some(Some(x)) ).flatten()`\r\n\r\nIf we instead have `F` just turn `B` instead of `Option<B>` like:\r\n`fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> where\r\n    F: FnMut(&mut St, Self::Item) -> B, ` then that becomes a lot more simple:\r\n`vecter.iter().scan( |state, x| if x > 1 then None else Some(x) )`\r\n\r\nand achieving the existing `scan` behavior is trivially achieved by simply adding `fuse()`.\r\n\r\nThis allows `scan` to have behavior more in-line with similar functions like `map` and `fold`:\r\n\r\n```\r\nfn fold<B, F>(self, init: B, f: F) -> B where\r\n    F: FnMut(B, Self::Item) -> B, \r\n\r\nfn map<B, F>(self, f: F) -> Map<Self, F> where\r\n    F: FnMut(Self::Item) -> B,\r\n```\r\n\r\nand also brings it more in-line with how other languages define `scan` :  `(a -> b -> a) -> a -> [b] -> [a]` (Haskell), `('State -> 'T -> 'State) -> 'State -> seq<'T> -> seq<'State>` (F#) etc. \r\n\r\nI think this also gives a clear way forward to addressing other issues which previously ended up unresolved like:\r\nhttps://github.com/rust-lang/rust/pull/14425 \r\n\r\nSo I think there ought to be `scan` as defined above, and `scan_until` which is the existing implementation.\r\n\r\nReferences:\r\nhttp://zvon.org/other/haskell/Outputprelude/scanl_f.html\r\n\r\nhttps://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/seq.scan%5b't,'state%5d-function-%5bfsharp%5d", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68371/reactions", "total_count": 28, "+1": 19, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 9, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68371/timeline", "performed_via_github_app": null, "state_reason": null}