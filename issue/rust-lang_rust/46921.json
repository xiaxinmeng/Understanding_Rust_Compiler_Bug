{"url": "https://api.github.com/repos/rust-lang/rust/issues/46921", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46921/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46921/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46921/events", "html_url": "https://github.com/rust-lang/rust/issues/46921", "id": 283965146, "node_id": "MDU6SXNzdWUyODM5NjUxNDY=", "number": 46921, "title": "ICE internal error: entered unreachable code", "user": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-21T18:21:47Z", "updated_at": "2020-04-02T12:57:35Z", "closed_at": "2020-04-02T12:57:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I got an ice while creating a pr for rustc\r\n\r\nI changed `Mir<'tcx>` into `::mir::Mir<'tcx>` just before i got the ice at `src/librustc/ty/instance.rs` line 289\r\n\r\n```\r\n$ git rev-parse HEAD\r\n16212b93677eae6951974676b174247e6ad0ba48\r\n$ ./x.py build -j 8 -i                               \r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /home/bjorn/Documenten/rust/src/tools/cargo/Cargo.toml\r\nworkspace: /home/bjorn/Documenten/rust/src/Cargo.toml\r\n    Finished dev [unoptimized] target(s) in 0.0 secs\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /home/bjorn/Documenten/rust/src/tools/cargo/Cargo.toml\r\nworkspace: /home/bjorn/Documenten/rust/src/Cargo.toml\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /home/bjorn/Documenten/rust/src/tools/cargo/Cargo.toml\r\nworkspace: /home/bjorn/Documenten/rust/src/Cargo.toml\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /home/bjorn/Documenten/rust/src/tools/cargo/Cargo.toml\r\nworkspace: /home/bjorn/Documenten/rust/src/Cargo.toml\r\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /home/bjorn/Documenten/rust/src/tools/cargo/Cargo.toml\r\nworkspace: /home/bjorn/Documenten/rust/src/Cargo.toml\r\n    Finished release [optimized] target(s) in 0.0 secs\r\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage0 test artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /home/bjorn/Documenten/rust/src/tools/cargo/Cargo.toml\r\nworkspace: /home/bjorn/Documenten/rust/src/Cargo.toml\r\n    Finished release [optimized] target(s) in 0.0 secs\r\nCopying stage0 test from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /home/bjorn/Documenten/rust/src/tools/cargo/Cargo.toml\r\nworkspace: /home/bjorn/Documenten/rust/src/Cargo.toml\r\n   Compiling rustc v0.0.0 (file:///home/bjorn/Documenten/rust/src/librustc)\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.23.0-beta.1 (082b0ff02 2017-11-21) running on x86_64-unknown-linux-gnu\r\n\r\nnote: run with `RUST_BACKTRACE=1` for a backtrace\r\n\r\nthread 'rustc' panicked at 'internal error: entered unreachable code', /checkout/src/librustc/dep_graph/dep_node.rs:119:34\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace\r\n             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::_print\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:68\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:57\r\n             at /checkout/src/libstd/panicking.rs:381\r\n   3: std::panicking::default_hook\r\n             at /checkout/src/libstd/panicking.rs:391\r\n   4: std::panicking::rust_panic_with_hook\r\n             at /checkout/src/libstd/panicking.rs:577\r\n   5: std::panicking::begin_panic\r\n   6: serialize::serialize::Decoder::read_struct\r\n   7: serialize::serialize::Decoder::read_seq\r\n   8: serialize::serialize::Decoder::read_struct\r\n   9: rustc_incremental::persist::load::load_dep_graph\r\n  10: rustc::util::common::time\r\n  11: rustc_driver::driver::compile_input\r\n  12: rustc_driver::run_compiler\r\n\r\nerror: Could not compile `rustc`.\r\n```\r\n\r\n<details>\r\n<summary>config.toml</summary>\r\n\r\n```\r\n# Sample TOML configuration file for building Rust.\r\n#\r\n# To configure rustbuild, copy this file to the directory from which you will be\r\n# running the build, and name it config.toml.\r\n#\r\n# All options are commented out by default in this file, and they're commented\r\n# out with their default values. The build system by default looks for\r\n# `config.toml` in the current directory of a build for build configuration, but\r\n# a custom configuration file can also be specified with `--config` to the build\r\n# system.\r\n\r\n# =============================================================================\r\n# Tweaking how LLVM is compiled\r\n# =============================================================================\r\n[llvm]\r\n\r\n# Indicates whether rustc will support compilation with LLVM\r\n# note: rustc does not compile without LLVM at the moment\r\n#enabled = true\r\n\r\n# Indicates whether the LLVM build is a Release or Debug build\r\n#optimize = true\r\n\r\n# Indicates whether an LLVM Release build should include debug info\r\n#release-debuginfo = false\r\n\r\n# Indicates whether the LLVM assertions are enabled or not\r\n#assertions = false\r\n\r\n# Indicates whether ccache is used when building LLVM\r\n#ccache = false\r\n# or alternatively ...\r\n#ccache = \"/path/to/ccache\"\r\n\r\n# If an external LLVM root is specified, we automatically check the version by\r\n# default to make sure it's within the range that we're expecting, but setting\r\n# this flag will indicate that this version check should not be done.\r\n#version-check = true\r\n\r\n# Link libstdc++ statically into the librustc_llvm instead of relying on a\r\n# dynamic version to be available.\r\n#static-libstdcpp = false\r\n\r\n# Tell the LLVM build system to use Ninja instead of the platform default for\r\n# the generated build system. This can sometimes be faster than make, for\r\n# example.\r\n#ninja = false\r\n\r\n# LLVM targets to build support for.\r\n# Note: this is NOT related to Rust compilation targets. However, as Rust is\r\n# dependent on LLVM for code generation, turning targets off here WILL lead to\r\n# the resulting rustc being unable to compile for the disabled architectures.\r\n# Also worth pointing out is that, in case support for new targets are added to\r\n# LLVM, enabling them here doesn't mean Rust is automatically gaining said\r\n# support. You'll need to write a target specification at least, and most\r\n# likely, teach rustc about the C ABI of the target. Get in touch with the\r\n# Rust team and file an issue if you need assistance in porting!\r\n#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\"\r\n\r\n# LLVM experimental targets to build support for. These targets are specified in\r\n# the same format as above, but since these targets are experimental, they are\r\n# not built by default and the experimental Rust compilation targets that depend\r\n# on them will not work unless the user opts in to building them. By default the\r\n# `WebAssembly` target is enabled when compiling LLVM from scratch.\r\n#experimental-targets = \"WebAssembly\"\r\n\r\n# Cap the number of parallel linker invocations when compiling LLVM.\r\n# This can be useful when building LLVM with debug info, which significantly\r\n# increases the size of binaries and consequently the memory required by\r\n# each linker process.\r\n# If absent or 0, linker invocations are treated like any other job and\r\n# controlled by rustbuild's -j parameter.\r\n#link-jobs = 0\r\n\r\n# When invoking `llvm-config` this configures whether the `--shared` argument is\r\n# passed to prefer linking to shared libraries.\r\n#link-shared = false\r\n\r\n# =============================================================================\r\n# General build configuration options\r\n# =============================================================================\r\n[build]\r\n\r\n# Build triple for the original snapshot compiler. This must be a compiler that\r\n# nightlies are already produced for. The current platform must be able to run\r\n# binaries of this build triple and the nightly will be used to bootstrap the\r\n# first compiler.\r\n#build = \"x86_64-unknown-linux-gnu\"    # defaults to your host platform\r\n\r\n# In addition to the build triple, other triples to produce full compiler\r\n# toolchains for. Each of these triples will be bootstrapped from the build\r\n# triple and then will continue to bootstrap themselves. This platform must\r\n# currently be able to run all of the triples provided here.\r\n#host = [\"x86_64-unknown-linux-gnu\"]   # defaults to just the build triple\r\n\r\n# In addition to all host triples, other triples to produce the standard library\r\n# for. Each host triple will be used to produce a copy of the standard library\r\n# for each target triple.\r\n#target = [\"x86_64-unknown-linux-gnu\"] # defaults to just the build triple\r\n\r\n# Instead of downloading the src/stage0.txt version of Cargo specified, use\r\n# this Cargo binary instead to build all Rust code\r\n#cargo = \"/path/to/bin/cargo\"\r\n\r\n# Instead of downloading the src/stage0.txt version of the compiler\r\n# specified, use this rustc binary instead as the stage0 snapshot compiler.\r\n#rustc = \"/path/to/bin/rustc\"\r\n\r\n# Flag to specify whether any documentation is built. If false, rustdoc and\r\n# friends will still be compiled but they will not be used to generate any\r\n# documentation.\r\n#docs = true\r\n\r\n# Indicate whether the compiler should be documented in addition to the standard\r\n# library and facade crates.\r\n#compiler-docs = false\r\n\r\n# Indicate whether submodules are managed and updated automatically.\r\nsubmodules = false\r\n\r\n# The path to (or name of) the GDB executable to use. This is only used for\r\n# executing the debuginfo test suite.\r\n#gdb = \"gdb\"\r\n\r\n# The node.js executable to use. Note that this is only used for the emscripten\r\n# target when running tests, otherwise this can be omitted.\r\n#nodejs = \"node\"\r\n\r\n# Python interpreter to use for various tasks throughout the build, notably\r\n# rustdoc tests, the lldb python interpreter, and some dist bits and pieces.\r\n# Note that Python 2 is currently required.\r\n#python = \"python2.7\"\r\n\r\n# Force Cargo to check that Cargo.lock describes the precise dependency\r\n# set that all the Cargo.toml files create, instead of updating it.\r\n#locked-deps = false\r\n\r\n# Indicate whether the vendored sources are used for Rust dependencies or not\r\n#vendor = false\r\n\r\n# Typically the build system will build the rust compiler twice. The second\r\n# compiler, however, will simply use its own libraries to link against. If you\r\n# would rather to perform a full bootstrap, compiling the compiler three times,\r\n# then you can set this option to true. You shouldn't ever need to set this\r\n# option to true.\r\n#full-bootstrap = false\r\n\r\n# Enable a build of the extended rust tool set which is not only the compiler\r\n# but also tools such as Cargo. This will also produce \"combined installers\"\r\n# which are used to install Rust and Cargo together. This is disabled by\r\n# default.\r\n#extended = false\r\n\r\n# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\r\n#verbose = 0\r\n\r\n# Build the sanitizer runtimes\r\n#sanitizers = false\r\n\r\n# Build the profiler runtime\r\n#profiler = false\r\n\r\n# Indicates whether the OpenSSL linked into Cargo will be statically linked or\r\n# not. If static linkage is specified then the build system will download a\r\n# known-good version of OpenSSL, compile it, and link it to Cargo.\r\n#openssl-static = false\r\n\r\n# Run the build with low priority, by setting the process group's \"nice\" value\r\n# to +10 on Unix platforms, and by using a \"low priority\" job object on Windows.\r\n#low-priority = false\r\n\r\n# Arguments passed to the `./configure` script, used during distcheck. You\r\n# probably won't fill this in but rather it's filled in by the `./configure`\r\n# script.\r\n#configure-args = []\r\n\r\n# Indicates that a local rebuild is occurring instead of a full bootstrap,\r\n# essentially skipping stage0 as the local compiler is recompiling itself again.\r\n#local-rebuild = false\r\n\r\n# =============================================================================\r\n# General install configuration options\r\n# =============================================================================\r\n[install]\r\n\r\n# Instead of installing to /usr/local, install to this path instead.\r\n#prefix = \"/usr/local\"\r\n\r\n# Where to install system configuration files\r\n# If this is a relative path, it will get installed in `prefix` above\r\n#sysconfdir = \"/etc\"\r\n\r\n# Where to install documentation in `prefix` above\r\n#docdir = \"share/doc/rust\"\r\n\r\n# Where to install binaries in `prefix` above\r\n#bindir = \"bin\"\r\n\r\n# Where to install libraries in `prefix` above\r\n#libdir = \"lib\"\r\n\r\n# Where to install man pages in `prefix` above\r\n#mandir = \"share/man\"\r\n\r\n# Where to install data in `prefix` above (currently unused)\r\n#datadir = \"share\"\r\n\r\n# Where to install additional info in `prefix` above (currently unused)\r\n#infodir = \"share/info\"\r\n\r\n# Where to install local state (currently unused)\r\n# If this is a relative path, it will get installed in `prefix` above\r\n#localstatedir = \"/var/lib\"\r\n\r\n# =============================================================================\r\n# Options for compiling Rust code itself\r\n# =============================================================================\r\n[rust]\r\n\r\n# Indicates that the build should be optimized for debugging Rust. Note that\r\n# this is typically not what you want as it takes an incredibly large amount of\r\n# time to have a debug-mode rustc compile any code (notably libstd). If this\r\n# value is set to `true` it will affect a number of configuration options below\r\n# as well, if unconfigured.\r\n#debug = false\r\n\r\n# Whether or not to optimize the compiler and standard library\r\n# Note: the slowness of the non optimized compiler compiling itself usually\r\n#       outweighs the time gains in not doing optimizations, therefore a\r\n#       full bootstrap takes much more time with optimize set to false.\r\n#optimize = true\r\n\r\n# Number of codegen units to use for each compiler invocation. A value of 0\r\n# means \"the number of cores on this machine\", and 1+ is passed through to the\r\n# compiler.\r\ncodegen-units = 0\r\n\r\n# Whether or not debug assertions are enabled for the compiler and standard\r\n# library. Also enables compilation of debug! and trace! logging macros.\r\n#debug-assertions = false\r\n\r\n# Whether or not debuginfo is emitted\r\n#debuginfo = false\r\n\r\n# Whether or not line number debug information is emitted\r\n#debuginfo-lines = false\r\n\r\n# Whether or not to only build debuginfo for the standard library if enabled.\r\n# If enabled, this will not compile the compiler with debuginfo, just the\r\n# standard library.\r\n#debuginfo-only-std = false\r\n\r\n# Whether or not jemalloc is built and enabled\r\n#use-jemalloc = true\r\n\r\n# Whether or not jemalloc is built with its debug option set\r\n#debug-jemalloc = false\r\n\r\n# Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\r\n#backtrace = true\r\n\r\n# The default linker that will be hard-coded into the generated compiler for\r\n# targets that don't specify linker explicitly in their target specifications.\r\n# Note that this is not the linker used to link said compiler.\r\n#default-linker = \"cc\"\r\n\r\n# The \"channel\" for the Rust build to produce. The stable/beta channels only\r\n# allow using stable features, whereas the nightly and dev channels allow using\r\n# nightly features\r\n#channel = \"dev\"\r\n\r\n# By default the `rustc` executable is built with `-Wl,-rpath` flags on Unix\r\n# platforms to ensure that the compiler is usable by default from the build\r\n# directory (as it links to a number of dynamic libraries). This may not be\r\n# desired in distributions, for example.\r\n#rpath = true\r\n\r\n# Suppresses extraneous output from tests to ensure the output of the test\r\n# harness is relatively clean.\r\n#quiet-tests = false\r\n\r\n# Flag indicating whether tests are compiled with optimizations (the -O flag) or\r\n# with debuginfo (the -g flag)\r\n#optimize-tests = true\r\n#debuginfo-tests = true\r\n\r\n# Flag indicating whether codegen tests will be run or not. If you get an error\r\n# saying that the FileCheck executable is missing, you may want to disable this.\r\n#codegen-tests = true\r\n\r\n# Flag indicating whether git info will be retrieved from .git automatically.\r\n# Having the git information can cause a lot of rebuilds during development.\r\n# Note: If this attribute is not explicity set (e.g. if left commented out) it\r\n# will default to true if channel = \"dev\", but will default to false otherwise.\r\n#ignore-git = true\r\n\r\n# When creating source tarballs whether or not to create a source tarball.\r\n#dist-src = false\r\n\r\n# Whether to also run the Miri tests suite when running tests.\r\n# As a side-effect also generates MIR for all libraries.\r\n#test-miri = false\r\n\r\n# After building or testing extended tools (e.g. clippy and rustfmt), append the\r\n# result (broken, compiling, testing) into this JSON file.\r\n#save-toolstates = \"/path/to/toolstates.json\"\r\n\r\n# =============================================================================\r\n# Options for specific targets\r\n#\r\n# Each of the following options is scoped to the specific target triple in\r\n# question and is used for determining how to compile each target.\r\n# =============================================================================\r\n[target.x86_64-unknown-linux-gnu]\r\n\r\n# C compiler to be used to compiler C code. Note that the\r\n# default value is platform specific, and if not specified it may also depend on\r\n# what platform is crossing to what platform.\r\n#cc = \"cc\"\r\n\r\n# C++ compiler to be used to compiler C++ code (e.g. LLVM and our LLVM shims).\r\n# This is only used for host targets.\r\n#cxx = \"c++\"\r\n\r\n# Archiver to be used to assemble static libraries compiled from C/C++ code.\r\n# Note: an absolute path should be used, otherwise LLVM build will break.\r\n#ar = \"ar\"\r\n\r\n# Linker to be used to link Rust code. Note that the\r\n# default value is platform specific, and if not specified it may also depend on\r\n# what platform is crossing to what platform.\r\n#linker = \"cc\"\r\n\r\n# Path to the `llvm-config` binary of the installation of a custom LLVM to link\r\n# against. Note that if this is specifed we don't compile LLVM at all for this\r\n# target.\r\n#llvm-config = \"../path/to/llvm/root/bin/llvm-config\"\r\n\r\n# Path to the custom jemalloc static library to link into the standard library\r\n# by default. This is only used if jemalloc is still enabled above\r\n#jemalloc = \"/path/to/jemalloc/libjemalloc_pic.a\"\r\n\r\n# If this target is for Android, this option will be required to specify where\r\n# the NDK for the target lives. This is used to find the C compiler to link and\r\n# build native code.\r\n#android-ndk = \"/path/to/ndk\"\r\n\r\n# Force static or dynamic linkage of the standard library for this target. If\r\n# this target is a host for rustc, this will also affect the linkage of the\r\n# compiler itself. This is useful for building rustc on targets that normally\r\n# only use static libraries. If unset, the target's default linkage is used.\r\n#crt-static = false\r\n\r\n# The root location of the MUSL installation directory. The library directory\r\n# will also need to contain libunwind.a for an unwinding implementation. Note\r\n# that this option only makes sense for MUSL targets that produce statically\r\n# linked binaries\r\n#musl-root = \"...\"\r\n\r\n# Used in testing for configuring where the QEMU images are located, you\r\n# probably don't want to use this.\r\n#qemu-rootfs = \"...\"\r\n\r\n# =============================================================================\r\n# Distribution options\r\n#\r\n# These options are related to distribution, mostly for the Rust project itself.\r\n# You probably won't need to concern yourself with any of these options\r\n# =============================================================================\r\n[dist]\r\n\r\n# This is the folder of artifacts that the build system will sign. All files in\r\n# this directory will be signed with the default gpg key using the system `gpg`\r\n# binary. The `asc` and `sha256` files will all be output into the standard dist\r\n# output folder (currently `build/dist`)\r\n#\r\n# This folder should be populated ahead of time before the build system is\r\n# invoked.\r\n#sign-folder = \"path/to/folder/to/sign\"\r\n\r\n# This is a file which contains the password of the default gpg key. This will\r\n# be passed to `gpg` down the road when signing all files in `sign-folder`\r\n# above. This should be stored in plaintext.\r\n#gpg-password-file = \"path/to/gpg/password\"\r\n\r\n# The remote address that all artifacts will eventually be uploaded to. The\r\n# build system generates manifests which will point to these urls, and for the\r\n# manifests to be correct they'll have to have the right URLs encoded.\r\n#\r\n# Note that this address should not contain a trailing slash as file names will\r\n# be appended to it.\r\n#upload-addr = \"https://example.com/folder\"\r\n\r\n# Whether to build a plain source tarball to upload\r\n# We disable that on Windows not to override the one already uploaded on S3\r\n# as the one built on Windows will contain backslashes in paths causing problems\r\n# on linux\r\n#src-tarball = true\r\n```\r\n\r\n</details>\r\n\r\n[sources.zip](https://github.com/rust-lang/rust/files/1580174/sources.zip)\r\n\r\n", "closed_by": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46921/timeline", "performed_via_github_app": null, "state_reason": "completed"}