{"url": "https://api.github.com/repos/rust-lang/rust/issues/62868", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62868/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62868/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62868/events", "html_url": "https://github.com/rust-lang/rust/issues/62868", "id": 470977770, "node_id": "MDU6SXNzdWU0NzA5Nzc3NzA=", "number": 62868, "title": "Alternatives to rustc_plugin::registry for (Servo\u2019s) custom lints?", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 111868330, "node_id": "MDU6TGFiZWwxMTE4NjgzMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-plugin", "name": "A-plugin", "color": "f7e101", "default": false, "description": "Area: compiler plugins, doc.rust-lang.org/nightly/unstable-book/language-features/plugin.html"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2019-07-22T09:04:10Z", "updated_at": "2020-02-07T14:50:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Continuing from https://github.com/rust-lang/rust/pull/62727#issuecomment-513508389:\r\n> > Servo\u2019s memory safety unfortunately still depends on a custom lint that checks that GC pointers on the stack are properly rooted: https://github.com/servo/servo/tree/cef98d2e5179/components/script_plugins\r\n> > I would love to find another solution, this plugin is regularly giving us headaches. But until we do, if the plugin API is removed Servo will be unable to upgrade and will be stuck on an old Rust Nightly.\r\n> \r\n> So there has been no movement since last time we discussed this. That's unfortunate. At some point however, I think it stops being reasonable for rustc to indefinitely maintain the plugin interface solely for the benefit of servo. What would it take to get rid of your reliance on this?\r\n\r\nIt would take building an alternative.\r\n\r\nThis thread is to discuss what alternative mechanisms already exist or could be added.\r\n\r\n# Requirements\r\n\r\n* ~Having custom attributes in source code (e.g. on `struct` definitions), ignored without warning by rustc.~\r\n\r\n  ~Currently we rely on `rustc_plugin::registry::Registry::register_attribute`.~\r\n\r\n  ~My reading of https://github.com/rust-lang/rust/issues/44690 is that the `rustfmt::` and `clippy::` attribute namespaces are hard-coded for now, and that the RFC-proposed mechanism for registering more such namespaces / tools is not implemented yet.~\r\n\r\n  **Edit:** This is now taken care of by `#![register_tool]`: https://github.com/rust-lang/rust/issues/66079\r\n\r\n* The ability to write custom \u201clints\u201d: arbitrary code that analyses a given crate and can reject it based on:\r\n\r\n  - Access to everything in a crate: type definitions, expressions and sub-expressions\r\n  - Access to span information, to report the location of an error when there is one\r\n  - Access to full type information. For example in `let x = foo.bar();` the lint wants to find out whether the struct definition for the concrete type of `x` has one of the previously mentioned custom attributes, even if `bar` is a trait method that returns an associated type.\r\n\r\n* The lint only runs for selected crates. Or at least it has access to the crate name (and can exit early based on its own allow-list.)\r\n\r\n* Running the lint after (or during) a normal `cargo build -p script` (where `script` is the crate being linted) does not require recompiling dependencies, nor duplicating much of Cargo\u2019s logic.\r\n\r\n  As far as I understand, resolving types requires metadata for dependency crates. It\u2019s fine if the lint runs separately from rustc, but reverse-engineering Cargo to find out which of multiple `libfoo*.rlib` with different hashes in their name is the correct one would be fragile.\r\n\r\n* Using Rust Nightly through rustup.\r\n\r\n  Many years ago Servo had custom builds of rustc. It was a pain.\r\n\r\n# Nice to have\r\n\r\n* Access to rustc\u2019s mechanism for emitting nicely-formatted diagnostics (not just access to line and column numbers)\r\n\r\n* Running the lint after *either* `cargo build` or `cargo check` does not require recompiling/rechecking dependencies. https://github.com/rust-lang/cargo/issues/3501 may be relevant.\r\n\r\n  - The lint being *part of* normal compilation / checking is ideal.\r\n\r\n* Reducing reliance on rustc-internal APIs that change often would be nice, to help reduce the frequency of PRs like this: https://github.com/servo/servo/pull/23822. (We\u2019re averaging at 20 days between Nightly upgrades in the last year, mostly because of this.)\r\n\r\n  I do realize this is in contradiction with many of the other points.\r\n\r\n  - Would it be crazy for RLS to have a non-interactive mode where it dumps everything it knows about a crate into a giant JSON file?\r\n\r\n----\r\n\r\n@jdm, @Manishearth, @nox: anything to add?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62868/reactions", "total_count": 4, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62868/timeline", "performed_via_github_app": null, "state_reason": null}