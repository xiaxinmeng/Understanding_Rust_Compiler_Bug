{"url": "https://api.github.com/repos/rust-lang/rust/issues/12381", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12381/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12381/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12381/events", "html_url": "https://github.com/rust-lang/rust/issues/12381", "id": 27841649, "node_id": "MDU6SXNzdWUyNzg0MTY0OQ==", "number": 12381, "title": "Implementations of traits for &mut T yields surprises about mutability", "user": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-02-19T00:35:40Z", "updated_at": "2014-07-23T19:45:31Z", "closed_at": "2014-02-24T18:45:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Here are a couple of minimal example of the situation:\n\n``` rust\ntrait Trait {\n    fn b(&mut self) {}\n}\nstruct Struct;\nimpl<'a> Trait for &'a mut Struct {}\n\n#[allow(dead_code)]\nfn foo(mut a: &mut Struct) {\n    a.b();\n}\nfn main() {}\n```\n\n``` rust\ntrait TraitA {}\ntrait TraitB {\n    fn b(&mut self) {}\n}\n\nimpl<A: TraitA> TraitB for A {}\nimpl<'a> TraitA for &'a mut TraitA {}\n\n#[allow(dead_code)]\nfn foo(mut a: &mut TraitA) {\n    a.b();\n}\nfn main() {}\n```\n\nNow why was `mut` required on `a` in both cases? Because otherwise, the call to `a.b()` won't work: `error: cannot borrow immutable argument `a` as mutable`.\n\nThe reason why this is so is that the trait implementation is on `&mut T`, and so that `(&mut T)` is an opaque type for the purposes of the trait implementation, having no special mutability as it would otherwise have. Then, when calling the `b` method, it will take a second borrow `&mut (&mut T)`. But in order to do that, it not having special knowledge of the fact that `&mut T` is considered mutable already, it requires you to place it in a mutable slot.\n\nThe real-life case where I hit this a couple of weeks ago and where someone else in IRC hit it today is implementing additional methods on `Writer` or `Reader` and then using the trait objects:\n\n``` rust\ntrait ReaderUtils: Reader {\n    fn read_foo(&mut self) -> Foo {\n        unimplemented!();\n    }\n}\nimpl<R: Reader> ReaderUtils for R {}\n\nfn unfoo(mut r: &mut Reader) {\n    let _ = r.read_foo();\n}\n```\n\nIn this case, all of a sudden `read_foo` is a second-class citizen, behaving differently from the standard `Reader` methods. If you _don't_ use such a method, `mut r` will warn you about unnecessary mutability. If you _do_ use such a method, then all of a sudden you _must_ use `mut r`.\n\n(I'm not sure if there is a real use case for implementing traits on `&mut T` other than trait objects, but it's possible. It's more the trait objects that I care about.)\n\nThis is not incorrect behaviour\u2014it is consistent; it is merely surprising behaviour. Thus, if it can be improved, it would be good. I'm not sure whether or not it can be improved, because I suspect that any special detection of a `&mut T` implementation as mutable would just defer the problem to the next level of generic bounds.\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12381/timeline", "performed_via_github_app": null, "state_reason": "completed"}