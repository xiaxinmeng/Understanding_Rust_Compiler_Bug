{"url": "https://api.github.com/repos/rust-lang/rust/issues/79136", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79136/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79136/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79136/events", "html_url": "https://github.com/rust-lang/rust/issues/79136", "id": 744783913, "node_id": "MDU6SXNzdWU3NDQ3ODM5MTM=", "number": 79136, "title": "Enum type aliases don't work with default parameter", "user": {"login": "marcospb19", "id": 38900226, "node_id": "MDQ6VXNlcjM4OTAwMjI2", "avatar_url": "https://avatars.githubusercontent.com/u/38900226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcospb19", "html_url": "https://github.com/marcospb19", "followers_url": "https://api.github.com/users/marcospb19/followers", "following_url": "https://api.github.com/users/marcospb19/following{/other_user}", "gists_url": "https://api.github.com/users/marcospb19/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcospb19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcospb19/subscriptions", "organizations_url": "https://api.github.com/users/marcospb19/orgs", "repos_url": "https://api.github.com/users/marcospb19/repos", "events_url": "https://api.github.com/users/marcospb19/events{/privacy}", "received_events_url": "https://api.github.com/users/marcospb19/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-11-17T14:25:51Z", "updated_at": "2021-08-15T09:20:57Z", "closed_at": "2021-08-15T08:07:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi! I'm writing a custom `File` and `FileType` representation. It has a generic field called `extra`, so that users can attach any data into this recursive structure.\r\n\r\nFor example, you might want to attach a `String` to represent each file contents, maybe custom flags, open options, mode options, really anything that might match your needs.\r\n\r\nI needed this generic field for some projects of mine, but I expect that usually users won't need it, so `T` (generic type) will be `()`.\r\n\r\nThen I thought to myself, I should use type aliases with default parameters! Tried [this](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=79c49d5dd55a5df17aa15e32489d40f4):\r\n\r\n```rust\r\n#[allow(dead_code)]\r\nmod my_crate {\r\n    mod module {\r\n        pub struct File<T> {\r\n            path: std::path::PathBuf,\r\n            file_type: FileType<T>,\r\n            extra: T,\r\n        }\r\n\r\n        pub enum FileType<T> {\r\n            Regular,\r\n            Directory(Vec<File<T>>),\r\n            Symlink,\r\n        }\r\n    }\r\n    pub type FileType<T = ()> = module::FileType<T>;\r\n    pub type File<T = ()> = module::File<T>;\r\n}\r\n\r\n// Crate user code, fails\r\nfn main() {\r\n    use my_crate::FileType::*;\r\n\r\n    let var = Regular;\r\n    if let Regular = var {\r\n        println!(\"ok\");\r\n    }\r\n}\r\n```\r\n\r\nExpected it to work and assume `T = ()`, but got a compile error inside of `main` function:\r\n```\r\nerror: src/main.rs:21: unresolved import `my_crate::FileType`\r\nerror: src/main.rs:21: `FileType` is a type alias, not a module\r\n```\r\n\r\n[Here](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8e49b5162d1baa7948fcd5c2536b9eac) are some alternatives to compile that `main` function:\r\n\r\n```rust\r\nfn main() {\r\n    // Explicit\r\n    let _file = my_crate::FileType::<()>::Regular;\r\n\r\n    // Another type alias\r\n    type OtherFileType = my_crate::FileType<()>;\r\n    let _file = OtherFileType::Regular;\r\n\r\n    // Type anotations\r\n    let _file: my_crate::FileType<()> = my_crate::FileType::Regular;\r\n}\r\n```\r\n\r\nAlthough this compiles, the user needed to specify explicitly the the unit type `()`, so my default parameter didn't helped at all.\r\n\r\nI expected `()` to be \"automatically infered\".\r\n\r\n#### Meta\r\nConfirmed in 1.47 stable, 1.48 beta and 1.50 nightly.\r\n", "closed_by": {"login": "marcospb19", "id": 38900226, "node_id": "MDQ6VXNlcjM4OTAwMjI2", "avatar_url": "https://avatars.githubusercontent.com/u/38900226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcospb19", "html_url": "https://github.com/marcospb19", "followers_url": "https://api.github.com/users/marcospb19/followers", "following_url": "https://api.github.com/users/marcospb19/following{/other_user}", "gists_url": "https://api.github.com/users/marcospb19/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcospb19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcospb19/subscriptions", "organizations_url": "https://api.github.com/users/marcospb19/orgs", "repos_url": "https://api.github.com/users/marcospb19/repos", "events_url": "https://api.github.com/users/marcospb19/events{/privacy}", "received_events_url": "https://api.github.com/users/marcospb19/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79136/timeline", "performed_via_github_app": null, "state_reason": "completed"}