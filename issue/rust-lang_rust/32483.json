{"url": "https://api.github.com/repos/rust-lang/rust/issues/32483", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32483/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32483/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32483/events", "html_url": "https://github.com/rust-lang/rust/issues/32483", "id": 143545444, "node_id": "MDU6SXNzdWUxNDM1NDU0NDQ=", "number": 32483, "title": "Specialization: allow some projection when typechecking an impl", "user": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-03-25T17:15:31Z", "updated_at": "2023-04-05T17:40:26Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The following example currently fails to compile:\n\n``` rust\npub trait Foo {\n    type TypeA;\n    type TypeB: Bar<Self::TypeA>;\n}\n\npub trait Bar<T> {\n}\n\npub struct ImplsBar;\nimpl<T> Bar<T> for ImplsBar {\n}\n\nimpl<T> Foo for T {\n    type TypeA = u8;\n    default type TypeB = ImplsBar;\n}\n```\n\nwith message:\n\n```\n<anon>:15:9: 15:12 error: the trait `Bar<u8>` is not implemented for the type `<T as Foo>::TypeB` [E0277]\n<anon>:15 impl<T> Foo for T {\n```\n\nThe problem seems to be that the type checker is using a projection of `TypeB` to actually check the impl's definition of `TypeB` against its bounds. But because it's marked `default`, the item cannot be projected.\n\nIn general, we should loosen up the rules on projections when checking an impl -- but doing so soundly is tricky. It clearly doesn't work to just allow _all_ projections to go through (a la \"trans mode\"), because in general items could be replaced in more specialized impls. But it _does_ seem reasonable to allow projecting _the current item being impled_ (for any trait ref covered by the impl), because any specialization of that item will be rechecked under its own constraints.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32483/timeline", "performed_via_github_app": null, "state_reason": null}