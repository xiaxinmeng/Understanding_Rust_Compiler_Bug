{"url": "https://api.github.com/repos/rust-lang/rust/issues/76725", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76725/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76725/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76725/events", "html_url": "https://github.com/rust-lang/rust/issues/76725", "id": 701526526, "node_id": "MDU6SXNzdWU3MDE1MjY1MjY=", "number": 76725, "title": "Iterator::fold is a little slow compared to bare loop", "user": {"login": "mlodato517", "id": 18740355, "node_id": "MDQ6VXNlcjE4NzQwMzU1", "avatar_url": "https://avatars.githubusercontent.com/u/18740355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlodato517", "html_url": "https://github.com/mlodato517", "followers_url": "https://api.github.com/users/mlodato517/followers", "following_url": "https://api.github.com/users/mlodato517/following{/other_user}", "gists_url": "https://api.github.com/users/mlodato517/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlodato517/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlodato517/subscriptions", "organizations_url": "https://api.github.com/users/mlodato517/orgs", "repos_url": "https://api.github.com/users/mlodato517/repos", "events_url": "https://api.github.com/users/mlodato517/events{/privacy}", "received_events_url": "https://api.github.com/users/mlodato517/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-09-15T00:59:39Z", "updated_at": "2020-09-18T12:24:12Z", "closed_at": "2020-09-18T12:24:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Background\r\n\r\nI was writing a [small project to compare the memory impact of iterators](https://github.com/mlodato517/iterator_comparison). I decided to also investigate the runtime impact and see how close Rust came to providing various zero cost abstractions to iteration. I compared three types of iteration:\r\n```rust\r\nfn filter_map_filter(nums: &[u64]) -> Vec<u64> {\r\n  nums.iter().filter(...).map(...).filter(...).collect()\r\n}\r\n\r\nfn fold(nums: &[u64]) -> Vec<u64> {\r\n  nums.iter().fold(Vec::new(), ...)\r\n}\r\n\r\nfn raw(nums: &[u64]) -> Vec<u64> {\r\n  let mut result = Vec::new();\r\n  for n in nums { ... }\r\n  result\r\n}\r\n```\r\nand saw this Criterion output plot:\r\n<img width=\"1158\" alt=\"criterion-plot\" src=\"https://user-images.githubusercontent.com/18740355/93150001-fe14fd00-f6c5-11ea-83ab-8e3b5dc82382.png\">\r\n\r\nThe outliers to the right are the timings of the `fold` functions while the two pairs on the left are the `filter_map_filter` and `raw` versions. Rust did a great job ensuring `.filter.map.filter` was the same speed as a raw loop but `.fold` seemed to be lacking.\r\n\r\n## Quick Investigation\r\n\r\nLooking at the [source for `.fold`](https://doc.rust-lang.org/src/core/iter/traits/iterator.rs.html#2015) the `accum` is reassigned with the result of each invocation of `f`. I quickly tested if this could be improved with a `&mut` instead in [this PR](https://github.com/mlodato517/iterator_comparison/pull/2). The result was surprising (to me):\r\n\r\n<img width=\"1248\" alt=\"criterion-plot-mut-ref\" src=\"https://user-images.githubusercontent.com/18740355/93150335-db371880-f6c6-11ea-9821-f26cc159d86e.png\">\r\n\r\nThe \"custom fold\" method was faster than all the other options (which doesn't make a ton of sense to me but that's what y'all are here for!).\r\n\r\n## Path Forward\r\n\r\nI initially was going to suggest adding some sort of `fold_mut` or some better named method to allow for this faster `fold` iterator. This could be a performance improvement in some areas and could also improve the syntax when the closure couldn't \"easily\" return the new accumulator:\r\n```rust\r\niter.fold(Vec::new(), |v, x| {\r\n  v.push(x);\r\n  v // this line is a little weird\r\n})\r\n```\r\n\r\nI made [a branch for this](https://github.com/rust-lang/rust/compare/master...mlodato517:ml-fold-mut?expand=1) if we want to head in that direction (the tests are slim, the benchmarks are probably overkill, the stability is missing, and the docs are probably slim and improperly formatted but it's a start!) and saw some improvements in the benchmarks I added:\r\n\r\n![benchmarks](https://user-images.githubusercontent.com/18740355/93152131-dcb70f80-f6cb-11ea-8582-873a8a307e6a.png)\r\n\r\n\r\nNow I'm not sure if this \"`fold_mut`\" path is the right way to go - I'm not sure if it's awkward or dangerous. It seems similar to Ruby's [`each_with_object`](https://ruby-doc.org/core-2.4.1/Enumerable.html#method-i-each_with_object) so there's maybe something there. It could also be that with some compiler witchcraft we can just make `fold` a \"true\" zero cost abstraction.\r\n\r\nIn any case, thought I'd post here instead of making a PR so we could decided if there _should_ be any PR and I'm happy to help with whatever path forward we choose!", "closed_by": {"login": "mlodato517", "id": 18740355, "node_id": "MDQ6VXNlcjE4NzQwMzU1", "avatar_url": "https://avatars.githubusercontent.com/u/18740355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlodato517", "html_url": "https://github.com/mlodato517", "followers_url": "https://api.github.com/users/mlodato517/followers", "following_url": "https://api.github.com/users/mlodato517/following{/other_user}", "gists_url": "https://api.github.com/users/mlodato517/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlodato517/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlodato517/subscriptions", "organizations_url": "https://api.github.com/users/mlodato517/orgs", "repos_url": "https://api.github.com/users/mlodato517/repos", "events_url": "https://api.github.com/users/mlodato517/events{/privacy}", "received_events_url": "https://api.github.com/users/mlodato517/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76725/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76725/timeline", "performed_via_github_app": null, "state_reason": "completed"}