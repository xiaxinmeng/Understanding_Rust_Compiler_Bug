{"url": "https://api.github.com/repos/rust-lang/rust/issues/98232", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98232/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98232/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98232/events", "html_url": "https://github.com/rust-lang/rust/issues/98232", "id": 1275804970, "node_id": "I_kwDOAAsO6M5MCz0q", "number": 98232, "title": "'unsafe impl<A> Allocator for &A where A: Allocator' is problematic", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-06-18T14:34:11Z", "updated_at": "2023-04-15T11:42:08Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "We have a general `Allocator` instance for `&A` where `A: Allocator`. I think that is a problem. In https://github.com/rust-lang/rust/pull/98178 I fixed a problem where `BTreeMap<T, Global>` would actually use `&Global` as allocator, which leads to performance regression. Or at least, I thought I had fixed that problem -- I just realized that there are some places where it still adds an indirection and therefore adds an unnecessary reference that will be copied around:\r\n\r\nhttps://github.com/rust-lang/rust/blob/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861/library/alloc/src/collections/btree/map.rs#L1647\r\n\r\nI found this by removing the `unsafe impl<A> Allocator for &A where A: Allocator + ?Sized` instance. I don't know of another way to avoid accidentally introducing such performance regressions.\r\n\r\nSo maybe that instance should be removed?\r\nCc @rust-lang/wg-allocators ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98232/timeline", "performed_via_github_app": null, "state_reason": null}