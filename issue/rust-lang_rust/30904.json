{"url": "https://api.github.com/repos/rust-lang/rust/issues/30904", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30904/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30904/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30904/events", "html_url": "https://github.com/rust-lang/rust/issues/30904", "id": 126685476, "node_id": "MDU6SXNzdWUxMjY2ODU0NzY=", "number": 30904, "title": "Struct and variant constructors are not generic over lifetimes like regular functions.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1657845351, "node_id": "MDU6TGFiZWwxNjU3ODQ1MzUx", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-unboxed_closures", "name": "F-unboxed_closures", "color": "f9c0cc", "default": false, "description": "`#![feature(unboxed_closures)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-01-14T16:03:55Z", "updated_at": "2019-11-13T23:10:06Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The following testcase produces the errors noted in comments and the last one is an ICE ([run on playpen](https://play.rust-lang.org/?gist=f5acaea83408a752d28d&version=nightly)):\n\n``` rust\n#![feature(fn_traits, unboxed_closures)]\n\nfn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n\nstruct Compose<F,G>(F,G);\nimpl<T,F,G> FnOnce<(T,)> for Compose<F,G>\nwhere F: FnOnce<(T,)>, G: FnOnce<(F::Output,)> {\n    type Output = G::Output;\n    extern \"rust-call\" fn call_once(self, (x,): (T,)) -> G::Output {\n        (self.1)((self.0)(x))\n    }\n}\n\nstruct Str<'a>(&'a str);\nfn mk_str<'a>(s: &'a str) -> Str<'a> { Str(s) }\n\nfn main() {\n    let _: for<'a> fn(&'a str) -> Str<'a> = mk_str;\n    // expected concrete lifetime, found bound lifetime parameter 'a\n    let _: for<'a> fn(&'a str) -> Str<'a> = Str;\n\n    test(|_: &str| {});\n    test(mk_str);\n    // expected concrete lifetime, found bound lifetime parameter 'x\n    test(Str);\n\n    test(Compose(|_: &str| {}, |_| {}));\n    test(Compose(mk_str, |_| {}));\n    // internal compiler error: cannot relate bound region:\n    //   ReLateBound(DebruijnIndex { depth: 2 },\n    //     BrNamed(DefId { krate: 0, node: DefIndex(6) => test::'x }, 'x(65)))\n    //<= ReSkolemized(0,\n    //     BrNamed(DefId { krate: 0, node: DefIndex(6) => test::'x }, 'x(65)))\n    test(Compose(Str, |_| {}));\n}\n```\n\nThe same errors occur if an `enum Foo<'a> { Str(&'a str) }` is used.\n\nUsage of `FnOnce<(T,)>` is to avoid proving an explicit type parameter for the `Output` associated type, as an workaround for #30867.\n\nOriginally found in @asajeffrey's [wasm](https://github.com/asajeffrey/wasm) repo (see my comment on asajeffrey/wasm#1).\ncc @nikomatsakis @arielb1\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30904/timeline", "performed_via_github_app": null, "state_reason": null}