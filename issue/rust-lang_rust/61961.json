{"url": "https://api.github.com/repos/rust-lang/rust/issues/61961", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61961/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61961/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61961/events", "html_url": "https://github.com/rust-lang/rust/issues/61961", "id": 458079311, "node_id": "MDU6SXNzdWU0NTgwNzkzMTE=", "number": 61961, "title": "Simple Rust match vs C switch equivalent produce slower code", "user": {"login": "julianlalu", "id": 8895712, "node_id": "MDQ6VXNlcjg4OTU3MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8895712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/julianlalu", "html_url": "https://github.com/julianlalu", "followers_url": "https://api.github.com/users/julianlalu/followers", "following_url": "https://api.github.com/users/julianlalu/following{/other_user}", "gists_url": "https://api.github.com/users/julianlalu/gists{/gist_id}", "starred_url": "https://api.github.com/users/julianlalu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/julianlalu/subscriptions", "organizations_url": "https://api.github.com/users/julianlalu/orgs", "repos_url": "https://api.github.com/users/julianlalu/repos", "events_url": "https://api.github.com/users/julianlalu/events{/privacy}", "received_events_url": "https://api.github.com/users/julianlalu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-19T15:25:03Z", "updated_at": "2019-06-26T09:58:26Z", "closed_at": "2019-06-19T17:03:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "When comparing simple i32 switch case in C (Compiled with Clang 8.0.0) and Rust (1.35) we have slower assembly produce by the Rust compiler ( Time evaluated with LLVM MCA)\r\n\r\nHere is the Rust code:\r\n```\r\npub fn func(x :i32) -> i32 {\r\n    match x {\r\n        1 => x+1,\r\n        3 => x+3,\r\n        5 => x+5,\r\n        7 => x+7,\r\n        _ => x*x,\r\n    }\r\n}\r\n\r\n```\r\nRust compiler 1.35 (-C opt-level=3) produce the following assembly for intel\r\n\r\n```\r\nexample::func:\r\n        lea     eax, [rdi - 1]\r\n        cmp     eax, 7\r\n        jae     .LBB0_3\r\n        mov     ecx, 85\r\n        bt      ecx, eax\r\n        jb      .LBB0_2\r\n.LBB0_3:\r\n        imul    edi, edi\r\n        mov     eax, edi\r\n        ret\r\n.LBB0_2:\r\n        cdqe\r\n        lea     rcx, [rip + .Lswitch.table.example::func]\r\n        mov     eax, dword ptr [rcx + 4*rax]\r\n        ret\r\n\r\n.Lswitch.table.example::func:\r\n        .long   2\r\n        .long   2\r\n        .long   6\r\n        .long   2\r\n        .long   10\r\n        .long   2\r\n        .long   14\r\n```\r\n\r\nHere is the equivalent C code\r\n```\r\nint func(int x) {\r\n    switch(x)\r\n    {\r\n        case 1: return x+1;\r\n        case 3: return x+3;\r\n        case 5: return x+5;\r\n        case 7: return x+7;\r\n        default: return x*x;\r\n   }\r\n}\r\n```\r\nClang compiler 8.0.0 (-O3) produce the following assembly for intel \r\n```\r\nfunc:                                   # @func\r\n        lea     eax, [rdi - 1]\r\n        cmp     eax, 7\r\n        jae     .LBB0_3\r\n        mov     ecx, 85\r\n        bt      ecx, eax\r\n        jb      .LBB0_2\r\n.LBB0_3:\r\n        imul    edi, edi\r\n        mov     eax, edi\r\n        ret\r\n.LBB0_2:\r\n        cdqe\r\n        mov     eax, dword ptr [4*rax + .Lswitch.table.func]\r\n        ret\r\n.Lswitch.table.func:\r\n        .long   2                       # 0x2\r\n        .long   2                       # 0x2\r\n        .long   6                       # 0x6\r\n        .long   2                       # 0x2\r\n        .long   10                      # 0xa\r\n        .long   2                       # 0x2\r\n        .long   14                      # 0xe\r\n```\r\n\r\nWe can see that\r\n\r\n```\r\nlea     rcx, [rip + .Lswitch.table.example::func]\r\nmov     eax, dword ptr [rcx + 4*rax]\r\n```\r\n\r\nproduce by Rust can be what Clang do\r\n\r\n`mov     eax, dword ptr [4*rax + .Lswitch.table.func]`\r\n\r\nAccording to LLVM MCA Rust 1.35 produce slower code than C for no reason here:\r\nRust 1.35 LLVM MCA report is:\r\n\r\n> Iterations:        100\r\n> Instructions:      1300\r\n> Total Cycles:      454\r\n> Total uOps:        1700\r\n> Dispatch Width:    6\r\n> uOps Per Cycle:    3.74\r\n> IPC:               2.86\r\n> Block RThroughput: 2.8\r\n\r\nClang 8.0.0 LLVM MCA report is :\r\n\r\n> Iterations:        100\r\n> Instructions:      1200\r\n> Total Cycles:      418\r\n> Total uOps:        1600\r\n> Dispatch Width:    6\r\n> uOps Per Cycle:    3.83\r\n> IPC:               2.87\r\n> Block RThroughput: 2.7", "closed_by": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61961/timeline", "performed_via_github_app": null, "state_reason": "completed"}