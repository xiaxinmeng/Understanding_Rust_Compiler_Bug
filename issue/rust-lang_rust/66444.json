{"url": "https://api.github.com/repos/rust-lang/rust/issues/66444", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66444/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66444/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66444/events", "html_url": "https://github.com/rust-lang/rust/issues/66444", "id": 523461189, "node_id": "MDU6SXNzdWU1MjM0NjExODk=", "number": 66444, "title": "Show the location of a type usage for trait bound failures", "user": {"login": "oli-cosmian", "id": 52913081, "node_id": "MDQ6VXNlcjUyOTEzMDgx", "avatar_url": "https://avatars.githubusercontent.com/u/52913081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-cosmian", "html_url": "https://github.com/oli-cosmian", "followers_url": "https://api.github.com/users/oli-cosmian/followers", "following_url": "https://api.github.com/users/oli-cosmian/following{/other_user}", "gists_url": "https://api.github.com/users/oli-cosmian/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-cosmian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-cosmian/subscriptions", "organizations_url": "https://api.github.com/users/oli-cosmian/orgs", "repos_url": "https://api.github.com/users/oli-cosmian/repos", "events_url": "https://api.github.com/users/oli-cosmian/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-cosmian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}], "state": "open", "locked": false, "assignee": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-11-15T13:09:54Z", "updated_at": "2020-02-05T01:19:51Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "cc @estebank \r\n\r\nThe following diagnostic doesn't tell the user anything about *where* the type that causes the failure is coming from. I understand that we can't report a correct source site, but we could create a heuristic:\r\n\r\nInstead of having a `note:` without an associated span, we could check where (if at all) the type is used in the function and report those spans as potential sources of the error. Though I'm not sure what would be needed to fiddle this information through to the diagnostic reporting site.\r\n\r\n```rust\r\nfn foo(i: i32) -> impl std::future::Future<Output = ()> + Send {\r\n    async move {\r\n        boo(format!(\"{}\", i).as_str()).await;\r\n    }\r\n}\r\n\r\nasync fn boo(_: &str) {\r\n    \r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0412f40f42b52e6d29bb65aff6d14cec))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\r\n --> src/lib.rs:1:19\r\n  |\r\n1 | fn foo(i: i32) -> impl std::future::Future<Output = ()> + Send {\r\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\r\n  |\r\n  = help: within `core::fmt::Void`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\r\n  = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`\r\n  = note: required because it appears within the type `core::fmt::Void`\r\n  = note: required because of the requirements on the impl of `std::marker::Send` for `&core::fmt::Void`\r\n  = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`\r\n  = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>; 1]`\r\n  = note: required because it appears within the type `for<'r, 's, 't0, 't1, 't2, 't3, 't4, 't5, 't6, 't7, 't8, 't9, 't10, 't11, 't12, 't13, 't14, 't15, 't16, 't17, 't18> {for<'_> fn(&str) -> impl std::future::Future {boo}, for<'t19> fn(std::fmt::Arguments<'t19>) -> std::string::String {std::fmt::format}, fn(&'r [&'r str], &'r [std::fmt::ArgumentV1<'r>]) -> std::fmt::Arguments<'r> {std::fmt::Arguments::<'r>::new_v1}, &'s str, &'t0 str, [&'t1 str; 1], &'t2 [&'t3 str], &'t4 [&'t5 str; 1], i32, &'t6 i32, (&'t7 i32,), [std::fmt::ArgumentV1<'t8>; 1], &'t9 [std::fmt::ArgumentV1<'t10>], &'t11 [std::fmt::ArgumentV1<'t12>; 1], std::fmt::Arguments<'t13>, &'t14 std::string::String, std::string::String, &'t15 str, &'t16 str, impl std::future::Future, impl std::future::Future, ()}`\r\n  = note: required because it appears within the type `[static generator@src/lib.rs:2:16: 4:6 i:i32 for<'r, 's, 't0, 't1, 't2, 't3, 't4, 't5, 't6, 't7, 't8, 't9, 't10, 't11, 't12, 't13, 't14, 't15, 't16, 't17, 't18> {for<'_> fn(&str) -> impl std::future::Future {boo}, for<'t19> fn(std::fmt::Arguments<'t19>) -> std::string::String {std::fmt::format}, fn(&'r [&'r str], &'r [std::fmt::ArgumentV1<'r>]) -> std::fmt::Arguments<'r> {std::fmt::Arguments::<'r>::new_v1}, &'s str, &'t0 str, [&'t1 str; 1], &'t2 [&'t3 str], &'t4 [&'t5 str; 1], i32, &'t6 i32, (&'t7 i32,), [std::fmt::ArgumentV1<'t8>; 1], &'t9 [std::fmt::ArgumentV1<'t10>], &'t11 [std::fmt::ArgumentV1<'t12>; 1], std::fmt::Arguments<'t13>, &'t14 std::string::String, std::string::String, &'t15 str, &'t16 str, impl std::future::Future, impl std::future::Future, ()}]`\r\n  = note: required because it appears within the type `std::future::GenFuture<[static generator@src/lib.rs:2:16: 4:6 i:i32 for<'r, 's, 't0, 't1, 't2, 't3, 't4, 't5, 't6, 't7, 't8, 't9, 't10, 't11, 't12, 't13, 't14, 't15, 't16, 't17, 't18> {for<'_> fn(&str) -> impl std::future::Future {boo}, for<'t19> fn(std::fmt::Arguments<'t19>) -> std::string::String {std::fmt::format}, fn(&'r [&'r str], &'r [std::fmt::ArgumentV1<'r>]) -> std::fmt::Arguments<'r> {std::fmt::Arguments::<'r>::new_v1}, &'s str, &'t0 str, [&'t1 str; 1], &'t2 [&'t3 str], &'t4 [&'t5 str; 1], i32, &'t6 i32, (&'t7 i32,), [std::fmt::ArgumentV1<'t8>; 1], &'t9 [std::fmt::ArgumentV1<'t10>], &'t11 [std::fmt::ArgumentV1<'t12>; 1], std::fmt::Arguments<'t13>, &'t14 std::string::String, std::string::String, &'t15 str, &'t16 str, impl std::future::Future, impl std::future::Future, ()}]>`\r\n  = note: required because it appears within the type `impl std::future::Future`\r\n  = note: the return type of a function must have a statically known size\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"davidtwco\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66444/timeline", "performed_via_github_app": null, "state_reason": null}