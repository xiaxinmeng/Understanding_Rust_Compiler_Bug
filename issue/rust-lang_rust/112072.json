{"url": "https://api.github.com/repos/rust-lang/rust/issues/112072", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112072/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112072/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112072/events", "html_url": "https://github.com/rust-lang/rust/issues/112072", "id": 1730968313, "node_id": "I_kwDOAAsO6M5nLHr5", "number": 112072, "title": "merge `BorrowKind::Unique` into `BorrowKind::Mut`", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-05-29T15:48:55Z", "updated_at": "2023-05-29T16:40:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We currently have a separate `mir::BorrowKind` for the mutable borrows for closure upvars.\r\n\r\n`BorrowKind::Unique` is an ordinary mutable borrow, requiring its target to be invariant, needing unique access, except that the target is not necessarily required to be marked as `mut` by the user.\r\n\r\nWe should merge this into `BorrowKind::Mut`, resulting in the following setup:\r\n```rust\r\nenum BorrowKind {\r\n    Shared,\r\n    Shallow,\r\n    Mut { kind: MutBorrowKind },\r\n}\r\n\r\nenum MutBorrowKind {\r\n    Default,\r\n    TwoPhaseBorrow,\r\n    ClosureCapture,\r\n}\r\n```\r\nIt is quite worrying to me that `fn BorrowKind::mutability` simply returns `Mutability::Not` for `BorrowKind::Unique`\r\nhttps://github.com/rust-lang/rust/blob/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler/rustc_middle/src/mir/mod.rs#L2030-L2035\r\n\r\nThis already caused a bug in https://github.com/rust-lang/rust/issues/112056 where we used `PlaceContext::NonMutatingUse` for unique borrows, which resulted in us getting the wrong variance, cc #112070.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112072/timeline", "performed_via_github_app": null, "state_reason": null}