{"url": "https://api.github.com/repos/rust-lang/rust/issues/89723", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89723/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89723/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89723/events", "html_url": "https://github.com/rust-lang/rust/issues/89723", "id": 1021880786, "node_id": "I_kwDOAAsO6M486KnS", "number": 89723, "title": "Unhelpful (misleading?) diagnostic when a type that must implement `'static` bound and `Iterator` trait are conflicting requirements.", "user": {"login": "cr1901", "id": 6418027, "node_id": "MDQ6VXNlcjY0MTgwMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/6418027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cr1901", "html_url": "https://github.com/cr1901", "followers_url": "https://api.github.com/users/cr1901/followers", "following_url": "https://api.github.com/users/cr1901/following{/other_user}", "gists_url": "https://api.github.com/users/cr1901/gists{/gist_id}", "starred_url": "https://api.github.com/users/cr1901/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cr1901/subscriptions", "organizations_url": "https://api.github.com/users/cr1901/orgs", "repos_url": "https://api.github.com/users/cr1901/repos", "events_url": "https://api.github.com/users/cr1901/events{/privacy}", "received_events_url": "https://api.github.com/users/cr1901/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-10T04:56:44Z", "updated_at": "2021-10-10T05:05:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\n## Code\r\nGiven the following code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b562df48ba9075e56f954f71ac031d2c\r\n\r\n```rust\r\nuse core::marker::PhantomData;\r\n\r\nstruct Foo<C> {\r\n    _marker: PhantomData<C>,\r\n}\r\n\r\nimpl<Coord: Clone + 'static> Iterator for Foo<Coord> {\r\n    type Item = ();\r\n\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nimpl<Coord> Foo<Coord> {\r\n    pub fn new<I: IntoIterator<Item = Coord>>(_iter: I) -> Self {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nimpl<Coord> Default for Foo<Coord> {\r\n    fn default() -> Self {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let res = vec![(0, 0), (1, 1), (2, 4), (3, 9)];\r\n    let res_x = res.iter().map(|(x, _)| x).collect::<Vec<&u32>>();\r\n    let res_y = res.iter().map(|(_, y)| y).collect::<Vec<&u32>>();\r\n\r\n    let my_foo = Foo::new(res_x.iter().zip(res_y.iter()));\r\n    consume_iter(my_foo);\r\n    \r\n    // This is fine.\r\n    // let my_foo2: Foo<(&&u32, &&u32)> = Default::default();\r\n    //consume_iter(my_foo2);\r\n}\r\n\r\nfn consume_iter<E, I>(_series: I) where I: IntoIterator<Item = E> {\r\n    unimplemented!()\r\n}\r\n```\r\n\r\n## Output\r\nThe current output is:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0597]: `res` does not live long enough\r\n  --> src/main.rs:29:17\r\n   |\r\n29 |     let res_x = res.iter().map(|(x, _)| x).collect::<Vec<&u32>>();\r\n   |                 ^^^                     - returning this value requires that `res` is borrowed for `'static`\r\n   |                 |\r\n   |                 borrowed value does not live long enough\r\n...\r\n38 | }\r\n   | - `res` dropped here while still borrowed\r\n\r\nerror[E0597]: `res` does not live long enough\r\n  --> src/main.rs:30:17\r\n   |\r\n30 |     let res_y = res.iter().map(|(_, y)| y).collect::<Vec<&u32>>();\r\n   |                 ^^^                     - returning this value requires that `res` is borrowed for `'static`\r\n   |                 |\r\n   |                 borrowed value does not live long enough\r\n...\r\n38 | }\r\n   | - `res` dropped here while still borrowed\r\n\r\nerror[E0597]: `res_x` does not live long enough\r\n  --> src/main.rs:32:27\r\n   |\r\n32 |     let my_foo = Foo::new(res_x.iter().zip(res_y.iter()));\r\n   |                           ^^^^^-------\r\n   |                           |\r\n   |                           borrowed value does not live long enough\r\n   |                           argument requires that `res_x` is borrowed for `'static`\r\n...\r\n38 | }\r\n   | - `res_x` dropped here while still borrowed\r\n\r\nerror[E0597]: `res_y` does not live long enough\r\n  --> src/main.rs:32:44\r\n   |\r\n32 |     let my_foo = Foo::new(res_x.iter().zip(res_y.iter()));\r\n   |                                            ^^^^^-------\r\n   |                                            |\r\n   |                                            borrowed value does not live long enough\r\n   |                                            argument requires that `res_y` is borrowed for `'static`\r\n...\r\n38 | }\r\n   | - `res_y` dropped here while still borrowed\r\n\r\nFor more information about this error, try `rustc --explain E0597`.\r\nerror: could not compile `playground` due to 4 previous errors\r\n```\r\n\r\n## What Is Happening\r\nI'm not sure what the error output of this should look like offhand. However, I spent an hour minimizing the above from my actual code before it became obvious what the actual problem is with my code. The actual problem is that \"`Foo<(&&u32, &&u32)>` cannot implement `'static`, and therefore cannot implement `Iterator` based on `Coord: Clone + 'static` bound. An error like \"this type cannot simultaneously implement `'static` and `Iterator` based on the requirements of `Foo::new()`\" would've made debugging far more quick.\r\n\r\nWhat Rust appears to be doing is trying to extend the lifetimes contained within the return value from the `zip` call to `'static` (`&'static &'static u32`). This allows `Iterator` to be implemented, but will fail once the borrow checker runs with the above 4 errors.\r\n\r\n## Analysis Of Errors\r\nI don't think any of the 4 errors are particularly helpful:\r\n\r\n>returning this value requires that `res` is borrowed for `'static`\r\n\r\nNeither of these errors are anywhere close to the site where the `'static` bound is required in `Foo::new()`. Additionally, I don't see how specifically returning _this_ value requires that `res` is borrowed for `'static`. It's only when `res_x` and `res_y` are used in `Foo:new()` that the requirement for a `'static` bound _propagates back up_ to the assignments to `res_x` and `res_y` that borrow `res`. Assigning to `res_x` and `res_y` isn't a problem in and of itself AFAICT.\r\n\r\n>argument requires that `res_y` is borrowed for `'static`\r\n\r\nThe carets made me think that the `res_x.iter()` or `res_x.iter().zip()` call<sup>1</sup> was to blame, but this seems like another case where the requirement for a `'static` bound propagates up from passing the expression into `Foo::new()`.\r\n\r\n>argument requires that `res_x` is borrowed for `'static`\r\n\r\nThis puts the carets in the correct place, but `res_x` made me think that there was something wrong with using `res_x` specifically, rather than \"passing in the return type of the expression `res_x.iter().zip(res_y.iter())` to `Foo::new()` is to blame\". If I saw carets and dashes<sup>1</sup> over the entire expression, I think I would've figured out the problem more quickly.\r\n\r\n1. What is the logic behind the number of carets/dashes when printing a diagnostic, btw? I'm not sure whether the carets _and_ dashes are supposed to provide context or just the carets.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89723/timeline", "performed_via_github_app": null, "state_reason": null}