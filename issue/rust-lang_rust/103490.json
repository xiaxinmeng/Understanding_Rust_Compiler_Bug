{"url": "https://api.github.com/repos/rust-lang/rust/issues/103490", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103490/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103490/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103490/events", "html_url": "https://github.com/rust-lang/rust/issues/103490", "id": 1421114013, "node_id": "I_kwDOAAsO6M5UtHqd", "number": 103490, "title": "Recover from malformed trait bounds of the form `Fn<'a>()`", "user": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 27424086, "node_id": "MDU6TGFiZWwyNzQyNDA4Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parser", "name": "A-parser", "color": "f7e101", "default": false, "description": "Area: The parsing of Rust source code to an AST."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "closed", "locked": false, "assignee": {"login": "ohno418", "id": 24674436, "node_id": "MDQ6VXNlcjI0Njc0NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/24674436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohno418", "html_url": "https://github.com/ohno418", "followers_url": "https://api.github.com/users/ohno418/followers", "following_url": "https://api.github.com/users/ohno418/following{/other_user}", "gists_url": "https://api.github.com/users/ohno418/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohno418/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohno418/subscriptions", "organizations_url": "https://api.github.com/users/ohno418/orgs", "repos_url": "https://api.github.com/users/ohno418/repos", "events_url": "https://api.github.com/users/ohno418/events{/privacy}", "received_events_url": "https://api.github.com/users/ohno418/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ohno418", "id": 24674436, "node_id": "MDQ6VXNlcjI0Njc0NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/24674436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohno418", "html_url": "https://github.com/ohno418", "followers_url": "https://api.github.com/users/ohno418/followers", "following_url": "https://api.github.com/users/ohno418/following{/other_user}", "gists_url": "https://api.github.com/users/ohno418/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohno418/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohno418/subscriptions", "organizations_url": "https://api.github.com/users/ohno418/orgs", "repos_url": "https://api.github.com/users/ohno418/repos", "events_url": "https://api.github.com/users/ohno418/events{/privacy}", "received_events_url": "https://api.github.com/users/ohno418/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2022-10-24T16:39:15Z", "updated_at": "2022-12-29T22:20:50Z", "closed_at": "2022-12-29T22:20:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code:\n\n```rust\nfn f(_: impl FnOnce<'a>(&'a str) -> bool) {}\n```\n\ncurrently produces a heap of semi-helpful diagnostics:\n\n<details>\n<summary><b>stderr (7 errors)</b></summary>\n\n```\nerror: unexpected lifetime `'a` in pattern\n --> src/lib.rs:1:26\n  |\n1 | fn f(_: impl FnOnce<'a>(&'a str) -> bool) {}\n  |                          ^^ help: remove the lifetime\n\nerror: expected one of `:` or `|`, found `->`\n --> src/lib.rs:1:34\n  |\n1 | fn f(_: impl FnOnce<'a>(&'a str) -> bool) {}\n  |                                  ^^ expected one of `:` or `|`\n\nerror: expected one of `)`, `+`, `,`, or `::`, found `(`\n --> src/lib.rs:1:24\n  |\n1 | fn f(_: impl FnOnce<'a>(&'a str) -> bool) {}\n  |                        ^\n  |                        |\n  |                        expected one of `)`, `+`, `,`, or `::`\n  |                        help: missing `,`\n\nerror[E0261]: use of undeclared lifetime name `'a`\n --> src/lib.rs:1:21\n  |\n1 | fn f(_: impl FnOnce<'a>(&'a str) -> bool) {}\n  |                     ^^ undeclared lifetime\n  |\n  = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\nhelp: consider making the bound lifetime-generic with a new `'a` lifetime\n  |\n1 | fn f(_: impl for<'a> FnOnce<'a>(&'a str) -> bool) {}\n  |              +++++++\nhelp: consider introducing lifetime `'a` here\n  |\n1 | fn f<'a>(_: impl FnOnce<'a>(&'a str) -> bool) {}\n  |     ++++\n\nerror[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n --> src/lib.rs:1:14\n  |\n1 | fn f(_: impl FnOnce<'a>(&'a str) -> bool) {}\n  |              ^^^^^^^^^^ help: use parenthetical notation instead: `FnOnce() -> ()`\n  |\n  = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n\nerror[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n --> src/lib.rs:1:14\n  |\n1 | fn f(_: impl FnOnce<'a>(&'a str) -> bool) {}\n  |              ^^^^^^---- help: remove these generics\n  |              |\n  |              expected 0 lifetime arguments\n\nerror[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n --> src/lib.rs:1:14\n  |\n1 | fn f(_: impl FnOnce<'a>(&'a str) -> bool) {}\n  |              ^^^^^^ expected 1 generic argument\n  |\nhelp: add missing generic argument\n  |\n1 | fn f(_: impl FnOnce<'a, Args>(&'a str) -> bool) {}\n  |                       ++++++\n```\n\n</details>\n\nwhen instead we could special-case this and emit a single (or at least fewer) diagnostic that suggests the following:\n\n```patch\n- impl FnOnce<'a>(&'a str) -> bool\n+ impl for<'a> FnOnce(&'a str) -> bool\n```\n\n---\n\nIf the bound in not inside `impl Trait`, like in:\n\n```rust\nfn f<F>(_: F) where F: FnOnce<'a>(&'a str) -> bool {}\n```\n\nwe currently emit the following:\n\n```\nerror: expected one of `+`, `,`, `::`, or `{`, found `(`\n --> src/lib.rs:1:34\n  |\n1 | fn f<F>(_: F) where F: FnOnce<'a>(&'a str) -> bool {}\n  |                                  ^ expected one of `+`, `,`, `::`, or `{`\n\n```\n\nwhich is less verbose for sure but still, we should provide the same suggestion I propose above.\n\nRelated issue: #103487.\n\n@rustbot label A-parser A-suggestion-diagnostics D-newcomer-roadblock\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"ohno418\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103490/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103490/timeline", "performed_via_github_app": null, "state_reason": "completed"}