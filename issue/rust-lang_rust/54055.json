{"url": "https://api.github.com/repos/rust-lang/rfcs/issues/2770", "repository_url": "https://api.github.com/repos/rust-lang/rfcs", "labels_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2770/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2770/comments", "events_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2770/events", "html_url": "https://github.com/rust-lang/rfcs/issues/2770", "id": 496718138, "node_id": "MDU6SXNzdWU0OTY3MTgxMzg=", "number": 2770, "title": "Allow \"ABI agnostic\" generics in FFI imports.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211667886, "node_id": "MDU6TGFiZWwyMTE2Njc4ODY=", "url": "https://api.github.com/repos/rust-lang/rfcs/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language subteam, which will review and decide on the RFC."}, {"id": 1137041149, "node_id": "MDU6TGFiZWwxMTM3MDQxMTQ5", "url": "https://api.github.com/repos/rust-lang/rfcs/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "FFI related proposals."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-08T11:52:11Z", "updated_at": "2019-09-26T14:14:16Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "For example, a C library might have the following API:\r\n```rust\r\n// All examples below assume these two types.\r\nextern \"C\" {\r\n    type Foo;\r\n    type Bar;\r\n}\r\n```\r\n```rust\r\nextern \"C\" {\r\n    fn foo_each_bar(\r\n        foo: *mut Foo,\r\n        callback_data: *mut c_void,\r\n        callback: unsafe extern \"C\" fn(*mut c_void, *mut Bar),\r\n    );\r\n}\r\n```\r\nHowever, the `c_void` pointee makes it harder to use (having to cast to and from `*mut c_void`) and more error-prone (having no real type safety other than \"it's a raw pointer and unsafe to deref\").\r\n\r\nWe could, instead, allow this definition:\r\n```rust\r\nextern \"C\" {\r\n    fn foo_each_bar<T>(\r\n        foo: *mut Foo,\r\n        callback_data: *mut T,\r\n        callback: unsafe extern \"C\" fn(*mut T, *mut Bar),\r\n    );\r\n}\r\n```\r\nThis is valid because we can *fully compute* the call ABI for `foo_each_bar::<T>` *without knowing `T`* (and this is something `rustc` has been able to do independently of LLVM for a while now).\r\nIf, e.g. `<T>` is replaced with `<T: ?Sized>`, the definition would be disallowed, since the layout of `*mut T` would then depend on the choice of `T`, as opposed to always being a pointer scalar.\r\n\r\nIf that last example works, we can also combine it with Rust references:\r\n```rust\r\nextern \"C\" {\r\n    fn foo_each_bar<T>(\r\n        foo: &Foo,\r\n        callback_data: &mut T,\r\n        callback: extern \"C\" fn(&mut T, &Bar),\r\n    );\r\n}\r\n```\r\nNote how the callback no longer needs to be unsafe (since it doesn't take raw pointers)!\r\nAn adapter for a closure being used as the callback can be as simple as:\r\n```rust\r\nextern \"C\" fn callback(f: &mut impl FnMut(&Bar), bar: &Bar) {\r\n    f(bar);\r\n}\r\n```\r\n(or even just `|f, bar| f(bar)` if we start coercing closures to non-Rust-ABI `fn` pointers)\r\n\r\ncc @rust-lang/compiler ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rfcs/issues/2770/reactions", "total_count": 13, "+1": 9, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 4, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2770/timeline", "performed_via_github_app": null, "state_reason": null}