{"url": "https://api.github.com/repos/rust-lang/rust/issues/107460", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107460/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107460/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107460/events", "html_url": "https://github.com/rust-lang/rust/issues/107460", "id": 1561856265, "node_id": "I_kwDOAAsO6M5dGAkJ", "number": 107460, "title": "Tracking Issue for attributes changing \"Minimal Complete Definition\" of a trait", "user": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2023-01-30T06:58:23Z", "updated_at": "2023-05-11T14:45:54Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nNOTE: For library features, please use the \"Library Tracking Issue\" template instead.\r\n\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\n<!-- This is a tracking issue for the RFC \"XXX\" (rust-lang/rfcs#NNN).\r\nThe feature gate for the issue is `#![feature(FFF)]`. -->\r\n\r\nThis is a tracking issue for attributes changing \"Minimal Complete Definition\" of a trait. \"Minimal Complete Definition\" is effectively a set of rules you need to follow (by implementing items of the trait) in order for a trait implementation to be \"Complete\" (and compile). Normally there is only one rule \u2014 implement all items that do not have defaults. However, sometimes it is meaningful to add additional restrictions.\r\n\r\nAs a simple example consider a trait with functions `equal` and `not_equal`, both of them can be implemented as `!the_other_function(...)`, __but only if the other one has a meaningful implementation__. Thus, it may be beneficial for the library design to make Minimal Complete Definition be \"you must implement at least one of `equal` and `not equal`\".\r\n\r\nA more realistic example would probably be performance related \u2014 one function is easier to implement, while the other theoretically allows a more performant implementation (see `Read::{read, read_buf}`).\r\n\r\n### Current status\r\n\r\nThis is currently implemented as an internal unstable rustc attribute `#[rustc_must_implement_one_of]`. It accepts a list of identifiers of trait items and adds a requirement that **at least one** of the items from the list is implemented. A usage example:\r\n\r\n```rust\r\n// `read` and `read_buf` are mutually recursive, it would be bad to implement neither\r\n#[rustc_must_implement_one_of(read, read_buf)]\r\npub trait Read {\r\n    fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\r\n        let mut buf = ReadBuf::new(buf);\r\n        self.read_buf(&mut buf)?;\r\n        Ok(buf.filled_len())\r\n    }\r\n\r\n    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> {\r\n        default_read_buf(|b| self.read(b), buf)\r\n    }\r\n}\r\n\r\nimpl Read for Ty0 {} \r\n//^ This will fail to compile even though all `Read` methods have default implementations\r\n\r\n// Both of these will compile just fine\r\nimpl Read for Ty1 {\r\n    fn read(&mut self, buf: &mut [u8]) -> Result<usize> { /* ... */ }\r\n}\r\nimpl Read for Ty2 {\r\n    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> { /* ... */ }\r\n}\r\n```\r\n\r\nIt is hopefully not the final form of the attribute, but just a \"MVP\". Some ideas that we might want to explore in the future:\r\n- A way to specify multiple sets of items (i.e. `a` is mutually recursive with `b`, `c` is mutually recursive with `d`, so MCD is `(a | b) & (c | d)`)\r\n- Add support for non-function items (recursive constants? is this useful?)\r\n- Consider if the trait-level attribute is a good solution\r\n  - Would something like item-level `#[requires(...)]` be easier to use/reason about?\r\n- Iterate on rustdoc output\r\n- Consider how we can support more complicated cases like the `Iterator`, where a lot of methods can be implemented in terms of each other\r\n  - Would it make sense to have multiple default implementations of an item and choose one of them depending on whatever another item is implemented?\r\n- Write an RFC (!)\r\n\r\n### Stability\r\n\r\nWhile the attribute itself is very unstable and \"MVP\", we can still use it in stable and unstable APIs, if we are sure that this is something we wish to support in the future. Thus, we need to be able to control the stability of default implementations (to be able to test if we even need to change MCD of a trait, for example).\r\n\r\nFor this we have 2 tools. We can either require an unstable method (`#[rustc_must_implement_one_of(something_stable, something_unstable)]`, we can add a default implementation to `something_stable` without worrying \u2014 to use the default implementation one would need to opt-in into unstable feature to implement `something_unstable`), **or** use the `#[rustc_default_body_unstable]` attribute.\r\n\r\n`#[rustc_default_body_unstable]` attribute, as with any other stability attributes, allows to set a feature gate to using a default body. For example:\r\n```rust\r\n// in std\r\npub trait Trait {\r\n    #[rustc_default_body_unstable(feature = \"feat\", isssue = \"none\")]\r\n    fn item() {}\r\n}\r\n```\r\n```rust\r\n// in a user crate\r\n\r\nimpl Trait for Type {} // <-- does not provide an `item` implementation, so it uses the default one\r\n//~^ error: not all trait items implemented, missing: `item`\r\n//~| note: default implementation of `item` is unstable\r\n//~| note: use of unstable library feature 'feat'\r\n//~| help: add `#![feature(constant_default_body)]` to the crate attributes to enable\r\n\r\n// this is fine\r\nimpl Trait for AnotherType {\r\n    fn item() { println!(\"hehe\"); }\r\n}\r\n```\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [x] Implement an MVP\r\n- [ ] Write an RFC\r\n- [ ] Implement the RFC\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\nSee the \"Current status\".\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n\r\n- https://github.com/rust-lang/rust/pull/92164\r\n- https://github.com/rust-lang/rust/pull/93386\r\n- https://github.com/rust-lang/rust/pull/96478\r\n- https://github.com/rust-lang/rust/pull/99235\r\n- https://github.com/rust-lang/rust/pull/105506\r\n\r\n### (potential) Uses\r\n\r\n- https://github.com/rust-lang/rust/pull/106643", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107460/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107460/timeline", "performed_via_github_app": null, "state_reason": null}