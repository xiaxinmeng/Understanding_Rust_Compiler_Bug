{"url": "https://api.github.com/repos/rust-lang/rust/issues/95059", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95059/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95059/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95059/events", "html_url": "https://github.com/rust-lang/rust/issues/95059", "id": 1173017509, "node_id": "I_kwDOAAsO6M5F6tOl", "number": 95059, "title": "DWARF debug info generated for C-style enums breaks assumptions of C/C++ tooling", "user": {"login": "jblazquez", "id": 5482684, "node_id": "MDQ6VXNlcjU0ODI2ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5482684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jblazquez", "html_url": "https://github.com/jblazquez", "followers_url": "https://api.github.com/users/jblazquez/followers", "following_url": "https://api.github.com/users/jblazquez/following{/other_user}", "gists_url": "https://api.github.com/users/jblazquez/gists{/gist_id}", "starred_url": "https://api.github.com/users/jblazquez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jblazquez/subscriptions", "organizations_url": "https://api.github.com/users/jblazquez/orgs", "repos_url": "https://api.github.com/users/jblazquez/repos", "events_url": "https://api.github.com/users/jblazquez/events{/privacy}", "received_events_url": "https://api.github.com/users/jblazquez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-03-17T23:18:11Z", "updated_at": "2022-03-23T01:43:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Rust compiler generates DWARF debug information for enums in several different ways. For [certain types of enums](https://github.com/rust-lang/rust/blob/9580a7115d2d75514f0b329a29fafaa3796bd950/compiler/rustc_codegen_ssa/src/debuginfo/mod.rs#L13) the compiler generates debug information that resembles that of a plain C/C++ `enum` by using [`DW_TAG_enumeration_type`](https://github.com/rust-lang/rust/blob/9580a71/compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs#L79-L81). While this generally makes sense, it can cause problems with tooling that expects C/C++ semantics and can't handle debug information for an `enum` type that also has functions associated with it.\r\n\r\nIn particular, if a Rust C-like enum has an `impl` with some functions, and a codegen unit that calls one of those functions gets the function inlined, then the resulting DWARF debugging information contains a `DW_TAG_enumeration_type` entry with an inner `DW_TAG_subprogram` entry for the inlined function, which is something that I don't think any C or C++ compiler would ever generate.\r\n\r\nFor example, consider the following code:\r\n\r\n`lib.rs`\r\n\r\n```rust\r\nmod test;\r\n\r\npub enum Format {\r\n    Dwarf64 = 8,\r\n    Dwarf32 = 4,\r\n}\r\n\r\nimpl Format {\r\n    #[inline(never)]\r\n    pub fn new() -> Format {\r\n        Format::Dwarf64\r\n    }\r\n\r\n    #[inline(always)]\r\n    pub fn word_size(self) -> u8 {\r\n        match self {\r\n            Format::Dwarf32 => 4,\r\n            Format::Dwarf64 => 8,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`test.rs`\r\n\r\n```\r\npub fn test() -> u8 {\r\n    super::Format::new().word_size()\r\n}\r\n```\r\n\r\nCompile the above as follows:\r\n\r\n```\r\n$ rustc +stage1 lib.rs --crate-type lib --emit obj -C debuginfo=2 -C opt-level=z -C codegen-units=2 --target x86_64-unknown-linux-gnu\r\n```\r\n\r\nAnd inspect the resulting DWARF information:\r\n\r\n```\r\n$ llvm-dwarfdump --all lib.o\r\n\r\n0x0000000b: DW_TAG_compile_unit\r\n              DW_AT_producer\t(\"clang LLVM (rustc version 1.61.0-dev)\")\r\n              DW_AT_language\t(DW_LANG_Rust)\r\n              DW_AT_name\t(\"lib.rs\\\\@\\\\lib.e2d200f5-cgu.0\")\r\n              DW_AT_stmt_list\t(0x00000000)\r\n              DW_AT_comp_dir\t(\".\")\r\n              DW_AT_GNU_pubnames\t(0x01)\r\n              DW_AT_low_pc\t(0x0000000000000000)\r\n              DW_AT_high_pc\t(0x0000000000000003)\r\n\r\n0x0000002f:   DW_TAG_namespace\r\n                DW_AT_name\t(\"lib\")\r\n\r\n0x00000034:     DW_TAG_enumeration_type\r\n                  DW_AT_name\t(\"Format\")\r\n                  DW_AT_byte_size\t(0x01)\r\n                  DW_AT_alignment\t(1)\r\n\r\n0x0000003b:       DW_TAG_enumerator\r\n                    DW_AT_name\t(\"Dwarf64\")\r\n                    DW_AT_const_value\t(8)\r\n\r\n0x00000041:       DW_TAG_enumerator\r\n                    DW_AT_name\t(\"Dwarf32\")\r\n                    DW_AT_const_value\t(4)\r\n\r\n0x00000047:       DW_TAG_subprogram\r\n                    DW_AT_low_pc\t(0x0000000000000000)\r\n                    DW_AT_high_pc\t(0x0000000000000003)\r\n                    DW_AT_frame_base\t(DW_OP_reg7 RSP)\r\n                    DW_AT_MIPS_linkage_name\t(\"_ZN3lib6Format3new17h69583b444bb1ea9aE\")\r\n                    DW_AT_name\t(\"new\")\r\n                    DW_AT_decl_file\t(\"lib.rs\")\r\n                    DW_AT_decl_line\t(10)\r\n                    DW_AT_type\t(0x00000034 \"Format\")\r\n                    DW_AT_external\t(0x01)\r\n```\r\n\r\nThe existence of `DW_TAG_subprogram` under `DW_TAG_enumeration_type` here causes some third-party tooling that we rely on to be unable to process the debugging information.\r\n\r\nI'm not sure what the way forward should be here, so I'm looking for advice. While an `enum` with functions makes total sense in Rust, it's not something that C-family languages have, and the DWARF spec seems to cater primarily to those kinds of languages. Looking at the DWARF v5 spec, section **5.9 Enumeration Type Entries** doesn't preclude an `enum` type with functions, but the description clearly describes an enumeration with the semantics from C and C++.\r\n\r\nIt's not the end of the world for us if we need to maintain a custom `rustc` patch to make `wants_c_like_enum_debuginfo` always return `false`, which is an easy workaround for this issue, but I figured there might be more tooling out there that does not expect debugging info for enums to contain references to enum functions. Maybe extending `wants_c_like_enum_debuginfo` to also check if there are any `impl` blocks associated with the enum type, or reparenting the `DW_TAG_subprogram` so it's not under the `DW_TAG_enumeration_type` entry? Pinging @michaelwoerister in particular since you recently did some fantastic work refactoring the debuginfo code. This is not caused by your recent changes, but figured you would have some good insight here.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.61.0-dev\r\nbinary: rustc\r\ncommit-hash: unknown\r\ncommit-date: unknown\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.61.0-dev\r\nLLVM version: 13.0.0\r\n```\r\n\r\nThis was just rustc built off the latest commit in `master` as of time of writing.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95059/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95059/timeline", "performed_via_github_app": null, "state_reason": null}