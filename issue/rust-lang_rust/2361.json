{"url": "https://api.github.com/repos/rust-lang/rust/issues/2361", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/2361/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/2361/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/2361/events", "html_url": "https://github.com/rust-lang/rust/issues/2361", "id": 4444958, "node_id": "MDU6SXNzdWU0NDQ0OTU4", "number": 2361, "title": "Implement stack maps for unwinding", "user": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 17, "created_at": "2012-05-06T18:26:43Z", "updated_at": "2014-09-16T02:38:05Z", "closed_at": "2014-09-16T02:38:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This issue tracks implementation of stack maps in LLVM. The goal is to have stack maps working for unwinding for 0.3 or 0.4.\n\nThe idea is to use precise stack maps instead of landing pads to run destructors of unique pointers and resources during task failure. This will allow unwinding to work on Windows and should also lead to dramatic code size reduction. Unwinding performance should be slightly improved as well. Eventually this can be extended to support accurate tracing garbage collection for shared boxes (either as a backup for reference counting or in lieu of reference counting).\n\nThis requires fairly invasive changes to LLVM. All optimization passes will be turned off at first, and will be reenabled one by one. They should not be hard to reenable.\n\nAt the moment, I believe the LLVM steps needed here are:\n1. \u2611 Add a `llvm.gcregroot` intrinsic. Translate it in the fast instruction selector. This needs to be done during call lowering, to make sure that the register roots end up within the call sequence.\n2. \u2611 Add `llvm.gcregroot` intrinsics automatically after call sites based on the types of SSA values. This must be done very late in IR transformation, probably right around the `CodeGenPrepare` pass.\n3. \u2611 Lower `llvm.gcregroot` intrinsics properly in the fast instruction selector. This requires creating a new, fake `MachineInstr` that tracks GC roots and their address spaces.\n4. \u2611 Add infrastructure to the GC strategy class to support register roots.\n5. \u2611 Translate `llvm.gcroot` intrinsics in the fast instruction selector as well.\n6. \u2611 Add a generic GC strategy and metadata printer. We should be able to use this for Rust.\n7. \u2611 Track callee-saved registers in the GC metadata object. Update the generic GC strategy to record the locations of these registers.\n8. \u2611 Allow `getelementptr` instructions that reference an `alloca` instruction to be rooted with `llvm.gcroot`. This allows structs containing pointers to be rooted without complex type encoding schemes.\n9. \u2611 Implement an LLVM pass that automatically roots allocas that contain traceable pointers with `llvm.gcroot`, and uses the metadata field to track the locations of the pointers therein. (I have a patch for this that needs to be resurrected.)\n10. \u2611 Implement a pass in LLVM that computes liveness on the SSA graph. This used to be present in LLVM but was removed due to the lack of use and poor performance. It should be rewritten.\n11. \u2611 Using this new liveness pass, augment the `llvm.gcregroot` insertion pass to throw out dead register roots.\n12. \u2611 Modify the `llvm.gcregroot` insertion pass to root only pointer origins, not any derived pointers. Consider pointer origins and derived pointers a single value for the purposes of liveness.\n13. \u2610 Add support to the SelectionDAG-based instruction selector for GC register roots. This requires a new SDNode. We will need to ensure that it is inside the call sequence, so this requires changing the signature of `LowerCall` and/or `LowerCallTo`. Thus all targets will need to be updated.\n\nWe will eventually need to have a comprehensive LLVM-level test suite before all of this can be sent upstream.\n\nOn the `rustc` side, we will need to tag all shared and unique boxes with `addrspace(1)`. (This currently happens for shared boxes, but not for uniques.) Unique boxes will need to become self-describing; this is not necessary in theory, but in practice it helps the LLVM side of things if all that needs to be tracked for each virtual register is a single address space value. Additionally, we will need to use the `llvm.gcroot` intrinsics to root (a) every enum that contains shared pointers, unique pointers, or resources; and (b) every resource.\n\nIn the Rust runtime, we will need to implement the stack crawler. (I have a prototype of this written already.) We will then need to use it to locate all of the roots during unwinding and then run their destructors. This may require fixes to (or replacement of) the shape code.\n\nI intend to keep this issue up to date with the latest changes to our strategy here.\n", "closed_by": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/2361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/2361/timeline", "performed_via_github_app": null, "state_reason": "completed"}