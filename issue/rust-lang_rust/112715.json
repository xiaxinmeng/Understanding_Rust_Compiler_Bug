{"url": "https://api.github.com/repos/rust-lang/rust/issues/112715", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112715/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112715/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112715/events", "html_url": "https://github.com/rust-lang/rust/issues/112715", "id": 1761198413, "node_id": "I_kwDOAAsO6M5o-cFN", "number": 112715, "title": "Linker failure when global allocator overridden in `lib.rs`", "user": {"login": "mweber15", "id": 30441572, "node_id": "MDQ6VXNlcjMwNDQxNTcy", "avatar_url": "https://avatars.githubusercontent.com/u/30441572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mweber15", "html_url": "https://github.com/mweber15", "followers_url": "https://api.github.com/users/mweber15/followers", "following_url": "https://api.github.com/users/mweber15/following{/other_user}", "gists_url": "https://api.github.com/users/mweber15/gists{/gist_id}", "starred_url": "https://api.github.com/users/mweber15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mweber15/subscriptions", "organizations_url": "https://api.github.com/users/mweber15/orgs", "repos_url": "https://api.github.com/users/mweber15/repos", "events_url": "https://api.github.com/users/mweber15/events{/privacy}", "received_events_url": "https://api.github.com/users/mweber15/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1966910227, "node_id": "MDU6TGFiZWwxOTY2OTEwMjI3", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-prioritize", "name": "I-prioritize", "color": "e10c02", "default": false, "description": "Indicates that prioritization has been requested for this issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2023-06-16T19:22:54Z", "updated_at": "2023-06-20T17:33:16Z", "closed_at": "2023-06-20T15:52:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a project that overrides the global allocator in `lib.rs`, and recently noticed that I can no longer link the test binary for my project with recent beta/nightly compilers. `cargo bisect-rustc` points to https://github.com/rust-lang/rust/commit/a2b1646c597329d0a25efa3889b66650f65de1de which certainly looks relevant. I reproduced the error using a slightly modified example from the global allocator documentation: https://doc.rust-lang.org/stable/std/alloc/trait.GlobalAlloc.html#example\r\n\r\nIf I move the allocator definition from `lib.rs` to `main.rs`, I no longer have a problem. Is that the right thing to do? If so, do I need to do anything else to make sure my tests use the desired allocator?\r\n\r\n### Code\r\n\r\nI tried this code:\r\n\r\n```rust\r\n// main.rs\r\nfn main() {\r\n    testalloc::f();\r\n}\r\n\r\n// lib.rs\r\nuse std::alloc::{GlobalAlloc, Layout};\r\nuse std::cell::UnsafeCell;\r\nuse std::ptr::null_mut;\r\nuse std::sync::atomic::{\r\n    AtomicUsize,\r\n    Ordering::{Acquire, SeqCst},\r\n};\r\n\r\nconst ARENA_SIZE: usize = 128 * 1024;\r\nconst MAX_SUPPORTED_ALIGN: usize = 4096;\r\n#[repr(C, align(4096))] // 4096 == MAX_SUPPORTED_ALIGN\r\nstruct SimpleAllocator {\r\n    arena: UnsafeCell<[u8; ARENA_SIZE]>,\r\n    remaining: AtomicUsize, // we allocate from the top, counting down\r\n}\r\n\r\npub const NO_ALLOC_SHIM_IS_UNSTABLE: &str = \"__rust_no_alloc_shim_is_unstable\";\r\n#[global_allocator]\r\nstatic ALLOCATOR: SimpleAllocator = SimpleAllocator {\r\n    arena: UnsafeCell::new([0x55; ARENA_SIZE]),\r\n    remaining: AtomicUsize::new(ARENA_SIZE),\r\n};\r\n\r\nunsafe impl Sync for SimpleAllocator {}\r\n\r\nunsafe impl GlobalAlloc for SimpleAllocator {\r\n    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\r\n        let size = layout.size();\r\n        let align = layout.align();\r\n\r\n        // `Layout` contract forbids making a `Layout` with align=0, or align not power of 2.\r\n        // So we can safely use a mask to ensure alignment without worrying about UB.\r\n        let align_mask_to_round_down = !(align - 1);\r\n\r\n        if align > MAX_SUPPORTED_ALIGN {\r\n            return null_mut();\r\n        }\r\n\r\n        let mut allocated = 0;\r\n        if self\r\n            .remaining\r\n            .fetch_update(SeqCst, SeqCst, |mut remaining| {\r\n                if size > remaining {\r\n                    return None;\r\n                }\r\n                remaining -= size;\r\n                remaining &= align_mask_to_round_down;\r\n                allocated = remaining;\r\n                Some(remaining)\r\n            })\r\n            .is_err()\r\n        {\r\n            return null_mut();\r\n        };\r\n        self.arena.get().cast::<u8>().add(allocated)\r\n    }\r\n    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\r\n}\r\n\r\npub fn f() {\r\n    let _s = format!(\"allocating a string!\");\r\n    let currently = ALLOCATOR.remaining.load(Acquire);\r\n    println!(\"allocated so far: {}\", ARENA_SIZE - currently);\r\n}\r\n\r\n#[cfg(test)]\r\nmod test {}\r\n```\r\n\r\nI expected to see this happen: \r\n```\r\n$ cargo t\r\n   Compiling testalloc v0.1.0 (/home/matt/src/testalloc)\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.36s\r\n```\r\n\r\nInstead, this happened:\r\n```\r\n$ cargo t\r\n   Compiling testalloc v0.1.0 (/home/matt/src/testalloc)\r\nerror: linking with `cc` failed: exit status: 1\r\n```\r\n\r\n### Version it worked on\r\n\r\nsearched nightlies: from nightly-2023-05-25 to nightly-2023-06-16\r\nregressed nightly: nightly-2023-05-26\r\nsearched commit range: https://github.com/rust-lang/rust/compare/c373194cb6d882dc455a588bcc29c92a96b50252...a2b1646c597329d0a25efa3889b66650f65de1de\r\nregressed commit: https://github.com/rust-lang/rust/commit/a2b1646c597329d0a25efa3889b66650f65de1de\r\n\r\n<details>\r\n<summary>bisected with <a href='https://github.com/rust-lang/cargo-bisect-rustc'>cargo-bisect-rustc</a> v0.6.6</summary>\r\n\r\n\r\nHost triple: x86_64-unknown-linux-gnu\r\nReproduce with:\r\n```bash\r\ncargo bisect-rustc -- test\r\n```\r\n</details>\r\n\r\n@rustbot modify labels: +regression-from-stable-to-beta -regression-untriaged", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112715/timeline", "performed_via_github_app": null, "state_reason": "completed"}