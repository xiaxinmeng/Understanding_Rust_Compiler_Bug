{"url": "https://api.github.com/repos/rust-lang/rust/issues/52150", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52150/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52150/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52150/events", "html_url": "https://github.com/rust-lang/rust/issues/52150", "id": 339197461, "node_id": "MDU6SXNzdWUzMzkxOTc0NjE=", "number": 52150, "title": "Vec's swap_remove is needlessly slow", "user": {"login": "orlp", "id": 202547, "node_id": "MDQ6VXNlcjIwMjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/202547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orlp", "html_url": "https://github.com/orlp", "followers_url": "https://api.github.com/users/orlp/followers", "following_url": "https://api.github.com/users/orlp/following{/other_user}", "gists_url": "https://api.github.com/users/orlp/gists{/gist_id}", "starred_url": "https://api.github.com/users/orlp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orlp/subscriptions", "organizations_url": "https://api.github.com/users/orlp/orgs", "repos_url": "https://api.github.com/users/orlp/repos", "events_url": "https://api.github.com/users/orlp/events{/privacy}", "received_events_url": "https://api.github.com/users/orlp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-08T05:05:13Z", "updated_at": "2021-10-18T17:02:57Z", "closed_at": "2018-07-09T06:39:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently `Vec`'s `swap_remove` has the following implementation:\r\n\r\n```rust\r\npub fn swap_remove(&mut self, index: usize) -> T {\r\n    let length = self.len();\r\n    self.swap(index, length - 1);\r\n    self.pop().unwrap()\r\n}\r\n```\r\n\r\nThis is needlessly slow. The `swap` does a bounds check, and then `pop` does\r\nanother bounds check that never fails. Furthermore, there is an actual swap\r\nright before the pop - this results in a lot useless moves that don't (seem to)\r\nget optimized out.\r\n\r\nIt's possible to write a safe implementation that only does one bounds check and\r\nuses two moves with a little unsafe code:\r\n\r\n```rust\r\npub fn swap_remove(&mut self, index: usize) -> T {    \r\n    unsafe {\r\n        // Singular bounds check on index ensures safety.\r\n        let hole: *mut T = &mut self[index];\r\n        let value = ptr::read(hole);\r\n\r\n        // Since the bounds check on index succeeded we know back >= 0.\r\n        let back = self.len() - 1;\r\n        ptr::copy(self.get_unchecked(back), hole, 1);\r\n        self.set_len(back);\r\n        value        \r\n    }\r\n}\r\n```\r\n\r\nI found it quite hard to benchmark this, but the following benchmark showed on\r\nmy machine the new implementation to be faster:\r\n\r\n```rust\r\n#![feature(test)]\r\nextern crate test;\r\n\r\npub fn swap_remove_opt<T>(v: &mut Vec<T>, idx: usize) -> T {    \r\n    unsafe {\r\n        // Singular bounds check on idx ensures safety.\r\n        let hole: *mut T = &mut v[idx];\r\n        let value = std::ptr::read(hole);\r\n        let back = v.len() - 1;\r\n        std::ptr::copy(v.get_unchecked(back), hole, 1);\r\n        v.set_len(back);\r\n        value        \r\n    }\r\n}\r\n\r\n// Tiny LCG RNG.\r\nfn rng_next(s: u64) -> u64 {\r\n    6364136223846793005 * s  + 1\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use test::Bencher;\r\n    \r\n    #[bench]\r\n    fn bench_1000_overhead(b: &mut Bencher) {\r\n        let mut rng = 43;\r\n        let v: Vec<usize> = (0..1024).collect();\r\n        b.iter(|| {\r\n            let v = v.clone();\r\n            for _ in 0..512 {\r\n                rng = rng_next(rng);\r\n                let idx = (rng >> 32) % 512;\r\n                test::black_box(idx as usize);\r\n            }\r\n            v\r\n        })\r\n    }\r\n\r\n    #[bench]\r\n    fn bench_vec_1000_swap_remove(b: &mut Bencher) {\r\n        let mut rng = 43;\r\n        let v: Vec<usize> = (0..1024).collect();\r\n        b.iter(|| {\r\n            let mut v = v.clone();\r\n            for _ in 0..512 {\r\n                rng = rng_next(rng);\r\n                let idx = (rng >> 32) % 512;\r\n                test::black_box(v.swap_remove(idx as usize));\r\n            }\r\n            v\r\n        })\r\n    }\r\n\r\n    #[bench]\r\n    fn bench_vec_1000_swap_remove_opt(b: &mut Bencher) {\r\n        let mut rng = 43;\r\n        let v: Vec<usize> = (0..1024).collect();\r\n        b.iter(|| {\r\n            let mut v = v.clone();\r\n            for _ in 0..512 {\r\n                rng = rng_next(rng);\r\n                let idx = (rng >> 32) % 512;\r\n                test::black_box(swap_remove_opt(&mut v, idx as usize));\r\n            }\r\n            v\r\n        })\r\n    }\r\n}\r\n```\r\n\r\n```\r\ntest tests::bench_1000_overhead            ... bench:       1,049 ns/iter (+/- 16)\r\ntest tests::bench_vec_1000_swap_remove     ... bench:       1,306 ns/iter (+/- 122)\r\ntest tests::bench_vec_1000_swap_remove_opt ... bench:       1,193 ns/iter (+/- 104)\r\n```\r\n\r\nAs I said, it's quite hard to benchmark - lots of overhead and a small difference to be observed. Regardless, running multiple times show consistently `swap_remove_opt` to be faster.\r\n\r\nAlthough I can't run the above benchmark on stable due to `test` being unstable,\r\nI conjecture that on stable Rust the difference is much bigger. A quick look at\r\nthe disassembly should show why: https://godbolt.org/g/fU4Edu\r\n\r\nNightly fares a lot better in the disassembly but as seen above still loses out in the benchmark.\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52150/reactions", "total_count": 4, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52150/timeline", "performed_via_github_app": null, "state_reason": "completed"}