{"url": "https://api.github.com/repos/rust-lang/rust/issues/86377", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86377/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86377/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86377/events", "html_url": "https://github.com/rust-lang/rust/issues/86377", "id": 923051074, "node_id": "MDU6SXNzdWU5MjMwNTEwNzQ=", "number": 86377, "title": "Poor diagnostics for associated type mismatch on inherent method.", "user": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-06-16T20:11:50Z", "updated_at": "2023-01-11T04:16:38Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ecde3a7b167daae7d50bc0e6b9087b8c)):\r\n\r\n```rust\r\n// These are simplifications of the tower traits by the same name:\r\n\r\npub trait Service<Request> {\r\n    type Response;\r\n}\r\n\r\npub trait Layer<C> {\r\n    type Service;\r\n}\r\n\r\n// Any type will do here:\r\n\r\npub struct Req;\r\npub struct Res;\r\n\r\n// This is encoding a trait alias.\r\n\r\npub trait ParticularService:\r\n    Service<Req, Response = Res> {\r\n}\r\n\r\nimpl<T> ParticularService for T\r\nwhere\r\n    T: Service<Req, Response = Res>,\r\n{\r\n}\r\n\r\n// This is also a trait alias.\r\n// The weird = <Self as ...> bound is there so that users of the trait do not\r\n// need to repeat the bounds. See https://github.com/rust-lang/rust/issues/20671\r\n// for context, and in particular the workaround in:\r\n// https://github.com/rust-lang/rust/issues/20671#issuecomment-529752828\r\n\r\npub trait ParticularServiceLayer<C>: Layer<C, Service = <Self as ParticularServiceLayer<C>>::Service> {\r\n    type Service: ParticularService;\r\n}\r\n\r\nimpl<T, C> ParticularServiceLayer<C> for T\r\nwhere\r\n    T: Layer<C>,\r\n    T::Service: ParticularService,\r\n{\r\n    type Service = T::Service;\r\n}\r\n\r\n// These are types that implement the traits that the trait aliases refer to.\r\n// They should also implement the alias traits due to the blanket impls.\r\n\r\nstruct ALayer<C>(C);\r\nimpl<C> Layer<C> for ALayer<C> {\r\n    type Service = AService;\r\n}\r\n\r\nstruct AService;\r\nimpl Service<Req> for AService {\r\n    // However, AService does _not_ meet the blanket implementation,\r\n    // since its Response type is bool, not Res as it should be.\r\n    type Response = bool;\r\n}\r\n\r\n// This is a wrapper type around ALayer that uses the trait alias\r\n// as a way to communicate the requirements of the provided types.\r\nstruct Client<C>(C);\r\n\r\n// The method and the free-standing function below both have the same bounds.\r\n\r\nimpl<C> Client<C>\r\nwhere\r\n    ALayer<C>: ParticularServiceLayer<C>,\r\n{\r\n    fn check(&self) {}\r\n}\r\n\r\nfn check<C>(_: C) where ALayer<C>: ParticularServiceLayer<C> {}\r\n\r\n// But, they give very different error messages.\r\n\r\n#[allow(dead_code)]\r\nfn test() {\r\n    // This gives a very poor error message that does nothing to point the user\r\n    // at the underlying cause of why the types involved do not meet the bounds.\r\n    Client(()).check();\r\n    \r\n    // This gives a good(ish) error message that points the user at _why_ the\r\n    // bound isn't met, and thus how they might fix it.\r\n    check(());\r\n}\r\n```\r\n\r\nThe current output (for the indicated bad case) is:\r\n\r\n```\r\nerror[E0599]: the method `check` exists for struct `Client<()>`, but its trait bounds were not satisfied\r\n  --> src/lib.rs:82:16\r\n   |\r\n49 | struct ALayer<C>(C);\r\n   | -------------------- doesn't satisfy `ALayer<()>: ParticularServiceLayer<()>`\r\n...\r\n63 | struct Client<C>(C);\r\n   | -------------------- method `check` not found for this\r\n...\r\n82 |     Client(()).check();\r\n   |                ^^^^^ method cannot be called on `Client<()>` due to unsatisfied trait bounds\r\n   |\r\n   = note: the following trait bounds were not satisfied:\r\n           `ALayer<()>: ParticularServiceLayer<()>`\r\n```\r\n\r\nIdeally the output should look like (the current nightly output for the indicated good case):\r\n\r\n```\r\nerror[E0271]: type mismatch resolving `<AService as Service<Req>>::Response == Res`\r\n  --> src/lib.rs:82:5\r\n   |\r\n69 |     ALayer<C>: ParticularServiceLayer<C>,\r\n   |     ------------------------------------ required by this bound in `impl<C> Client<C>`\r\n...\r\n82 |     Client(()).check();\r\n   |                ^^^^^^^ expected struct `Res`, found `bool`\r\n   |\r\nnote: required because of the requirements on the impl of `ParticularService` for `AService`\r\n  --> src/lib.rs:22:9\r\n   |\r\n22 | impl<T> ParticularService for T\r\n   |         ^^^^^^^^^^^^^^^^^     ^\r\nnote: required because of the requirements on the impl of `ParticularServiceLayer<_>` for `ALayer<_>`\r\n  --> src/lib.rs:38:12\r\n   |\r\n38 | impl<T, C> ParticularServiceLayer<C> for T\r\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^     ^\r\n```\r\n\r\nActually pointing at the associated type and where the requirement that it be `Res` comes from would also be helpful to make it perfect.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86377/timeline", "performed_via_github_app": null, "state_reason": null}