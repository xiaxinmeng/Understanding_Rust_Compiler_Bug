{"url": "https://api.github.com/repos/rust-lang/rust/issues/92521", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92521/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92521/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92521/events", "html_url": "https://github.com/rust-lang/rust/issues/92521", "id": 1092588193, "node_id": "I_kwDOAAsO6M5BH5Kh", "number": 92521, "title": "Tracking Issue for `const_box`", "user": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1769279746, "node_id": "MDU6TGFiZWwxNzY5Mjc5NzQ2", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_trait_impl", "name": "F-const_trait_impl", "color": "f9c0cc", "default": false, "description": "`#![feature(const_trait_impl)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-01-03T15:09:02Z", "updated_at": "2023-03-24T16:24:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature gate: `#![feature(const_box)]`\r\n\r\nThis is a tracking issue for implementing const `Box<T, A>` methods.\r\n\r\n### Public API\r\n\r\n```rust\r\nimpl<T, A: Allocator> Box<T, A> {\r\n    pub const fn new_in(x: T, alloc: A) -> Self\r\n    where\r\n        A: ~const Allocator + ~const Drop;\r\n    pub const fn try_new_in(x: T, alloc: A) -> Result<Self, AllocError>\r\n    where\r\n        T: ~const Drop,\r\n        A: ~const Allocator + ~const Drop;\r\n    pub const fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A>\r\n    where\r\n        A: ~const Allocator + ~const Drop;\r\n    pub const fn try_new_uninit_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\r\n    where\r\n        A: ~const Allocator + ~const Drop;\r\n    pub const fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A>\r\n    where\r\n        A: ~const Allocator + ~const Drop;\r\n    pub const fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\r\n    where\r\n        A: ~const Allocator + ~const Drop;\r\n    pub const fn pin_in(x: T, alloc: A) -> Pin<Self>\r\n    where\r\n        A: 'static,\r\n        A: 'static + ~const Allocator + ~const Drop,\r\n    pub const fn into_boxed_slice(boxed: Self) -> Box<[T], A>;\r\n    pub const fn into_inner(boxed: Self) -> T\r\n    where\r\n        Self: ~const Drop,\r\n}\r\n\r\nimpl<T, A: Allocator> Box<MaybeUninit<T>, A> {\r\n    pub const unsafe fn assume_init(self) -> Box<T, A>;\r\n    pub const fn write(mut boxed: Self, value: T) -> Box<T, A>;\r\n    pub const unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self;\r\n    pub const fn into_raw_with_allocator(b: Self) -> (*mut T, A);\r\n    pub const fn into_unique(b: Self) -> (Unique<T>, A);\r\n    pub const fn allocator(b: &Self) -> &A;\r\n    pub const fn leak<'a>(b: Self) -> &'a mut T\r\n    where\r\n        A: 'a;\r\n    pub const fn into_pin(boxed: Self) -> Pin<Self>\r\n    where\r\n        A: 'static;\r\n}\r\n\r\nimpl<T: ?Sized, A: Allocator> const From<Box<T, A>> for Pin<Box<T, A>>\r\nwhere\r\n    A: 'static;\r\nimpl<T: ?Sized, A: Allocator> const Deref for Box<T, A>;\r\nimpl<T: ?Sized, A: Allocator> const DerefMut for Box<T, A>;\r\nimpl<T: ?Sized, A: Allocator> const Unpin for Box<T, A> where A: 'static;\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #91884\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- None\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92521/reactions", "total_count": 4, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92521/timeline", "performed_via_github_app": null, "state_reason": null}