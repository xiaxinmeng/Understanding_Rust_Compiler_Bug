{"url": "https://api.github.com/repos/rust-lang/rust/issues/64609", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64609/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64609/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64609/events", "html_url": "https://github.com/rust-lang/rust/issues/64609", "id": 495840716, "node_id": "MDU6SXNzdWU0OTU4NDA3MTY=", "number": 64609, "title": "-C target-feature/-C target-cpu are unsound", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4288196623, "node_id": "LA_kwDOAAsO6M7_mLAP", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-abi", "name": "A-abi", "color": "f7e101", "default": false, "description": "Area: Concerning the \"application binary interface\" between functions."}, {"id": 5223550385, "node_id": "LA_kwDOAAsO6M8AAAABN1kNsQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-target-feature", "name": "A-target-feature", "color": "f7e101", "default": false, "description": "Area: Enabling/disabling target features like AVX, Neon, etc."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2019-09-19T14:35:24Z", "updated_at": "2023-03-03T22:43:15Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In a nutshell, target-features are part of the call ABI, but Rust does not take that into account, and that's the underlying issue causing #63466, #53346, and probably others (feel free to refer them here).\r\n\r\nFor example, for an x86 target without SSE linking these two crates shows the issue:\r\n\r\n```rust\r\n// crate A\r\npub fn foo(x: f32) -> f32 { x }\r\n\r\n// crate B\r\nextern \"Rust\" {\r\n     #[target_feature(enable = \"sse\")]  fn foo(x: f32) -> f32;\r\n}\r\nunsafe { assert_eq!(foo(42.0), 42.0) }; // UB\r\n```\r\n\r\nThe ABI of `B::foo` is ` \"sse\" \"Rust\"` but the ABI defined in `A::foo` is just `\"Rust\"`, no SSE, since the SSE feature is not enabled globally. That's an ABI mismatch and results in UB of the form [\"calling a function with an incompatible call ABI\"](https://github.com/rust-lang-nursery/reference/blob/master/src/behavior-considered-undefined.md). For this particular case, `B::foo` expects the `f32` in an xmm register, while `A::foo` expects it in an x87 register, so the roundtrip of `42.0` via `foo` will return garbage.\r\n\r\nNow, this example is not unsound, because it requires an incompatible function declaration, and unsafe code to call it - and arguably, the `unsafe` asserts that the declaration is, at least correct (note: we forbid assigning `#[target_feature]` functions to function pointers and only allow enabling features and using white-listed features because of this).\r\n\r\nHowever, you can cause the exact same issue, but on a larger scale, by using `-C target-feature`/`-C target-cpu` to change the features that a Rust crate assumes the `\"Rust\"` ABI has, without any unsafe code: \r\n\r\n```rust\r\n// crate A: compiled without -C target-feature\r\npub fn foo(x: f32) -> f32 { x }\r\n\r\n// crate B: compiled with -C target-feature=+sse\r\n// this is now safe Rust code:\r\nassert_eq!(A::foo(42.0), 42.0) }; // UB\r\n```\r\n\r\nSo that's the soundness bug. Safe Rust can exhibit [undefined behavior of the form \"calling a function with an incompatible call ABI\"](https://github.com/rust-lang-nursery/reference/blob/master/src/behavior-considered-undefined.md).\r\n\r\nThis is an issue, because when `RUSTFLAGS=\"-C target-cpu=native\"` is used, not all crates in the dependency graph are compiled with those features. In particular, `libstd` and its dependencies are not recompiled at all, so their \"Rust\" ABI might be different than what the rest of the dependency graph uses. `-C target-feature` also allows disabling features, `-C target-feature/target-cpu` allow enabling/disabling features that are not white-listed (e.g. avx512f if your CPU supports it can be enabled using `-C target-feature` and will be enabled using `-C target-cpu=skylake` or `=native`even though the `avx512f` feature is unstable).\r\n\r\nHow important is fixing this ? I'd say moderately important, because many features are compatible. For example, the `\"sse2\" \"Rust\"` ABI has the same calling convention as the `\"sse3\" \"Rust\"`, so even though the call ABIs aren't identical, they are compatible. That is, this bug is unlikely to cause issues in practice, unless you happen to end up with two crates where the difference in target features changes the ABI. \r\n\r\nI think that rustc should definitely detect that the ABIs are incompatible, and at least, error at compile-time when this happen, explaining what went wrong, which target-features differed in an incompatible way, etc.\r\n\r\nWe could make such code work, e.g., by just treating target-features as part of the calling convention, and following the calling convention properly. I don't think fixing this would be useful for people doing `-C target-feature` globally, because when that happens, chances are that they wanted to compile their whole binary in a specific way, as opposed to having different parts of the binary somehow interoperate.\r\n\r\nIt would however be useful for improving how we currently handle SIMD vectors. For example, a vector types like f64x4 will be passed in different registers (2x 128-bit or 1x 256-bit) depending on whether sse or avx are available. We currently \"solve\" this problem by always passing vectors to functions indirectly by memory. That is, on the caller side we spill the vector registers into the stack, create a pointer to it, pass it to the callee, and then the callee loads the content into the appropriate vectors. Since target-features are not part of the calling convention, we always do this, as opposed to, only when the calling convention is incompatible. So having target-features be part of the calling convention might be a way to improve that.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64609/reactions", "total_count": 10, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 6}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64609/timeline", "performed_via_github_app": null, "state_reason": null}