{"url": "https://api.github.com/repos/rust-lang/rust/issues/68190", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68190/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68190/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68190/events", "html_url": "https://github.com/rust-lang/rust/issues/68190", "id": 549209325, "node_id": "MDU6SXNzdWU1NDkyMDkzMjU=", "number": 68190, "title": "SystemV ABI Mismatch on x86 with a `repr(C) enum` for `extern \"C\"`/FFI functions.", "user": {"login": "sw17ch", "id": 95705, "node_id": "MDQ6VXNlcjk1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/95705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sw17ch", "html_url": "https://github.com/sw17ch", "followers_url": "https://api.github.com/users/sw17ch/followers", "following_url": "https://api.github.com/users/sw17ch/following{/other_user}", "gists_url": "https://api.github.com/users/sw17ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/sw17ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sw17ch/subscriptions", "organizations_url": "https://api.github.com/users/sw17ch/orgs", "repos_url": "https://api.github.com/users/sw17ch/repos", "events_url": "https://api.github.com/users/sw17ch/events{/privacy}", "received_events_url": "https://api.github.com/users/sw17ch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123110, "node_id": "MDU6TGFiZWwxMjMxMTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-linux", "name": "O-linux", "color": "6e6ec0", "default": false, "description": "Operating system: Linux"}, {"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}, {"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 55301991, "node_id": "MDU6TGFiZWw1NTMwMTk5MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86", "name": "O-x86", "color": "6e6ec0", "default": false, "description": "Target: x86 processors"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 15, "created_at": "2020-01-13T22:05:06Z", "updated_at": "2020-02-08T16:19:25Z", "closed_at": "2020-02-08T16:19:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# The Problem\r\n\r\nUsing the FFI, without `unsafe`, it's possible to get a segfault or incorrect results from defined behaviors (see https://github.com/rust-lang/rfcs/pull/2195 and https://github.com/rust-lang/rust/pull/46123) around non-C-like enumerations. I have only tested this on Linux with an `x86_64` processor. **I have reproduced these problems with both of gcc9 and clang8.** The problems are exhibited both on a recent rustc `master` and on rustc stable 1.40.0.\r\n\r\nI've written two tests against the `rust-lang/rust` repository that demonstrate the problems described later in this issue. They are here:\r\n\r\n1. [This is the test for returning enumerations by value that segfaults](https://github.com/sw17ch/rust/tree/78e2d62eca97788d99ddf7577d6ae06af0513ed3/src/test/run-make-fulldeps/return-non-c-like-enum)\r\n2. [This is the test for passing enumerations by value as arguments that fails assertions](https://github.com/sw17ch/rust/tree/78e2d62eca97788d99ddf7577d6ae06af0513ed3/src/test/run-make-fulldeps/arguments-non-c-like-enum)\r\n\r\nSide note: the [language reference](https://doc.rust-lang.org/stable/reference/type-layout.html#reprc-enums) states that non-C-like enumerations have unspecified layout, but I believe that this is no longer true after merging #46123 when specifying a `repr` for the enumeration.\r\n\r\n## Reproducing a Segmentation Fault When Returning by Value\r\n\r\nGiven an enumeration like this:\r\n\r\n```rust\r\n#[repr(C,u8)]\r\npub enum OptionLikeType {\r\n\tOptionLikeSome(u64),\r\n\tOptionLikeNone,\r\n}\r\n```\r\n\r\nAnd an FFI function like this:\r\n\r\n```rust\r\n#[no_mangle]\r\npub extern \"C\" fn option_like_type_new(value: u64) -> OptionLikeType {\r\n    OptionLikeType::OptionLikeSome(value)\r\n}\r\n```\r\n\r\nAnd an invocation from C like this:\r\n\r\n```c\r\n// Types generated from OptionLikeType by cbindgen version 0.12.1\r\nenum OptionLikeType_Tag {\r\n  OptionLikeSome,\r\n  OptionLikeNone,\r\n};\r\ntypedef uint8_t OptionLikeType_Tag;\r\n\r\ntypedef struct {\r\n  uint64_t _0;\r\n} OptionLikeSome_Body;\r\n\r\ntypedef struct {\r\n  OptionLikeType_Tag tag;\r\n  union {\r\n    OptionLikeSome_Body option_like_some;\r\n  };\r\n} OptionLikeType;\r\n\r\nint main(int argc, char *argv[]) {\r\n  (void)argc; (void)argv;\r\n\r\n  printf(\"Create OptionLikeType by return value\\n\");\r\n  OptionLikeType olt = option_like_type_new(10);\r\n  assert(olt.tag == OptionLikeSome);\r\n  assert(olt.option_like_some._0 == 10);\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\nThe compiled C file linked against the Rust static library cause a segmentation fault:\r\n\r\n```\r\n$ gcc9 -ggdb3 -Wall -o test_return_option_by_value.bin test_return_option_by_value.c -Ltarget/debug -lrepro -ldl -lpthread\r\n$ ./test_return_option_by_value.bin\r\nCreate OptionLikeType by return value\r\nSegmentation fault (core dumped)\r\n```\r\n\r\n## Reproducing an Assertion Failure When Passing by Value\r\n\r\nGiven the same Rust `OptionLikeSome` type from above, and the same C type representation, define a Rust function that adds two options like this:\r\n\r\n```rust\r\n#[no_mangle]\r\npub extern \"C\" fn option_like_type_add(a: OptionLikeType, b: OptionLikeType) -> u64 {\r\n    use OptionLikeType::{OptionLikeSome, OptionLikeNone};\r\n    match (a,b) {\r\n        (OptionLikeSome(a), OptionLikeSome(b)) => a + b,\r\n        (OptionLikeSome(a), OptionLikeNone) => a,\r\n        (OptionLikeNone, OptionLikeSome(b)) => b,\r\n        _ => 0,\r\n    }\r\n}\r\n```\r\n\r\nThen define a C function that exercises it like this:\r\n\r\n```c\r\nint main(int argc, char *argv[]) {\r\n  (void)argc; (void)argv;\r\n  printf(\"Add two OptionLikeType instances by value\\n\");\r\n\r\n  OptionLikeType a = {.tag = OptionLikeSome, .option_like_some = { ._0 = 10 } };\r\n  OptionLikeType b = {.tag = OptionLikeSome, .option_like_some = { ._0 = 20 } };\r\n  \r\n  uint64_t r = option_like_type_add(a, b);\r\n  printf(\"a + b is %\" PRIu64 \", and is expected to be 30\\n\", r);\r\n  assert(r == 30);\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\nWhen running this C code, we get an unexpected result:\r\n\r\n```\r\nAdd two OptionLikeType instances by value\r\na + b is 4748609293, and is expected to be 30\r\ntest_add_option_by_value.bin: test_add_option_by_value.c:18: main: Assertion `r == 30' failed.\r\nAborted (core dumped)\r\n```\r\n\r\n## Other Notes\r\n\r\nReproduction is not limited to the exact shapes above. For example, the primitive type used in the `repr` does not seem to affect outcomes. `#[repr(C,u32)]` and `#[repr(C,u64)]` both exhibit the bugs.\r\n\r\n# Some Analysis\r\n\r\nI believe that Rust is internally consistent about how it passes these enumerations, but it seems to be in violation of the SystemV guidance on how to pass parameters. For example, calling the above extern functions from Rust does not exhibit the invalid behavior.\r\n\r\nFurthermore, for enumerations with larger representations, the bugs are also not present. For example, using two `u64` values in the `OptionLikeSome` definition prevents the crash or assertion failure from surfacing.\r\n\r\n## SystemV Requirements\r\n\r\nI received an enormous amount of help from @iximeow producing the following explanation.\r\n\r\nWhat appears to be occurring is that `rustc` expects the caller to allocate space on the caller's stack for the return value, and then expects the caller to pass a pointer to that location in a register. gcc and clang both expect to pass smaller structures as registers. What's also interesting is that rustc does the \"right thing\" for structs that should have an identical layout.\r\n\r\nHere's a comparison of the assembly generated for structs and enumerations that should have extremely similar layout: https://godbolt.org/z/Mo7cJ6. Notice how the initialization of an enumeration is being done on the caller's stack while the initialization of the struct is done entirely in registers.\r\n\r\nHere's very similar code, but in C: https://godbolt.org/z/CCxigj. Notice that neither of the C functions use the stack for initialization.\r\n\r\n@iximeow and I believe that the proper handling for the enumeration according to SystemV can be described as follows:\r\n\r\n* the enum is an aggregate of `{ u8, u64 }`\r\n* from [psABI-x86_64](https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI) section 3.2.3, The classification of aggregate (structures and arrays) and union types works as follows\r\n  *  Each field of an object is classified recursively so that always two fields are considered. The resulting class is calculated according to the classes of the fields in the eightbyte: ... \"(d)  If one of the classes is INTEGER, the result is the INTEGER.\"\r\n* so the elements of this aggregate are both INTEGER, barring other constraints.\r\n\r\nWhen passing this type as an argument:\r\n\r\n* If the class is INTEGER, the next available register of the sequence `%rdi`, `%rsi`, `%rdx`, `%rcx`, `%r8` and `%r9` is used\r\n* this is contrary to rustc's usage, passing a pointer to the enum, rather than its items directly.\r\n\r\nWhen returning this type:\r\n\r\n* If the class is INTEGER, the next available register of the sequence `%rax`, `%rdx` is used.\r\n* this is contrary to rustc's usage, passing a pointer to the enum as a hidden first parameter, then returning that pointer in rax.\r\n* this may explain why a larger aggregate does not express this bug - with three or more INTEGER elements, the aggregate no longer fits in return registers, and becomes MEMORY with the hidden-pointer-parameter semantics rustc uses for the two-item aggregate\r\n\r\n# Summary\r\nSomething seems to treat enumerations differently from similarly laid out structs, and treats the enumerations incorrectly when passing them across SystemV ABI boundaries.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68190/timeline", "performed_via_github_app": null, "state_reason": "completed"}