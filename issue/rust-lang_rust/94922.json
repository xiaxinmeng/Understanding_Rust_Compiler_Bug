{"url": "https://api.github.com/repos/rust-lang/rust/issues/94922", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94922/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94922/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94922/events", "html_url": "https://github.com/rust-lang/rust/issues/94922", "id": 1167797048, "node_id": "I_kwDOAAsO6M5Fmys4", "number": 94922, "title": "RangeInclusive<Integer>::sum Optimization Suggestion", "user": {"login": "Phosra", "id": 90156453, "node_id": "MDQ6VXNlcjkwMTU2NDUz", "avatar_url": "https://avatars.githubusercontent.com/u/90156453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phosra", "html_url": "https://github.com/Phosra", "followers_url": "https://api.github.com/users/Phosra/followers", "following_url": "https://api.github.com/users/Phosra/following{/other_user}", "gists_url": "https://api.github.com/users/Phosra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phosra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phosra/subscriptions", "organizations_url": "https://api.github.com/users/Phosra/orgs", "repos_url": "https://api.github.com/users/Phosra/repos", "events_url": "https://api.github.com/users/Phosra/events{/privacy}", "received_events_url": "https://api.github.com/users/Phosra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-03-14T02:09:41Z", "updated_at": "2022-10-06T20:48:52Z", "closed_at": "2022-10-06T20:47:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The idiomatic way to sum a range of integers from `a` up to `b` is simply `(a..=b).sum()`. Yet, this always emits suboptimal codegen, as LLVM cannot perfectly optimise this, yet slightly better mathematics can be employed to do the same, more efficiently.\r\n\r\nI suggest that specialisation be applied to range inclusive for integer elements where `T::BITS < 128`, to exchange a default internal implementation of `sum` for a better optimised implementation.\r\n(Note that when an intrinsic is created for `u128::carrying_{op}` to yield the carry value, as opposed to just a boolean indicator, then this could be implemented for all types using carrying arithmetic; tag me then?)\r\n\r\ngiven `a`, `b`, of integer type `T`, and the immediately wider type `Wider`, one can compute the sum via\r\n```rust\r\n// a: T, b: T\r\nlet a = Wider::from(a);\r\nlet b = Wider::from(b);\r\nlet sum_result = ((a + b) * (1 + b).saturating_sub(a) / 2);\r\n// the intermittent values may exceed the bounds of {T}, but the result could still fit\r\nif overflow_checks_enabled && !(Wider::from(T::MIN)..=Wider::from(T::MAX)).contains(&sum_result) {\r\n    panic!(\"integer underflow/overflow\")\r\n} else {\r\n    // if overflow checks are disabled, casting will work as expected, otherwise it fits as-is\r\n    return sum_result as T\r\n}\r\n```\r\n\r\nIf this wasn't the right place to have made the issue, please redirect me as appropriate.", "closed_by": {"login": "Phosra", "id": 90156453, "node_id": "MDQ6VXNlcjkwMTU2NDUz", "avatar_url": "https://avatars.githubusercontent.com/u/90156453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phosra", "html_url": "https://github.com/Phosra", "followers_url": "https://api.github.com/users/Phosra/followers", "following_url": "https://api.github.com/users/Phosra/following{/other_user}", "gists_url": "https://api.github.com/users/Phosra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phosra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phosra/subscriptions", "organizations_url": "https://api.github.com/users/Phosra/orgs", "repos_url": "https://api.github.com/users/Phosra/repos", "events_url": "https://api.github.com/users/Phosra/events{/privacy}", "received_events_url": "https://api.github.com/users/Phosra/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94922/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94922/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}