{"url": "https://api.github.com/repos/rust-lang/rust/issues/22891", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/22891/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/22891/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/22891/events", "html_url": "https://github.com/rust-lang/rust/issues/22891", "id": 59337298, "node_id": "MDU6SXNzdWU1OTMzNzI5OA==", "number": 22891, "title": "Seemingly inefficient code generated to forward a parameter to a function", "user": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2015-02-28T10:50:52Z", "updated_at": "2017-05-16T04:23:58Z", "closed_at": "2017-05-16T04:23:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The generated code for passing arguments larger than a machine word looks inefficient.\n\nTest case:\n\n```\n#[inline(never)]\npub fn bar(x: &str) { println!(\"{}\", x) }\npub fn foo(x: &str) { bar(x); bar(x); }\n```\n\nOn x86_64-unknown-linux-gnu, compiling with `rustc test.rs -O -C no-stack-check --crate-type dylib --emit asm`, I see this code for `foo`:\n\n```\n    .section    .text._ZN3foo20hb6f131ac36a30532PaaE,\"ax\",@progbits\n    .globl  _ZN3foo20hb6f131ac36a30532PaaE\n    .align  16, 0x90\n    .type   _ZN3foo20hb6f131ac36a30532PaaE,@function\n_ZN3foo20hb6f131ac36a30532PaaE:\n    .cfi_startproc\n    pushq   %rbx\n.Ltmp4:\n    .cfi_def_cfa_offset 16\n    subq    $16, %rsp\n.Ltmp5:\n    .cfi_def_cfa_offset 32\n.Ltmp6:\n    .cfi_offset %rbx, -16\n    movq    %rdi, %rbx\n    movups  (%rbx), %xmm0\n    movaps  %xmm0, (%rsp)\n    leaq    (%rsp), %rdi\n    callq   _ZN3bar20hf21270c370b3427feaaE@PLT\n    movups  (%rbx), %xmm0\n    movaps  %xmm0, (%rsp)\n    leaq    (%rsp), %rdi\n    callq   _ZN3bar20hf21270c370b3427feaaE@PLT\n    addq    $16, %rsp\n    popq    %rbx\n    retq\n.Ltmp7:\n    .size   _ZN3foo20hb6f131ac36a30532PaaE, .Ltmp7-_ZN3foo20hb6f131ac36a30532PaaE\n    .cfi_endproc\n```\n\n`foo` receives the address of the `&str` in `%rdi`.  It copies it into a new stack location for each call, then passes the address of that location to `bar`.\n\nCould `foo` forward the address of the `&str` along without making stack copies?\n\nIf I remove one of the `bar` calls from `foo`, then the function also ought to become a tail call, but it doesn't.  Tail call optimization _does_ occur if I replace the `&str` types with `&&str`.\n\nThe calling convention for passing `&str` (and other arguments larger than a machine word?) seems to be:\n1. Make a copy of the argument on the stack.\n2. Pass the address of the copy in the conventional manner (in a register or on the stack).\n3. The callee may modify the copy.\n\ni.e. We seem to be passing values both by-value _and_ by-reference.\n\nWith the current convention, I think we could get smaller code by eliding some of the copies.  If the copies were instead immutable, I think we could elide more copies.\n\nCompiler version:\n\n```\nrustc 1.0.0-nightly (b47aebe3f 2015-02-26) (built 2015-02-27)\nbinary: rustc\ncommit-hash: b47aebe3fc2da06c760fd8ea19f84cbc41d34831\ncommit-date: 2015-02-26\nbuild-date: 2015-02-27\nhost: x86_64-unknown-linux-gnu\nrelease: 1.0.0-nightly\n```\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/22891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/22891/timeline", "performed_via_github_app": null, "state_reason": "completed"}