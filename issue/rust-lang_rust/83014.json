{"url": "https://api.github.com/repos/rust-lang/rust/issues/83014", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83014/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83014/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83014/events", "html_url": "https://github.com/rust-lang/rust/issues/83014", "id": 829121789, "node_id": "MDU6SXNzdWU4MjkxMjE3ODk=", "number": 83014, "title": "Implicit lifetime bound on impl type parameter not applied to associated function", "user": {"login": "detly", "id": 311239, "node_id": "MDQ6VXNlcjMxMTIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/311239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detly", "html_url": "https://github.com/detly", "followers_url": "https://api.github.com/users/detly/followers", "following_url": "https://api.github.com/users/detly/following{/other_user}", "gists_url": "https://api.github.com/users/detly/gists{/gist_id}", "starred_url": "https://api.github.com/users/detly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detly/subscriptions", "organizations_url": "https://api.github.com/users/detly/orgs", "repos_url": "https://api.github.com/users/detly/repos", "events_url": "https://api.github.com/users/detly/events{/privacy}", "received_events_url": "https://api.github.com/users/detly/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-03-11T12:50:10Z", "updated_at": "2022-05-03T05:56:09Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider this code:\r\n\r\n```rust\r\nstruct Updater<'m, S: Copy> {\r\n    store: &'m mut S,\r\n}\r\n\r\nimpl<'m, S: Copy> Updater<'m, S> {\r\n    fn craft<T: Copy>(builder: &Vec<T>) {}\r\n\r\n    fn craft_reply<T: Copy>(update: Vec<T>)\r\n    {\r\n        Self::craft(&update)\r\n    }       \r\n}\r\n```\r\n\r\nIt fails to compile on 1.50 and nightly 1.52.0-nightly (2021-03-10 f98721f886ab52d32d62) with:\r\n\r\n```text\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0309]: the parameter type `S` may not live long enough\r\n  --> src/lib.rs:11:9\r\n   |\r\n5  | impl<'m, S: Copy> Updater<'m, S> {\r\n   |          -- help: consider adding an explicit lifetime bound...: `S: 'm +`\r\n...\r\n11 |         Self::craft(&update)\r\n   |         ^^^^^^^^^^^ ...so that the type `S` will meet its required lifetime bounds\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0309`.\r\nerror: could not compile `playground`\r\n```\r\n\r\nIf I add a `&self` parameter to `craft_reply()`, it compiles. I cannot see what needs to be parameterised by the `&self` lifetime when it's not there, though.\r\n\r\nOther things that work:\r\n\r\n- using `impl<'m, S: Copy + 'm>` (but I would have thought that `S: 'm` was implied by the reference to `S` requiring lifetime `'m`)\r\n- adding `where S: 'm` to `craft_reply()`\r\n- moving the associated functions out of the impl (but I like organising associated functions alongside the methods that use them)\r\n- use `Updater::<'_, S>::craft` instead of `Self::craft` inside the function body\r\n\r\nSome comments from the Discord (user `Yandros FR-ES`):\r\n\r\n> Basically your `Updater` struct has an implicit bound of `S : 'm` to be well formed. In the \"~~good~~ old days\", one had to write that bound explicitly in many many places. That was considered cumbersome, given that the existence of a `&'m [mut] S` type already implies this.\r\n> So the compiler was tweaked to elide this bound, when such as type (e.g., `&'m [mut] S` or a wrapper around it, such as `Self`) appears in the function signature.\r\n> Which does not happen in your `craft_reply` function. This means that within the body of the function, the compiler does not know if `S : 'm` holds, and you thus can't name the `Self = Updater<'m, S>` type which needs that bound to hold :smile:\r\n\r\n> I'd consider that a bug (and I expect there to be some issue about it already): the outer `impl` block ought to already imply that `S : 'm` holds\r\n\r\n(Thread [starts here](https://discord.com/channels/442252698964721669/443150878111694848/819544568193482763).)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83014/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83014/timeline", "performed_via_github_app": null, "state_reason": null}