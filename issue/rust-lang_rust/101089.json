{"url": "https://api.github.com/repos/rust-lang/rust/issues/101089", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101089/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101089/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101089/events", "html_url": "https://github.com/rust-lang/rust/issues/101089", "id": 1353077078, "node_id": "I_kwDOAAsO6M5QplFW", "number": 101089, "title": "Missing bit operation optimization on wasm target", "user": {"login": "adrian17", "id": 4729533, "node_id": "MDQ6VXNlcjQ3Mjk1MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4729533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrian17", "html_url": "https://github.com/adrian17", "followers_url": "https://api.github.com/users/adrian17/followers", "following_url": "https://api.github.com/users/adrian17/following{/other_user}", "gists_url": "https://api.github.com/users/adrian17/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrian17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrian17/subscriptions", "organizations_url": "https://api.github.com/users/adrian17/orgs", "repos_url": "https://api.github.com/users/adrian17/repos", "events_url": "https://api.github.com/users/adrian17/events{/privacy}", "received_events_url": "https://api.github.com/users/adrian17/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-27T15:43:35Z", "updated_at": "2023-04-05T17:33:56Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given the code:\r\n```rs\r\npub fn color(value: u8) -> u8 {\r\n    match value & 0x3 {\r\n        0x0 => 0,\r\n        0x1 => 1,\r\n        0x2 => 2,\r\n        _ => unsafe { std::hint::unreachable_unchecked() },\r\n    }\r\n}\r\n```\r\nI'd expect it to generate trivial code like it does on x86-64:\r\n```\r\nexample::color:\r\n        mov     eax, edi\r\n        and     al, 3\r\n        ret\r\n```\r\nHowever, on `wasm32-unknown-unknown` target, it generates a full jump table:\r\n```\r\nexample::color:\r\n        i32.const       0\r\n        local.set       1\r\n        block           \r\n        block           \r\n        block           \r\n        local.get       0\r\n        i32.const       3\r\n        i32.and \r\n        br_table        {2, 0, 1, 2}\r\n        end_block\r\n        i32.const       1\r\n        return\r\n        end_block\r\n        i32.const       2\r\n        local.set       1\r\n        end_block\r\n        local.get       1\r\n        end_function\r\n```\r\n\r\nAnd if I cover the `0x3` case like this:\r\n```rs\r\npub fn color(value: u8) -> u8 {\r\n    match value & 0x3 {\r\n        0x0 => 0,\r\n        0x1 => 1,\r\n        0x2 => 2,\r\n        0x3 => 3,\r\n        _ => unsafe { std::hint::unreachable_unchecked() },\r\n    }\r\n}\r\n```\r\nit removes the jump table, but generates what appears to be way more code than necessary - there should still be just a single `and`:\r\n```\r\nexample::color:\r\n        i32.const       16777986\r\n        local.get       0\r\n        i32.const       3\r\n        i32.shl \r\n        i32.const       24\r\n        i32.and \r\n        i32.const       16\r\n        i32.xor \r\n        i32.shr_u\r\n        end_function\r\n```\r\n\r\nGodbolt demo of case 1: https://godbolt.org/z/4x1qG1EMb\r\nGodbolt demo of case 2: https://godbolt.org/z/h4Pvndd9d\r\n\r\nI'm guessing this is related to lack of `u8` instructions in wasm, but the generated code shouldn't be this bad, right...?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101089/timeline", "performed_via_github_app": null, "state_reason": null}