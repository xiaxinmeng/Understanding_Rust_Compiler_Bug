{"url": "https://api.github.com/repos/rust-lang/rust/issues/95269", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95269/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95269/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95269/events", "html_url": "https://github.com/rust-lang/rust/issues/95269", "id": 1179282768, "node_id": "I_kwDOAAsO6M5GSm1Q", "number": 95269, "title": "Pointer dereference after free with allocator containing shared state", "user": {"login": "jhorstmann", "id": 689138, "node_id": "MDQ6VXNlcjY4OTEzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/689138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhorstmann", "html_url": "https://github.com/jhorstmann", "followers_url": "https://api.github.com/users/jhorstmann/followers", "following_url": "https://api.github.com/users/jhorstmann/following{/other_user}", "gists_url": "https://api.github.com/users/jhorstmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhorstmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhorstmann/subscriptions", "organizations_url": "https://api.github.com/users/jhorstmann/orgs", "repos_url": "https://api.github.com/users/jhorstmann/repos", "events_url": "https://api.github.com/users/jhorstmann/events{/privacy}", "received_events_url": "https://api.github.com/users/jhorstmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-03-24T10:05:25Z", "updated_at": "2022-03-31T02:53:33Z", "closed_at": "2022-03-31T02:53:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI'm trying out the allocator api with the goal of being able to track memory usage for parts of a program:\r\n\r\n```rust\r\n#![feature(allocator_api)]\r\n#![feature(core_intrinsics)]\r\n\r\nuse std::alloc::{AllocError, Allocator, Layout, System};\r\nuse std::intrinsics::black_box;\r\nuse std::ptr::NonNull;\r\nuse std::sync::atomic::{AtomicUsize, Ordering};\r\nuse std::sync::Arc;\r\n\r\n#[derive(Default, Clone)]\r\nstruct TrackingAllocator {\r\n    memory_usage: Arc<AtomicUsize>,\r\n}\r\n\r\nunsafe impl Allocator for TrackingAllocator {\r\n    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\r\n        self.memory_usage\r\n            .fetch_add(layout.size(), Ordering::Relaxed);\r\n        System.allocate(layout)\r\n    }\r\n\r\n    fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\r\n        self.memory_usage\r\n            .fetch_add(layout.size(), Ordering::Relaxed);\r\n        System.allocate_zeroed(layout)\r\n    }\r\n\r\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\r\n        self.memory_usage\r\n            .fetch_sub(layout.size(), Ordering::Relaxed);\r\n        System.deallocate(ptr, layout)\r\n    }\r\n}\r\n\r\nfn bool_to_int(input: Vec<bool, TrackingAllocator>) -> Vec<i32, TrackingAllocator> {\r\n    let allocator = input.allocator().clone();\r\n    let mut output = Vec::with_capacity_in(input.len(), allocator);\r\n    for b in input {\r\n        output.push(b as i32);\r\n    }\r\n    output\r\n}\r\n\r\nfn main() {\r\n    let tracking_alloc = TrackingAllocator::default();\r\n    {\r\n        let mut input = Vec::new_in(tracking_alloc.clone());\r\n        input.push(true);\r\n        input.push(false);\r\n        let output = bool_to_int(input);\r\n        black_box(output);\r\n    }\r\n    {\r\n        let mut input = Vec::new_in(tracking_alloc.clone());\r\n        input.push(true);\r\n        input.push(true);\r\n        let output = bool_to_int(input);\r\n        black_box(output);\r\n    }\r\n    eprintln!(\"{}\", tracking_alloc.memory_usage.load(Ordering::Relaxed));\r\n}\r\n```\r\n\r\nI expected this to work (and print 0 at the end), but instead it fails by freeing an invalid pointer:\r\n\r\n```\r\n$ ./target/debug/memory_tracking\r\nfree(): invalid pointer\r\nAborted\r\n```\r\n\r\nRunning with miri gives a bit more context:\r\n\r\n```\r\nerror: Undefined Behavior: pointer to alloc984 was dereferenced after this allocation got freed\r\n   --> /home/user/.rustup/toolchains/nightly-2022-03-23-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/non_null.rs:328:18\r\n    |\r\n328 |         unsafe { &*self.as_ptr() }\r\n    |                  ^^^^^^^^^^^^^^^ pointer to alloc984 was dereferenced after this allocation got freed\r\n    |\r\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\r\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\r\n            \r\n    = note: inside `std::ptr::NonNull::<alloc::sync::ArcInner<std::sync::atomic::AtomicUsize>>::as_ref` at /home/user/.rustup/toolchains/nightly-2022-03-23-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/non_null.rs:328:18\r\n    = note: inside `std::sync::Arc::<std::sync::atomic::AtomicUsize>::inner` at /home/user/.rustup/toolchains/nightly-2022-03-23-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/sync.rs:1084:18\r\n    = note: inside `<std::sync::Arc<std::sync::atomic::AtomicUsize> as std::clone::Clone>::clone` at /home/user/.rustup/toolchains/nightly-2022-03-23-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/sync.rs:1342:24\r\nnote: inside `<TrackingAllocator as std::clone::Clone>::clone` at src/main.rs:12:5\r\n   --> src/main.rs:12:5\r\n    |\r\n10  | #[derive(Default, Clone)]\r\n    |                   ----- in this derive macro expansion\r\n11  | struct TrackingAllocator {\r\n12  |     memory_usage: Arc<AtomicUsize>,\r\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: inside `main` at src/main.rs:54:37\r\n   --> src/main.rs:54:37\r\n    |\r\n54  |         let mut input = Vec::new_in(tracking_alloc.clone());\r\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^\r\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\r\n```\r\n\r\n### Meta\r\n\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.61.0-nightly (5f3700105 2022-03-22)\r\nbinary: rustc\r\ncommit-hash: 5f37001055c29982f4c27ee9edd90449c8e07774\r\ncommit-date: 2022-03-22\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.61.0-nightly\r\nLLVM version: 14.0.0\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95269/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95269/timeline", "performed_via_github_app": null, "state_reason": "completed"}