{"url": "https://api.github.com/repos/rust-lang/rust/issues/49928", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49928/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49928/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49928/events", "html_url": "https://github.com/rust-lang/rust/issues/49928", "id": 314086944, "node_id": "MDU6SXNzdWUzMTQwODY5NDQ=", "number": 49928, "title": "LLVM has rare assert failure (3% of time?) during async trans", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-13T12:24:36Z", "updated_at": "2018-08-27T15:54:39Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I recently tried turning on LLVM assertions (and built it in Debug mode, etc; part of debugging something else) via the following in my `config.toml`:\r\n```\r\n[llvm]\r\n\r\n# Indicates whether rustc will support compilation with LLVM\r\n# note: rustc does not compile without LLVM at the moment\r\n#enabled = true\r\n\r\n# Indicates whether the LLVM build is a Release or Debug build\r\n# optimize = true\r\noptimize = false\r\n\r\n# Indicates whether an LLVM Release build should include debug info\r\n#release-debuginfo = false\r\nrelease-debuginfo = true\r\n\r\n# Indicates whether the LLVM assertions are enabled or not\r\nassertions = true\r\n\r\n# Indicates whether ccache is used when building LLVM\r\nccache = true\r\n```\r\n\r\nand then discovered that sometimes we get LLVM assertion faillures when running the *compile-fail* test suite.\r\n\r\nThis is of course surprising since one does not expect trans to run if the input has some problem with its static semantics.\r\n\r\nHere is an example of such output.\r\n\r\n```\r\nfailures:\r\n\r\n---- [compile-fail] compile-fail/simd-type-generic-monomorphisation.rs stdout ----\r\n\r\nerror: Error: expected failure status (Some(101)) but received status None.\r\nstatus: signal: 6\r\ncommand: \"/home/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/build/x86_64-unknown-linux-gnu/stage1/bin/rustc\" \"/home/pnkfelix/Dev/Mozilla/rust.git/src/test/compile-fail/simd-type-generic-monomorphisation.rs\" \"-L\" \"/home/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/build/x86_64-unknown-linux-gnu/test/compile-fail\" \"--target=x86_64-unknown-linux-gnu\" \"-Zui-testing\" \"-C\" \"prefer-dynamic\" \"-o\" \"/home/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/build/x86_64-unknown-linux-gnu/test/compile-fail/simd-type-generic-monomorphisation.stage1-x86_64-unknown-linux-gnu\" \"-Crpath\" \"-Zmiri\" \"-Zunstable-options\" \"-Lnative=/home/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/build/x86_64-unknown-linux-gnu/native/rust-test-helpers\" \"-L\" \"/home/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/build/x86_64-unknown-linux-gnu/test/compile-fail/simd-type-generic-monomorphisation.stage1-x86_64-unknown-linux-gnu.aux\" \"-A\" \"unused\"\r\nstdout:\r\n------------------------------------------\r\n\r\n------------------------------------------\r\nstderr:\r\n------------------------------------------\r\nerror: monomorphising SIMD type `Simd2<X>` with a non-machine element type `X`\r\n\r\nerror: aborting due to previous error\r\n\r\nrustc: /home/pnkfelix/Dev/Mozilla/rust.git/src/llvm/lib/CodeGen/TargetPassConfig.cpp:805: virtual void llvm::TargetPassConfig::addMachinePasses(): Assertion `TPI && IPI && \"Pass ID not registered!\"' failed.\r\n\r\n------------------------------------------\r\n\r\nthread '[compile-fail] compile-fail/simd-type-generic-monomorphisation.rs' panicked at 'explicit panic', tools/compiletest/src/runtest.rs:2919:9\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\n\r\n\r\nfailures:\r\n    [compile-fail] compile-fail/simd-type-generic-monomorphisation.rs\r\n\r\ntest result: FAILED. 233 passed; 1 failed; 1 ignored; 0 measured; 2087 filtered out\r\n```\r\n\r\nIteratively running that `rustc` command 1000 times yielded that LLVM assert 31 times (that's the basis of my 3% above).\r\n\r\nI looked at a generated core file and got a backtrace from it, here: https://gist.github.com/7cb39f28bd7f4960130a4ef555589e98\r\n\r\nThe current hypothesis in `#rustc` about this is that it is caused from setting up async trans, and then something during a subsequent error from the compiler (in this case the error is signaled during trans, since its a SIMD issue) is tearing down LLVM state that the async trans needs to remain in place.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49928/timeline", "performed_via_github_app": null, "state_reason": null}