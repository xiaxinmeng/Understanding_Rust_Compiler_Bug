{"url": "https://api.github.com/repos/rust-lang/rust/issues/104985", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104985/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104985/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104985/events", "html_url": "https://github.com/rust-lang/rust/issues/104985", "id": 1465513741, "node_id": "I_kwDOAAsO6M5XWfcN", "number": 104985, "title": "32-bit mips target emits 64-bit instructions", "user": {"login": "he32", "id": 1199501, "node_id": "MDQ6VXNlcjExOTk1MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1199501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/he32", "html_url": "https://github.com/he32", "followers_url": "https://api.github.com/users/he32/followers", "following_url": "https://api.github.com/users/he32/following{/other_user}", "gists_url": "https://api.github.com/users/he32/gists{/gist_id}", "starred_url": "https://api.github.com/users/he32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/he32/subscriptions", "organizations_url": "https://api.github.com/users/he32/orgs", "repos_url": "https://api.github.com/users/he32/repos", "events_url": "https://api.github.com/users/he32/events{/privacy}", "received_events_url": "https://api.github.com/users/he32/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 106552066, "node_id": "MDU6TGFiZWwxMDY1NTIwNjY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-MIPS", "name": "O-MIPS", "color": "6e6ec0", "default": false, "description": "Target: MIPS processors"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2022-11-27T17:06:01Z", "updated_at": "2023-05-07T01:21:48Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am initially a little hesitant to characterize this as a bug, or whether it is just me asking for help...\r\n\r\nI recently added support for the `mipsel-unknown-netbsd` target to our rust package in our pkgsrc-wip github repository, and based on this I managed to cross-build a bootstrap kit for that target.  However, the resulting binaries fail to run on NetBSD's 32-bit ports, which use o32 ABI and have in general turned off support for 64-bit instructions.\r\n\r\nThe target spec calls for emitting instructions adhering to \"mips3\", which I think excludes any 64-bit instructions; the `rustc` target spec looks like this:\r\n\r\n```\r\nuse crate::abi::Endian;\r\nuse crate::spec::{Target, TargetOptions};\r\n\r\npub fn target() -> Target {\r\n    let mut base = super::netbsd_base::opts();\r\n    base.max_atomic_width = Some(32);\r\n    base.cpu = \"mips3\".into();\r\n\r\n    Target {\r\n        llvm_target: \"mipsel-unknown-netbsd\".into(),\r\n        pointer_width: 32,\r\n        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\r\n        arch: \"mips\".into(),\r\n        options: TargetOptions {\r\n            mcount: \"__mcount\".into(),\r\n            endian: Endian::Little,\r\n            ..base\r\n        },\r\n    }\r\n}\r\n```\r\n\r\nHowever, despite this, we end up with 64-bit-only instructions in the output, ref.\r\n\r\n```\r\nq: {138} objdump -ldr /usr/pkg/bin/cargo | grep daddiu \r\n   dcbbc:       64010001        daddiu  at,zero,1\r\n   dceec:       64010001        daddiu  at,zero,1\r\n   dcf88:       64010001        daddiu  at,zero,1\r\n   dd410:       64020001        daddiu  v0,zero,1\r\n   dd428:       64420001        daddiu  v0,v0,1\r\n   dd8b0:       64010001        daddiu  at,zero,1\r\n   dd948:       64010001        daddiu  at,zero,1\r\n^C\r\n```\r\n\r\nand trying to run it results in an \"Illegal Instruction\" signal and a core dump.\r\n\r\nNow, I'm also not certain exactly what to blame, whether it's LLVM itself, or the coupling between rustc and LLVM.\r\n\r\nAnyway, hints to get this fixed would be much appreciated.\r\n\r\nOh, yes, this is with code based on rust 1.65.0.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104985/timeline", "performed_via_github_app": null, "state_reason": null}