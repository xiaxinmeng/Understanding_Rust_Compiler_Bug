{"url": "https://api.github.com/repos/rust-lang/rust/issues/105675", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105675/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105675/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105675/events", "html_url": "https://github.com/rust-lang/rust/issues/105675", "id": 1495340134, "node_id": "I_kwDOAAsO6M5ZIRRm", "number": 105675, "title": "Confusing diagnostic complains about lifetimes in a closure, when parameter type is missing", "user": {"login": "mday64", "id": 39891728, "node_id": "MDQ6VXNlcjM5ODkxNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/39891728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mday64", "html_url": "https://github.com/mday64", "followers_url": "https://api.github.com/users/mday64/followers", "following_url": "https://api.github.com/users/mday64/following{/other_user}", "gists_url": "https://api.github.com/users/mday64/gists{/gist_id}", "starred_url": "https://api.github.com/users/mday64/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mday64/subscriptions", "organizations_url": "https://api.github.com/users/mday64/orgs", "repos_url": "https://api.github.com/users/mday64/repos", "events_url": "https://api.github.com/users/mday64/events{/privacy}", "received_events_url": "https://api.github.com/users/mday64/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": {"login": "skyzh", "id": 4198311, "node_id": "MDQ6VXNlcjQxOTgzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4198311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skyzh", "html_url": "https://github.com/skyzh", "followers_url": "https://api.github.com/users/skyzh/followers", "following_url": "https://api.github.com/users/skyzh/following{/other_user}", "gists_url": "https://api.github.com/users/skyzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/skyzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skyzh/subscriptions", "organizations_url": "https://api.github.com/users/skyzh/orgs", "repos_url": "https://api.github.com/users/skyzh/repos", "events_url": "https://api.github.com/users/skyzh/events{/privacy}", "received_events_url": "https://api.github.com/users/skyzh/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "skyzh", "id": 4198311, "node_id": "MDQ6VXNlcjQxOTgzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4198311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skyzh", "html_url": "https://github.com/skyzh", "followers_url": "https://api.github.com/users/skyzh/followers", "following_url": "https://api.github.com/users/skyzh/following{/other_user}", "gists_url": "https://api.github.com/users/skyzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/skyzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skyzh/subscriptions", "organizations_url": "https://api.github.com/users/skyzh/orgs", "repos_url": "https://api.github.com/users/skyzh/repos", "events_url": "https://api.github.com/users/skyzh/events{/privacy}", "received_events_url": "https://api.github.com/users/skyzh/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2022-12-13T23:49:11Z", "updated_at": "2023-04-16T05:22:27Z", "closed_at": "2023-04-16T05:22:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "1. Create a new project with `cargo new closure_lifetimes`\n2. `cargo add pathfinding` (in my case, it used pathfinding version 4.0.0 or 4.0.1)\n3. Replace main.rs with:\n\n```rust\nuse std::collections::HashMap;\nuse pathfinding::prelude::bfs;\n\nfn main() {\n    // Just enough to satisfy the compiler\n    let input = Input { ending_point: (3,4), heights: HashMap::new() };\n\n    let success = |node| input.heights[node] == 0;\n    let successors = |node| {\n        let node_height = input.heights[node];\n        input.neighbors(node).into_iter()\n            .filter(|other| input.heights[&other] >= node_height - 1)\n            .collect::<Vec<Coord>>()\n    };\n    let answer = bfs(&input.ending_point, successors, success).unwrap().len();\n    println!(\"answer = {answer}\");\n}\n\ntype Coord = (i32, i32);\n\nstruct Input {\n    ending_point: Coord,\n    heights: HashMap<Coord, u32>\n}\n\nimpl Input {\n    // Just do something to satisfy the compiler\n    fn neighbors(&self, node: &Coord) -> Vec<Coord> {\n        vec![(node.0, node.1 + 1), (node.0 + 1, node.1)]\n    }\n}\n```\n\n`cargo check` produces the following output:\n\n```\n    Checking closure_lifetimes v0.1.0 (/Users/mark/sources/closure_lifetimes)\nerror[E0308]: mismatched types\n  --> src/main.rs:15:18\n   |\n15 |     let answer = bfs(&input.ending_point, successors, success).unwrap().len();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n   |\n   = note: expected trait `for<'r> FnMut<(&'r (i32, i32),)>`\n              found trait `FnMut<(&(i32, i32),)>`\nnote: this closure does not fulfill the lifetime requirements\n  --> src/main.rs:9:22\n   |\n9  |     let successors = |node| {\n   |                      ^^^^^^\nnote: the lifetime requirement is introduced here\n  --> /Users/mark/.cargo/registry/src/github.com-1ecc6299db9ec823/pathfinding-4.0.1/src/directed/bfs.rs:69:9\n   |\n69 |     FN: FnMut(&N) -> IN,\n   |         ^^^^^^^^^^^^^^^\n\nerror: implementation of `FnOnce` is not general enough\n  --> src/main.rs:15:18\n   |\n15 |     let answer = bfs(&input.ending_point, successors, success).unwrap().len();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n   |\n   = note: closure with signature `fn(&'2 (i32, i32)) -> Vec<(i32, i32)>` must implement `FnOnce<(&'1 (i32, i32),)>`, for any lifetime `'1`...\n   = note: ...but it actually implements `FnOnce<(&'2 (i32, i32),)>`, for some specific lifetime `'2`\n\nerror[E0308]: mismatched types\n  --> src/main.rs:15:18\n   |\n15 |     let answer = bfs(&input.ending_point, successors, success).unwrap().len();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n   |\n   = note: expected trait `for<'r> FnMut<(&'r (i32, i32),)>`\n              found trait `FnMut<(&(i32, i32),)>`\nnote: this closure does not fulfill the lifetime requirements\n  --> src/main.rs:8:19\n   |\n8  |     let success = |node| input.heights[node] == 0;\n   |                   ^^^^^^\nnote: the lifetime requirement is introduced here\n  --> /Users/mark/.cargo/registry/src/github.com-1ecc6299db9ec823/pathfinding-4.0.1/src/directed/bfs.rs:71:9\n   |\n71 |     FS: FnMut(&N) -> bool,\n   |         ^^^^^^^^^^^^^^^^^\n\nerror: implementation of `FnOnce` is not general enough\n  --> src/main.rs:15:18\n   |\n15 |     let answer = bfs(&input.ending_point, successors, success).unwrap().len();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n   |\n   = note: closure with signature `fn(&'2 (i32, i32)) -> bool` must implement `FnOnce<(&'1 (i32, i32),)>`, for any lifetime `'1`...\n   = note: ...but it actually implements `FnOnce<(&'2 (i32, i32),)>`, for some specific lifetime `'2`\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `closure_lifetimes` due to 4 previous errors\n```\n\nFor the two closures (`success` and `successors`), if I add a type for the parameter by changing `|node|` to `|node: &Coord|`, it builds without any errors.  If it had told me that it needed type annotations, I would have understood the problem and been able to fix it right away.  (I assumed that there was enough type information for it to infer the correct types.)\n\nThe first confusing bit is that both errors highlight the entire call to `bfs()`, including all parameters.  This makes it harder to figure out which one it is complaining about (though the second note contains the line number).  Does the first argument have something to do with the lifetimes it is complaining about?\n\nI found this part of the message hard to understand:\n\n```\n   = note: closure with signature `fn(&'2 (i32, i32)) -> Vec<(i32, i32)>` must implement `FnOnce<(&'1 (i32, i32),)>`, for any lifetime `'1`...\n   = note: ...but it actually implements `FnOnce<(&'2 (i32, i32),)>`, for some specific lifetime `'2`\n```\n\nThe type parameters look almost identical, and the `for some specific lifetime` didn't make sense to me.  Could it somehow indicate the bounds of that lifetime (2), or better explain why that lifetime doesn't last long enough?\n\nFYI: found as part of solving Advent of Code 2022, Day 12.\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"skyzh\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105675/timeline", "performed_via_github_app": null, "state_reason": "completed"}