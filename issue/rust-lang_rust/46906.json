{"url": "https://api.github.com/repos/rust-lang/rust/issues/46906", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46906/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46906/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46906/events", "html_url": "https://github.com/rust-lang/rust/issues/46906", "id": 283871408, "node_id": "MDU6SXNzdWUyODM4NzE0MDg=", "number": 46906, "title": "Tracking issue for the `tyvar_behind_raw_pointer` compatibility lint", "user": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630636017, "node_id": "MDU6TGFiZWw2MzA2MzYwMTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-future-compatibility", "name": "C-future-compatibility", "color": "f5f1fd", "default": false, "description": "Category: future compatibility lints"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2017-12-21T12:46:32Z", "updated_at": "2020-06-18T15:50:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is the **summary issue** for the `tyvar_behind_raw_pointer` future-compatibility warning and other related errors. The goal of this page is describe why this change was made and how you can fix code that is affected by it. It also provides a place to ask questions or register a complaint if you feel the change should not be made. For more information on the policy around future-compatibility warnings, see our [breaking change policy guidelines](https://github.com/rust-lang/rfcs/blob/master/text/1122-language-semver.md).\r\n\r\n**What is the warning for?**\r\n\r\nThis warning occurs when you call a method on a value whose type is a raw pointer to an unknown type (aka `*const _` or `*mut _`), or a type that dereferences to one of these.\r\n\r\nThe most common case for this is casts, for example:\r\n```Rust\r\n        let s = libc::getenv(k.as_ptr()) as *const _;\r\n        s.is_null()\r\n```\r\n\r\nThis can be fixed by giving a type annotation to the cast:\r\n```Rust\r\n        let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\r\n        s.is_null()\r\n```\r\n\r\nThe reason that this is going to become an error is because we are working on enabling arbitrary self types. Using that, you should be able to write functions such as:\r\n\r\n```Rust\r\n#![feature(arbitrary_self_types)]\r\n\r\nstruct MyType;\r\n\r\nimpl MyType {\r\n    fn is_null(self: *mut Self) -> bool {\r\n        println!(\"?\");\r\n        true\r\n    }\r\n}\r\n```\r\n\r\nWhile that case is obviously silly, we can't prevent a sibling crate from implementing it, and such a function would make a call to `s.is_null()` when the type of `s` is an `*mut _` ambiguous. Therefore, to avoid that potential breakage, you have to annotate the type of your raw pointer before the point of the method call.\r\n\r\nAfter you fix these warnings, if you are working with raw pointers on nightly, you might want to check out `#![feature(arbitrary_self_types)]` yourself! It even works with trait objects:\r\n```Rust\r\n#![feature(arbitrary_self_types, dyn_trait)]\r\ntrait Foo {\r\n    fn example(self: *mut Self);\r\n}\r\n\r\nstruct S;\r\nimpl Foo for S {\r\n    fn example(self: *mut Self) {\r\n        println!(\"Hello, I'm at {:?}\", self);\r\n    }\r\n}\r\n\r\nfn foo(foo: *mut dyn Foo) {\r\n    foo.example();\r\n}\r\n\r\nfn main() {\r\n    // This is 100% safe and not UB, even through I am calling `foo`\r\n    // with a null pointer - this is a *raw* null pointer, and these are\r\n    // always ok.\r\n    foo(0 as *mut S);\r\n}\r\n```\r\n\r\nWhile I'm at it, `arbitrary_self_types` also works for smart pointers, such as `Rc<T>`  or `Arc<T>` (however, unfortunately we still have not figured out the best way to make it work with smart pointers to trait objects, so you can't yet create `dyn Bar` trait objects. We *are* planning on making it eventually work, so stay tuned!).\r\n\r\n```Rust\r\n#![feature(arbitrary_self_types)]\r\n\r\nuse std::rc::Rc;\r\n\r\ntrait Bar {\r\n    fn example(self: &Rc<Self>);\r\n}\r\n\r\nstruct S;\r\nimpl Bar for S {\r\n    fn example(self: &Rc<Self>) {\r\n        println!(\"Hi I'm called on an Rc.\");\r\n        let _x = self.clone(); // You can call Rc::clone on Self!\r\n    }\r\n}\r\n\r\nfn main() {\r\n    Rc::new(S).example();\r\n}\r\n```\r\n\r\n**When will this warning become a hard error?**\r\n\r\nAt the beginning of each 6-week release cycle, the Rust compiler team will review the set of outstanding future compatibility warnings and nominate some of them for **Final Comment Period**. Toward the end of the cycle, we will review any comments and make a final determination whether to convert the warning into a hard error or remove it entirely.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46906/reactions", "total_count": 5, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 3, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46906/timeline", "performed_via_github_app": null, "state_reason": null}