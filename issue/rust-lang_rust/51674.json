{"url": "https://api.github.com/repos/rust-lang/rust/issues/51674", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51674/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51674/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51674/events", "html_url": "https://github.com/rust-lang/rust/issues/51674", "id": 334387316, "node_id": "MDU6SXNzdWUzMzQzODczMTY=", "number": 51674, "title": "Syntax for refutable bind", "user": {"login": "axos88", "id": 1281218, "node_id": "MDQ6VXNlcjEyODEyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1281218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axos88", "html_url": "https://github.com/axos88", "followers_url": "https://api.github.com/users/axos88/followers", "following_url": "https://api.github.com/users/axos88/following{/other_user}", "gists_url": "https://api.github.com/users/axos88/gists{/gist_id}", "starred_url": "https://api.github.com/users/axos88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axos88/subscriptions", "organizations_url": "https://api.github.com/users/axos88/orgs", "repos_url": "https://api.github.com/users/axos88/repos", "events_url": "https://api.github.com/users/axos88/events{/privacy}", "received_events_url": "https://api.github.com/users/axos88/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-21T08:22:48Z", "updated_at": "2018-06-21T22:51:20Z", "closed_at": "2018-06-21T12:00:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nAs per E0005, all binds must be irrefutable.\r\nI'm seemingly stumbling into this issue quite a lot and wondering if there are any intentions to relax that requirement by introducing `Option<T>` into the mix.\r\n\r\nI find myself wanting to do something like this:\r\n\r\n```\r\n  struct X { a: u32 };\r\n  struct Y { b: u32 };\r\n\r\n  enum Foo {\r\n    Bar(X)\r\n    Baz(Y)\r\n  }\r\n\r\n  let foo: Foo = Foo::Bar(X { a: 42 });\r\n    \r\n  let Foo::Bar(x) = foo;  // I would expect the type of x to be Option<X>, and provide None if foo the pattern does not match.\r\n```\r\n\r\nWe could call it syntactic sugar for:\r\n\r\n```\r\n  let x = if let Foo::Bar(_x) = foo { Some(_x) } else { None };\r\n```", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51674/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51674/timeline", "performed_via_github_app": null, "state_reason": "completed"}