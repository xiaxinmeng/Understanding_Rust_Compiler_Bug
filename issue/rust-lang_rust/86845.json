{"url": "https://api.github.com/repos/rust-lang/rust/issues/86845", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86845/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86845/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86845/events", "html_url": "https://github.com/rust-lang/rust/issues/86845", "id": 936286530, "node_id": "MDU6SXNzdWU5MzYyODY1MzA=", "number": 86845, "title": "Tracking Issue for owned locked stdio handles", "user": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2021-07-03T16:27:28Z", "updated_at": "2022-03-04T05:15:13Z", "closed_at": "2022-03-04T05:15:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature gate: `#![feature(stdio_locked)]`\r\n\r\nThis is a tracking issue for adding owned locked handles to stdio.\r\n\r\nEspecially for beginners, using stdio handles can involve intimidating problems with locking and lifetimes. First, the user has to call a free function (`stderr()`, `stdin()`, `stdout()`) to get a handle on the stream; then, the user might have to call the `lock()` method (for example, to gain access to the `lines()` iterator constructor). At this point, lifetime issues rapidly arise: the following code [(playground)](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=bc4ca971950e8e9acfa90462b5a2bcf9) will produce a compile error.\r\n\r\n```rust\r\nuse std::io;\r\nfn main() {\r\n    let _h = io::stdin().lock();\r\n}\r\n```\r\n\r\n```\r\nerror[E0716]: temporary value dropped while borrowed\r\n --> src/main.rs:3:14\r\n  |\r\n3 |     let _h = io::stdin().lock();\r\n  |              ^^^^^^^^^^^       - temporary value is freed at the end of this statement\r\n  |              |\r\n  |              creates a temporary which is freed while still in use\r\n4 | }\r\n  | - borrow might be used here, when `_h` is dropped and runs the destructor for type `StdinLock<'_>`\r\n  |\r\n  = note: consider using a `let` binding to create a longer lived value\r\n```\r\n\r\nThe need to create a `let` binding to the handle seems confusing and frustrating, especially if the program does not need to use the handle again. The explanation is that the lock behaves as if it borrows the original handle from `stdin()`, and the temporary value created for the call to the `lock()` method is dropped at the end of the statement, invalidating the borrow. That explanation might be beyond the current level of understanding of a beginner who simply wants to write an interactive terminal program.\r\n\r\nEven experienced Rust programmers sometimes have trouble with the lifetime management required for using locked stdio handles: [(comment)](https://github.com/rust-lang/rust/pull/86412#issuecomment-871048278), [(comment)](https://github.com/rust-lang/rust/pull/86412#issuecomment-871070517).\r\n\r\nFortunately, the stdio handles don't contain any non-static references, so it's possible to create owned locks such as `StdinLock<'static>`. This proposal creates methods and free functions for creating owned locked stdio handles. The methods consume `self`, eliminating any lifetime problems. The free functions directly return an owned locked handle, for programs where there is no need to use an unlocked handle. The implementation currently depends on the mutex references in the stdio handles being static, but this does not preclude future changes to the locking internals (for example, using `Arc` to wrap the mutex).\r\n\r\n### Public API\r\n\r\n```rust\r\n// std::io\r\n\r\npub fn stderr_locked() -> StderrLock<'static> { /* ... */ }\r\npub fn stdin_locked() -> StdinLock<'static> { /* ... */ }\r\npub fn stdout_locked() -> StdoutLock<'static> { /* ... */ }\r\nimpl Stderr {\r\n    pub fn into_locked(self) -> StderrLock<'static> { /* ... */ }\r\n}\r\nimpl Stdin {\r\n    pub fn into_locked(self) -> StdinLock<'static> { /* ... */ }\r\n}\r\nimpl Stdout {\r\n    pub fn into_locked(self) -> StdoutLock<'static> { /* ... */ }\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #86799\r\n  - [x] Add tracking issue to implementation: #86846 \r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- During stabilization, might we want to change the documentation to encourage people to prefer the free functions that obtain owned locked handles (`stdin_locked()`, etc.) over the ones that obtain unlocked handles (`stdin()`, etc.)?\r\n\r\n@rustbot label +A-io +D-newcomer-roadblock", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86845/reactions", "total_count": 5, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86845/timeline", "performed_via_github_app": null, "state_reason": "completed"}