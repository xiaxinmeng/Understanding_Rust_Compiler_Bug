{"url": "https://api.github.com/repos/rust-lang/rust/issues/52819", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52819/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52819/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52819/events", "html_url": "https://github.com/rust-lang/rust/issues/52819", "id": 345498576, "node_id": "MDU6SXNzdWUzNDU0OTg1NzY=", "number": 52819, "title": "removing bounds checks yields slower code", "user": {"login": "mikebenfield", "id": 543755, "node_id": "MDQ6VXNlcjU0Mzc1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/543755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikebenfield", "html_url": "https://github.com/mikebenfield", "followers_url": "https://api.github.com/users/mikebenfield/followers", "following_url": "https://api.github.com/users/mikebenfield/following{/other_user}", "gists_url": "https://api.github.com/users/mikebenfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikebenfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikebenfield/subscriptions", "organizations_url": "https://api.github.com/users/mikebenfield/orgs", "repos_url": "https://api.github.com/users/mikebenfield/repos", "events_url": "https://api.github.com/users/mikebenfield/events{/privacy}", "received_events_url": "https://api.github.com/users/mikebenfield/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-29T03:44:53Z", "updated_at": "2018-12-22T22:55:08Z", "closed_at": "2018-12-22T22:55:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In some cases using `get_unchecked` on slices results in much slower code than normal slice indexing. In my actual program, the unchecked version is 3x or 4x as slow as the checked version, but here's the simplest program I managed to write which illustrates the issue:\r\n\r\n```\r\n$ cat trash.rs\r\nfn gen(mut prev: u32) -> u32 {\r\n    prev ^= prev << 13;\r\n    prev ^= prev >> 17;\r\n    prev ^= prev << 5;\r\n    prev\r\n}\r\n\r\n#[inline(never)]\r\nfn run_nobounds(\r\n    left: &mut [u32],\r\n    right: &mut [u32],\r\n    indices: &[u32],\r\n    label: &[u32],\r\n    values: &[u32],\r\n) {\r\n    for &i in indices.iter() {\r\n        let label = label[i as usize];\r\n        let value = values[i as usize];\r\n        unsafe {\r\n            if value > 0x80000000 {\r\n                *right.get_unchecked_mut(label as usize) += 1;\r\n            } else {\r\n                *left.get_unchecked_mut(label as usize) += 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n#[inline(never)]\r\nfn run_bounds(left: &mut [u32], right: &mut [u32], indices: &[u32], label: &[u32], values: &[u32]) {\r\n    for &i in indices.iter() {\r\n        let label = label[i as usize];\r\n        let value = values[i as usize];\r\n        if value > 0x80000000 {\r\n            right[label as usize] += 1;\r\n        } else {\r\n            left[label as usize] += 1;\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    use std::env;\r\n    use std::time::Instant;\r\n\r\n    let args: Vec<String> = env::args().collect();\r\n\r\n    let mut indices = Vec::new();\r\n    let mut labels = Vec::new();\r\n    let mut values = Vec::new();\r\n    let mut seed = 1;\r\n    for _ in 0..0x1000000 {\r\n        seed = gen(seed);\r\n        indices.push(seed % 0x1000000);\r\n        seed = gen(seed);\r\n        labels.push(seed % 8);\r\n        seed = gen(seed);\r\n        values.push(seed);\r\n    }\r\n    let mut left = vec![0u32; 8];\r\n    let mut right = vec![0u32; 8];\r\n\r\n    let i1 = Instant::now();\r\n    if &args[1] == \"bounds\" {\r\n        run_bounds(&mut left, &mut right, &indices, &labels, &values);\r\n    } else if &args[1] == \"nobounds\" {\r\n        run_nobounds(&mut left, &mut right, &indices, &labels, &values);\r\n    } else {\r\n        panic!(\"no\");\r\n    }\r\n    let i2 = Instant::now();\r\n\r\n    println!(\"{:?}\", i2.duration_since(i1));\r\n}\r\n$ rustc -C opt-level=3 trash.rs -o trashrs\r\n$ ./trashrs bounds\r\n2.426109454s\r\n$ ./trashrs nobounds\r\n3.104590657s\r\n```\r\n\r\nThis is on a Haswell CPU. ", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52819/reactions", "total_count": 7, "+1": 1, "-1": 0, "laugh": 6, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52819/timeline", "performed_via_github_app": null, "state_reason": "completed"}