{"url": "https://api.github.com/repos/rust-lang/rust/issues/52522", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52522/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52522/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52522/events", "html_url": "https://github.com/rust-lang/rust/issues/52522", "id": 342573967, "node_id": "MDU6SXNzdWUzNDI1NzM5Njc=", "number": 52522, "title": "SystemTime conversions invite programmer error", "user": {"login": "ssokolow", "id": 46915, "node_id": "MDQ6VXNlcjQ2OTE1", "avatar_url": "https://avatars.githubusercontent.com/u/46915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssokolow", "html_url": "https://github.com/ssokolow", "followers_url": "https://api.github.com/users/ssokolow/followers", "following_url": "https://api.github.com/users/ssokolow/following{/other_user}", "gists_url": "https://api.github.com/users/ssokolow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssokolow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssokolow/subscriptions", "organizations_url": "https://api.github.com/users/ssokolow/orgs", "repos_url": "https://api.github.com/users/ssokolow/repos", "events_url": "https://api.github.com/users/ssokolow/events{/privacy}", "received_events_url": "https://api.github.com/users/ssokolow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-19T04:21:04Z", "updated_at": "2020-07-28T19:08:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Yesterday, I found and reported a [panic bug in `serde_json`](https://github.com/serde-rs/json/issues/464) which traces its origins to the mechanism for extracting usable information from `SystemTime`.\r\n\r\nSpecifically, using the best method they believed to be available, it would panic when I tried to serialize metadata for files with negative `mtime` values. (I have one file with an mtime of `-1` and another with an mtime so far in the future that it overflows into a large negative number if the Rust code is compiled for the `i686-unknown-linux-musl` target.\r\n\r\nThe current design of the API encourages users to assume that sources of `SystemTime` values use unsigned values internally (ie. that modifications to the system clock are the only source of `Err` with valid input), and, further more, in the bug I reported for `serde_json`, it led @lambda to the incorrect conclusion that there is currently no way to losslessly serialize and deserialize `SystemTime` values.\r\n\r\nIf nothing else, the documentation should be improved in the following ways:\r\n\r\n1. The documentation for both `UNIX_EPOCH` definitions should explicitly mention that the underlying OS may return valid `SystemTime` values prior to the epoch and code should be prepared for such an eventuality. (Perhaps with the concrete example of `ext3` filesystems allowing negative `mtime` values to be stored)\r\n\r\n2. The documentation for `SystemTime::duration_since` should use \"may return `SystemTimeError`\" rather than \"may fail\" to avoid the connotation that an `Err` result is erroneous in any sense other than being an \"until\" rather than a \"since\".\r\n\r\n    That is, \"failure\" connotes a response that should prompt either retry or error-propagation, while it is not necessary to re-run the operation with the arguments reversed in order to extract the `Duration` and, depending on the input, nothing may be wrong at all. (ie. the `Result` discriminant is semantically equivalent to a sign bit in this case.)\r\n\r\n3. \"and the error contains how far from self the time is\" is too easy to overlook, given how important it is for robust software to handle this eventuality. It should explicitly mention `SystemTimeError::duration` to make it more eye-catching.\r\n\r\n    Perhaps \"Returns an Err if `earlier` is later than `self`. A `Duration` representing how far `self` is before `earlier` can be retrieved via the `duration()` function on the resulting `SystemTimeError`.\r\n\r\nThere are probably other ways to better tune the writing to guard against human error, but I don't want to be here all night trying to perfect this when you might think of the same improvements immediately, simply by virtue of having a different perspective.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52522/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52522/timeline", "performed_via_github_app": null, "state_reason": null}