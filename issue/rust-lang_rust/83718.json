{"url": "https://api.github.com/repos/rust-lang/rust/issues/83718", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83718/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83718/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83718/events", "html_url": "https://github.com/rust-lang/rust/issues/83718", "id": 847237443, "node_id": "MDU6SXNzdWU4NDcyMzc0NDM=", "number": 83718, "title": "[rustdoc-json] Assertion error on blanket impls", "user": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2682491374, "node_id": "MDU6TGFiZWwyNjgyNDkxMzc0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-rustdoc-json", "name": "A-rustdoc-json", "color": "f7e101", "default": false, "description": "Area: Rustdoc JSON backend"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-03-31T19:59:04Z", "updated_at": "2022-01-25T08:18:24Z", "closed_at": "2022-01-25T08:18:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```rust\r\npub trait Get {\r\n    type Target;\r\n    fn get(&self) -> &Self::Target;\r\n}\r\n\r\npub trait LoadNum {\r\n    fn load_num(&self) -> i32;\r\n}\r\n\r\nimpl<A: LoadNum, P: Get<Target = A>> LoadNum for P {\r\n    fn load_num(&self) -> i32 {\r\n        self.get().load_num()\r\n    }\r\n}\r\n\r\npub struct Wrapper<T>(T);\r\nimpl<T> Get for Wrapper<T> {\r\n    type Target = T;\r\n    fn get(&self) -> &T {\r\n        &self.0\r\n    }\r\n}\r\n```\r\n\r\n`rustdoc +stage1 trait.rs -w json`\r\n\r\n```\r\nthread 'rustc' panicked at 'assertion failed: `(left == right)`\r\n\r\nDiff < left / right > :\r\n Item {\r\n     id: Id(\r\n         \"0:11\",\r\n     ),\r\n     crate_id: 0,\r\n     name: Some(\r\n         \"load_num\",\r\n     ),\r\n     span: Some(\r\n         Span {\r\n             filename: \"trait.rs\",\r\n             begin: (\r\n                 11,\r\n                 4,\r\n             ),\r\n             end: (\r\n                 13,\r\n                 5,\r\n             ),\r\n         },\r\n     ),\r\n<    visibility: Default,\r\n>    visibility: Public,\r\n     docs: None,\r\n     links: {},\r\n     attrs: [],\r\n     deprecation: None,\r\n     inner: Method(\r\n         Method {\r\n             decl: FnDecl {\r\n                 inputs: [\r\n                     (\r\n<                        \"self\",\r\n>                        \"\",\r\n                         BorrowedRef {\r\n                             lifetime: None,\r\n                             mutable: false,\r\n                             type_: Generic(\r\n                                 \"Self\",\r\n                             ),\r\n                         },\r\n                     ),\r\n                 ],\r\n                 output: Some(\r\n                     Primitive(\r\n                         \"i32\",\r\n                     ),\r\n                 ),\r\n                 c_variadic: false,\r\n             },\r\n             generics: Generics {\r\n                 params: [],\r\n                 where_predicates: [],\r\n             },\r\n             header: {},\r\n             abi: \"\\\"Rust\\\"\",\r\n             has_body: true,\r\n         },\r\n     ),\r\n }\r\n\r\n', src/librustdoc/json/mod.rs:179:17\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nInteresingly, and shockingly If you remove `pub struct Wrapper<T>(T);` and `impl<T> Get for Wrapper<T>`, this doesn't panic.\r\n\r\n```\r\nrustdoc +stage1 --version --verbose\r\nrustdoc 1.53.0-nightly (a5029ac0a 2021-03-31)\r\nbinary: rustdoc\r\ncommit-hash: a5029ac0ab372aec515db2e718da6d7787f3d122\r\ncommit-date: 2021-03-31\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.53.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n<details>\r\n<summary> Whats up with the diff? </summary>\r\n\r\nThe assetion format is differnt to usual as I've patch rustc with\r\n```diff\r\ndiff --git a/src/librustdoc/json/mod.rs b/src/librustdoc/json/mod.rs\r\nindex db3a0c5ceb1..434286e72f9 100644\r\n--- a/src/librustdoc/json/mod.rs\r\n+++ b/src/librustdoc/json/mod.rs\r\n@@ -176,7 +176,7 @@ fn item(&mut self, item: clean::Item) -> Result<(), Error> {\r\n             // to make sure the items are unique. The main place this happens is when an item, is\r\n             // reexported in more than one place. See `rustdoc-json/reexport/in_root_and_mod`\r\n             if let Some(old_item) = removed {\r\n-                assert_eq!(old_item, new_item);\r\n+                pretty_assertions::assert_eq!(old_item, new_item);\r\n             }\r\n         }\r\n```\r\nto make it readable, but this can also be repoduced with the latest nightly\r\n\r\n```\r\nrustdoc +nightly trait.rs -w json \r\nthread 'rustc' panicked at 'assertion failed: `(left == right)`\r\n  left: `Item { id: Id(\"0:11\"), crate_id: 0, name: Some(\"load_num\"), span: Some(Span { filename: \"trait.rs\", begin: (11, 4), end: (13, 5) }), visibility: Default, docs: None, links: {}, attrs: [], deprecation: None, inner: Method(Method { decl: FnDecl { inputs: [(\"self\", BorrowedRef { lifetime: None, mutable: false, type_: Generic(\"Self\") })], output: Some(Primitive(\"i32\")), c_variadic: false }, generics: Generics { params: [], where_predicates: [] }, header: {}, abi: \"\\\"Rust\\\"\", has_body: true }) }`,\r\n right: `Item { id: Id(\"0:11\"), crate_id: 0, name: Some(\"load_num\"), span: Some(Span { filename: \"trait.rs\", begin: (11, 4), end: (13, 5) }), visibility: Public, docs: None, links: {}, attrs: [], deprecation: None, inner: Method(Method { decl: FnDecl { inputs: [(\"\", BorrowedRef { lifetime: None, mutable: false, type_: Generic(\"Self\") })], output: Some(Primitive(\"i32\")), c_variadic: false }, generics: Generics { params: [], where_predicates: [] }, header: {}, abi: \"\\\"Rust\\\"\", has_body: true }) }`', src/librustdoc/json/mod.rs:175:17\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nerror: Unrecognized option: 'w'\r\n```\r\n\r\n```\r\nrustdoc 1.53.0-nightly (07e0e2ec2 2021-03-24)\r\nbinary: rustdoc\r\ncommit-hash: 07e0e2ec268c140e607e1ac7f49f145612d0f597\r\ncommit-date: 2021-03-24\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.53.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n</details>\r\n\r\n@rustbot modify labels: +A-rustdoc-json +T-rustdoc", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83718/timeline", "performed_via_github_app": null, "state_reason": "completed"}