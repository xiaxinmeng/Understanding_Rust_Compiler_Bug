{"url": "https://api.github.com/repos/rust-lang/rust/issues/69691", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69691/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69691/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69691/events", "html_url": "https://github.com/rust-lang/rust/issues/69691", "id": 575239812, "node_id": "MDU6SXNzdWU1NzUyMzk4MTI=", "number": 69691, "title": "std::env members need to document \"process global\" risks.", "user": {"login": "kentfredric", "id": 44790, "node_id": "MDQ6VXNlcjQ0Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/44790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kentfredric", "html_url": "https://github.com/kentfredric", "followers_url": "https://api.github.com/users/kentfredric/followers", "following_url": "https://api.github.com/users/kentfredric/following{/other_user}", "gists_url": "https://api.github.com/users/kentfredric/gists{/gist_id}", "starred_url": "https://api.github.com/users/kentfredric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kentfredric/subscriptions", "organizations_url": "https://api.github.com/users/kentfredric/orgs", "repos_url": "https://api.github.com/users/kentfredric/repos", "events_url": "https://api.github.com/users/kentfredric/events{/privacy}", "received_events_url": "https://api.github.com/users/kentfredric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-04T09:04:59Z", "updated_at": "2020-03-04T10:37:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I've hit a few bugs in various crate test suites where 2 different tests both modify POSIX ENV, and then execute code and assertions based on those changes.\r\n\r\nOften, this works simply due to the code being fast enough, but you can randomly get weird failures due to the data races in `ENV`, due to `ENV` being shared between threads.\r\n\r\nBut I don't see any documentation pointing out either:\r\n\r\na. That this  risk occurs\r\nb. How this risk occurs\r\nc. How to manage this risk.\r\n\r\nThe best I see is: https://doc.rust-lang.org/nightly/std/env/fn.set_var.html\r\n\r\nBut its current prose of \"Note that while concurrent access to environment variables is safe in Rust\" can give the false impression that there isn't any problem to manage here unless one is doing FFI. \r\n\r\nIt needs to be more explicit, and highlight that you can trip into this when writing just plain ol' rust without anything fancy, with no external crates, and no custom ffi code.\r\n\r\n( And probably needs to be mentioned at a higher level, like https://doc.rust-lang.org/nightly/std/env/index.html )\r\n\r\nIn tests, its especially spicy, as a test failing (which is ultimately a panic!), results in the Mutex becoming poisoned, which, if not managed properly in the tests, results in all tests that need to lock `ENV`, also failing with confusing errors, due to said poisoning.\r\n\r\nThere's already 2 PR's where I've submitted working solutions for this, and perhaps some of the strategies I've used could be used as a baseline for some documented guidance.\r\n\r\n( Personally I wish rust wrapped the `env` access controls to protect code against this sort of problem, but asking for that is a bit of a tall order for me, so a documentation solution is better than nothing )\r\n\r\n: https://github.com/sagiegurari/ci_info/pull/9\r\n: https://github.com/seanmonstar/reqwest/pull/837\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69691/timeline", "performed_via_github_app": null, "state_reason": null}