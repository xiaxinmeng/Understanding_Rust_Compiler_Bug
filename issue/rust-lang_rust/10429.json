{"url": "https://api.github.com/repos/rust-lang/rust/issues/10429", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10429/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10429/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10429/events", "html_url": "https://github.com/rust-lang/rust/issues/10429", "id": 22478989, "node_id": "MDU6SXNzdWUyMjQ3ODk4OQ==", "number": 10429, "title": "Make working with unsafe pointers easier", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-11-11T21:44:02Z", "updated_at": "2014-12-15T08:07:27Z", "closed_at": "2014-12-15T08:07:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are a number of common tricks to writing unsafe Rust that tend to be just passed around as received wisdom, but it's not particularly easy or obvious. For some use cases using unsafe pointers is just easier, so we should cater to this with nicer library functions. This is an open-ended task to identify common unsafe patterns and extract them into the standard library. The only things I have in mind off hand are `alloc` and `free` functions to encapsulate the transmutes from unique pointers.\n", "closed_by": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10429/timeline", "performed_via_github_app": null, "state_reason": "completed"}