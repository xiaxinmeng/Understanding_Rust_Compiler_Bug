{"url": "https://api.github.com/repos/rust-lang/rust/issues/108451", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108451/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108451/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108451/events", "html_url": "https://github.com/rust-lang/rust/issues/108451", "id": 1599697275, "node_id": "I_kwDOAAsO6M5fWXF7", "number": 108451, "title": "`Add` confusion when casting an integer to a float with trait functions", "user": {"login": "koskinev", "id": 9077146, "node_id": "MDQ6VXNlcjkwNzcxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/9077146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koskinev", "html_url": "https://github.com/koskinev", "followers_url": "https://api.github.com/users/koskinev/followers", "following_url": "https://api.github.com/users/koskinev/following{/other_user}", "gists_url": "https://api.github.com/users/koskinev/gists{/gist_id}", "starred_url": "https://api.github.com/users/koskinev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koskinev/subscriptions", "organizations_url": "https://api.github.com/users/koskinev/orgs", "repos_url": "https://api.github.com/users/koskinev/repos", "events_url": "https://api.github.com/users/koskinev/events{/privacy}", "received_events_url": "https://api.github.com/users/koskinev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-02-25T12:42:11Z", "updated_at": "2023-04-05T17:40:29Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nThe following code seems to trick the compiler into thinking that `f64` does not implement `Add<Self>`:\r\n\r\n```rust\r\nuse std::fmt::Debug;\r\nuse std::ops::Add;\r\n\r\n/// A scalar number.\r\npub trait Scalar\r\nwhere\r\n    Self: Debug\r\n        + Sized\r\n        + Add<Self, Output = Self> // If this bound is moved last, the error goes away\r\n        + for<'a> Add<&'a Self, Output = <Self as Add<Self>>::Output>, \r\n{\r\n}\r\n\r\n/// A floating point number constructed from a scalar number\r\npub trait FloatFrom<Src>: Float\r\nwhere\r\n    Src: Scalar,\r\n{\r\n    /// Converts the value into a floating point number.\r\n    fn from_scalar(value: Src) -> Self;\r\n}\r\n\r\n/// A floating point number.\r\npub trait Float: Scalar {}\r\n\r\nimpl Scalar for i32 {}\r\nimpl Scalar for f64 {}\r\nimpl Float for f64 {}\r\nimpl FloatFrom<i32> for f64 {\r\n    fn from_scalar(value: i32) -> Self {\r\n        value as f64\r\n    }\r\n}\r\n\r\nfn add_one_f64<S>(x: S)\r\nwhere\r\n    f64: FloatFrom<S>,\r\n    S: Scalar,\r\n{\r\n    let float = f64::from_scalar(x);\r\n    let one = 1.0_f64;\r\n    assert_eq!(float + &one, 2.0);\r\n    assert_eq!(float + one, 2.0); // <-- error[E0308]: mismatched types, expected `&f64`, found floating-point number\r\n}\r\n\r\nfn main() {\r\n    let a = 1;\r\n    add_one_f64(a)\r\n}\r\n```\r\n\r\nI expected the code would compile without errors. Instead, the compiler complained about mismatched types. \r\n\r\nThe error goes away if the `Scalar` trait is rewritten as:\r\n```rust\r\npub trait Scalar\r\nwhere\r\n    Self: Debug\r\n        + Sized\r\n        // + Add<Self, Output = Self>\r\n        // + for<'a> Add<&'a Self, Output = <Self as Add<Self>>::Output>,\r\n        + for<'a> Add<&'a Self, Output = <Self as Add<Self>>::Output>\r\n        + Add<Self, Output = Self>,\r\n{\r\n}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.67.1 (d5a82bbd2 2023-02-07)\r\nbinary: rustc\r\ncommit-hash: d5a82bbd26e1ad8b7401f6a718a9c57c96905483\r\ncommit-date: 2023-02-07\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.67.1\r\nLLVM version: 15.0.6\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n Compiling scrap v0.1.0 (/home/me/scrap)\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:41:24\r\n   |\r\n41 |     assert_eq!(float + one, 2.0); // <-- error[E0308]: mismatched types, expected `&f64`, found floating-point number\r\n   |                        ^^^\r\n   |                        |\r\n   |                        expected `&f64`, found `f64`\r\n   |                        help: consider borrowing here: `&one`\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `scrap` due to previous error\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108451/timeline", "performed_via_github_app": null, "state_reason": null}