{"url": "https://api.github.com/repos/rust-lang/rust/issues/88925", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88925/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88925/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88925/events", "html_url": "https://github.com/rust-lang/rust/issues/88925", "id": 995549557, "node_id": "I_kwDOAAsO6M47VuF1", "number": 88925, "title": "Infinite recursion while resolving traits", "user": {"login": "stepchowfun", "id": 796574, "node_id": "MDQ6VXNlcjc5NjU3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/796574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepchowfun", "html_url": "https://github.com/stepchowfun", "followers_url": "https://api.github.com/users/stepchowfun/followers", "following_url": "https://api.github.com/users/stepchowfun/following{/other_user}", "gists_url": "https://api.github.com/users/stepchowfun/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepchowfun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepchowfun/subscriptions", "organizations_url": "https://api.github.com/users/stepchowfun/orgs", "repos_url": "https://api.github.com/users/stepchowfun/repos", "events_url": "https://api.github.com/users/stepchowfun/events{/privacy}", "received_events_url": "https://api.github.com/users/stepchowfun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-09-14T03:38:13Z", "updated_at": "2021-11-13T04:16:52Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi all! I'm running into an issue that is difficult for me to describe other than by giving a simple example. I believe the following  code should compile, but instead it seems like the compiler gets stuck in a loop:\r\n\r\n```rust\r\nuse std::{\r\n    fs::File,\r\n    io::{Result, Write},\r\n};\r\n\r\npub trait Serialize {\r\n    fn serialize<T: Write>(&self, writer: T) -> Result<()>;\r\n}\r\n\r\npub enum Tree {\r\n    Leaf(bool),\r\n    Parent(Vec<Tree>),\r\n}\r\n\r\nimpl Serialize for Tree {\r\n    fn serialize<T: Write>(&self, mut writer: T) -> Result<()> {\r\n        match self {\r\n            Tree::Leaf(_) => Ok(()),\r\n            Tree::Parent(children) => {\r\n                // let mut writer: Box<dyn Write> = Box::new(writer);\r\n\r\n                for child in children {\r\n                    child.serialize(writer.by_ref())?;\r\n                }\r\n\r\n                Ok(())\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfn main() -> Result<()> {\r\n    let mut buffer = File::create(\"tree.txt\")?;\r\n    Tree::Parent(vec![Tree::Leaf(true)]).serialize(&mut buffer)\r\n}\r\n```\r\n\r\nAs is, the compiler gives this error when running `cargo build`:\r\n\r\n```\r\n$ cargo build\r\n   Compiling example v0.1.0 (/Users/stephanboyer/Desktop/personal/projects/typical/integration-tests/rust)\r\nerror: reached the recursion limit while instantiating `<Tree as Serialize>::serialize::...t &mut &mut &mut &mut &mut File>`\r\n  --> src/main.rs:24:21\r\n   |\r\n24 |                     child.serialize(writer.by_ref())?;\r\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: `<Tree as Serialize>::serialize` defined here\r\n  --> src/main.rs:16:5\r\n   |\r\n16 |     fn serialize<T: Write>(&self, mut writer: T) -> Result<()> {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: the full type name has been written to '/Users/stephanboyer/Desktop/personal/projects/typical/integration-tests/rust/target/debug/deps/example.long-type.txt'\r\n\r\nerror: could not compile `example` due to previous error\r\n```\r\n\r\nSince `writer: T` implements `Write` (as `T` has the trait bound), I would expect `writer.by_ref()` to also implement `Write`, per the [documentation of `by_ref()`](https://doc.rust-lang.org/std/io/trait.Write.html#method.by_ref). But the compiler does not seem satisfied by that, and instead seems to get stuck in some kind of loop (until the recursion limit is reached).\r\n\r\nThe build succeeds if the commented line is uncommented. It seems boxing the `writer` into a trait object terminates the recursion. But that requires an extra allocation, so it's not a satisfying workaround.\r\n\r\n(Strangely, `cargo check` succeeds on both versions and doesn't seem to run into this issue.)\r\n\r\nThanks for looking into this, and I apologize if this is a duplicate of another issue. I tried searching and found a few possible instances of people running into the compiler's recursion limit, but it was hard for me to tell if it was the same issue as this one.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.55.0 (c8dfcfe04 2021-09-06)\r\nbinary: rustc\r\ncommit-hash: c8dfcfe046a7680554bf4eb612bad840e7631c4b\r\ncommit-date: 2021-09-06\r\nhost: x86_64-apple-darwin\r\nrelease: 1.55.0\r\nLLVM version: 12.0.1\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n$ RUST_BACKTRACE=1 cargo build\r\n\r\n   Compiling example v0.1.0 (/Users/stephanboyer/Desktop/personal/projects/typical/integration-tests/rust)\r\nerror: reached the recursion limit while instantiating `<Tree as Serialize>::serialize::...t &mut &mut &mut &mut &mut File>`\r\n  --> src/main.rs:24:21\r\n   |\r\n24 |                     child.serialize(writer.by_ref())?;\r\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: `<Tree as Serialize>::serialize` defined here\r\n  --> src/main.rs:16:5\r\n   |\r\n16 |     fn serialize<T: Write>(&self, mut writer: T) -> Result<()> {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: the full type name has been written to '/Users/stephanboyer/Desktop/personal/projects/typical/integration-tests/rust/target/debug/deps/example.long-type.txt'\r\n\r\nerror: could not compile `example` due to previous error\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88925/timeline", "performed_via_github_app": null, "state_reason": null}