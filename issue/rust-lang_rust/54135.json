{"url": "https://api.github.com/repos/rust-lang/rust/issues/54135", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54135/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54135/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54135/events", "html_url": "https://github.com/rust-lang/rust/issues/54135", "id": 359174321, "node_id": "MDU6SXNzdWUzNTkxNzQzMjE=", "number": 54135, "title": "#[used] and symbol visibility is unclear", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-09-11T18:49:34Z", "updated_at": "2020-07-02T08:36:45Z", "closed_at": "2018-10-07T05:41:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I was excited to see `#[used]` stabilized (yay!) as [one of the issues](https://github.com/rustwasm/wasm-bindgen/issues/201) we suffer from in `wasm-bindgen` is related to symbols being removed. Unfortunately though `#[used]` doesn't solve our use case!\r\n\r\nFirst I'll try to explain our issue a bit. The `#[wasm_bindgen]` attribute allows you to import JS functionality into a Rust program. This doesn't work, however, when you import JS functions into a private Rust submodule. (aka `mod foo { ... }`). When importing a function we *also* generate an internal exported function which the CLI `wasm-bindgen` tool uses (and then removes), but it suffices to say that we're generating code that looks like:\r\n\r\n```rust\r\nmod private {\r\n    #[no_mangle]\r\n    pub extern fn foo() { /* ... */ }\r\n}\r\n```\r\n\r\nToday the symbol `foo` is not considered alive by rustc itself as it's not reachable. As a result, it's not even translated into the object file. If we instead change this though:\r\n\r\n```rust\r\n#![feature(used)]\r\n\r\nmod private {\r\n    #[no_mangle]\r\n    pub extern fn foo() {}\r\n    \r\n    #[used]\r\n    static F: extern fn() = foo;\r\n}\r\n```\r\n\r\nThis *still* doesn't work! Unfortunately for us the `#[used]` works as intended but doesn't affect the symbol visibility. The above program [generates this IR](https://play.rust-lang.org/?gist=4f3c68a523c9ce345265807849cf812e&version=nightly&mode=release&edition=2015):\r\n\r\n```ll\r\n; ModuleID = 'playground.7pbp0xok-cgu.0'\r\nsource_filename = \"playground.7pbp0xok-cgu.0\"\r\ntarget datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\n@_ZN10playground7private1F17hb0dc3802d85fadd7E = internal constant <{ i8*, [0 x i8] }> <{ i8* bitcast (void ()* @foo to i8*), [0 x i8] zeroinitializer }>, align 8\r\n@llvm.used = appending global [1 x i8*] [i8* bitcast (<{ i8*, [0 x i8] }>* @_ZN10playground7private1F17hb0dc3802d85fadd7E to i8*)], section \"llvm.metadata\"\r\n\r\n; Function Attrs: norecurse nounwind readnone uwtable\r\ndefine internal void @foo() unnamed_addr #0 {\r\nstart:\r\n  ret void\r\n}\r\n\r\nattributes #0 = { norecurse nounwind readnone uwtable \"probe-stack\"=\"__rust_probestack\" }\r\n```\r\n\r\nthe problem here is that the symbol `foo`, while not mangled, is still marked as `internal`. This in turns means that it does indeed reach the linker, but for our purposes in `wasm-bindgen` we need it to *survive* the linker, not just reach the linker.\r\n\r\n---\r\n\r\nOk so that's the problem statement for `wasm-bindgen`, but you can generalize it today for rustc by asking: what does `#[used]` do to symbol visibility? The overall story for symbol visibility in rustc is a little muddied and not always great (especially on ABI-particulars like `#[no_mangle]` things). \r\n\r\nWhat *should* the symbol visibility of `foo` be here?\r\n\r\n```rust\r\nmod private {\r\n    #[no_mangle]\r\n    pub extern fn foo() {}\r\n    \r\n    #[used]\r\n    static F: extern fn() = foo;\r\n}\r\n```\r\n\r\nWe've always had a basic rule of thumb in Rust that \"reachable symbols\" have non-internal visibility, but it's not clear what to do here. `foo` is indeed a reachable symbol because of `#[used]`, but it's in a private module. Does that mean because of `pub` and `#[no_mangle]` it shouldn't have `internal` visibility? Should only `#[no_mangle]` imply that? It's unclear to me!\r\n\r\nI'd naively like to send a patch that makes foo not-`internal` because it has `#[no_mangle]` and `pub` (not that it's \"publicly reachable\"). I think though that this may be deeper in the compiler. I just took a look at how `#[used]` works, and it's actually a little suprising!\r\n\r\nIn `src/librustc_mir/monomorphize/collector.rs` we attempt to not translate anything not reachable in a crate as a form of DCE. I didn't find any handling of `#[used]`, though, and it turns out we unconditionally translate all statics all the time! Then becuase we put it in `llvm.used` it ends up not getting gc'd by LLVM.\r\n\r\nI think that we may want to future-proof this by updating the `src/librustc/middle/reachable.rs` collection step to basically push `#[used]` statics onto the worklist to process. The initial worklist is seeded with all items that are public by visibility, and I think we could change it to *also* be seeded with any `#[used]` statics. This means that anything referenced by a `#[used]` static will be pulled in as a result.\r\n\r\nDo others think this is a reasonable strategy for having `#[used]` affect symbol visibility?\r\n\r\ncc @michaelwoerister \r\ncc @fitzgen \r\ncc @japaric ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54135/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54135/timeline", "performed_via_github_app": null, "state_reason": "completed"}