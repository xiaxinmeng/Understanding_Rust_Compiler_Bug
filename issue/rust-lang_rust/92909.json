{"url": "https://api.github.com/repos/rust-lang/rust/issues/92909", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92909/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92909/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92909/events", "html_url": "https://github.com/rust-lang/rust/issues/92909", "id": 1104137448, "node_id": "I_kwDOAAsO6M5Bz8zo", "number": 92909, "title": "Require explicit opt-in when combining `HashStable` with custom `PartialEq`", "user": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-01-14T21:25:54Z", "updated_at": "2023-04-05T17:42:35Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The [`HashStable` trait](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/stable_hasher/trait.HashStable.html) requires that a `HashStable` impl agree with the `PartialEq` impl for the same type: `x == y` if and only if `hash_stable(x) == hash_stable(y)`.\r\n\r\nUnfortunately, it's currently easy to violate this requirement by accident. A type may start out with a manual `PartialEq` impl - this may be perfectly fine on its own, but then become invalid if a `#[derive(HashStable)]` attribute is later added.\r\n\r\nFor example, the `Ident` struct acquired a manual `PartialEq` impl [four years ago](https://github.com/rust-lang/rust/commit/baae274fb72c91dbee441e20622cffdc218bdcb5#diff-9589e2d82ff438a80167897af5df86abc549367645c129d3447907c9a83c9480R53-R57), which ignored the location of the `Span` field (only the `SyntaxContext` is compared). At the time, that was fine - however, `Ident` now implements `HashStable`, making that impl incorrect.\r\n\r\nI propose that we add a new `#[marker]` trait called something like `PartialEqSafeForHashStable`, and have `trait HashStable: PartialEqSafeForHashStable`. When `HashStable` is derived, we can emit `impl PartialEqSafeForHashStable for MyType where MyType: StructuralPartialEq`, which will give us the desired impl automatically when `#[derive(PartialEq)]` is used. If a manual impl of `HashStable` and/or `PartialEq` is written, a manual impl of the trait will be needed to assert that the impls are actually compatible.\r\n\r\nWithout negative bounds, we can't have `impl PartialEqSafeForHashStable for T where T: !PartialEq`. However, we could allow writing `#[stable_hasher(no_partial_eq)]`, and make that use the [assert *not* implemented](https://docs.rs/static_assertions/latest/static_assertions/macro.assert_not_impl_all.html) trick to enforce that the user really didn't write a `PartialEq` impl.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92909/timeline", "performed_via_github_app": null, "state_reason": null}