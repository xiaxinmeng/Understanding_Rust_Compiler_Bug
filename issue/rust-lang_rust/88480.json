{"url": "https://api.github.com/repos/rust-lang/rust/issues/88480", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88480/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88480/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88480/events", "html_url": "https://github.com/rust-lang/rust/issues/88480", "id": 982542115, "node_id": "MDU6SXNzdWU5ODI1NDIxMTU=", "number": 88480, "title": "Inlined iterator degrades performance when crosses crate boundaries", "user": {"login": "jorgecarleitao", "id": 2772607, "node_id": "MDQ6VXNlcjI3NzI2MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2772607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorgecarleitao", "html_url": "https://github.com/jorgecarleitao", "followers_url": "https://api.github.com/users/jorgecarleitao/followers", "following_url": "https://api.github.com/users/jorgecarleitao/following{/other_user}", "gists_url": "https://api.github.com/users/jorgecarleitao/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorgecarleitao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorgecarleitao/subscriptions", "organizations_url": "https://api.github.com/users/jorgecarleitao/orgs", "repos_url": "https://api.github.com/users/jorgecarleitao/repos", "events_url": "https://api.github.com/users/jorgecarleitao/events{/privacy}", "received_events_url": "https://api.github.com/users/jorgecarleitao/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-08-30T08:40:29Z", "updated_at": "2021-08-30T20:26:38Z", "closed_at": "2021-08-30T20:16:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the iterator \r\n\r\n```rust\r\nconst BIT_MASK: [u8; 8] = [1, 2, 4, 8, 16, 32, 64, 128];\r\n\r\n/// Returns whether bit at position `i` in `data` is set or not.\r\n///\r\n/// # Safety\r\n/// `i >= data.len() * 8` results in undefined behavior\r\n#[inline(always)]\r\npub unsafe fn get_bit_unchecked(data: &[u8], i: usize) -> bool {\r\n    (*data.as_ptr().add(i >> 3) & BIT_MASK[i & 7]) != 0\r\n}\r\n\r\n/// An iterator over bits according to the [LSB](https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit),\r\n/// i.e. the bytes `[4u8, 128u8]` correspond to `[false, false, true, false, ..., true]`.\r\n#[derive(Debug, Clone)]\r\npub struct BitmapIter<'a> {\r\n    bytes: &'a [u8],\r\n    index: usize,\r\n    end: usize,\r\n}\r\n\r\nimpl<'a> BitmapIter<'a> {\r\n    pub fn new(slice: &'a [u8], offset: usize, len: usize) -> Self {\r\n        // example:\r\n        // slice.len() = 4\r\n        // offset = 9\r\n        // len = 23\r\n        // result:\r\n        let bytes = &slice[offset / 8..];\r\n        // bytes.len() = 3\r\n        let index = offset % 8;\r\n        // index = 9 % 8 = 1\r\n        let end = len + index;\r\n        // end = 23 + 1 = 24\r\n        assert!(end <= bytes.len() * 8);\r\n        // maximum read before UB in bits: bytes.len() * 8 = 24\r\n        // the first read from the end is `end - 1`, thus, end = 24 is ok\r\n\r\n        Self { bytes, index, end }\r\n    }\r\n}\r\n\r\nimpl<'a> Iterator for BitmapIter<'a> {\r\n    type Item = bool;\r\n\r\n    #[inline]\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        if self.index == self.end {\r\n            return None;\r\n        }\r\n        let old = self.index;\r\n        self.index += 1;\r\n        // See comment in `new`\r\n        Some(unsafe { get_bit_unchecked(self.bytes, old) })\r\n    }\r\n\r\n    #[inline]\r\n    fn size_hint(&self) -> (usize, Option<usize>) {\r\n        let exact = self.end - self.index;\r\n        (exact, Some(exact))\r\n    }\r\n}\r\n```\r\n\r\nthe bench \r\n\r\n```rust\r\nfn bench_baseline(slice: &[u8]) {\r\n    let iter = BitmapIter::new(slice, 0, slice.len() * 8).map(|x| x as usize);\r\n    let a: usize = iter.sum();\r\n    assert!(a > 0);\r\n}\r\n```\r\n\r\nis about 20% slower than the equivalent \"raw\" implementation\r\n\r\n```rust\r\nfn bench_sum_count1(slice: &[u8]) {\r\n    let iter = (0..slice.len() * 8).map(|i| unsafe { get_bit_unchecked(slice, i) } as usize);\r\n    let a: usize = iter.sum();\r\n    assert!(a > 0);\r\n}\r\n```\r\n\r\nHowever, when the iterator's code is copy-pasted to the bench file itself, there is no difference between `bench_baseline` and `bench_sum_count1`, indicating that `inline` is not being fully respected across crate boundaries.\r\n\r\nMinimal repro with benches included: https://github.com/jorgecarleitao/rust-iterator-slow\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.0-nightly (492723897 2021-07-29)\r\nbinary: rustc\r\ncommit-hash: 492723897e9b4db6701b3a75b72618d08a7d5319\r\ncommit-date: 2021-07-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.56.0-nightly\r\nLLVM version: 12.0.1\r\n```\r\n", "closed_by": {"login": "jorgecarleitao", "id": 2772607, "node_id": "MDQ6VXNlcjI3NzI2MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2772607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorgecarleitao", "html_url": "https://github.com/jorgecarleitao", "followers_url": "https://api.github.com/users/jorgecarleitao/followers", "following_url": "https://api.github.com/users/jorgecarleitao/following{/other_user}", "gists_url": "https://api.github.com/users/jorgecarleitao/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorgecarleitao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorgecarleitao/subscriptions", "organizations_url": "https://api.github.com/users/jorgecarleitao/orgs", "repos_url": "https://api.github.com/users/jorgecarleitao/repos", "events_url": "https://api.github.com/users/jorgecarleitao/events{/privacy}", "received_events_url": "https://api.github.com/users/jorgecarleitao/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88480/timeline", "performed_via_github_app": null, "state_reason": "completed"}