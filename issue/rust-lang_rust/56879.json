{"url": "https://api.github.com/repos/rust-lang/rust/issues/56879", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56879/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56879/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56879/events", "html_url": "https://github.com/rust-lang/rust/issues/56879", "id": 391479659, "node_id": "MDU6SXNzdWUzOTE0Nzk2NTk=", "number": 56879, "title": "attributes on struct field expressions are lost in TokenStream.to_string", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-16T15:50:46Z", "updated_at": "2020-04-07T20:01:30Z", "closed_at": "2020-04-07T20:01:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "## Simplified report\r\n\r\nI originally thought that nested proc macros were required to hit this bug but it turned out they were not required.\r\n\r\n### STR\r\n\r\n- crate: macros\r\n\r\n``` toml\r\n[package]\r\nname = \"macros\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Jorge Aparicio <jorge@japaric.io>\"]\r\nedition = \"2018\"\r\n\r\n[lib]\r\nproc-macro = true\r\n\r\n[dependencies]\r\nquote = \"=0.6.10\"\r\n\r\n[dependencies.syn]\r\nfeatures = [\"extra-traits\", \"full\"]\r\nversion = \"=0.15.23\"\r\n```\r\n\r\n``` rust\r\nextern crate proc_macro;\r\n\r\nuse proc_macro::TokenStream;\r\nuse syn::{parse_macro_input, ItemFn};\r\n\r\nuse quote::quote;\r\n\r\n#[proc_macro_attribute]\r\npub fn foo(_: TokenStream, input: TokenStream) -> TokenStream {\r\n    panic!(\"{}\", input);\r\n}\r\n```\r\n\r\n- crate: foo\r\n\r\n``` toml\r\n[package]\r\nname = \"foo\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Jorge Aparicio <jorge@japaric.io>\"]\r\nedition = \"2018\"\r\n\r\n[dependencies]\r\nmacros = { path = \"macros\" }\r\n```\r\n\r\n``` rust\r\nuse macros::foo;\r\n\r\n#[foo]\r\nfn foo() {\r\n    pub struct Foo {\r\n        x: i32,\r\n        y: i32,\r\n        #[cfg(never)] // PRESERVED (field def)\r\n        z: i32,\r\n    }\r\n\r\n    #[allow(dead_code)] // PRESERVED (item)\r\n    fn bar() {}\r\n\r\n    #[allow(dead_code)] // PRESERVED (expr)\r\n    let x = Foo {\r\n        x: 0,\r\n        y: 1,\r\n        #[cfg(never)] // LOST (field expr)\r\n        z: 2,\r\n    };\r\n}\r\n```\r\n\r\nNote how the attribute on `z: 2` is lost when stringifying the `TokenStream`.\r\n\r\n``` console\r\n$ cargo build\r\nerror: custom attribute panicked\r\n --> src/lib.rs:3:1\r\n  |\r\n3 | #[foo]\r\n  | ^^^^^^\r\n  |\r\n  = help: message: fn foo() {\r\n              pub struct Foo {\r\n                  x: i32,\r\n                  y: i32,\r\n                  #[cfg(never)]\r\n                  z: i32,\r\n              }\r\n              #[allow(dead_code)]\r\n              fn bar() { }\r\n              #[allow(dead_code)]\r\n              let x = Foo{x: 0, y: 1, z: 2,};\r\n          }\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\n---\r\n\r\n## Original report\r\n\r\nattributes on fields are lost in nested proc macros\r\n\r\n### STR\r\n\r\n- crate: macros\r\n\r\n``` toml\r\n[package]\r\nname = \"macros\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Jorge Aparicio <jorge@japaric.io>\"]\r\nedition = \"2018\"\r\n\r\n[lib]\r\nproc-macro = true\r\n\r\n[dependencies]\r\nquote = \"=0.6.10\"\r\n\r\n[dependencies.syn]\r\nfeatures = [\"extra-traits\", \"full\"]\r\nversion = \"=0.15.23\"\r\n```\r\n\r\n``` rust\r\nextern crate proc_macro;\r\n\r\nuse proc_macro::TokenStream;\r\nuse syn::{parse_macro_input, ItemFn};\r\n\r\nuse quote::quote;\r\n\r\n#[proc_macro_attribute]\r\npub fn foo(_: TokenStream, _: TokenStream) -> TokenStream {\r\n    let ts: TokenStream = quote!(\r\n        #[id]\r\n        fn foo() {\r\n            #[allow(dead_code)] // PRESERVED (item)\r\n            fn bar() {}\r\n\r\n            #[allow(dead_code)] // PRESERVED (expr)\r\n            let foo = Foo {\r\n                x: 0,\r\n                y: 1,\r\n                #[cfg(never)] // LOST (field)\r\n                z: 2,\r\n            };\r\n        }\r\n    )\r\n    .into();\r\n\r\n    eprintln!(\"foo -> {}\\n\", ts);\r\n    ts\r\n}\r\n\r\n#[proc_macro_attribute]\r\npub fn id(_: TokenStream, input: TokenStream) -> TokenStream {\r\n    eprintln!(\"id <- {}\", input.to_string());\r\n\r\n    let input = parse_macro_input!(input as ItemFn);\r\n    quote!(#input).into()\r\n}\r\n```\r\n\r\n- crate: foo\r\n\r\n``` toml\r\n[package]\r\nname = \"foo\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Jorge Aparicio <jorge@japaric.io>\"]\r\nedition = \"2018\"\r\n\r\n[dependencies]\r\nmacros = { path = \"macros\" }\r\n```\r\n\r\n``` rust\r\nuse macros::{foo, id};\r\n\r\npub struct Foo {\r\n    x: i32,\r\n    y: i32,\r\n}\r\n\r\n#[foo]\r\nconst FOO: () = {};\r\n```\r\n\r\nI expect `foo` to compile with `cargo build` (no `--cfg` passed) but it doesn't:\r\n\r\n``` console\r\n$ # note that `#[cfg]` is missing in the `id <- ..` output\r\n$ cargo build\r\nfoo -> # [ id ] fn foo (  ) {\r\n# [ allow ( dead_code ) ] fn bar (  ) {  } # [ allow ( dead_code ) ] let foo =\r\nFoo { x : 0 , y : 1 , # [ cfg ( never ) ] z : 2 , } ; }\r\n\r\nid <- fn foo() {\r\n    #[allow(dead_code)]\r\n    fn bar() { }\r\n    #[allow(dead_code)]\r\n    let foo = Foo{x: 0, y: 1, z: 2,};\r\n}\r\nerror[E0560]: struct `Foo` has no field named `z`\r\n  |\r\n  = note: available fields are: `x`, `y`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nIf I remove `#[id]` from `fn foo()` then the crate `foo` compiles.\r\n\r\nNote that the attribute on field `z` is lost even if it's not a `#[cfg]` attribute.\r\n\r\n### Meta\r\n\r\n``` console\r\n$ rustc -V\r\nrustc 1.33.0-nightly (93c2f055b 2018-12-15)\r\n```\r\n\r\n---\r\n\r\nIt seems that the attribute is only lost when going from `TokenStream` to a `String`. If I don't roundtrip through `syn::TokenStream` then the code behaves as expected:\r\n\r\n``` rust\r\n// ..\r\n\r\n#[proc_macro_attribute]\r\npub fn id(_: TokenStream, input: TokenStream) -> TokenStream {\r\n    eprintln!(\"id <- {}\", input.to_string());\r\n    input // no roundtrip\r\n}\r\n```\r\n\r\n``` console\r\n$ # works as expected\r\n$ # but note that `#[cfg(never)]` is not shown here in `id <- ..`\r\n$ cargo build && echo OK\r\nfoo -> # [ id ] fn foo (  ) {\r\n# [ allow ( dead_code ) ] fn bar (  ) {  } # [ allow ( dead_code ) ] let foo =\r\nFoo { x : 0 , y : 1 , # [ cfg ( never ) ] z : 2 , } ; }\r\n\r\nid <- fn foo() {\r\n    #[allow(dead_code)]\r\n    fn bar() { }\r\n    #[allow(dead_code)]\r\n    let foo = Foo{x: 0, y: 1, z: 2,};\r\n}\r\nOK\r\n\r\n$ cargo rustc -- --cfg never\r\nerror[E0560]: struct `Foo` has no field named `z`\r\n --> src/lib.rs:8:1\r\n  |\r\n8 | #[foo]\r\n  | ^^^^^^ `Foo` does not have this field\r\n  |\r\n  = note: available fields are: `x`, `y`\r\n```\r\n\r\ncc @alexcrichton @petrochenkov ", "closed_by": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56879/timeline", "performed_via_github_app": null, "state_reason": "completed"}