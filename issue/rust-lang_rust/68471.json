{"url": "https://api.github.com/repos/rust-lang/rust/issues/68471", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68471/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68471/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68471/events", "html_url": "https://github.com/rust-lang/rust/issues/68471", "id": 553821847, "node_id": "MDU6SXNzdWU1NTM4MjE4NDc=", "number": 68471, "title": "Zero-overhead exceptions", "user": {"login": "redradist", "id": 6311799, "node_id": "MDQ6VXNlcjYzMTE3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/6311799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/redradist", "html_url": "https://github.com/redradist", "followers_url": "https://api.github.com/users/redradist/followers", "following_url": "https://api.github.com/users/redradist/following{/other_user}", "gists_url": "https://api.github.com/users/redradist/gists{/gist_id}", "starred_url": "https://api.github.com/users/redradist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/redradist/subscriptions", "organizations_url": "https://api.github.com/users/redradist/orgs", "repos_url": "https://api.github.com/users/redradist/repos", "events_url": "https://api.github.com/users/redradist/events{/privacy}", "received_events_url": "https://api.github.com/users/redradist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-22T22:06:00Z", "updated_at": "2020-02-01T09:19:41Z", "closed_at": "2020-01-22T22:13:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would suggest to add **Zero-Overhead Exception** in Rust\r\n\r\nConsider the following code:\r\n\r\n```rust\r\nunion SomeFunctionMultipleError {\r\n    err0: Error1,\r\n    err1: Error2,\r\n}\r\n\r\nstruct SomeFunctionFnError {\r\n    index: u32,\r\n    errors: SomeFunctionMultipleError,\r\n}\r\n\r\nfn some_function(i: i32) -> Result<i32, SomeFunctionFnError> {\r\n    if i == 0 {\r\n        Ok(2)\r\n    } else if i == 1 {\r\n        Err(SomeFunctionFnError{ index: 0, errors: SomeFunctionMultipleError {err1: Error1 {id0: 0, id1: 0, id3: 0}}})\r\n    } else {\r\n        Err(SomeFunctionFnError{ index: 0, errors: SomeFunctionMultipleError {err1: Error2 {id0: 0, id1: 0, id3: 0}}})\r\n    }\r\n}\r\n\r\nunion OtherFunctionMultipleError {\r\n    err0: Error1,\r\n    err1: Error2,\r\n    err2: Error3,\r\n}\r\n\r\nstruct OtherFunctionFnError {\r\n    id: u32,\r\n    errors: OtherFunctionMultipleError,\r\n}\r\n\r\nfn other_function(i: i32) -> Result<i32, OtherFunctionFnError> {\r\n    if i == 0 {\r\n        Ok(2)\r\n    } else if i == 1 {\r\n        Err(OtherFunctionFnError{id: 0, errors: OtherFunctionMultipleError {err0: Error1 {id0: 0, id1: 0, id3: 0}}})\r\n    } else if i == 2 {\r\n        Err(OtherFunctionFnError{id: 0, errors: OtherFunctionMultipleError {err0: Error2 {id0: 0, id1: 0, id3: 0}}})\r\n    } else {\r\n        Err(OtherFunctionFnError {id: 0, errors: OtherFunctionMultipleError {err0: Error3 {id0: 0, id1: 0}}})\r\n    }\r\n}\r\n```\r\n\r\nThis is the code that could be generated by Zero-Overhead exceptions in Rust with following syntax feature:\r\n\r\n```rust\r\nfn some_function(i: i32) -> i32 throws Error1, Error2 {\r\n    if i == 0 {\r\n        2\r\n    } else if i == 1 {\r\n        Error1 {id0: 0, id1: 0, id3: 0}.throw\r\n    } else {\r\n        Error2 {id0: 0, id1: 0, id3: 0}.throw\r\n    }\r\n}\r\n\r\nfn other_function(i: i32) -> i32 throws Error1, Error2, Error3 {\r\n    if i == 0 {\r\n        2\r\n    } else if i == 1 {\r\n        Error1 {id0: 0, id1: 0, id3: 0}.throw\r\n    } else if i == 2 {\r\n        Error2 {id0: 0, id1: 0, id3: 0}.throw\r\n    } else {\r\n        Error3 {id0: 0, id1: 0, id3: 0}.throw\r\n    }\r\n}\r\n```\r\n\r\nor even these errors could be deduced by compiler implicitly:\r\n\r\n```rust\r\nfn some_function(i: i32) -> i32 throws { // Implicitly throws Error1, Error2\r\n    if i == 0 {\r\n        2\r\n    } else if i == 1 {\r\n        Error1 {id0: 0, id1: 0, id3: 0}.throw\r\n    } else {\r\n        Error2 {id0: 0, id1: 0, id3: 0}.throw\r\n    }\r\n}\r\n\r\nfn other_function(i: i32) -> i32 throws { // Implicitly throws Error1\r\n    if i == 0 {\r\n        2\r\n    } else {\r\n        Error1{id0: 0, id1: 0}.throw\r\n    }\r\n}\r\n```\r\n\r\nThis nothing else syntactic sugar !! Behavior is the same !!\r\nC++ has the same proposal already http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0709r2.pdf\r\n\r\nIt is possible to implement and it is nothing else than syntactic sugar !!", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68471/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68471/timeline", "performed_via_github_app": null, "state_reason": "completed"}