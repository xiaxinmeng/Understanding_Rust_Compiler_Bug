{"url": "https://api.github.com/repos/rust-lang/rust/issues/102532", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102532/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102532/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102532/events", "html_url": "https://github.com/rust-lang/rust/issues/102532", "id": 1393209725, "node_id": "I_kwDOAAsO6M5TCrF9", "number": 102532, "title": "Associated type resolution fails with blanket impl for supertrait", "user": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-01T03:21:27Z", "updated_at": "2022-12-11T01:27:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\ntrait General {\r\n    type Associated;\r\n\r\n    fn get(&self) -> Self::Associated;\r\n}\r\n\r\ntrait Specialized: General {}\r\n\r\nimpl<T: Specialized> General for T {\r\n    type Associated = i32;\r\n\r\n    fn get(&self) -> i32 {\r\n        todo!()\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: The code compiles without issue\r\n\r\nInstead, this happened: It fails to compile with this error:\r\n\r\n```\r\nerror[E0053]: method `get` has an incompatible type for trait\r\n  --> src/lib.rs:12:22\r\n   |\r\n10 |     type Associated = i32;\r\n   |     ---------------------- expected this associated type\r\n11 |\r\n12 |     fn get(&self) -> i32 {\r\n   |                      ^^^\r\n   |                      |\r\n   |                      expected associated type, found `i32`\r\n   |                      help: change the output type to match the trait: `<T as General>::Associated`\r\n   |\r\nnote: type in trait\r\n  --> src/lib.rs:4:22\r\n   |\r\n4  |     fn get(&self) -> Self::Associated;\r\n   |                      ^^^^^^^^^^^^^^^^\r\n   = note: expected fn pointer `fn(&T) -> <T as General>::Associated`\r\n              found fn pointer `fn(&T) -> i32`\r\n```\r\n\r\nI've confirmed that all of the elements in this reproduction are necessary, and the bug appears to be an interaction between the supertrait (`trait Specialized: General`) and the constrained blanket impl (`impl<T: Specialized> General for T`). Removing either the constraint or the supertrait makes the problem disappear.\r\n\r\nAdditionally, it's possible to fix the issue by using `Self::Associated` in the return type position of `fn get` in the `impl` block. However, in this case, it's impossible to actually *implement* the function; the same type resolution failure reappears when you try to return a value:\r\n\r\n```rust\r\n    fn get(&self) -> Self::Associated {\r\n        10\r\n    }\r\n```\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:13:9\r\n   |\r\n12 |     fn get(&self) -> Self::Associated {\r\n   |                      ---------------- expected `<T as General>::Associated` because of return type\r\n13 |         10\r\n   |         ^^ expected associated type, found integer\r\n   |\r\n   = note: expected associated type `<T as General>::Associated`\r\n                         found type `{integer}`\r\n   = help: consider constraining the associated type `<T as General>::Associated` to `{integer}` or calling a method that returns `<T as General>::Associated`\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nThe bug appears on all current versions of Rust. Tested with:\r\n\r\nStable: 1.64.0\r\nBeta: 1.65.0-beta.2 (2022-09-24 e5da98475e88b52384ba)\r\nNightly: 1.66.0-nightly (2022-09-29 9c56d9d6fec6262bbb15)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102532/timeline", "performed_via_github_app": null, "state_reason": null}