{"url": "https://api.github.com/repos/rust-lang/rust/issues/74097", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74097/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74097/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74097/events", "html_url": "https://github.com/rust-lang/rust/issues/74097", "id": 651543841, "node_id": "MDU6SXNzdWU2NTE1NDM4NDE=", "number": 74097, "title": "LLDB show a non existing variable at O1", "user": {"login": "lucamassarelli", "id": 12794148, "node_id": "MDQ6VXNlcjEyNzk0MTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12794148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucamassarelli", "html_url": "https://github.com/lucamassarelli", "followers_url": "https://api.github.com/users/lucamassarelli/followers", "following_url": "https://api.github.com/users/lucamassarelli/following{/other_user}", "gists_url": "https://api.github.com/users/lucamassarelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucamassarelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucamassarelli/subscriptions", "organizations_url": "https://api.github.com/users/lucamassarelli/orgs", "repos_url": "https://api.github.com/users/lucamassarelli/repos", "events_url": "https://api.github.com/users/lucamassarelli/events{/privacy}", "received_events_url": "https://api.github.com/users/lucamassarelli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-06T13:34:19Z", "updated_at": "2020-07-06T14:56:38Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "LLDB show variable 'res' (when stepping at line 12) that does not exists in the code.\r\n\r\n```bash\r\n\r\n$ cat -n a.rs \r\n     1  // run-pass\r\n     2  use std::ptr;\r\n     3  use std::rc::Rc;\r\n     4  use std::sync::Arc;\r\n     5\r\n     6  fn main() {\r\n     7      let p: *const u8 = ptr::null();\r\n     8      let rc = Rc::new(1usize);\r\n     9      let arc = Arc::new(1usize);\r\n    10      let b = Box::new(\"hi\");\r\n    11\r\n    12      let _ = format!(\"{:p}{:p}{:p}\",\r\n    13                      rc, arc, b);\r\n    14\r\n    15      if cfg!(target_pointer_width = \"32\") {\r\n    16          assert_eq!(format!(\"{:#p}\", p),\r\n    17                     \"0x00000000\");\r\n    18      } else {\r\n    19          assert_eq!(format!(\"{:#p}\", p),\r\n    20                     \"0x0000000000000000\");\r\n    21      }\r\n    22      assert_eq!(format!(\"{:p}\", p),\r\n    23                 \"0x0\");\r\n    24  }\r\n\r\n$ cat a.rs \r\n// run-pass\r\nuse std::ptr;\r\nuse std::rc::Rc;\r\nuse std::sync::Arc;\r\nfn main() {\r\n    let p: *const u8 = ptr::null();\r\n    let rc = Rc::new(1usize);\r\n    let arc = Arc::new(1usize);\r\n    let b = Box::new(\"hi\");\r\n    let _ = format!(\"{:p}{:p}{:p}\",\r\n                    rc, arc, b);\r\n    if cfg!(target_pointer_width = \"32\") {\r\n        assert_eq!(format!(\"{:#p}\", p),\r\n                   \"0x00000000\");\r\n    } else {\r\n        assert_eq!(format!(\"{:#p}\", p),\r\n                   \"0x0000000000000000\");\r\n    }\r\n    assert_eq!(format!(\"{:p}\", p),\r\n               \"0x0\");\r\n}\r\n\r\n$ rustc --version\r\n+rustc 1.46.0-nightly (3503f565e 2020-07-02)\r\n\r\n$ lldb -v\r\nlldb version 11.0.0\r\n  clang revision ee26a31e7b02e124d71091d47f2ae624774e5e0a\r\n  llvm revision ee26a31e7b02e124d71091d47f2ae624774e5e0a\r\n\r\n$ rustc -g -C opt-level=1 -o opt a.rs\r\n\r\n$ lldb opt\r\nlldb opt \r\n(lldb) target create \"opt\"\r\nCurrent executable set to 'opt' (x86_64).\r\n(lldb) b -l 12\r\nBreakpoint 1: 2 locations.\r\n(lldb) r\r\nProcess 62 launched: 'opt' (x86_64)\r\nProcess 62 stopped\r\n* thread #1, name = 'opt', stop reason = breakpoint 1.1\r\n    frame #0: 0x00005555555590f6 opt`a::main::h1122ef72fcd4218b at a.rs:12:13\r\n   9        let arc = Arc::new(1usize);\r\n   10       let b = Box::new(\"hi\");\r\n   11  \r\n-> 12       let _ = format!(\"{:p}{:p}{:p}\",\r\n   13                       rc, arc, b);\r\n   14  \r\n   15       if cfg!(target_pointer_width = \"32\") {\r\n(lldb) frame var\r\n(unsigned char *) p = <empty constant data>\r\n(alloc::rc::Rc<unsigned long>) rc = <variable not available>\r\n(alloc::sync::Arc<unsigned long>) arc = <variable not available>\r\n(&str *) b = 0x000055555578fa80\r\n(lldb) c\r\nProcess 62 resuming\r\nProcess 62 stopped\r\n* thread #1, name = 'opt', stop reason = breakpoint 1.2\r\n    frame #0: 0x000055555555918f opt`a::main::h1122ef72fcd4218b at a.rs:12:13\r\n   9        let arc = Arc::new(1usize);\r\n   10       let b = Box::new(\"hi\");\r\n   11  \r\n-> 12       let _ = format!(\"{:p}{:p}{:p}\",\r\n   13                       rc, arc, b);\r\n   14  \r\n   15       if cfg!(target_pointer_width = \"32\") {\r\n(lldb) frame var\r\n(unsigned char *) p = <empty constant data>\r\n(alloc::rc::Rc<unsigned long>) rc = <variable not available>\r\n(alloc::sync::Arc<unsigned long>) arc = <variable not available>\r\n(&str *) b = <variable not available>\r\n(alloc::string::String) res = {\r\n  vec = {\r\n    buf = {\r\n      ptr = (pointer = \"0x55555578fa500x55555578fa700x55555578fa80\\U00000002\", _marker = core::marker::PhantomData<unsigned char> @ 0x00007fffffffe290)\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74097/timeline", "performed_via_github_app": null, "state_reason": null}