{"url": "https://api.github.com/repos/rust-lang/rust/issues/81376", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81376/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81376/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81376/events", "html_url": "https://github.com/rust-lang/rust/issues/81376", "id": 793288754, "node_id": "MDU6SXNzdWU3OTMyODg3NTQ=", "number": 81376, "title": "Conflicing implementation through specialized default implementation", "user": {"login": "vandenheuvel", "id": 20440137, "node_id": "MDQ6VXNlcjIwNDQwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/20440137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vandenheuvel", "html_url": "https://github.com/vandenheuvel", "followers_url": "https://api.github.com/users/vandenheuvel/followers", "following_url": "https://api.github.com/users/vandenheuvel/following{/other_user}", "gists_url": "https://api.github.com/users/vandenheuvel/gists{/gist_id}", "starred_url": "https://api.github.com/users/vandenheuvel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vandenheuvel/subscriptions", "organizations_url": "https://api.github.com/users/vandenheuvel/orgs", "repos_url": "https://api.github.com/users/vandenheuvel/repos", "events_url": "https://api.github.com/users/vandenheuvel/events{/privacy}", "received_events_url": "https://api.github.com/users/vandenheuvel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472579062, "node_id": "MDU6TGFiZWwxNDcyNTc5MDYy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-specialization", "name": "F-specialization", "color": "f9c0cc", "default": false, "description": "`#![feature(specialization)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-01-25T11:13:13Z", "updated_at": "2021-01-26T16:43:54Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the following scenario, a local trait is default-implemented for a collection of types and once for a specific type.\r\n```rust\r\n#![feature([min_]specialization)]\r\n\r\nuse num::One;\r\n\r\ntrait Trait1 {\r\n    fn f();\r\n}\r\n\r\nimpl<T: One> Trait1 for T {\r\n    default fn f() {}\r\n}\r\n\r\nimpl Trait1 for u64 {\r\n    fn f() {}\r\n}\r\n\r\nuse std::num::NonZeroU64;\r\nimpl Trait1 for NonZeroU64 {\r\n    fn f() {}\r\n}\r\n\r\nfn main() {\r\n    let _: u64 = One::one(); // `One` is implemented for `u64`\r\n}\r\n```\r\nThis gives the error\r\n```\r\nerror[E0119]: conflicting implementations of trait `Trait1` for type `std::num::NonZeroU64`:\r\n  --> src/main.rs:19:1\r\n   |\r\n9  | impl<T: One> Trait1 for T {\r\n   | ------------------------- first implementation here\r\n...\r\n19 | impl Trait1 for NonZeroU64 {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::num::NonZeroU64`\r\n   |\r\n   = note: upstream crates may add a new impl of trait `num::One` for type `std::num::NonZeroU64` in future versions\r\n```\r\nWithout the `default` keyword, the error makes sense: there would be a conflicting implementation if `num::One` were implemented for `NonZeroU64` in the `num` crate. We however know that our `impl Trait1 for NonZeroU64` implementation will always be more specific than the `impl<T: One> Trait1 for T`, so I believe that this should work.\r\n\r\nIt actually does work for `u64`, for which `num::One` is implemented. I think that this code should compile _independently_ of whether `num` actually holds an implementation of `num::One` for the specific type. In this case it does for `u64` (for which a specialization compiles) and not for `NonZeroU64` (for which a specialization does is rejected).\r\n\r\n[Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f8780b9aa92d6a921b07eb04341a5414)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81376/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81376/timeline", "performed_via_github_app": null, "state_reason": null}