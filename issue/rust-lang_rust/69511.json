{"url": "https://api.github.com/repos/rust-lang/rust/issues/69511", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69511/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69511/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69511/events", "html_url": "https://github.com/rust-lang/rust/issues/69511", "id": 571956858, "node_id": "MDU6SXNzdWU1NzE5NTY4NTg=", "number": 69511, "title": "Diagnostics: suggest higher-rank trait bounds when implementing trait for &Type", "user": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-27T10:02:40Z", "updated_at": "2020-02-27T17:56:40Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "\r\n## Failing Code\r\n\r\nConsider the following code:\r\n```rust\r\nuse std::io::{self, prelude::*};\r\nuse std::sync::Arc;\r\n\r\nstruct IoArc<T>(Arc<T>);\r\n\r\nimpl<T> Read for IoArc<T>\r\nwhere\r\n    &T: Read,\r\n{\r\n    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\r\n        (&mut &*self.0).read(buf)\r\n    }\r\n}\r\n```\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d937fcbcc9d6257e0d5857cb9b23dbdc)\r\n\r\nThis fails with a pretty gnarly error about how `&IoArc<T>` doesn't have a\r\nlifetime, parameter T doesn't live long enough, and we should consider adding\r\na lifetime. It (wrongly) suggest we may want to add a static lifetime. Which\r\nis not the right solution.\r\n\r\n```txt\r\nCompiling playground v0.0.1 (/playground)\r\nerror[E0637]: `&` without an explicit lifetime name cannot be used here\r\n --> src/lib.rs:8:5\r\n  |\r\n8 |     &T: Read,\r\n  |     ^ explicit lifetime name needed here\r\n\r\nerror[E0310]: the parameter type `T` may not live long enough\r\n  --> src/lib.rs:6:1\r\n   |\r\n6  |   impl<T> Read for IoArc<T>\r\n   |   ^    - help: consider adding an explicit lifetime bound `T: 'static`...\r\n   |  _|\r\n   | |\r\n7  | | where\r\n8  | |     &T: Read,\r\n9  | | {\r\n...  |\r\n12 | |     }\r\n13 | | }\r\n   | |_^\r\n   |\r\nnote: ...so that the reference type `&'static T` does not outlive the data it points at\r\n  --> src/lib.rs:6:1\r\n   |\r\n6  | / impl<T> Read for IoArc<T>\r\n7  | | where\r\n8  | |     &T: Read,\r\n9  | | {\r\n...  |\r\n12 | |     }\r\n13 | | }\r\n   | |_^\r\n\r\nerror[E0310]: the parameter type `T` may not live long enough\r\n  --> src/lib.rs:10:5\r\n   |\r\n6  |   impl<T> Read for IoArc<T>\r\n   |        - help: consider adding an explicit lifetime bound `T: 'static`...\r\n...\r\n10 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\r\n11 | |         (&mut &*self.0).read(buf)\r\n12 | |     }\r\n   | |_____^\r\n   |\r\nnote: ...so that the reference type `&'static T` does not outlive the data it points at\r\n  --> src/lib.rs:10:5\r\n   |\r\n10 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\r\n11 | |         (&mut &*self.0).read(buf)\r\n12 | |     }\r\n   | |_____^\r\n\r\nerror: aborting due to 3 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0310`.\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n## Working Code\r\n\r\nInstead the resolution is to add a higher-rank trait bound, like this:\r\n\r\n```rust\r\nuse std::io::{self, prelude::*};\r\nuse std::sync::Arc;\r\n\r\nstruct IoArc<T>(Arc<T>);\r\n\r\nimpl<T> Read for IoArc<T>\r\nwhere\r\n    for<'a> &'a T: Read, // <-- we added for<'a> to get a lifetime\r\n{\r\n    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\r\n        (&mut &*self.0).read(buf)\r\n    }\r\n}\r\n```\r\n\r\n## Diagnostics Suggestions\r\n\r\nI understand that this is not a particularly common pattern, but the compiler\r\nreally isn't of much help when trying to figure this out. A better suggestion\r\nhere would have been:\r\n\r\n```txt\r\nCompiling playground v0.0.1 (/playground)\r\nerror[E0637]: `&` without an explicit lifetime name cannot be used here\r\n --> src/lib.rs:8:5\r\n  |\r\n8 |     &T: Read,\r\n  |     ^ explicit lifetime name needed here\r\n\r\nhelp: Consider adding a higher-rank trait bound:\r\n\r\n --> src/lib.rs:8:5\r\n  |\r\n8 |     for<'a> &'a T: Read,\r\n  |\r\n```\r\n\r\nWith if `'static` is sometimes the right solution, perhaps two help texts would make sense:\r\n\r\n```txt\r\nhelp: ...or use a static lifetime:\r\n\r\n --> src/lib.rs:8:5\r\n  |\r\n8 |     &'static T: Read,\r\n  |\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69511/reactions", "total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69511/timeline", "performed_via_github_app": null, "state_reason": null}