{"url": "https://api.github.com/repos/rust-lang/rust/issues/79881", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79881/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79881/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79881/events", "html_url": "https://github.com/rust-lang/rust/issues/79881", "id": 760831267, "node_id": "MDU6SXNzdWU3NjA4MzEyNjc=", "number": 79881, "title": "Improve `std::time::Instant` documentation - OS behavior", "user": {"login": "jnqnfe", "id": 33935229, "node_id": "MDQ6VXNlcjMzOTM1MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/33935229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnqnfe", "html_url": "https://github.com/jnqnfe", "followers_url": "https://api.github.com/users/jnqnfe/followers", "following_url": "https://api.github.com/users/jnqnfe/following{/other_user}", "gists_url": "https://api.github.com/users/jnqnfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnqnfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnqnfe/subscriptions", "organizations_url": "https://api.github.com/users/jnqnfe/orgs", "repos_url": "https://api.github.com/users/jnqnfe/repos", "events_url": "https://api.github.com/users/jnqnfe/events{/privacy}", "received_events_url": "https://api.github.com/users/jnqnfe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 2635892938, "node_id": "MDU6TGFiZWwyNjM1ODkyOTM4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-time", "name": "A-time", "color": "f7e101", "default": false, "description": "Area: Time"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-12-10T02:38:28Z", "updated_at": "2021-04-25T00:36:39Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following piece of documentation from `std::time::Instant`, which comes from PR #72836 via issue #48980, does not make sufficient sense and is not sufficiently helpful:\r\n\r\n```rust\r\n/// # OS-specific behaviors\r\n///\r\n/// An `Instant` is a wrapper around system-specific types and it may behave\r\n/// differently depending on the underlying operating system. For example,\r\n/// the following snippet is fine on Linux but panics on macOS:\r\n///\r\n/// ```no_run\r\n/// use std::time::{Instant, Duration};\r\n///\r\n/// let now = Instant::now();\r\n/// let max_nanoseconds = u64::MAX / 1_000_000_000;\r\n/// let duration = Duration::new(max_nanoseconds, 0);\r\n/// println!(\"{:?}\", now + duration);\r\n/// ```\r\n```\r\n\r\nThe parameters to `Duration::new()` are the number of seconds and the number of nanoseconds. Here we seem to be giving a quantity in nanoseconds as the number of seconds, and with that quantity representing... well, from the name `max_nanoseconds` and calculation, the maximum number of seconds that can fit into a `u64` if it later it is to be converted to a `u64` quantity of nanoseconds without overflowing... huh :S The reviewers of PR #72836 seem to have overlooked this problem.\r\n\r\nThis text and example are there due to the fact that the internal attributes of `Instant` differ per different platforms, and so a large `Duration` added to an `Instant` on one platform might work, while on another it might overflow and thus panic.\r\n\r\nHere it follows that `u64::MAX / 1_000_000_000` as the number of seconds in a `Duration` just happens to be too large for addition to an `Instant` on some platforms - macOS. The problem with the example fundamentally is the misleading variable name and possibly poor choice of chosen value.\r\n\r\nOne further problem with the text is that although it is helpful in pointing out that there is a difference in behaviour, it leaves the reader to have to guess at what the cause of the different behaviour is, and it does not give any indication of what range of values can typically be added to it without encountering failure.\r\n\r\nI don't know why `Instant` has been designed to use different underlying attributes rather than something consistent which would avoid it suffering from this unfortunate inconsistency, but I'll leave that for separate discussion / resolution, which already seems to have gone no-where in #48980, though #44394 for `SystemTime` is still open.\r\n\r\nTasks to address this issue:\r\n\r\n - [ ] Replace the code example with code that makes sense.\r\n - [ ] Improve the text to better explain the cause of the difference.\r\n - [ ] Improve the text to give guidance on what approximate size of values will trigger failure.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79881/timeline", "performed_via_github_app": null, "state_reason": null}