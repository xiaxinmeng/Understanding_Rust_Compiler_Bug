{"url": "https://api.github.com/repos/rust-lang/rust/issues/83891", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83891/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83891/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83891/events", "html_url": "https://github.com/rust-lang/rust/issues/83891", "id": 850404518, "node_id": "MDU6SXNzdWU4NTA0MDQ1MTg=", "number": 83891, "title": "lldb debuginfo test failure, hash_set/hash_map of size 0 instead of expected size 4?", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2021-04-05T14:26:07Z", "updated_at": "2021-04-06T21:31:10Z", "closed_at": "2021-04-06T21:31:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```\r\ntime python /media/pnkfelix/Rust/rust.git/x.py build    --stage 1   library/std  && time python /media/pnkfelix/Rust/rust.git/x.py test    --stage 1\r\n```\r\n\r\nI expected to see this happen: successful test suite run\r\n\r\nInstead, this happened: debuginfo test failure for pretty-std-collection.rs, saying that an expecting output from the debugger was not found.\r\n\r\n```\r\n\ufeff\ufefferror: line not found in debugger output: [...]$2 = size=4 { [0] = { 0 = 1 1 = 10 } [1] = { 0 = 2 1 = 20 } [2] = { 0 = 3 1 = 30 } [3] = { 0 = 4 1 = 40 } }\r\n```\r\n\r\nThe specific line it seemed be this one:\r\n\r\n```\r\n// lldb-command:print hash_map\r\n// lldbg-check:[...]$2 = size=4 { [0] = { 0 = 1 1 = 10 } [1] = { 0 = 2 1 = 20 } [2] = { 0 = 3 1 = 30 } [3] = { 0 = 4 1 = 40 } }\r\n// lldbr-check:(std::collections::hash::map::HashMap<u64, u64, [...]>) hash_map = size=4 size=4 { [0] = { 0 = 1 1 = 10 } [1] = { 0 = 2 1 = 20 } [2] = { 0 = 3 1 = 30 } [3] = { 0 = 4 1 = 40 } }\r\n```\r\n\r\n----\r\n\r\n<details>\r\n<summary>Click to see transcript that includes the full stdout/stderr output as reported by `x.y` + `compiletest`</summary>\r\n\r\n```\r\nfailures:\r\n\r\n---- [debuginfo-lldb] debuginfo/pretty-std-collections.rs stdout ----\r\nNOTE: compiletest thinks it is using LLDB version 1100\r\nNOTE: compiletest thinks it is using LLDB without native rust support\r\n\r\nerror: line not found in debugger output: [...]$2 = size=4 { [0] = { 0 = 1 1 = 10 } [1] = { 0 = 2 1 = 20 } [2] = { 0 = 3 1 = 30 } [3] = { 0 = 4 1 = 40 } }\r\nstatus: exit code: 0\r\ncommand: \"/usr/bin/python\" \"/media/pnkfelix/Rust/rust.git/src/etc/lldb_batchmode.py\" \"/media/pnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-linux-gnu/test/debuginfo/pretty-std-collections.lldb/a\" \"/media/\\\r\npnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-linux-gnu/test/debuginfo/pretty-std-collections.lldb/pretty-std-collections.debugger.script\"\r\nstdout:\r\n------------------------------------------\r\nLLDB batch-mode script\r\n----------------------\r\nDebugger commands script is '/media/pnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-linux-gnu/test/debuginfo/pretty-std-collections.lldb/pretty-std-collections.debugger.script'.\r\nTarget executable is '/media/pnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-linux-gnu/test/debuginfo/pretty-std-collections.lldb/a'.\r\nCurrent working directory is '/media/pnkfelix/Rust/rust.git/objdir-opt'\r\nCreating a target for '/media/pnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-linux-gnu/test/debuginfo/pretty-std-collections.lldb/a'\r\nsettings set auto-confirm true\r\n\r\nversion\r\nlldb version 11.0.0\r\ncommand script import /media/pnkfelix/Rust/rust.git/./src/etc/lldb_lookup.py\r\ntype synthetic add -l lldb_lookup.synthetic_lookup -x '.*' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(alloc::([a-z_]+::)+)String$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^&str$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^&\\[.+\\]$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(std::ffi::([a-z_]+::)+)OsString$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(alloc::([a-z_]+::)+)Vec<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(alloc::([a-z_]+::)+)VecDeque<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(alloc::([a-z_]+::)+)BTreeSet<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(alloc::([a-z_]+::)+)BTreeMap<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(std::collections::([a-z_]+::)+)HashMap<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(std::collections::([a-z_]+::)+)HashSet<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(alloc::([a-z_]+::)+)Rc<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(alloc::([a-z_]+::)+)Arc<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(core::([a-z_]+::)+)Cell<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(core::([a-z_]+::)+)Ref<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(core::([a-z_]+::)+)RefMut<.+>$' --category Rust\r\ntype summary add -F lldb_lookup.summary_lookup  -e -x -h '^(core::([a-z_]+::)+)RefCell<.+>$' --category Rust\r\ntype category enable Rust\r\n\r\nbreakpoint set --file 'pretty-std-collections.rs' --line 159\r\nDEBUG: breakpoint added, id = 1\r\nBreakpoint 1: where = a`pretty_std_collections::main::h809023208ec02992 + 1666 at pretty-std-collections.rs:159:5, address = 0x000000000003d6a2\r\nDEBUG: registering breakpoint callback, id = 1\r\nError while trying to register breakpoint callback, id = 1, message = error: could not get num args: can't find callable: breakpoint_callback\r\n\r\nrun\r\nProcess 775555 stopped * thread #1, name = 'a', stop reason = breakpoint 1.1 frame #0: 0x00005555555916a2 a`pretty_std_collections::main::h809023208ec02992 at pretty-std-collections.rs:159:5 156 hash_set.insert(i\\\r\n); 157 } 158 -> 159 zzz(); // #break ^ 160 } 161 162 fn zzz() { Process 775555 launched: '/media/pnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-linux-gnu/test/debuginfo/pretty-std-collections.lldb/a' (x86\\\r\n_64)\r\nprint vec_deque\r\n(alloc::collections::vec_deque::VecDeque<int>) $0 = size=3 { [0] = 5 [1] = 3 [2] = 7 }\r\nprint vec_deque2\r\n(alloc::collections::vec_deque::VecDeque<int>) $1 = size=7 { [0] = 2 [1] = 3 [2] = 4 [3] = 5 [4] = 6 [5] = 7 [6] = 8 }\r\nprint hash_map\r\n(std::collections::hash::map::HashMap<unsigned long, unsigned long, core::hash::BuildHasherDefault<pretty_std_collections::SimpleHasher> >) $2 = size=4 { [0] = [1] = [2] = [3] = }\r\nprint hash_set\r\n(std::collections::hash::set::HashSet<unsigned long, core::hash::BuildHasherDefault<pretty_std_collections::SimpleHasher> >) $3 = size=4 {}\r\nquit\r\n\r\n\r\n------------------------------------------\r\nstderr:\r\n------------------------------------------\r\nerror: need to add support for DW_TAG_base_type '()' encoded with DW_ATE = 0x7, bit_size = 0\r\n\r\n------------------------------------------\r\n\r\n\r\n\r\nfailures:\r\n    [debuginfo-lldb] debuginfo/pretty-std-collections.rs\r\n\r\ntest result: FAILED. 175 passed; 1 failed; 56 ignored; 0 measured; 0 filtered out; finished in 89.52s\r\n\r\nSome tests failed in compiletest suite=debuginfo mode=debuginfo host=x86_64-unknown-linux-gnu target=x86_64-unknown-linux-gnu\r\n\r\n\r\ncommand did not execute successfully: \"/media/pnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-linux-gnu/stage0-tools-bin/compiletest\" \"--compile-lib-path\" \"/media/pnkfelix/Rust/rust.git/objdir-opt/build/x8\\\r\n6_64-unknown-linux-gnu/stage1/lib\" \"--run-lib-path\" \"/media/pnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"--rustc-path\" \"/media/pnkfelix/Rust/r\\\r\nust.git/objdir-opt/build/x86_64-unknown-linux-gnu/stage1/bin/rustc\" \"--src-base\" \"/media/pnkfelix/Rust/rust.git/src/test/debuginfo\" \"--build-base\" \"/media/pnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-li\\\r\nnux-gnu/test/debuginfo\" \"--stage-id\" \"stage1-x86_64-unknown-linux-gnu\" \"--suite\" \"debuginfo\" \"--mode\" \"debuginfo\" \"--target\" \"x86_64-unknown-linux-gnu\" \"--host\" \"x86_64-unknown-linux-gnu\" \"--llvm-filecheck\" \"/med\\\r\nia/pnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-linux-gnu/llvm/build/bin/FileCheck\" \"--nodejs\" \"/usr/bin/node\" \"--npm\" \"/usr/bin/npm\" \"--host-rustcflags\" \"-Crpath -O -Cdebuginfo=0 -Zunstable-options  -L\\\r\nnative=/media/pnkfelix/Rust/rust.git/objdir-opt/build/x86_64-unknown-linux-gnu/native/rust-test-helpers\" \"--target-rustcflags\" \"-Crpath -O -Cdebuginfo=0 -Zunstable-options  -Lnative=/media/pnkfelix/Rust/rust.git/\\\r\nobjdir-opt/build/x86_64-unknown-linux-gnu/native/rust-test-helpers\" \"--docck-python\" \"/usr/bin/python\" \"--lldb-python\" \"/usr/bin/python\" \"--gdb\" \"/usr/bin/gdb\" \"--lldb-version\" \"lldb version 11.0.0\\n\" \"--lldb-pyt\\\r\nhon-dir\" \"/usr/lib/lib/python3/dist-packages\" \"--quiet\" \"--llvm-version\" \"12.0.0-rust-dev\" \"--llvm-components\" \"aarch64 aarch64asmparser aarch64codegen aarch64desc aarch64disassembler aarch64info aarch64utils agg\\\r\nressiveinstcombine all all-targets analysis arm armasmparser armcodegen armdesc armdisassembler arminfo armutils asmparser asmprinter avr avrasmparser avrcodegen avrdesc avrdisassembler avrinfo binaryformat bitre\\\r\nader bitstreamreader bitwriter cfguard codegen core coroutines coverage debuginfocodeview debuginfodwarf debuginfogsym debuginfomsf debuginfopdb demangle dlltooldriver dwarflinker engine executionengine extension\\\r\ns filecheck frontendopenacc frontendopenmp fuzzmutate globalisel hellonew hexagon hexagonasmparser hexagoncodegen hexagondesc hexagondisassembler hexagoninfo instcombine instrumentation interfacestub interpreter \\\r\nipo irreader jitlink libdriver lineeditor linker lto mc mca mcdisassembler mcjit mcparser mips mipsasmparser mipscodegen mipsdesc mipsdisassembler mipsinfo mirparser msp430 msp430asmparser msp430codegen msp430des\\\r\nc msp430disassembler msp430info native nativecodegen nvptx nvptxcodegen nvptxdesc nvptxinfo objcarcopts object objectyaml option orcjit orcshared orctargetprocess passes powerpc powerpcasmparser powerpccodegen po\\\r\nwerpcdesc powerpcdisassembler powerpcinfo profiledata remarks riscv riscvasmparser riscvcodegen riscvdesc riscvdisassembler riscvinfo runtimedyld scalaropts selectiondag sparc sparcasmparser sparccodegen sparcdes\\\r\nc sparcdisassembler sparcinfo support symbolize systemz systemzasmparser systemzcodegen systemzdesc systemzdisassembler systemzinfo tablegen target textapi transformutils vectorize webassembly webassemblyasmparse\\\r\nr webassemblycodegen webassemblydesc webassemblydisassembler webassemblyinfo windowsmanifest x86 x86asmparser x86codegen x86desc x86disassembler x86info xray\" \"--cc\" \"\" \"--cxx\" \"\" \"--cflags\" \"\" \"--adb-path\" \"adb\"\\\r\n \"--adb-test-dir\" \"/data/tmp/work\" \"--android-cross-path\" \"\"\r\nexpected success, got: exit code: 1\r\n```\r\n\r\n</details>", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83891/timeline", "performed_via_github_app": null, "state_reason": "completed"}