{"url": "https://api.github.com/repos/rust-lang/rust/issues/87096", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87096/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87096/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87096/events", "html_url": "https://github.com/rust-lang/rust/issues/87096", "id": 942587633, "node_id": "MDU6SXNzdWU5NDI1ODc2MzM=", "number": 87096, "title": "Tracking Issue for `Stdin::lines` forwarder method", "user": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2021-07-13T01:15:58Z", "updated_at": "2022-04-07T02:41:28Z", "closed_at": "2022-04-07T02:41:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature gate: `#![feature(stdin_forwarders)]`\r\n\r\nThis is a tracking issue for adding new methods `Stdin::lines` ~~and `Stdin::split`~~ that will forward to the corresponding methods on the `BufRead` implementation of `StdinLock`. This proposal is related to #86845, and further reduces the obstacles for beginners to write simple interactive terminal programs.\r\n\r\nEspecially for beginners, reading a sequence of lines from the standard input stream can involve intimidating problems with locking and lifetimes. First, the user has to call the free function `stdin()` to get a handle on the stream; then, the user would have to call the `lock()` method to gain access to the `lines()` method. At this point, lifetime issues rapidly arise: the following code [(playground)](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=cc6d8bfb5c1b83113825c37ea9192725)\r\n\r\n```rust\r\nuse std::io::{self, prelude::*};\r\nfn main() {\r\n    let mut lines = io::stdin().lock().lines();\r\n    loop {\r\n        print!(\"prompt: \");\r\n        io::stdout().flush();\r\n        if let Some(_line) = lines.next() {\r\n            // do stuff\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nproduces this error:\r\n\r\n```\r\nerror[E0716]: temporary value dropped while borrowed\r\n --> src/main.rs:3:21\r\n  |\r\n3 |     let mut lines = io::stdin().lock().lines();\r\n  |                     ^^^^^^^^^^^               - temporary value is freed at the end of this statement\r\n  |                     |\r\n  |                     creates a temporary which is freed while still in use\r\n...\r\n7 |         if let Some(_line) = lines.next() {\r\n  |                              ----- borrow later used here\r\n  |\r\n  = note: consider using a `let` binding to create a longer lived value\r\n```\r\n\r\nThe need to create a `let` binding to the handle seems confusing and frustrating, especially if the program does not need to use the handle again. The explanation is that the lock (and the iterator produced by `lines()`) behaves as if it borrows the original handle from `stdin()`, and the temporary value created for the call to the `lock()` method is dropped at the end of the statement, invalidating the borrow. That explanation might be beyond the current level of understanding of a beginner who simply wants to write an interactive terminal program.\r\n\r\nAlthough #86845 makes it easier to obtain locked stdio handles, it would be even better if beginners didn't have to deal with the concept of locking at all at early stages of their learning.\r\n\r\nThere is precedent in the `Stdin::read_line` forwarder method that implicitly locks `Stdin` and calls the `BufRead::read_line` method. However, `read_line()` is somewhat difficult to use, because it requires that the user first allocate a `String`, and it doesn't remove newlines. In contrast, `lines()` provides an iterator over input lines that removes line endings, including both carriage return (CR) and line feed (LF) characters.\r\n\r\n~~This proposal also includes a `split()` forwarder method, because it is similar in nature and usability to the `lines()` method.~~ The remaining exclusive methods of `BufRead` are less useful to beginners, and require more experience to use.\r\n\r\n### Public API\r\n\r\n```rust\r\n// std::io\r\n\r\nimpl Stdin {\r\n    pub fn lines(self) { /* ... */ }\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #86847\r\n- [x] Delete `split` forwarder #93134\r\n- [x] Final comment period (FCP)\r\n- [ ] Stabilization PR: https://github.com/rust-lang/rust/pull/95185\r\n\r\n### Unresolved Questions\r\n\r\n- During stabilization, we might want to update existing documentation to recommend these forwarder methods, and include examples of their use.\r\n\r\n@rustbot label +A-io +D-newcomer-roadblock", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87096/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87096/timeline", "performed_via_github_app": null, "state_reason": "completed"}