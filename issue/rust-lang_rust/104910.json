{"url": "https://api.github.com/repos/rust-lang/rust/issues/104910", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104910/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104910/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104910/events", "html_url": "https://github.com/rust-lang/rust/issues/104910", "id": 1464873254, "node_id": "I_kwDOAAsO6M5XUDEm", "number": 104910, "title": "when rustc suggests alternative solutions, rustfix will apply none of them ", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 5400383360, "node_id": "LA_kwDOAAsO6M8AAAABQeNPgA", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-diagnostic-infra", "name": "D-diagnostic-infra", "color": "c9f7a3", "default": false, "description": "Issues that affect all diagnostics, or relate to the diagnostic machinery itself"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-11-25T19:36:44Z", "updated_at": "2023-04-17T16:29:35Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n`src/test/ui/lint/let_underscore/let_underscore_drop.rs`\r\n```rust\r\n// check-pass\r\n#![warn(let_underscore_drop)]\r\n\r\nstruct NontrivialDrop;\r\n\r\nimpl Drop for NontrivialDrop {\r\n    fn drop(&mut self) {\r\n        println!(\"Dropping!\");\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _ = NontrivialDrop; //~WARNING non-binding let on a type that implements `Drop`\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nwarning: non-binding let on a type that implements `Drop`\r\n  --> src/main.rs:13:5\r\n   |\r\n13 |     let _ = NontrivialDrop; //~WARNING non-binding let on a type that implements `Drop`\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: the lint level is defined here\r\n  --> src/main.rs:2:9\r\n   |\r\n2  | #![warn(let_underscore_drop)]\r\n   |         ^^^^^^^^^^^^^^^^^^^\r\nhelp: consider binding to an unused variable to avoid immediately dropping the value\r\n   |\r\n13 |     let _unused = NontrivialDrop; //~WARNING non-binding let on a type that implements `Drop`\r\n   |         ~~~~~~~\r\nhelp: consider immediately dropping the value\r\n   |\r\n13 |     drop(NontrivialDrop); //~WARNING non-binding let on a type that implements `Drop`\r\n   |     ~~~~~              +\r\n```\r\nIt's great that we can suggest several solutions here BUT this will prevent rustfix from applying ANY of them :sweat_smile: \r\n\r\n````\r\nThe full error message was:\r\n\r\n> Could not replace range 181...188 in file -- maybe parts of it were already replaced?\r\n\r\nThis likely indicates a bug in either rustc or cargo itself,\r\nand we would appreciate a bug report! You're likely to see\r\na number of compiler warnings after this message which cargo\r\nattempted to fix but failed. If you could open an issue at\r\nhttps://github.com/rust-lang/rust/issues\r\nquoting the full output of this command we'd be very appreciative!\r\nNote that you may be able to make some more progress in the near-term\r\nfixing code with the `--broken-code` flag\r\n````\r\n\r\nI wonder if we can be more clever about this, perhaps flags the first one somehow and and tell rustfix \"apply this, and only if that fails to compile, try this other suggestion\" ? ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104910/timeline", "performed_via_github_app": null, "state_reason": null}