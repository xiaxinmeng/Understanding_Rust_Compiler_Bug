{"url": "https://api.github.com/repos/rust-lang/rust/issues/66772", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66772/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66772/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66772/events", "html_url": "https://github.com/rust-lang/rust/issues/66772", "id": 528661005, "node_id": "MDU6SXNzdWU1Mjg2NjEwMDU=", "number": 66772, "title": "Rethink how cross-compiling works, including the terminology", "user": {"login": "infinity0", "id": 78398, "node_id": "MDQ6VXNlcjc4Mzk4", "avatar_url": "https://avatars.githubusercontent.com/u/78398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/infinity0", "html_url": "https://github.com/infinity0", "followers_url": "https://api.github.com/users/infinity0/followers", "following_url": "https://api.github.com/users/infinity0/following{/other_user}", "gists_url": "https://api.github.com/users/infinity0/gists{/gist_id}", "starred_url": "https://api.github.com/users/infinity0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/infinity0/subscriptions", "organizations_url": "https://api.github.com/users/infinity0/orgs", "repos_url": "https://api.github.com/users/infinity0/repos", "events_url": "https://api.github.com/users/infinity0/events{/privacy}", "received_events_url": "https://api.github.com/users/infinity0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 167285428, "node_id": "MDU6TGFiZWwxNjcyODU0Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-cross", "name": "A-cross", "color": "f7e101", "default": false, "description": "Area: Cross compilation"}, {"id": 325438536, "node_id": "MDU6TGFiZWwzMjU0Mzg1MzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-bootstrap", "name": "T-bootstrap", "color": "bfd4f2", "default": false, "description": "Relevant to the bootstrap subteam: Rust's build system (x.py and src/bootstrap)"}, {"id": 593503757, "node_id": "MDU6TGFiZWw1OTM1MDM3NTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-infra", "name": "T-infra", "color": "bfd4f2", "default": false, "description": "Relevant to the infrastructure team, which will review and decide on the PR/issue."}, {"id": 2345380158, "node_id": "MDU6TGFiZWwyMzQ1MzgwMTU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-contributor-roadblock", "name": "A-contributor-roadblock", "color": "f7e101", "default": false, "description": "Area: Makes things more difficult for new contributors to rust itself"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-26T11:23:56Z", "updated_at": "2023-05-20T22:25:01Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The current config.toml.example in rust says:\r\n\r\n~~~~\r\n# In addition to the build triple, other triples to produce full compiler\r\n# toolchains for. Each of these triples will be bootstrapped from the build\r\n# triple and then will continue to bootstrap themselves. This platform must\r\n# currently be able to run all of the triples provided here.\r\n#host = [\"x86_64-unknown-linux-gnu\"]   # defaults to just the build triple\r\n\r\n# In addition to all host triples, other triples to produce the standard library\r\n# for. Each host triple will be used to produce a copy of the standard library\r\n# for each target triple.\r\n#target = [\"x86_64-unknown-linux-gnu\"] # defaults to just the build triple\r\n~~~~\r\n\r\nNote that the terminology here is confusing. \"build\" in the cross-compiling context actually refers to the \"host\" platform in a normal compilation context, and \"host\" in the cross-compiling context actually refers to the \"target\" platform in a normal context. \"target\" in the cross-compiling context does not have an analogue in the normal context, since normally one is not compiling a compiler. If you are confused, more suitable names might be \"host\", \"target-compiler\" and \"target-libstd\". In fact it may be better to rename the config.toml keys to these ones. The older more confusing terminology comes from GCC I believe, and perhaps they got it from even older terminology.\r\n\r\nIn \"host\" where it says \"This platform must currently be able to run all of the triples provided here.\" - this is (1) ostensibly not true, we have been cross-compiling in Debian arbitrary platforms A to arbitrary platforms B for a few years now by setting build = A, host = [B], target = [B] and (2) not desired, since you want to be able to arbitrarily cross-compile from any platform A to any platform B.\r\n\r\nTL;DR: I'm not sure the original intention behind that statement, but it's not true today, not desired, and at least the documentation should be fixed.\r\n\r\nIn \"target\" where it says \"Each host triple will be used to produce a copy of the standard library for each target triple\" is unfortunately true, for example in Debian we have found cross-compiling to break when setting build = A, host = [B], target = [B, wasm32], and then the bootstrap tries to compile libstd:wasm32 using rustc:B which platform A can't run. (For some reason, if target is set to only [B], the bootstrap does *not* try to compile libstd:B using rustc:B, as noted also in the previous paragraph.)\r\n\r\nI'm also unsure of the original intention behind this behaviour, I don't see why it's necessary or desirable to compile all target platforms (i.e. all libstds) using all of the host platforms (i.e. toolchains) that you're building, since some of these toolchains might not be executable by the build platform.\r\n\r\nI would suggest this be fixed to \"the build platform will be used to produce a copy of the standard library for each target triple\". I tried doing this, but couldn't figure out how to make this work. In `src/bootstrap/builder.rs` in `maybe_run` I tried changing the \"for host in hosts, for target in targets\" double-loop into two single loops each with `host:` set to builder.build.build and `target:` set to either host or target, but then other stuff broke.\r\n\r\nIt doesn't help that the terms \"host\" and \"target\" are overloaded so confusingly too.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66772/timeline", "performed_via_github_app": null, "state_reason": null}