{"url": "https://api.github.com/repos/rust-lang/rust/issues/112650", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112650/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112650/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112650/events", "html_url": "https://github.com/rust-lang/rust/issues/112650", "id": 1758430507, "node_id": "I_kwDOAAsO6M5oz4Ur", "number": 112650, "title": "Misleading `borrowed data escapes outside of function` error message due doesn't mention actual borrow that is affected", "user": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-06-15T09:33:35Z", "updated_at": "2023-06-15T09:33:35Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\n\n```Rust\nstruct Foo {\r\n    s: Option<String>,\r\n    i: i32,\r\n}\r\n\r\nfn foo(f: &Foo) {\r\n    let s = match f.s.as_ref() {\r\n        None => return,\r\n        Some(s) => s,\r\n    };\r\n    \r\n    let f = f.clone();\r\n    std::thread::spawn(move || {\r\n        println!(\"{:?} {:?}\", s, f.i); \r\n    }).join();\r\n}\r\n\r\nfn main() {\r\n    let f = Foo { s: Some(String::from(\"test\")), i: 123 };\r\n    foo(&f);\r\n}\n```\n\n\n### Current output\n\n```Shell\nCompiling playground v0.0.1 (/playground)\r\nerror[E0521]: borrowed data escapes outside of function\r\n  --> src/main.rs:13:5\r\n   |\r\n6  |   fn foo(f: &Foo) {\r\n   |          -  - let's call the lifetime of this reference `'1`\r\n   |          |\r\n   |          `f` is a reference that is only valid in the function body\r\n...\r\n13 | /     std::thread::spawn(move || {\r\n14 | |         println!(\"{:?} {:?}\", s, f.i); \r\n15 | |     }).join();\r\n   | |      ^\r\n   | |      |\r\n   | |______`f` escapes the function body here\r\n   |        argument requires that `'1` must outlive `'static`\r\n\r\nFor more information about this error, try `rustc --explain E0521`.\r\nerror: could not compile `playground` (bin \"playground\") due to previous error\r\n```\n```\n\n\n### Desired output\n\n```Shell\nI don't have a good suggestion how this could look like, but the error message should contain something in addition to what it currently contains that refers to \r\n\r\n  1. `s` being borrowed from `f`\r\n  2. `s` being moved into the closure and thus requiring a `'static` lifetime\r\n  3. `s` not having a `'static` lifetime because it's constrained by `f` in the way the original error message explains\n```\n\n\n### Rationale and extra context\n\nCurrently the error message does not contain any reference to `s` at all although that's the starting point where the borrowing rules are violated. If there's a lot of code between the `match` and the `thread::spawn()`, and the closure is also a lot of lines long, it can take a while to figure out that it's actually `s` that causes the problem here (and you'd have to re-borrow it from the `f` clone inside the closure).\n\n### Other cases\n\n```Rust\nIn this case it's only one level of indirection (`s` borrowing from `f`), but this could potentially be extended to more levels of indirection with multiple chained borrows.\n```\n\n\n### Anything else?\n\n_No response_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112650/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112650/timeline", "performed_via_github_app": null, "state_reason": null}