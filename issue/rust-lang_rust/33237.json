{"url": "https://api.github.com/repos/rust-lang/rust/issues/33237", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33237/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33237/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33237/events", "html_url": "https://github.com/rust-lang/rust/issues/33237", "id": 151385412, "node_id": "MDU6SXNzdWUxNTEzODU0MTI=", "number": 33237, "title": "consider removing/revising test/run-pass/zero-size-type-destructors.rs", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-04-27T13:28:55Z", "updated_at": "2017-05-03T21:38:52Z", "closed_at": "2017-05-03T21:38:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "(spawned off of [#rustc IRC discussion](https://botbot.me/mozilla/rustc/2016-04-27/?msg=64993325&page=1))\n\nThis test:\n\n  https://github.com/rust-lang/rust/blob/master/src/test/run-pass/zero-size-type-destructors.rs\n\nleverages `#[unsafe_no_drop_flag]`, coupled with a `Drop` impl that deliberately does not attempt to observe whether the value has already been  dropped, to count the number of actual drops are executed by the generated code.\n\nThe problem with this is that small variations on the same program exhibit semantics that probably should not be considered stable.\n\nFor example (playpen: http://is.gd/BwiZ17):\n\n``` rust\n#![feature(unsafe_no_drop_flag)]\n\nstatic mut destructions : isize = 3;\n\npub fn foo() {\n    #[unsafe_no_drop_flag]\n    struct Foo(u32);\n\n    impl Drop for Foo {\n        fn drop(&mut self) {\n            let p = self as *mut _;\n            println!(\"dropping Foo(0x{:08x}) at {:?}\", self.0, p);\n            unsafe { destructions -= 1 };\n        }\n    };\n\n    let x = Foo(1);\n    println!(\"The location of  `&x` is at {:?}\",  &x as *const _);\n    let _x = [x, Foo(2), Foo(3)];\n    println!(\"The location of `&_x` is at {:?}\", &_x as *const _);\n}\n\npub fn main() {\n  foo();\n  assert_eq!(unsafe { destructions }, 0);\n}\n```\n\nprints:\n\n```\nThe location of  `&x` is at 0x7fff1bfb0308\nThe location of `&_x` is at 0x7fff1bfb0258\ndropping Foo(0x00000001) at 0x7fff1bfb0258\ndropping Foo(0x00000002) at 0x7fff1bfb025c\ndropping Foo(0x00000003) at 0x7fff1bfb0260\ndropping Foo(0x1d1d1d1d) at 0x7fff1bfb0308\nthread '<main>' panicked at 'assertion failed: `(left == right)` (left: `-1`, right: `0`)', <anon>:25\n```\n\nWe continue to assert that there are three drops of `Foo`, since `x` is moved into `_x[0]`. But due to `unsafe_no_drop_flag`, there is no dynamic tracking of whether `x` is dropped or not, and therefore we end up executing the destructor four times. (The code above prints out the addresses of the local variables and of the `&mut self` in the destructor to make this very explicit; note that the `0x1d` bit pattern is the way we mark a value as dropped/uninitialized.)\n\n---\n\nI am filing this issue to point out that the test in the respository may be overly-conservative, in that it is explicitly testing the behavior of `unsafe_no_drop_flag` with code for which we do not guarantee the current behavior. \n\nIn particular, this test is one of the things that is \"blocking\" MIR i.e. `-Z orbit`  in its current state, but I would argue that we do not guarantee the current behavior, at least not to this degree of specificity.\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33237/timeline", "performed_via_github_app": null, "state_reason": "completed"}