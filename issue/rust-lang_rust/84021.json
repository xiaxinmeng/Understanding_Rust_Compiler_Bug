{"url": "https://api.github.com/repos/rust-lang/rust/issues/84021", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84021/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84021/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84021/events", "html_url": "https://github.com/rust-lang/rust/issues/84021", "id": 854021892, "node_id": "MDU6SXNzdWU4NTQwMjE4OTI=", "number": 84021, "title": "E0195 on where Self: 'a bounds when they are unconditionally satisfied by Self", "user": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-04-08T23:45:54Z", "updated_at": "2021-04-09T16:27:34Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\ntrait Test {\r\n    fn boo<'ctx>() where Self: 'ctx;\r\n}\r\n\r\nimpl<A, B> Test for (A, B) {\r\n    fn boo<'ctx>() where A: 'ctx, B: 'ctx { }    // ok\r\n}\r\n\r\nimpl Test for () {\r\n    fn boo<'ctx>() { }   //  [E0195]: lifetime parameters or bounds on method `boo` do not match the trait declaration\r\n}\r\n```\r\n\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=9d4125a483581bb47d66f002f1074fda\r\n\r\nI expected this to succeed.  And in fact, the first impl (the generic one) succeeds!  (i.e. the compiler is able to successfully determine that `Self: 'ctx` given `A: 'ctx` and `B: 'ctx`)\r\n\r\nHowever, an error is emitted on the impl for `()`:\r\n\r\n```\r\nerror[E0195]: lifetime parameters or bounds on method `boo` do not match the trait declaration\r\n  --> src/lib.rs:10:11\r\n   |\r\n2  |     fn boo<'ctx>() where Self: 'ctx;\r\n   |           ------ lifetimes in impl do not match this method in trait\r\n...\r\n10 |     fn boo<'ctx>() { }\r\n   |           ^^^^^^ lifetimes do not match method in trait\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nIn order to make this one compile, we need to add `where (): 'ctx` to the impl, which is, well, a bit silly!\r\n\r\n```rust\r\nimpl Test for () {\r\n    fn boo<'ctx>() where (): 'ctx { }   //  ok (workaround)\r\n}\r\n```\r\n\r\n---\r\n\r\n**Addendum:** In fact, **any** mention of the lifetime inside `where` bounds causes compilation to succeed.\r\n\r\n```rust\r\nimpl Test for () {\r\n    fn boo<'ctx>() where i32: 'ctx { }  // ok\r\n}\r\n\r\nimpl Test for () {\r\n    fn boo<'ctx>() where &'ctx i32: Clone { }  // also ok\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84021/timeline", "performed_via_github_app": null, "state_reason": null}