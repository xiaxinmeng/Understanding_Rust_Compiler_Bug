{"url": "https://api.github.com/repos/rust-lang/rust/issues/80111", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80111/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80111/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80111/events", "html_url": "https://github.com/rust-lang/rust/issues/80111", "id": 769787599, "node_id": "MDU6SXNzdWU3Njk3ODc1OTk=", "number": 80111, "title": "Miscompilation in webrender on aarch64-apple-darwin", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-12-17T09:50:39Z", "updated_at": "2021-10-26T04:49:23Z", "closed_at": "2021-10-26T04:49:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The issue was found when Firefox nightly would crash on startup on arm64 macos. It is reproducible in a different set of build configurations, with the common parameters being some sort of LTO being enabled (any of thin, full, plugin-lto), and codegen-units being set to 1. With thin or full LTO, it's also necessary to enable PGO, but no profile data is necessary (except for the fact that rustc wants a profile file to exist, but it can be a dummy file with the right header). But with plugin-lto, PGO is not necessary to reproduce.\r\n\r\nHowever, when reproducing outside of Firefox, it actually happens without PGO.\r\n\r\nThis is reproducible on an arm64 mac with the following (assuming you already have a rust toolchain for arm64 ; see further below how to observe the miscompilation on an Intel mac):\r\n```\r\ngit clone https://github.com/glandium/webrender -b aarch64-apple-darwin-miscompile\r\ncd webrender\r\ncargo run --release -p webrender-examples --bin text\r\n```\r\n\r\nThe above command crashes with:\r\n```\r\nOpenGL version 4.1 Metal - 71.0.7\r\nShader resource path: None\r\nDevice pixel ratio: 1\r\nLoading shaders...\r\nEntering event loop\r\nthread 'WRRenderBackend#0' panicked at 'BUG: Unable to find glyph key cache!', webrender/src/glyph_cache.rs:174:14\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nTo some extent, this can be observed in the disassembly on an Intel mac, with the following:\r\n```\r\nrustup install beta\r\nrustup target add aarch64-apple-darwin --toolchain beta\r\ngit clone https://github.com/glandium/webrender -b aarch64-apple-darwin-miscompile\r\ncd webrender\r\ncargo +beta build --release -p webrender-examples --bin text --target aarch64-apple-darwin\r\nobjdump -mcpu=apple-a12 -d target/aarch64-apple-darwin/release/text | less\r\n```\r\nThen search for the first `ldadd` after the declaration of the `add_prim_to_batch` function then go back a few lines to see the `ldp` instruction (see the lldb output further below to see what it looks like).\r\n\r\nThe following patch makes the testcase work properly:\r\n```diff\r\ndiff --git a/webrender/src/batch.rs b/webrender/src/batch.rs\r\nindex 2cac5f58..456c395f 100644\r\n--- a/webrender/src/batch.rs\r\n+++ b/webrender/src/batch.rs\r\n@@ -1185,8 +1185,9 @@ impl BatchBuilder {\r\n                     render_tasks,\r\n                 ).unwrap();\r\n \r\n+                let font = run.used_font.clone();\r\n                 ctx.resource_cache.fetch_glyphs(\r\n-                    run.used_font.clone(),\r\n+                    font,\r\n                     &glyph_keys,\r\n                     &mut self.glyph_fetch_buffer,\r\n                     gpu_cache,\r\n```\r\nSomething else that makes it work when PGO is not enabled (but doesn't when it is, while the above works in both cases), is to add `#[inline(never)]` to `fetch_glyphs` in `webrender/src/resource_cache.rs`.\r\n\r\nFollowing is a lldb session dump with some explanation of what's going on in between.\r\n```\r\n(lldb) target create \"target/release/text\"\r\nCurrent executable set to '/Users/glandium/bar/webrender/target/release/text' (arm64).\r\n```\r\n\r\nPut a breakpoint on the call to `fetch_glyphs` in `batch.rs` and run:\r\n```\r\n(lldb) break set -f batch.rs -l 1188\r\nBreakpoint 1: where = text`webrender::batch::BatchBuilder::add_prim_to_batch::ha32841dd71b08bcb + 12572 at batch.rs:1188:17, address = 0x000000010010989c\r\n(lldb) r\r\nProcess 79797 launched: '/Users/glandium/bar/webrender/target/release/text' (arm64)\r\nOpenGL version 4.1 Metal - 71.0.7\r\nShader resource path: None\r\nDevice pixel ratio: 1\r\nLoading shaders...\r\nEntering event loop\r\ntext was compiled with optimization - stepping may behave oddly; variables may not be available.\r\nProcess 79797 stopped\r\n* thread #16, name = 'WRRenderBackend#0', stop reason = breakpoint 1.1\r\n    frame #0: 0x000000010010989c text`webrender::batch::BatchBuilder::add_prim_to_batch::ha32841dd71b08bcb(self=<unavailable>, prim_instance=<unavailable>, prim_spatial_node_index=<unavailable>, ctx=0x0000000171529130, gpu_cache=<unavailable>, render_tasks=0x0000000171528df8, deferred_resolves=0x0000000171528f60, prim_headers=<unavailable>, transforms=0x0000000171528da8, root_spatial_node_index=<unavailable>, surface_spatial_node_index=(__0 = 0), z_generator=0x0000000171528fa8, composite_state=0x0000000171528e48) at batch.rs:1188:17 [opt]\r\n   1185\t                    render_tasks,\r\n   1186\t                ).unwrap();\r\n   1187\t\r\n-> 1188\t                ctx.resource_cache.fetch_glyphs(\r\n   1189\t                    run.used_font.clone(),\r\n   1190\t                    &glyph_keys,\r\n   1191\t                    &mut self.glyph_fetch_buffer,\r\nTarget 0: (text) stopped.\r\n```\r\n\r\nDisassembly around where we are:\r\n```\r\n(lldb) dis -b -p\r\ntext`webrender::batch::BatchBuilder::add_prim_to_batch::ha32841dd71b08bcb:\r\n->  0x10010989c <+12572>: 0xa9404d09   ldp    x9, x19, [x8]\r\n    0x1001098a0 <+12576>: 0xf8454308   ldur   x8, [x24, #0x54]\r\n    0x1001098a4 <+12580>: 0x5280002a   mov    w10, #0x1\r\n    0x1001098a8 <+12584>: 0xf82a012a   ldadd  x10, x10, [x9]\r\n```\r\nlldb won't give us `run`, but in the code, it is `&ctx.prim_store.text_runs[run_index];`, and we have `ctx`:\r\n```\r\n(lldb) print ctx\r\n(webrender::render_target::RenderTargetContext *) $0 = 0x0000000171529130\r\n(lldb) print ctx->prim_store\r\n(webrender::prim_store::PrimitiveStore *) $1 = 0x00000001010867e8\r\n(lldb) print ctx->prim_store->text_runs\r\n(webrender::storage::Storage<webrender::prim_store::text_run::TextRunPrimitive>) $2 = {\r\n  data = {\r\n    buf = {\r\n      ptr = {\r\n        pointer = 0x0000000100871970\r\n        _marker = {}\r\n      }\r\n      cap = 4\r\n      alloc = {}\r\n    }\r\n    len = 1\r\n  }\r\n}\r\n```\r\n`x8` is `ctx`:\r\n```\r\n(lldb) register read x8\r\n      x8 = 0x0000000171529130\r\n```\r\nWe advance one instruction, which loads one 64-bits word from what's pointed to by `x8` into `x9` and another one into `x19`.\r\n```\r\n(lldb) stepi\r\nProcess 79797 stopped\r\n* thread #16, name = 'WRRenderBackend#0', stop reason = instruction step into\r\n    frame #0: 0x00000001001098a0 text`webrender::batch::BatchBuilder::add_prim_to_batch::ha32841dd71b08bcb(self=<unavailable>, prim_instance=<unavailable>, prim_spatial_node_index=<unavailable>, ctx=0x0000000171529130, gpu_cache=<unavailable>, render_tasks=0x0000000171528df8, deferred_resolves=0x0000000171528f60, prim_headers=<unavailable>, transforms=0x0000000171528da8, root_spatial_node_index=<unavailable>, surface_spatial_node_index=(__0 = 0), z_generator=0x0000000171528fa8, composite_state=0x0000000171528e48) at batch.rs:1189:21 [opt]\r\n   1186\t                ).unwrap();\r\n   1187\t\r\n   1188\t                ctx.resource_cache.fetch_glyphs(\r\n-> 1189\t                    run.used_font.clone(),\r\n   1190\t                    &glyph_keys,\r\n   1191\t                    &mut self.glyph_fetch_buffer,\r\n   1192\t                    gpu_cache,\r\nTarget 0: (text) stopped.\r\n(lldb) register read x9 x19\r\n      x9 = 0x00000001010867e8\r\n     x19 = 0x000000017152dfd8\r\n```\r\n`x9` is now `ctx->prim_store`\r\n`x19` is `ctx->resource_cache`, which is going to be the first argument for the call to `fetch_glyphs`.\r\n\r\nFollowing the above, the most relevant instructions are:\r\n```\r\n    0x1001098a4 <+12580>: 0x5280002a   mov    w10, #0x1\r\n    0x1001098a8 <+12584>: 0xf82a012a   ldadd  x10, x10, [x9]\r\n```\r\nwhich load `1` into `w10/x10`, and use that to atomically increment the value at the address in `x9`, and return the value pre-increment in `x10`.\r\nThat is the `Arc` refcount increment from the `clone()` (`run.used_font` is a `FontInstance`, which contains a `Arc<BaseFontInstance>`)... except `x9` is `ctx->prim_store`, so what ends up happening is that the pointer behind `ctx.prim_store.pictures` is incremented:\r\n```\r\n(lldb) print *ctx->prim_store\r\n(webrender::prim_store::PrimitiveStore) $3 = {\r\n  pictures = {\r\n    buf = {\r\n      ptr = {\r\n        pointer = 0x000000010102d800\r\n        _marker = {}\r\n      }\r\n      cap = 4\r\n      alloc = {}\r\n    }\r\n    len = 2\r\n  }\r\n  text_runs = {\r\n    data = {\r\n      buf = {\r\n        ptr = {\r\n          pointer = 0x0000000100871970\r\n          _marker = {}\r\n        }\r\n        cap = 4\r\n        alloc = {}\r\n      }\r\n      len = 1\r\n    }\r\n  }\r\n<snip>\r\n(lldb) stepi\r\n<snip>\r\n(lldb) stepi\r\n<snip>\r\n(lldb) stepi\r\nProcess 79797 stopped\r\n* thread #16, name = 'WRRenderBackend#0', stop reason = instruction step into\r\n    frame #0: 0x00000001001098ac text`webrender::batch::BatchBuilder::add_prim_to_batch::ha32841dd71b08bcb at sync.rs:1193:9 [opt]\r\nTarget 0: (text) stopped.\r\n```\r\nBecause lldb won't give us `ctx` in this context anymore, we use `$1`, which was `ctx->prim_store`:\r\n```\r\n(lldb) print *$1\r\n(webrender::prim_store::PrimitiveStore) $4 = {\r\n  pictures = {\r\n    buf = {\r\n      ptr = {\r\n        pointer = 0x000000010102d801\r\n        _marker = {}\r\n      }\r\n      cap = 4\r\n      alloc = {}\r\n    }\r\n    len = 2\r\n  }\r\n  text_runs = {\r\n    data = {\r\n      buf = {\r\n        ptr = {\r\n          pointer = 0x0000000100871970\r\n          _marker = {}\r\n        }\r\n        cap = 4\r\n        alloc = {}\r\n      }\r\n      len = 1\r\n    }\r\n  }\r\n<snip>\r\n```\r\nFrom there, it's obvious things have gone sideways, and the font clone we call `fetch_glyphs` with is wrong, so the code further down the path fails to find that font, because it's full of garbage and doesn't actually exist, thus the panic.\r\n\r\nWith the patch applied, this becomes:\r\n```\r\n(lldb) target create \"target/release/text\"\r\nCurrent executable set to '/Users/glandium/webrender/target/release/text' (arm64).\r\n(lldb) break set -f batch.rs -l 1188\r\nBreakpoint 1: where = text`webrender::batch::BatchBuilder::add_prim_to_batch::ha32841dd71b08bcb + 12568 at batch.rs:1188:28, address = 0x00000001001098c4\r\n(lldb) r\r\nProcess 82710 launched: '/Users/glandium/webrender/target/release/text' (arm64)\r\n2020-12-17 17:58:12.119206+0900 text[82710:630104] flock failed to lock list file (/var/folders/t_/1_j26n_d4s740nwj29518xfh0000gn/C//com.apple.metal/16777235_1602/functions.list): errno = 35\r\nOpenGL version 4.1 Metal - 71.0.7\r\nShader resource path: None\r\nDevice pixel ratio: 1\r\nLoading shaders...\r\nEntering event loop\r\ntext was compiled with optimization - stepping may behave oddly; variables may not be available.\r\nProcess 82710 stopped\r\n* thread #16, name = 'WRRenderBackend#0', stop reason = breakpoint 1.1\r\n    frame #0: 0x00000001001098c4 text`webrender::batch::BatchBuilder::add_prim_to_batch::ha32841dd71b08bcb(self=<unavailable>, prim_instance=<unavailable>, prim_spatial_node_index=<unavailable>, ctx=<unavailable>, gpu_cache=<unavailable>, render_tasks=0x0000000171528df8, deferred_resolves=0x0000000171528f60, prim_headers=0x0000000171528f78, transforms=0x0000000171528da8, root_spatial_node_index=<unavailable>, surface_spatial_node_index=(__0 = 0), z_generator=0x0000000171528fa8, composite_state=0x0000000171528e48) at batch.rs:1188:28 [opt]\r\n   1185\t                    render_tasks,\r\n   1186\t                ).unwrap();\r\n   1187\t\r\n-> 1188\t                let font = run.used_font.clone();\r\n   1189\t                ctx.resource_cache.fetch_glyphs(\r\n   1190\t                    font,\r\n   1191\t                    &glyph_keys,\r\nTarget 0: (text) stopped.\r\n(lldb) dis -b -p\r\ntext`webrender::batch::BatchBuilder::add_prim_to_batch::ha32841dd71b08bcb:\r\n->  0x1001098c4 <+12568>: 0xf8454149   ldur   x9, [x10, #0x54]\r\n    0x1001098c8 <+12572>: 0xf9400128   ldr    x8, [x9]\r\n    0x1001098cc <+12576>: 0x5280002a   mov    w10, #0x1\r\n    0x1001098d0 <+12580>: 0xf82a010a   ldadd  x10, x10, [x8]\r\n```\r\nI haven't looked at what `x10` represents in that case (it's not related to `ctx`), but what is loaded from `x10 + 0x54` is `ctx->prim_store->text_runs.data.buf.ptr.pointer`, which makes the following `ldr` correct. It must be remaining from the inlining of earlier function calls.\r\n\r\nIt's important to note that we're somewhat lucky that the code fails in a graceful way because of the font not existing, but is something had been dereferencing that `pictures` pointer, things could have gone much worse.", "closed_by": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80111/timeline", "performed_via_github_app": null, "state_reason": "completed"}