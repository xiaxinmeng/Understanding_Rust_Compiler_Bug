{"url": "https://api.github.com/repos/rust-lang/rust/issues/47409", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47409/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47409/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47409/events", "html_url": "https://github.com/rust-lang/rust/issues/47409", "id": 288316660, "node_id": "MDU6SXNzdWUyODgzMTY2NjA=", "number": 47409, "title": "Some DCE issues with ThinLTO leaving in construction of unused parameters", "user": {"login": "gamozolabs", "id": 13505090, "node_id": "MDQ6VXNlcjEzNTA1MDkw", "avatar_url": "https://avatars.githubusercontent.com/u/13505090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gamozolabs", "html_url": "https://github.com/gamozolabs", "followers_url": "https://api.github.com/users/gamozolabs/followers", "following_url": "https://api.github.com/users/gamozolabs/following{/other_user}", "gists_url": "https://api.github.com/users/gamozolabs/gists{/gist_id}", "starred_url": "https://api.github.com/users/gamozolabs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gamozolabs/subscriptions", "organizations_url": "https://api.github.com/users/gamozolabs/orgs", "repos_url": "https://api.github.com/users/gamozolabs/repos", "events_url": "https://api.github.com/users/gamozolabs/events{/privacy}", "received_events_url": "https://api.github.com/users/gamozolabs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/41", "html_url": "https://github.com/rust-lang/rust/milestone/41", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/41/labels", "id": 2913233, "node_id": "MDk6TWlsZXN0b25lMjkxMzIzMw==", "number": 41, "title": "1.24", "description": "", "creator": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-11-15T01:41:05Z", "updated_at": "2020-06-16T05:10:40Z", "due_on": "2018-02-15T08:00:00Z", "closed_at": "2018-02-19T01:32:45Z"}, "comments": 12, "created_at": "2018-01-13T09:46:57Z", "updated_at": "2018-01-23T04:16:38Z", "closed_at": "2018-01-23T04:16:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since ThinLTO became default in Rust my bootloader went from 17 KiB to about 42 KiB in size, which puts it over the 32 KiB limit. To get my bootloader to fit in this limit I've been able to strip out all of `core::fmt` by not having any parameters to my `panic_fmt` routine and this allows LTO to effectively delete all construction of the `core::fmt` parameters to `panic_fmt` and thus save huge amounts of code.\r\n\r\nSince ThinLTO became default it seems that certain functions using volatile memory or inline assembly struggle to be optimized fully, however this is all I've found that replicates the issue, perhaps more common use of Rust could also trigger it.\r\n\r\nFor the tiny test case (included at the end of this issue) historically (from at least 2016 to November 2017) produced a .text section of ~100 bytes, and a total virtual program size of ~500 bytes. Since ThinLTO became default this tiny program grows to ~2400 bytes of .text and ~3200 bytes overall.\r\n\r\nWhile this 2 KiB increase seems small, keep in mind it is for an application that is trivial and only has one thing using `core::fmt` (the bounds check panic on the array index). When a program grows and more panic come about these changes to be a much larger increase, in my case over 20 KiB.\r\n\r\nWhile I'm writing an RFC to address this issue more permanently by proposing an optional (developer opt-in) panic routine which does not rely on `core::fmt` (probably just a `&'static str` for the filename and `u32` for the line for bare bones debugging where nothing more can be afforded), I wanted to open this issue just in case it's a more fundamental optimization issue that could be fixed.\r\n\r\nThe `core::intrinsics::abort()` is critical in the `panic_fmt` for the code size increase to occur. Other things that work here as well are statements like `asm!(\"nop\")` or really any assembly statement. Further, assembly statements that are included in functions that are called from `panic_fmt` also cause the optimization problem to occur. This makes workarounds impossible in my case as my panic dumps to a serial port which ultimately requires inline assembly to access. So for my bootloader I have resorted to using an old version of Rust. \r\n\r\nWhat I find particularly strange is that while I've defined my `panic_fmt` to not take any parameters this doesn't seem to be a big enough hint to Rust/LLVM that they are not used and thus all construction of these parameters can be DCE'd.\r\n\r\nFor a size listing of this test program using all nightly builds of Rust in the past 1.5 years see:  https://gist.github.com/gamozolabs/d72c05e2b200f02397f1495cf33c2674\r\n\r\nWe can see from this that the size increase occured between `rustc 1.24.0-nightly (f9b0897c5 2017-12-02)` and `rustc 1.24.0-nightly (1956d5535 2017-12-03)` which happens to be when ThinLTO went default.\r\n\r\nI've tried a few different tests using various `panic_fmt` declarations, with parameters, without, as extern, as pub, etc, and they seem to all be affected by this issue.\r\n\r\nHere's an example basic piece of code to be built with `nightly-x86_64-pc-windows-msvc` using args `-C lto -C panic=abort -O`:\r\n\r\nHere is the disassembly difference between this same code but one with ThinLTO and one with full LTO: https://gist.github.com/gamozolabs/41b2059a55d5e0b60d7251dd8a31c055\r\n\r\n```\r\n#![no_std]\r\n#![feature(lang_items, start, core_intrinsics)]\r\n\r\n#[lang = \"panic_fmt\"]\r\n#[no_mangle]\r\npub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\r\n                               _file: &'static str,\r\n                               _line: u32,\r\n                               _column: u32) -> ! {\r\n    unsafe { core::intrinsics::abort() }\r\n}\r\n\r\n// These functions are used by the compiler, but not\r\n// for a bare-bones hello world. These are normally\r\n// provided by libstd.\r\n#[lang = \"eh_personality\"]\r\n#[no_mangle]\r\npub extern fn rust_eh_personality() {\r\n}\r\n\r\n// This function may be needed based on the compilation target.\r\n#[lang = \"eh_unwind_resume\"]\r\n#[no_mangle]\r\npub extern fn rust_eh_unwind_resume() {\r\n}\r\n\r\n#[start]\r\n#[no_mangle]\r\n#[allow(non_snake_case)]\r\npub fn mainCRTStartup(argc: isize, _argv: *const *const u8) -> isize\r\n{\r\n    let foo = [1, 2, 3, 4];\r\n    foo[argc as usize]\r\n}\r\n```", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47409/timeline", "performed_via_github_app": null, "state_reason": "completed"}