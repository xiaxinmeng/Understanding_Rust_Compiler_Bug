{"url": "https://api.github.com/repos/rust-lang/rust/issues/89003", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89003/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89003/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89003/events", "html_url": "https://github.com/rust-lang/rust/issues/89003", "id": 997860679, "node_id": "I_kwDOAAsO6M47eiVH", "number": 89003, "title": "No warning for violating AAPCS64", "user": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1944310735, "node_id": "MDU6TGFiZWwxOTQ0MzEwNzM1", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-layout", "name": "A-layout", "color": "f7e101", "default": false, "description": "Area: Memory layout of types"}, {"id": 3940166907, "node_id": "LA_kwDOAAsO6M7q2iz7", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-AArch64", "name": "O-AArch64", "color": "6e6ec0", "default": false, "description": "Armv8-A or later processors in AArch64 mode"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-16T07:09:10Z", "updated_at": "2022-03-18T01:05:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code with `rustc how-to-violate-an-abi.rs --target=aarch64-unknown-linux-gnu`:\r\n\r\n```rust\r\n#[repr(C, packed)]\r\npub struct PackedC {\r\n    a: u8,\r\n    b: u16,\r\n}\r\n\r\n#[no_mangle]\r\npub extern \"C\" fn exposed_illegal_struct(c: PackedC) -> PackedC {\r\n    PackedC { a: c.a +1, b: c.b -1 } \r\n}\r\n```\r\n\r\nI expected to see this happen: At least a warning about violating the Procedure Call Standard for the Arm 64-bit Architecture (\"AAPCS64\").\r\n\r\nInstead, this happened: the code passed without rustc erroring (until rustc errored on finding I haven't installed the right linker yet). Concerning. Perhaps I am doing something wrong?\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.57.0-nightly (51e514c0f 2021-09-12)\r\nbinary: rustc\r\ncommit-hash: 51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8\r\ncommit-date: 2021-09-12\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.57.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n### Details\r\n\r\nThis came up [during discussion of the Arm ABI and bitfields]( https://github.com/rust-lang/rfcs/pull/3113#discussion_r704875707). In essence, as it was explained to me: `#[repr(C)]` and `#[repr(packed)]` are not really quite compatible since compilers have a lot of liberty to intepret things like `__attribute__((__packed__))`, which is, in any case, a compiler extension and not part of the C standard. As such, Arm actually explicitly disallows them in code that exposes an interface. Here we have some code which could do exactly that: return a type with an ABI-breaking combination of reprs.\r\n\r\nTo quote Arm (emphasis mine):\r\n> The AAPCS64 does not allow exported interfaces to contain **packed structures** or bit-fields. However a scheme for laying out packed bit-fields can be achieved by reducing the alignment, A, in the above rules to below that of the natural container type. ARMCC uses an alignment of A=8 in these cases, but GCC uses an alignment of A=1.\r\n\r\nThe varying alignment described here is itself an excellent example as to how `#[repr(packed)]` can be subject to differing interpretations between compilers, and would ideally have a limited amount of exposure to the logic outside a _single_ compiler on any system. Of course, we don't have packed bitfields in Rust yet, but we do have packed structs!\r\n\r\nThis may fall under the `improper_ctypes` lint, however as it is apparently an explicit ABI violation on this architecture, something a bit more stern than just a warning does seem like it may be appropriate if we detect it \"leaking out\". It also does seem doubtful we can truly be inter-compiler consistent in cases where the ABI is any less specified than such a quite thorough algorithm. Of course, even on Arm, something like this may be required of a Rust programmer for interacting with legacy code that decides it is \"too good\" for the AAPCS anyways, though we might need additional hints for producing a proper layout (and ideally a better solution can be found).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89003/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89003/timeline", "performed_via_github_app": null, "state_reason": null}