{"url": "https://api.github.com/repos/rust-lang/rust/issues/112329", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112329/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112329/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112329/events", "html_url": "https://github.com/rust-lang/rust/issues/112329", "id": 1742787098, "node_id": "I_kwDOAAsO6M5n4NIa", "number": 112329, "title": "Ranges of match expressions incorrectly parsed", "user": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235777, "node_id": "MDU6TGFiZWwyMzU3Nzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-grammar", "name": "A-grammar", "color": "f7e101", "default": false, "description": "Area: The grammar of Rust"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-06-05T23:14:40Z", "updated_at": "2023-06-06T12:54:32Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nPlayground link: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=037f6cc1aa5c9a0fc250ee3abf69bb1d\r\n\r\n```rust\r\nuse core::ops::{RangeInclusive, Range, RangeFrom, RangeTo, RangeToInclusive};\r\n\r\nfn inclusive() -> RangeInclusive<u32> {\r\n    match 1 { x => x }..=match 2 { x => x }\r\n}\r\nfn exclusive() -> Range<u32> {\r\n    match 1 { x => x }..match 2 { x => x }\r\n}\r\nfn from() -> RangeFrom<u32> {\r\n    match 1 { x => x }..\r\n}\r\nfn to() -> RangeTo<u32> {\r\n    ..match 2 { x => x }\r\n}\r\nfn to_inclusive() -> RangeToInclusive<u32> {\r\n    ..=match 2 { x => x }\r\n}\r\n```\r\n\r\nCompiler output:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:4:5\r\n  |\r\n4 |     match 1 { x => x }..=match 2 { x => x }\r\n  |     ^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here\r\n  |     |\r\n  |     expected `()`, found integer\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:4:23\r\n  |\r\n3 | fn inclusive() -> RangeInclusive<u32> {\r\n  |                   ------------------- expected `RangeInclusive<u32>` because of return type\r\n4 |     match 1 { x => x }..=match 2 { x => x }\r\n  |                       ^^^^^^^^^^^^^^^^^^^^^ expected `RangeInclusive<u32>`, found `RangeToInclusive<{integer}>`\r\n  |\r\n  = note: expected struct `RangeInclusive<u32>`\r\n             found struct `RangeToInclusive<{integer}>`\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:7:5\r\n  |\r\n7 |     match 1 { x => x }..match 2 { x => x }\r\n  |     ^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here\r\n  |     |\r\n  |     expected `()`, found integer\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:7:23\r\n  |\r\n6 | fn exclusive() -> Range<u32> {\r\n  |                   ---------- expected `std::ops::Range<u32>` because of return type\r\n7 |     match 1 { x => x }..match 2 { x => x }\r\n  |                       ^^^^^^^^^^^^^^^^^^^^ expected `Range<u32>`, found `RangeTo<{integer}>`\r\n  |\r\n  = note: expected struct `std::ops::Range<u32>`\r\n             found struct `RangeTo<{integer}>`\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:10:5\r\n   |\r\n10 |     match 1 { x => x }..\r\n   |     ^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here\r\n   |     |\r\n   |     expected `()`, found integer\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:10:23\r\n   |\r\n9  | fn from() -> RangeFrom<u32> {\r\n   |              -------------- expected `RangeFrom<u32>` because of return type\r\n10 |     match 1 { x => x }..\r\n   |                       ^^ expected `RangeFrom<u32>`, found `RangeFull`\r\n   |\r\n   = note: expected struct `RangeFrom<u32>`\r\n              found struct `RangeFull`\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\n```\r\n\r\nI'd expect each of the above to compile into a simple range with start 1 and end 2, but instead, the compiler is interpreting the match statement before the range operator as a unit expression, then failing to typecheck. This means that while the `to()` and `to_inclusive()` functions compile correctly, the rest don't.\r\n\r\nWhile this *is* parsed correctly with parentheses around the range expression, this triggers the `unused_parentheses` lint which auto-fixes to the above version. Here's a playground link for that: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=3962072dc9d1c3c3532cca8885ad69a6\r\n\r\n```rust\r\nuse core::ops::{RangeInclusive, Range, RangeFrom, RangeTo, RangeToInclusive};\r\n\r\npub fn inclusive() -> RangeInclusive<u32> {\r\n    (match 1 { x => x }..=match 2 { x => x })\r\n}\r\npub fn exclusive() -> Range<u32> {\r\n    (match 1 { x => x }..match 2 { x => x })\r\n}\r\npub fn from() -> RangeFrom<u32> {\r\n    (match 1 { x => x }..)\r\n}\r\npub fn to() -> RangeTo<u32> {\r\n    ..match 2 { x => x }\r\n}\r\npub fn to_inclusive() -> RangeToInclusive<u32> {\r\n    ..=match 2 { x => x }\r\n}\r\n```\r\n\r\nCompiler output:\r\n\r\n```\r\nwarning: unnecessary parentheses around block return value\r\n --> src/lib.rs:4:5\r\n  |\r\n4 |     (match 1 { x => x }..=match 2 { x => x })\r\n  |     ^                                       ^\r\n  |\r\n  = note: `#[warn(unused_parens)]` on by default\r\nhelp: remove these parentheses\r\n  |\r\n4 -     (match 1 { x => x }..=match 2 { x => x })\r\n4 +     match 1 { x => x }..=match 2 { x => x }\r\n  |\r\n\r\nwarning: unnecessary parentheses around block return value\r\n --> src/lib.rs:7:5\r\n  |\r\n7 |     (match 1 { x => x }..match 2 { x => x })\r\n  |     ^                                      ^\r\n  |\r\nhelp: remove these parentheses\r\n  |\r\n7 -     (match 1 { x => x }..match 2 { x => x })\r\n7 +     match 1 { x => x }..match 2 { x => x }\r\n  |\r\n\r\nwarning: unnecessary parentheses around block return value\r\n  --> src/lib.rs:10:5\r\n   |\r\n10 |     (match 1 { x => x }..)\r\n   |     ^                    ^\r\n   |\r\nhelp: remove these parentheses\r\n   |\r\n10 -     (match 1 { x => x }..)\r\n10 +     match 1 { x => x }..\r\n   |\r\n```\r\n\r\nThis bug exists on both stable (1.70.0) and nightly (2023-06-04).\r\n\r\nI'm not sure whether the parentheses should be required or not, but regardless, this is at least a diagnostic issue, since recommending to remove parentheses around the expression causes it to fail.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112329/timeline", "performed_via_github_app": null, "state_reason": null}