{"url": "https://api.github.com/repos/rust-lang/rust/issues/88323", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88323/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88323/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88323/events", "html_url": "https://github.com/rust-lang/rust/issues/88323", "id": 979029694, "node_id": "MDU6SXNzdWU5NzkwMjk2OTQ=", "number": 88323, "title": "Error messages sometimes incorrectly elide `dyn Trait` lifetimes when `dyn Trait` is behind an alias", "user": {"login": "QuineDot", "id": 75067664, "node_id": "MDQ6VXNlcjc1MDY3NjY0", "avatar_url": "https://avatars.githubusercontent.com/u/75067664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuineDot", "html_url": "https://github.com/QuineDot", "followers_url": "https://api.github.com/users/QuineDot/followers", "following_url": "https://api.github.com/users/QuineDot/following{/other_user}", "gists_url": "https://api.github.com/users/QuineDot/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuineDot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuineDot/subscriptions", "organizations_url": "https://api.github.com/users/QuineDot/orgs", "repos_url": "https://api.github.com/users/QuineDot/repos", "events_url": "https://api.github.com/users/QuineDot/events{/privacy}", "received_events_url": "https://api.github.com/users/QuineDot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-08-25T11:24:50Z", "updated_at": "2021-08-25T11:25:46Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "There's probably a better description but I couldn't think of a short one, sorry.  But the basic setup is that you can have a situation such as:\r\n```rust\r\ntype Alias = dyn Trait;\r\n/* ... */ where for<'a> &'a Alias: Bound, /* ... */\r\n```\r\nAnd rustc will expand this to `&'a (dyn Trait + 'static)`, as the lifetime elision does not penetrate the alias.  But error reporting will report this as `&'a dyn Trait` after normalizing the alias, and this is short for `&'a (dyn Trait + 'a)`.  This happens even when the alias is implicit, e.g., `Self`.\r\n\r\n[Examples:](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=13c78dfbe94073e3915628dad3c3a523)\r\n```rust\r\nfn f() {\r\n    trait Marker<'a> {}\r\n    trait Trait where for<'a> &'a Self: Marker<'a> {\r\n        fn usable(&self) {}\r\n    }\r\n\r\n    impl<'a> Marker<'a> for &'a () {}\r\n    impl Trait for () {}\r\n\r\n    let t: &dyn Trait = &();\r\n    t.usable();\r\n    // error[E0277]: the trait bound `for<'a> &'a dyn Trait: Marker<'a>` is not satisfied\r\n}\r\n```\r\nThe actual problem is that `for<'a> &'a (dyn Trait + 'static): Marker<'a>` is not satisfied.  But following the error as reported:\r\n\r\n```rust\r\nfn g() {\r\n    trait Marker<'a> {}\r\n    trait Trait where for<'a> &'a Self: Marker<'a> { fn usable(&self) {} }\r\n    impl<'a> Marker<'a> for &'a () {}\r\n    impl Trait for () {}\r\n    let t: &dyn Trait = &();\r\n\r\n    impl<'a> Marker<'a> for &'a (dyn Trait /* + 'a */) {}\r\n    t.usable();\r\n    //   |       ^^^^^^ implementation of `g::Marker` is not general enough\r\n    //   |\r\n    //   = note: `g::Marker<'0>` would have to be implemented for the type `&'0 dyn g::Trait`, for any lifetime `'0`...\r\n    //   = note: ...but `g::Marker<'_>` is actually implemented for the type `&'1 (dyn g::Trait + '1)`, for some specific lifetime `'1`\r\n}\r\n```\r\nThe first note is counter-factual; we did implement for the type `&'0 dyn g::Trait`, for any lifetime `'0`.  The thing we didn't implement is `&'0 (dyn g::Trait + 'static)`, for any lifetime `'0`.\r\n\r\nThe second note is inaccurate; we have a blanket implementation, not a specific lifetime implementation.\r\n\r\nAnd a variation involving an associated type:\r\n```rust\r\nfn i() {\r\n    trait Trait where for<'a> &'a Self: IntoIterator<Item=&'a ()> { fn usable(&self) {} }\r\n    impl Trait for Vec<()> {}\r\n\r\n    let v = vec![()];\r\n    v.usable();\r\n    let t: &dyn Trait = &v;\r\n    \r\n    impl<'a> IntoIterator for &'a dyn Trait {\r\n        type Item = &'a ();\r\n        type IntoIter = std::slice::Iter<'a, ()>;\r\n        fn into_iter(self) -> Self::IntoIter {\r\n            (&[]).into_iter()\r\n        }\r\n    }\r\n\r\n    t.usable();\r\n    //    |       ^^^^^^ the trait `for<'a> IntoIterator` is not implemented for `&'a dyn i::Trait`\r\n    //    |\r\n    //    = help: the following implementations were found:\r\n    //              <&'a (dyn i::Trait + 'a) as IntoIterator>\r\n}\r\n```\r\nThe `^^^^^` note is incorrect, and contradicted by the help that follows.\r\n\r\nIdeally the output should look like:\r\n```\r\n     error[E0277]: the trait bound `for<'a> &'a (dyn Trait + 'static): Marker<'a>` is not satisfied\r\n```\r\n```\r\n       |       ^^^^^^ implementation of `g::Marker` is not general enough\r\n       |\r\n       = note: `g::Marker<'0>` would have to be implemented for the type `&'0 (dyn g::Trait + 'static)`, for any lifetime `'0`...\r\n       = note: ...but `g::Marker<'_>` is actually implemented for the type `&'1 (dyn g::Trait + '1)`, for any lifetime `'1`\r\n```\r\n```\r\n        |       ^^^^^^ the trait `for<'a> IntoIterator` is not implemented for `&'a (dyn i::Trait + 'static)`\r\n        |\r\n        = help: the following implementations were found:\r\n                  <&'a (dyn i::Trait + 'a) as IntoIterator>\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88323/timeline", "performed_via_github_app": null, "state_reason": null}