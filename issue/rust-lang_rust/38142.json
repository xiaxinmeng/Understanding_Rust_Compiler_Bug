{"url": "https://api.github.com/repos/rust-lang/rust/issues/38142", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38142/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38142/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38142/events", "html_url": "https://github.com/rust-lang/rust/issues/38142", "id": 193280047, "node_id": "MDU6SXNzdWUxOTMyODAwNDc=", "number": 38142, "title": "Macro generation uses up a lot of RAM", "user": {"login": "TheSilvus", "id": 18658672, "node_id": "MDQ6VXNlcjE4NjU4Njcy", "avatar_url": "https://avatars.githubusercontent.com/u/18658672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheSilvus", "html_url": "https://github.com/TheSilvus", "followers_url": "https://api.github.com/users/TheSilvus/followers", "following_url": "https://api.github.com/users/TheSilvus/following{/other_user}", "gists_url": "https://api.github.com/users/TheSilvus/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheSilvus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheSilvus/subscriptions", "organizations_url": "https://api.github.com/users/TheSilvus/orgs", "repos_url": "https://api.github.com/users/TheSilvus/repos", "events_url": "https://api.github.com/users/TheSilvus/events{/privacy}", "received_events_url": "https://api.github.com/users/TheSilvus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-03T10:46:37Z", "updated_at": "2016-12-03T17:33:54Z", "closed_at": "2016-12-03T17:33:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "While trying to learn to use macros I came across a weird behavior while compiling a relativly simple macro (no recursion). I know it throws an error while compiling, but after it does it uses up as much RAM and CPU as possible (tried it with up to 8gb) and then starts filling up Swap. I haven't tried cutting down the code to find the error.\r\n\r\n```rust\r\nmacro_rules! world {\r\n    (\r\n        name: $name:ident,\r\n        components: {\r\n            $( $comp_name:ident => $comp_type:path ),*\r\n        },\r\n        systems: {\r\n            $( $sys_name:ident => $sys_type:path as [$($sys_comp_name:ident),*]  ),*\r\n        }\r\n    ) => {\r\n        struct $name {\r\n            current_id: usize,\r\n            $($comp_name: std::collections::HashMap<usize, $comp_type>, )*\r\n\r\n            $($sys_name: $sys_type,)*\r\n        }\r\n        impl $name {\r\n            fn new() -> $name {\r\n                World {\r\n                    $($comp_name: HashMap::new(),)*\r\n                    $($sys_name: $sys_type,)*\r\n                }\r\n            }\r\n            fn update(&mut self, delta: f64) {\r\n                $($sys_name.run(delta, $( &mut self.$sys_comp_name ),*);)*\r\n            }\r\n\r\n            fn entity(&mut self) -> EntityBuilder {\r\n                self.current_id += 1;\r\n                EntityBuilder {\r\n                    id: self.current_id,\r\n                    world: self\r\n                }\r\n            }\r\n        }\r\n\r\n        struct EntityBuilder {\r\n            id: usize,\r\n            world: &mut World,\r\n        }\r\n        impl EntityBuilder {\r\n            $(\r\n                fn with_$comp_name(self, value: $comp_type) -> EntityBuilder {\r\n                    self.world.$comp_name.insert(self.id, value);\r\n                    self\r\n                }\r\n             )*\r\n            fn build(self) -> usize {\r\n                self.id;\r\n            }\r\n        }\r\n    }\r\n}\r\nuse std::collections::HashMap;\r\nfn test() {\r\n    struct Position(f64, f64);\r\n    struct Velocity(f64, f64);\r\n    struct Movement;\r\n    impl Movement {\r\n        fn run(&mut self, pos: HashMap<usize, Position>, vel: HashMap<usize, Velocity>) {\r\n            println!(\"Heere!\");\r\n        }\r\n    }\r\n    world! {\r\n        name: TestWorld,\r\n        components: {\r\n            pos => Position,\r\n            vel => Velocity\r\n        },\r\n        systems: {\r\n              movement => Movement as [pos, vel]\r\n        }\r\n    }\r\n}\r\n```\r\nPlease don't comment on the code itself, it tries to be as naive and simple as possible, although it doesn't compile.\r\n\r\n\r\n```\r\nrustc 1.13.0\r\nbinary: rustc\r\ncommit-hash: unknown\r\ncommit-date: unknown\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.13.0\r\n```", "closed_by": {"login": "TheSilvus", "id": 18658672, "node_id": "MDQ6VXNlcjE4NjU4Njcy", "avatar_url": "https://avatars.githubusercontent.com/u/18658672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheSilvus", "html_url": "https://github.com/TheSilvus", "followers_url": "https://api.github.com/users/TheSilvus/followers", "following_url": "https://api.github.com/users/TheSilvus/following{/other_user}", "gists_url": "https://api.github.com/users/TheSilvus/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheSilvus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheSilvus/subscriptions", "organizations_url": "https://api.github.com/users/TheSilvus/orgs", "repos_url": "https://api.github.com/users/TheSilvus/repos", "events_url": "https://api.github.com/users/TheSilvus/events{/privacy}", "received_events_url": "https://api.github.com/users/TheSilvus/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38142/timeline", "performed_via_github_app": null, "state_reason": "completed"}