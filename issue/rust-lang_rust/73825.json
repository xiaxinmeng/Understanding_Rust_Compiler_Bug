{"url": "https://api.github.com/repos/rust-lang/rust/issues/73825", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73825/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73825/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73825/events", "html_url": "https://github.com/rust-lang/rust/issues/73825", "id": 646826312, "node_id": "MDU6SXNzdWU2NDY4MjYzMTI=", "number": 73825, "title": "New optimization: Move non-mutable array of Copy type to .rodata", "user": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-06-28T03:18:26Z", "updated_at": "2020-08-28T11:01:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Continue the discussion in https://github.com/rust-lang/rust/issues/73780#issuecomment-650637025.\r\n\r\n@nbdd0121 said that:\r\n\r\n> ```rust\r\n> let bar: [u32; 10] = [0,10,20,30,40,50,60,70,80,90];\r\n> ```\r\n> Semantically just says: put this on the stack. Rust is doing exactly what you ask it to do;\r\n> it cannot place foo inside rodata because it is a value.\r\n\r\n---\r\n\r\nConsider this code: https://rust.godbolt.org/z/6TBstc\r\n\r\n```rust\r\npub fn foo(x: usize) -> i32 {\r\n    let base: [i32; 64] = [\r\n        67, 754, 860, 559, 368, 870, 548, 972,\r\n        141, 731, 351, 664, 32, 4, 996, 741,\r\n        203, 292, 237, 480, 151, 940, 777, 540,\r\n        143, 587, 747, 65, 152, 517, 882, 880,\r\n        712, 595, 370, 901, 237, 53, 789, 785,\r\n        912, 650, 896, 367, 316, 392, 62, 473,\r\n        675, 691, 281, 192, 445, 970, 225, 425,\r\n        628, 324, 322, 206, 912, 867, 462, 92\r\n    ];\r\n    base[x % 64]\r\n}\r\n```\r\n\r\nThe Rust compiler puts `base` on the stack in both opt-level 2 and 3:\r\n(**Updated**: The new snippet puts `base` in `.rodata` but still copy/push it to stack)\r\n\r\n```asm\r\n.LCPI0_0:\r\n        .long   67\r\n        .long   754\r\n        .long   860\r\n        .long   559\r\n.LCPI0_1:\r\n        .long   368\r\n        .long   870\r\n        .long   548\r\n        .long   972\r\n; [[ redacted ]]\r\nexample::foo:\r\n        sub     rsp, 264\r\n        movaps  xmm0, xmmword ptr [rip + .LCPI0_0]\r\n        movaps  xmmword ptr [rsp], xmm0\r\n        movaps  xmm0, xmmword ptr [rip + .LCPI0_1]\r\n        movaps  xmmword ptr [rsp + 16], xmm0\r\n        ; [[ redacted ]]\r\n        and     edi, 63\r\n        mov     eax, dword ptr [rsp + 4*rdi]\r\n        add     rsp, 264\r\n        ret\r\n```\r\n\r\nThe same code in C (I know that C array is mostly pointer): https://rust.godbolt.org/z/HgAest\r\n```c\r\n#include <stdlib.h>\r\n#include <stdint.h>\r\n\r\nuint32_t square(size_t x) {\r\n    uint32_t bases[64] = {\r\n        67, 754, 860, 559, 368, 870, 548, 972,\r\n        141, 731, 351, 664, 32, 4, 996, 741,\r\n        203, 292, 237, 480, 151, 940, 777, 540,\r\n        143, 587, 747, 65, 152, 517, 882, 880,\r\n        712, 595, 370, 901, 237, 53, 789, 785,\r\n        912, 650, 896, 367, 316, 392, 62, 473,\r\n        675, 691, 281, 192, 445, 970, 225, 425,\r\n        628, 324, 322, 206, 912, 867, 462, 92\r\n    };\r\n    return bases[x % 64];\r\n}\r\n```\r\n\r\ngcc and clang with `-O3` optimizes out the `bases` array to `.rodata` and use that static array directly.\r\n**Updated with new snippet**: It seems that gcc has failed to optimize this case.\r\n\r\n---\r\n\r\nCould the same optimization be done in Rust?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73825/timeline", "performed_via_github_app": null, "state_reason": null}