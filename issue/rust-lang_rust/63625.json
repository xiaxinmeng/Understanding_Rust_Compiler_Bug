{"url": "https://api.github.com/repos/rust-lang/rfcs/issues/2790", "repository_url": "https://api.github.com/repos/rust-lang/rfcs", "labels_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2790/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2790/comments", "events_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2790/events", "html_url": "https://github.com/rust-lang/rfcs/issues/2790", "id": 509292593, "node_id": "MDU6SXNzdWU1MDkyOTI1OTM=", "number": 2790, "title": "Feature Request static asserts", "user": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211667901, "node_id": "MDU6TGFiZWwyMTE2Njc5MDE=", "url": "https://api.github.com/repos/rust-lang/rfcs/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the RFC."}, {"id": 1137550942, "node_id": "MDU6TGFiZWwxMTM3NTUwOTQy", "url": "https://api.github.com/repos/rust-lang/rfcs/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Proposals relating to compile time evaluation (CTFE)."}, {"id": 1137663214, "node_id": "MDU6TGFiZWwxMTM3NjYzMjE0", "url": "https://api.github.com/repos/rust-lang/rfcs/labels/A-assertions", "name": "A-assertions", "color": "f7e101", "default": false, "description": "Proposals relating to assertions."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-16T03:16:18Z", "updated_at": "2022-09-19T22:25:17Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I think asserts are a pretty common thing, especially in unsafe rust (checking sizes/alignments etc.)\r\n\r\nNow with anonymous consts we can already do things like:\r\n```\r\nuse std::mem::*;\r\n#[macro_export]\r\nmacro_rules! static_assert {\r\n    ($condition:expr) => {\r\n        const _: &() = &[()][1 - ($condition) as usize];\r\n    }\r\n}\r\n\r\nstatic_assert!(size_of::<usize>() == 8);\r\nstatic_assert!(size_of::<*const u8>() == 8);\r\nstatic_assert!(align_of::<*const u8>() >= align_of::<u128>());\r\nstatic_assert!(5>3);\r\n```\r\n\r\nI propose to add macros like this to the core library, with the whole `assert`/`assert_eq`/`assert_ne` facade. \r\n\r\nI think these would be really useful", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rfcs/issues/2790/reactions", "total_count": 17, "+1": 17, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2790/timeline", "performed_via_github_app": null, "state_reason": null}