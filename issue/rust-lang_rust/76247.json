{"url": "https://api.github.com/repos/rust-lang/rust/issues/76247", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76247/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76247/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76247/events", "html_url": "https://github.com/rust-lang/rust/issues/76247", "id": 691048136, "node_id": "MDU6SXNzdWU2OTEwNDgxMzY=", "number": 76247, "title": "Large performance drop in compiled binary in stable rust 1.45.2 vs 1.44.0 on x86_64 linux", "user": {"login": "viktorchvatal", "id": 19332351, "node_id": "MDQ6VXNlcjE5MzMyMzUx", "avatar_url": "https://avatars.githubusercontent.com/u/19332351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viktorchvatal", "html_url": "https://github.com/viktorchvatal", "followers_url": "https://api.github.com/users/viktorchvatal/followers", "following_url": "https://api.github.com/users/viktorchvatal/following{/other_user}", "gists_url": "https://api.github.com/users/viktorchvatal/gists{/gist_id}", "starred_url": "https://api.github.com/users/viktorchvatal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viktorchvatal/subscriptions", "organizations_url": "https://api.github.com/users/viktorchvatal/orgs", "repos_url": "https://api.github.com/users/viktorchvatal/repos", "events_url": "https://api.github.com/users/viktorchvatal/events{/privacy}", "received_events_url": "https://api.github.com/users/viktorchvatal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2020-09-02T14:00:52Z", "updated_at": "2022-02-03T04:56:17Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I have experienced more than 300% longer execution time in specific functions that use loops along with indexing into slices. After several hours of work with a profiler, I was able to isolate the problem from a 60K lines codebase into the following short program\r\n\r\n```rust\r\nuse std::cmp;\r\n\r\n#[inline(never)]\r\npub fn cmp_gt_and(in1: &[i16], in2: &[i16], destination: &mut [bool]) {\r\n    let max = cmp::min(cmp::min(in1.len(), in2.len()), destination.len());\r\n\r\n    let src1 = &in1[0..max];\r\n    let src2 = &in2[0..max];\r\n    let dst = &mut destination[0..max];\r\n\r\n    for index in 0..max {\r\n        dst[index] &= src1[index] < src2[index];\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let len = 100;\r\n    let a: Vec<i16> = (1..len).collect();\r\n    let b: Vec<i16> = (1..len).map(|x| len - x).collect();\r\n    let mut result = vec![false; len as usize];\r\n\r\n    for _ in 0..100*1000*1000 {\r\n        cmp_gt_and(&a, &b, &mut result);\r\n    }\r\n\r\n    let sum: i32 = b.into_iter().map(|x| x as i32).sum();\r\n    std::process::exit(sum);\r\n}\r\n```\r\nCode is also available in the following [repository](https://github.com/viktorchvatal/rust-perf-demo)\r\n\r\nWith rust 1.44.0, I observe excecution time around 1.7 sec\r\n```\r\n$ rustc --version --verbose; cargo build --release;time ./target/release/rust-perf-demo\r\nrustc 1.44.0 (49cae5576 2020-06-01)\r\nbinary: rustc\r\ncommit-hash: 49cae55760da0a43428eba73abcb659bb70cf2e4\r\ncommit-date: 2020-06-01\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.44.0\r\nLLVM version: 9.0\r\n    Finished release [optimized] target(s) in 0.04s\r\n\r\nreal    0m1.681s\r\nuser    0m1.676s\r\nsys     0m0.004s\r\n```\r\n\r\nRust versions 1.45.2 and current stable 1.46.0 produce binaries that run more than 6.0 seconds with the same source code\r\n```\r\n$ rustc --version --verbose; cargo build --release;time ./target/release/rust-perf-demo\r\nrustc 1.45.2 (d3fb005a3 2020-07-31)\r\nbinary: rustc\r\ncommit-hash: d3fb005a39e62501b8b0b356166e515ae24e2e54\r\ncommit-date: 2020-07-31\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.45.2\r\nLLVM version: 10.0\r\n    Finished release [optimized] target(s) in 0.05s\r\n\r\nreal    0m6.643s\r\nuser    0m6.643s\r\nsys     0m0.000s\r\n```\r\n\r\n```\r\n$ rustc --version --verbose; cargo build --release;time ./target/release/rust-perf-demo\r\nrustc 1.46.0 (04488afe3 2020-08-24)\r\nbinary: rustc\r\ncommit-hash: 04488afe34512aa4c33566eb16d8c912a3ae04f9\r\ncommit-date: 2020-08-24\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.46.0\r\nLLVM version: 10.0\r\n    Finished release [optimized] target(s) in 0.00s\r\n\r\nreal    0m6.642s\r\nuser    0m6.606s\r\nsys     0m0.012s\r\n```\r\n\r\nI use several more functions like `cmp_gt_and` in a core of image processing software that also show similar performance drop.\r\n\r\nHas anything significantly changed between rustc 1.44 and 1.45 that may have impacted the code so significantly? Maybe LLVM 10 has a different behavior? Any thoughts how to modify the code to gain the performance back with the current compiler or other things to try in order to clarify the problem? For some time, I can stick with 1.44 to keep the performance.\r\n\r\nFunction  `cmp_gt_and` also appears to have much shorter assembly code with rustc 1.44 than with its successors, not sure if that is the reason for the performnace drop, though:\r\n\r\nRustc 1.44.0\r\n```asm\r\n_ZN14rust_perf_demo10cmp_gt_and17h7a0e5899b697a5eaE:\r\n\t.cfi_startproc\r\n\tpush\trax\r\n\t.cfi_def_cfa_offset 16\r\n\tmov\tr10, rdi\r\n\tcmp\trsi, rcx\r\n\tmov\trdi, rsi\r\n\tcmova\trdi, rcx\r\n\tcmp\trdi, r9\r\n\tcmova\trdi, r9\r\n\tcmp\trdi, rsi\r\n\tja\t.LBB8_10\r\n\tcmp\trdi, rcx\r\n\tja\t.LBB8_11\r\n\ttest\trdi, rdi\r\n\tje\t.LBB8_9\r\n\tcmp\trdi, 15\r\n\tja\t.LBB8_5\r\n\txor\tecx, ecx\r\n\tjmp\t.LBB8_8\r\n.LBB8_5:\r\n\tmov\trcx, rdi\r\n\tand\trcx, -16\r\n\txor\tesi, esi\r\n\tpxor\txmm0, xmm0\r\n\t.p2align\t4, 0x90\r\n.LBB8_6:\r\n\tmovdqu\txmm1, xmmword ptr [r10 + 2*rsi]\r\n\tmovdqu\txmm2, xmmword ptr [r10 + 2*rsi + 16]\r\n\tmovdqu\txmm3, xmmword ptr [rdx + 2*rsi]\r\n\tpcmpgtw\txmm3, xmm1\r\n\tmovdqu\txmm1, xmmword ptr [rdx + 2*rsi + 16]\r\n\tpcmpgtw\txmm1, xmm2\r\n\tmovq\txmm2, qword ptr [r8 + rsi]\r\n\tpunpcklbw\txmm2, xmm0\r\n\tmovq\txmm4, qword ptr [r8 + rsi + 8]\r\n\tpunpcklbw\txmm4, xmm0\r\n\tpcmpeqw\txmm2, xmm0\r\n\tpandn\txmm2, xmm3\r\n\tpcmpeqw\txmm4, xmm0\r\n\tpandn\txmm4, xmm1\r\n\tpsrlw\txmm2, 15\r\n\tpackuswb\txmm2, xmm0\r\n\tpsrlw\txmm4, 15\r\n\tpackuswb\txmm4, xmm0\r\n\tmovq\tqword ptr [r8 + rsi], xmm2\r\n\tmovq\tqword ptr [r8 + rsi + 8], xmm4\r\n\tadd\trsi, 16\r\n\tcmp\trcx, rsi\r\n\tjne\t.LBB8_6\r\n\tcmp\trdi, rcx\r\n\tje\t.LBB8_9\r\n\t.p2align\t4, 0x90\r\n.LBB8_8:\r\n\tmovzx\tesi, word ptr [r10 + 2*rcx]\r\n\tcmp\tsi, word ptr [rdx + 2*rcx]\r\n\tsetl\tsil\r\n\tcmp\tbyte ptr [r8 + rcx], 0\r\n\tsetne\tal\r\n\tand\tal, sil\r\n\tmov\tbyte ptr [r8 + rcx], al\r\n\tadd\trcx, 1\r\n\tcmp\trcx, rdi\r\n\tjb\t.LBB8_8\r\n.LBB8_9:\r\n\tpop\trax\r\n\t.cfi_def_cfa_offset 8\r\n\tret\r\n.LBB8_10:\r\n\t.cfi_def_cfa_offset 16\r\n\tlea\trdx, [rip + .L__unnamed_2]\r\n\tcall\tqword ptr [rip + _ZN4core5slice20slice_index_len_fail17he661f5dd1689ef3bE@GOTPCREL]\r\n\tud2\r\n.LBB8_11:\r\n\tlea\trdx, [rip + .L__unnamed_3]\r\n\tmov\trsi, rcx\r\n\tcall\tqword ptr [rip + _ZN4core5slice20slice_index_len_fail17he661f5dd1689ef3bE@GOTPCREL]\r\n\tud2\r\n.Lfunc_end8:\r\n\t.size\t_ZN14rust_perf_demo10cmp_gt_and17h7a0e5899b697a5eaE, .Lfunc_end8-_ZN14rust_perf_demo10cmp_gt_and17h7a0e5899b697a5eaE\r\n\t.cfi_endproc\r\n\r\n\t.section\t.rodata.cst16,\"aM\",@progbits,16\r\n\t.p2align\t4\r\n```\r\n\r\nRustc 1.45.2\r\n```asm\r\n_ZN14rust_perf_demo10cmp_gt_and17h39391ca255a87f0fE:\r\n\t.cfi_startproc\r\n\tpush\trbx\r\n\t.cfi_def_cfa_offset 16\r\n\tsub\trsp, 32\r\n\t.cfi_def_cfa_offset 48\r\n\t.cfi_offset rbx, -16\r\n\tmov\tr10, rdi\r\n\tcmp\trsi, rcx\r\n\tmov\trdi, rsi\r\n\tcmova\trdi, rcx\r\n\tcmp\trdi, r9\r\n\tcmova\trdi, r9\r\n\tcmp\trdi, rsi\r\n\tja\t.LBB8_10\r\n\tcmp\trdi, rcx\r\n\tja\t.LBB8_11\r\n\ttest\trdi, rdi\r\n\tje\t.LBB8_9\r\n\tcmp\trdi, 15\r\n\tja\t.LBB8_5\r\n\txor\tesi, esi\r\n\tjmp\t.LBB8_8\r\n.LBB8_5:\r\n\tmov\trsi, rdi\r\n\tand\trsi, -16\r\n\txor\tr11d, r11d\r\n\tpxor\txmm0, xmm0\r\n\tpcmpeqd\txmm1, xmm1\r\n\t.p2align\t4, 0x90\r\n.LBB8_6:\r\n\tmovdqu\txmm2, xmmword ptr [r10 + 2*r11]\r\n\tmovdqu\txmm3, xmmword ptr [r10 + 2*r11 + 16]\r\n\tmovdqu\txmm4, xmmword ptr [rdx + 2*r11]\r\n\tpcmpgtw\txmm4, xmm2\r\n\tmovdqu\txmm2, xmmword ptr [rdx + 2*r11 + 16]\r\n\tpcmpgtw\txmm2, xmm3\r\n\tmovq\txmm5, qword ptr [r8 + r11]\r\n\tmovq\txmm3, qword ptr [r8 + r11 + 8]\r\n\tpcmpeqb\txmm5, xmm0\r\n\tpxor\txmm5, xmm1\r\n\tpunpcklbw\txmm5, xmm0\r\n\tpand\txmm5, xmm4\r\n\tpcmpeqb\txmm3, xmm0\r\n\tpxor\txmm3, xmm1\r\n\tpunpcklbw\txmm3, xmm0\r\n\tpand\txmm3, xmm2\r\n\tmovdqa\txmmword ptr [rsp], xmm5\r\n\tmovzx\teax, byte ptr [rsp + 4]\r\n\tand\tal, 1\r\n\tmovzx\tr9d, al\r\n\tmovzx\teax, byte ptr [rsp + 6]\r\n\tand\tal, 1\r\n\tmovzx\teax, al\r\n\tshl\teax, 8\r\n\tor\teax, r9d\r\n\tmovzx\tecx, byte ptr [rsp]\r\n\tmovzx\tr9d, byte ptr [rsp + 2]\r\n\tand\tcl, 1\r\n\tmovzx\tebx, cl\r\n\tand\tr9b, 1\r\n\tmovzx\tecx, r9b\r\n\tshl\tecx, 8\r\n\tor\tecx, ebx\r\n\tmovd\txmm2, ecx\r\n\tpinsrw\txmm2, eax, 1\r\n\tmovzx\teax, byte ptr [rsp + 8]\r\n\tand\tal, 1\r\n\tmovzx\teax, al\r\n\tmovzx\tecx, byte ptr [rsp + 10]\r\n\tand\tcl, 1\r\n\tmovzx\tecx, cl\r\n\tshl\tecx, 8\r\n\tor\tecx, eax\r\n\tpinsrw\txmm2, ecx, 2\r\n\tmovzx\teax, byte ptr [rsp + 12]\r\n\tand\tal, 1\r\n\tmovzx\teax, al\r\n\tmovzx\tecx, byte ptr [rsp + 14]\r\n\tand\tcl, 1\r\n\tmovzx\tecx, cl\r\n\tshl\tecx, 8\r\n\tor\tecx, eax\r\n\tpinsrw\txmm2, ecx, 3\r\n\tmovdqa\txmmword ptr [rsp + 16], xmm3\r\n\tmovzx\teax, byte ptr [rsp + 20]\r\n\tand\tal, 1\r\n\tmovzx\teax, al\r\n\tmovzx\tecx, byte ptr [rsp + 22]\r\n\tand\tcl, 1\r\n\tmovzx\tecx, cl\r\n\tshl\tecx, 8\r\n\tor\tecx, eax\r\n\tmovzx\teax, byte ptr [rsp + 16]\r\n\tmovzx\tebx, byte ptr [rsp + 18]\r\n\tand\tal, 1\r\n\tmovzx\teax, al\r\n\tand\tbl, 1\r\n\tmovzx\tebx, bl\r\n\tshl\tebx, 8\r\n\tor\tebx, eax\r\n\tmovd\txmm3, ebx\r\n\tpinsrw\txmm3, ecx, 1\r\n\tmovzx\teax, byte ptr [rsp + 24]\r\n\tand\tal, 1\r\n\tmovzx\teax, al\r\n\tmovzx\tecx, byte ptr [rsp + 26]\r\n\tand\tcl, 1\r\n\tmovzx\tecx, cl\r\n\tshl\tecx, 8\r\n\tor\tecx, eax\r\n\tpinsrw\txmm3, ecx, 2\r\n\tmovzx\teax, byte ptr [rsp + 28]\r\n\tand\tal, 1\r\n\tmovzx\teax, al\r\n\tmovzx\tecx, byte ptr [rsp + 30]\r\n\tand\tcl, 1\r\n\tmovzx\tecx, cl\r\n\tshl\tecx, 8\r\n\tor\tecx, eax\r\n\tpinsrw\txmm3, ecx, 3\r\n\tmovq\tqword ptr [r8 + r11], xmm2\r\n\tmovq\tqword ptr [r8 + r11 + 8], xmm3\r\n\tadd\tr11, 16\r\n\tcmp\trsi, r11\r\n\tjne\t.LBB8_6\r\n\tcmp\trdi, rsi\r\n\tje\t.LBB8_9\r\n\t.p2align\t4, 0x90\r\n.LBB8_8:\r\n\tmovzx\teax, word ptr [r10 + 2*rsi]\r\n\tcmp\tax, word ptr [rdx + 2*rsi]\r\n\tsetl\tal\r\n\tcmp\tbyte ptr [r8 + rsi], 0\r\n\tsetne\tcl\r\n\tand\tcl, al\r\n\tmov\tbyte ptr [r8 + rsi], cl\r\n\tadd\trsi, 1\r\n\tcmp\trsi, rdi\r\n\tjb\t.LBB8_8\r\n.LBB8_9:\r\n\tadd\trsp, 32\r\n\t.cfi_def_cfa_offset 16\r\n\tpop\trbx\r\n\t.cfi_def_cfa_offset 8\r\n\tret\r\n.LBB8_10:\r\n\t.cfi_def_cfa_offset 48\r\n\tlea\trdx, [rip + .L__unnamed_2]\r\n\tcall\tqword ptr [rip + _ZN4core5slice20slice_index_len_fail17h9254c9506d16ff21E@GOTPCREL]\r\n\tud2\r\n.LBB8_11:\r\n\tlea\trdx, [rip + .L__unnamed_3]\r\n\tmov\trsi, rcx\r\n\tcall\tqword ptr [rip + _ZN4core5slice20slice_index_len_fail17h9254c9506d16ff21E@GOTPCREL]\r\n\tud2\r\n.Lfunc_end8:\r\n\t.size\t_ZN14rust_perf_demo10cmp_gt_and17h39391ca255a87f0fE, .Lfunc_end8-_ZN14rust_perf_demo10cmp_gt_and17h39391ca255a87f0fE\r\n\t.cfi_endproc\r\n\r\n\t.section\t.rodata.cst16,\"aM\",@progbits,16\r\n\t.p2align\t4\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76247/reactions", "total_count": 7, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 4, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76247/timeline", "performed_via_github_app": null, "state_reason": null}