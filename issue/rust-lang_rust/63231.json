{"url": "https://api.github.com/repos/rust-lang/rust/issues/63231", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63231/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63231/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63231/events", "html_url": "https://github.com/rust-lang/rust/issues/63231", "id": 476429959, "node_id": "MDU6SXNzdWU0NzY0Mjk5NTk=", "number": 63231, "title": "Adding stuff to a particular existing crate?", "user": {"login": "axos88", "id": 1281218, "node_id": "MDQ6VXNlcjEyODEyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1281218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axos88", "html_url": "https://github.com/axos88", "followers_url": "https://api.github.com/users/axos88/followers", "following_url": "https://api.github.com/users/axos88/following{/other_user}", "gists_url": "https://api.github.com/users/axos88/gists{/gist_id}", "starred_url": "https://api.github.com/users/axos88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axos88/subscriptions", "organizations_url": "https://api.github.com/users/axos88/orgs", "repos_url": "https://api.github.com/users/axos88/repos", "events_url": "https://api.github.com/users/axos88/events{/privacy}", "received_events_url": "https://api.github.com/users/axos88/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-03T08:34:46Z", "updated_at": "2019-08-03T10:55:06Z", "closed_at": "2019-08-03T10:55:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Well simply put - monkey patching code. Oh boy, I can feel the raised eyebrows already.\r\n\r\nI am working on an embedded project. Worked on Cortex-M3 until now (thumbv7v-m), and recently switched to Cortex-M (thumbv6-m), and all hell broke lose.\r\n\r\nThe main issue is that the instruction set for the M0 does not contain `ldrex` / `strex`, so atomics cannot be implemented in a general case. This results in `AtomicUSize` and the like not being implemented which results in `sync` being left out of the `alloc` crate. Which results in a bunch of nasty stuff, such as missing `Arc` and `Weak`, without which it is *extremely* difficult to share stuff between multiple threads when running above say `FreeRTOS`.\r\n\r\nBut there are a lot of other crates that would normally work, but won't compile because they are using `Arc` or `Weak`.\r\n\r\nThe atomics *CAN* be implemented in most cases by disabling interrupts (if allowed by the processor state) for the duration of the operation, and taking *EXTRA* care in the non maskable interrupts. Neither that the processor allows interrupts to be disabled nor that no atomics are accessed from the NMI can be verified by the compiler, but in many if not most cases holds true. And even if the processor state doesn't allow interrupts to be disabled the functionality *could* be implemented using a syscall (yeah that's slow - but it will help putting the processor in a state where it can disable interrupts).\r\n\r\nThis means that I *could* supply an implementation of atomics that I *KNOW* that works in my particular use-case, I am aware of it's drawbacks, and I accept them. Issue a few fat warnings for whoever works on the project after myself, and *SHOULD* be able to use `Arc` and `Weak`, and anything else that depends on atomic operations.\r\n\r\nBut that would mean I would need to create the implementation of atomics inside the `core` crate and allow the `alloc` crate to inlcude the `alloc::sync` module, which I cannot do.\r\n\r\nAlternatively I can write my own `hackyatomics::alloc::sync` module, which would simply `pub use` the `alloc::sync` on targets that support it, and use my hacky way otherwise, but that means that every dependency would need to be changed to use `hackyatomics::alloc::sync::Arc` instead of `alloc::sync::Arc` in all cases. Which is a PIA.\r\n\r\nSo. The question: Is there a way to basically monkey-patch a module into another crate? This is probably not the best solution for the use-case above, but is this something that would be worth having a discussion about? Obviously this would be restricted to binary crates (only binary crates would be allowed to define overrides / monkey-patches, otherwise all hell would brake loose. But binary crates are leaf crates, and if you do something stupid, only your own code will stop compiling, and you *KNOW* you did something that could end up doing that sooner or later. (Exactly the reason why I think orphan rules should be relaxed for binary crates, but that's another discussion).\r\n\r\n\r\n\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63231/timeline", "performed_via_github_app": null, "state_reason": "completed"}