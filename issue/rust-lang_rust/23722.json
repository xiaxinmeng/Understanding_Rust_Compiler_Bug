{"url": "https://api.github.com/repos/rust-lang/rust/issues/23722", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/23722/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/23722/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/23722/events", "html_url": "https://github.com/rust-lang/rust/issues/23722", "id": 64404432, "node_id": "MDU6SXNzdWU2NDQwNDQzMg==", "number": 23722, "title": "ICE from simple trait", "user": {"login": "jamii", "id": 340884, "node_id": "MDQ6VXNlcjM0MDg4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/340884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamii", "html_url": "https://github.com/jamii", "followers_url": "https://api.github.com/users/jamii/followers", "following_url": "https://api.github.com/users/jamii/following{/other_user}", "gists_url": "https://api.github.com/users/jamii/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamii/subscriptions", "organizations_url": "https://api.github.com/users/jamii/orgs", "repos_url": "https://api.github.com/users/jamii/repos", "events_url": "https://api.github.com/users/jamii/events{/privacy}", "received_events_url": "https://api.github.com/users/jamii/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-03-26T00:37:36Z", "updated_at": "2015-05-13T17:29:55Z", "closed_at": "2015-05-13T17:29:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\nCompiling eve v0.0.1 (file:///home/jamie/eve/runtime)\nerror: internal compiler error: Impl DefId { krate: 0, node: 1471 }:value::usize.ToValue was matchable against Obligation(predicate=Binder(TraitPredicate(value::ToValue)),depth=0) but now is not\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\nnote: run with `RUST_BACKTRACE=1` for a backtrace\nthread 'rustc' panicked at 'Box<Any>', /home/rustbuild/src/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libsyntax/diagnostic.rs:190\n```\n\nCaused by the addition of:\n\n``` rust\nimpl ToValue for usize {\n    fn to_value(self) -> Value {\n        Value::Float(self.to_f64().unwrap())\n    }\n}\n```\n\nTo:\n\n``` rust\nuse std::ops;\nuse std::num::ToPrimitive;\nuse std::cmp::Ordering;\nuse std::iter::IntoIterator;\n\nuse index::Index;\n\n#[derive(Clone, Debug, PartialOrd, PartialEq)]\npub enum Value {\n    String(String),\n    Float(f64),\n    Tuple(Tuple),\n    Relation(Relation),\n}\npub type Tuple = Vec<Value>;\npub type Relation = Index<Vec<Value>>; // a set of tuples\npub type Id = String; // TODO use uuid?\n\nimpl Ord for Value {\n    fn cmp(&self, other: &Value) -> Ordering {\n        self.partial_cmp(other).unwrap() // TODO this will panic on NaN\n    }\n}\n\nimpl Eq for Value {} // TODO this is unsafe for NaN\n\nimpl ops::Index<usize> for Value {\n    type Output = Value;\n\n    fn index(&self, index: &usize) -> &Value {\n        match *self {\n            Value::Tuple(ref tuple) => tuple.index(index),\n            _ => panic!(\"Indexing a non-tuple value\"),\n        }\n    }\n}\n\nimpl ToString for Value {\n    fn to_string(&self) -> String {\n        match *self {\n            Value::String(ref string) => string.clone(),\n            _ => panic!(\"Stringifying a non-string value\"),\n        }\n    }\n}\n\nimpl ToPrimitive for Value {\n    fn to_f64(&self) -> Option<f64> {\n        match *self {\n            Value::Float(ref float) => float.to_f64(),\n            _ => None,\n        }\n    }\n    fn to_i64(&self) -> Option<i64> {\n        match *self {\n            Value::Float(ref float) => float.to_i64(),\n            _ => None,\n        }\n    }\n    fn to_u64(&self) -> Option<u64> {\n        match *self {\n            Value::Float(ref float) => float.to_u64(),\n            _ => None,\n        }\n    }\n}\n\npub trait ToValue {\n    fn to_value(self) -> Value;\n}\n\npub trait ToTuple {\n    fn to_tuple(self) -> Tuple;\n}\n\npub trait ToRelation {\n    fn to_relation(self) -> Relation;\n}\n\nimpl ToValue for Value {\n    fn to_value(self) -> Value {\n        self\n    }\n}\n\nimpl<'a> ToValue for &'a str {\n    fn to_value(self) -> Value {\n        Value::String(self.to_string())\n    }\n}\n\nimpl ToValue for String {\n    fn to_value(self) -> Value {\n        Value::String(self)\n    }\n}\n\nimpl ToValue for f64 {\n    fn to_value(self) -> Value {\n        Value::Float(self)\n    }\n}\n\nimpl ToValue for usize {\n    fn to_value(self) -> Value {\n        Value::Float(self.to_f64().unwrap())\n    }\n}\n\n// impl<T: ToTuple> ToValue for T {\n//     fn to_value(self) -> Value {\n//         Value::Tuple(self.to_tuple())\n//     }\n// }\n\n// impl<T: ToRelation> ToValue for T where T: !ToTuple {\n//     fn to_value(self) -> Value {\n//         Value::Relation(self.to_relation())\n//     }\n// }\n\nimpl<A: ToValue> ToTuple for (A,) {\n    fn to_tuple(self) -> Vec<Value> {\n        let (a,) = self;\n        vec![a.to_value()]\n    }\n}\n\nimpl<A: ToValue, B: ToValue> ToTuple for (A,B) {\n    fn to_tuple(self) -> Vec<Value> {\n        let (a,b) = self;\n        vec![a.to_value(), b.to_value()]\n    }\n}\n\nimpl<A: ToValue, B: ToValue, C: ToValue> ToTuple for (A,B,C) {\n    fn to_tuple(self) -> Vec<Value> {\n        let (a,b,c) = self;\n        vec![a.to_value(), b.to_value(), c.to_value()]\n    }\n}\n\nimpl<A: ToValue, B: ToValue, C: ToValue, D: ToValue> ToTuple for (A,B,C,D) {\n    fn to_tuple(self) -> Vec<Value> {\n        let (a,b,c,d) = self;\n        vec![a.to_value(), b.to_value(), c.to_value(), d.to_value()]\n    }\n}\n\nimpl<A: ToValue, B: ToValue, C: ToValue, D: ToValue, E: ToValue> ToTuple for (A,B,C,D,E) {\n    fn to_tuple(self) -> Vec<Value> {\n        let (a,b,c,d,e) = self;\n        vec![a.to_value(), b.to_value(), c.to_value(), d.to_value(), e.to_value()]\n    }\n}\n\nimpl<T: ToTuple> ToRelation for Vec<T> {\n    fn to_relation(self) -> Relation {\n        self.into_iter().map(|t| t.to_tuple()).collect()\n    }\n}\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/23722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/23722/timeline", "performed_via_github_app": null, "state_reason": "completed"}