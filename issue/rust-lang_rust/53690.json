{"url": "https://api.github.com/repos/rust-lang/rust/issues/53690", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53690/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53690/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53690/events", "html_url": "https://github.com/rust-lang/rust/issues/53690", "id": 353971823, "node_id": "MDU6SXNzdWUzNTM5NzE4MjM=", "number": 53690, "title": "async fn cannot be recursive", "user": {"login": "upsuper", "id": 333750, "node_id": "MDQ6VXNlcjMzMzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/333750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/upsuper", "html_url": "https://github.com/upsuper", "followers_url": "https://api.github.com/users/upsuper/followers", "following_url": "https://api.github.com/users/upsuper/following{/other_user}", "gists_url": "https://api.github.com/users/upsuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/upsuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/upsuper/subscriptions", "organizations_url": "https://api.github.com/users/upsuper/orgs", "repos_url": "https://api.github.com/users/upsuper/repos", "events_url": "https://api.github.com/users/upsuper/events{/privacy}", "received_events_url": "https://api.github.com/users/upsuper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2018-08-25T01:39:07Z", "updated_at": "2019-07-21T06:56:49Z", "closed_at": "2019-01-28T19:01:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With the current design of async functions, it doesn't seem to be able to call them recursively.\r\n\r\nThe most straightforward way:\r\n```rust\r\nasync fn foo() -> u32 {\r\n    await!(foo()) + 1\r\n}\r\n```\r\nfails apparently, because the size of the future type is indefinite, and thus the compiler complains:\r\n```\r\nerror[E0275]: overflow evaluating the requirement `impl std::future::Future`\r\n  |\r\n  = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\r\n```\r\n\r\nAnother idea would be to put the recursive future into another heap-allocated object:\r\n```rust\r\nasync fn foo() -> u32 {\r\n    let x = Box::new(foo());\r\n    await!(x) + 1\r\n}\r\n```\r\nHowever this doesn't work either, because resolving the return type of `foo` requires the return type of `foo`, which forms a cycle dependency, and compiler complains:\r\n```\r\nerror[E0391]: cycle detected when processing `foo`\r\n --> src/main.rs:7:1\r\n  |\r\n7 | async fn foo() -> u32 {\r\n  | ^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\nnote: ...which requires evaluating trait selection obligation `std::boxed::Box<impl std::future::Future>: std::future::Future`...\r\nnote: ...which requires processing `foo::{{impl-Trait}}`...\r\n```\r\n\r\nIf the type is a problem, maybe we can use trait object?\r\n```rust\r\nasync fn foo() -> u32 {\r\n    let x: Box<dyn Future<Output = u32>> = Box::new(foo());\r\n    await!(x) + 1\r\n}\r\n```\r\nBut it still doesn't work, because `Future` isn't object-safe due to the `poll` method, which is correctly reported by the compiler:\r\n```\r\nerror[E0038]: the trait `std::future::Future` cannot be made into an object\r\n  --> src/main.rs:10:12\r\n   |\r\n10 |     let x: Box<dyn Future<Output = u32>> = Box::new(foo());\r\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::future::Future` cannot be made into an object\r\n   |\r\n   = note: method `poll` has a non-standard `self` type\r\n```\r\n\r\nSo it seems that there is no way an async function can be called recursively.\r\n\r\nI'm not sure how much problematic it would be, but it seems this limitation wasn't mentioned in the RFC nor any introduction of async, so maybe it's worth considering.\r\n\r\nRecursion without additional allocation may be very challenging, but we should probably allow opt-in async recursion with some explicit cost.", "closed_by": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53690/timeline", "performed_via_github_app": null, "state_reason": "completed"}