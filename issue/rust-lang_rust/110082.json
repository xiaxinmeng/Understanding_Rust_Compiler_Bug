{"url": "https://api.github.com/repos/rust-lang/rust/issues/110082", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110082/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110082/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110082/events", "html_url": "https://github.com/rust-lang/rust/issues/110082", "id": 1659508237, "node_id": "I_kwDOAAsO6M5i6hYN", "number": 110082, "title": "How do crate-level macro attributes deal with standard library prelude?", "user": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2023-04-08T12:26:31Z", "updated_at": "2023-04-08T13:18:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here I'll talk about hightly unstable crate-level macro attributes first, but this issue is relevant even on stable because crate level `#![cfg(...)]` is also such a macro (sort of), and it is supported since Rust 1.0.\r\nThis case caused issues in https://github.com/rust-lang/rust/pull/108221.\r\n\r\nWe assume that macros work with token streams.\r\nImplicitly injected extern prelude does not have any token representation, so I conclude that crate-level macro attributes should only receive explicitly written user code as input (collected during token collection as usual).\r\n\r\nNow the question is how and when standard library prelude is added to *output* of a crate level attribute (including `#![cfg(FALSE)]`) because eventually it should be added there.\r\n\r\nNote: https://github.com/rust-lang/rust/issues/104633 is a similar issue discussing the fate of `#![feature]` attributes on a fully unconfigured crate.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110082/timeline", "performed_via_github_app": null, "state_reason": null}