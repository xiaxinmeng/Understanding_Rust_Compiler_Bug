{"url": "https://api.github.com/repos/rust-lang/rust/issues/68130", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68130/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68130/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68130/events", "html_url": "https://github.com/rust-lang/rust/issues/68130", "id": 548441987, "node_id": "MDU6SXNzdWU1NDg0NDE5ODc=", "number": 68130, "title": "ICE when using generic array type depending on expression of const generics", "user": {"login": "raku42", "id": 53146856, "node_id": "MDQ6VXNlcjUzMTQ2ODU2", "avatar_url": "https://avatars.githubusercontent.com/u/53146856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raku42", "html_url": "https://github.com/raku42", "followers_url": "https://api.github.com/users/raku42/followers", "following_url": "https://api.github.com/users/raku42/following{/other_user}", "gists_url": "https://api.github.com/users/raku42/gists{/gist_id}", "starred_url": "https://api.github.com/users/raku42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raku42/subscriptions", "organizations_url": "https://api.github.com/users/raku42/orgs", "repos_url": "https://api.github.com/users/raku42/repos", "events_url": "https://api.github.com/users/raku42/events{/privacy}", "received_events_url": "https://api.github.com/users/raku42/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1486687397, "node_id": "MDU6TGFiZWwxNDg2Njg3Mzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_generics", "name": "F-const_generics", "color": "f9c0cc", "default": false, "description": "`#![feature(const_generics)]`"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-11T15:21:47Z", "updated_at": "2020-01-24T12:20:44Z", "closed_at": "2020-01-24T12:20:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am writing my own little math library to learn rust. I was successful in implementing a mathematical vector type which uses a const generic parameter to specify its dimension/length and stores its values in an array of type `[T; DIM]` under the hood. When trying to implement the same pattern for a matrix that uses a flat array to store its values, I encounter the following error:\r\n\r\n```rust\r\n#![feature(const_generics)]\r\n\r\npub type MatrixArray<T, const N : usize, const M : usize> = [T; N * M];\r\n\r\npub struct Matrix<T, const N : usize, const M : usize> \r\n    where T : Copy + Sized\r\n{\r\n    store : MatrixArray<T, N, M>,\r\n}\r\n\r\nimpl<T, const N : usize, const M : usize> Default for Matrix<T, N, M>\r\n   where T : Copy + Sized + Default\r\n{\r\n    fn default() -> Self {\r\n        let zero_comps = unsafe {\r\n            let mut comps = std::mem::MaybeUninit::< MatrixArray<T, N, M> >::uninit().assume_init();\r\n            for comp in comps.iter_mut() {\r\n                *comp = T::default();\r\n            }\r\n            comps\r\n        };\r\n        Self {\r\n            store : zero_comps\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!(\"Does not compile!\");\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=ccc5c2da8a047eb7933d7f9b789d1ca5))\r\n\r\nErrors:\r\n\r\n```\r\n  Compiling playground v0.0.1 (/playground)\r\nwarning: the feature `const_generics` is incomplete and may cause the compiler to crash\r\n --> src/main.rs:1:12\r\n  |\r\n1 | #![feature(const_generics)]\r\n  |            ^^^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(incomplete_features)]` on by default\r\n\r\nwarning: field is never read: `store`\r\n --> src/main.rs:8:5\r\n  |\r\n8 |     store : MatrixArray<T, N, M>,\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(dead_code)]` on by default\r\n\r\nerror: internal compiler error: constant in type had an ignored error: TooGeneric\r\n --> src/main.rs:8:5\r\n  |\r\n8 |     store : MatrixArray<T, N, M>,\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: internal compiler error: constant in type had an ignored error: TooGeneric\r\n  --> src/main.rs:16:29\r\n   |\r\n16 |             let mut comps = std::mem::MaybeUninit::< MatrixArray<T, N, M> >::uninit().assume_init();\r\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: internal compiler error: constant in type had an ignored error: TooGeneric\r\n  --> src/main.rs:16:29\r\n   |\r\n16 |             let mut comps = std::mem::MaybeUninit::< MatrixArray<T, N, M> >::uninit().assume_init();\r\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:17 ~ playground[a92e]::{{impl}}[0]::default[0]) (CanonicalUserTypeAnnotation { user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:1154 ~ core[77d3]::mem[0]::maybe_uninit[0]::{{impl}}[2]::uninit[0]), UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(2:1151 ~ core[77d3]::mem[0]::maybe_uninit[0]::{{impl}}[2]), self_ty: std::mem::MaybeUninit<[T; _]> }) }) }, span: src/main.rs:16:29: 16:84, inferred_ty: fn() -> std::mem::MaybeUninit<[T; _]> {std::mem::MaybeUninit::<[T; _]>::uninit} }): bad user type AscribeUserType(fn() -> std::mem::MaybeUninit<[T; _]> {std::mem::MaybeUninit::<[T; _]>::uninit}, DefId(2:1154 ~ core[77d3]::mem[0]::maybe_uninit[0]::{{impl}}[2]::uninit[0]) UserSubsts { substs: [_], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(2:1151 ~ core[77d3]::mem[0]::maybe_uninit[0]::{{impl}}[2]), self_ty: std::mem::MaybeUninit<[T; _]> }) }): NoSolution\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:17 ~ playground[a92e]::{{impl}}[0]::default[0]) (NoSolution): could not prove WellFormed(std::mem::MaybeUninit<[T; _]>)\r\n  --> src/main.rs:16:29\r\n   |\r\n16 |             let mut comps = std::mem::MaybeUninit::< MatrixArray<T, N, M> >::uninit().assume_init();\r\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:17 ~ playground[a92e]::{{impl}}[0]::default[0]) (NoSolution): could not prove WellFormed(std::mem::MaybeUninit<[T; _]>)\r\n  --> src/main.rs:14:5\r\n   |\r\n14 | /     fn default() -> Self {\r\n15 | |         let zero_comps = unsafe {\r\n16 | |             let mut comps = std::mem::MaybeUninit::< MatrixArray<T, N, M> >::uninit().assume_init();\r\n17 | |             for comp in comps.iter_mut() {\r\n...  |\r\n24 | |         }\r\n25 | |     }\r\n   | |_____^\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:17 ~ playground[a92e]::{{impl}}[0]::default[0]) (NoSolution): could not prove WellFormed([T; _])\r\n  --> src/main.rs:14:5\r\n   |\r\n14 | /     fn default() -> Self {\r\n15 | |         let zero_comps = unsafe {\r\n16 | |             let mut comps = std::mem::MaybeUninit::< MatrixArray<T, N, M> >::uninit().assume_init();\r\n17 | |             for comp in comps.iter_mut() {\r\n...  |\r\n24 | |         }\r\n25 | |     }\r\n   | |_____^\r\n\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:345:17\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.42.0-nightly (da3629b05 2019-12-29) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C codegen-units=1 -C debuginfo=2 --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```\r\nInterestingly, I only get the MIR error message in my full project, but not the `TooGeneric` error, which I put down to having more instances where the type is used therefore triggering monomorphization.\r\n\r\nWhen I do not define the generic type but only use `[T; N * M]` directly, I get normal error messages about non-matching types which I expect because of the treatment of this expression as a projection `[T; _]`. \r\n\r\nI suspect this to be another instance of #43408.", "closed_by": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68130/timeline", "performed_via_github_app": null, "state_reason": "completed"}