{"url": "https://api.github.com/repos/rust-lang/rust/issues/108114", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108114/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108114/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108114/events", "html_url": "https://github.com/rust-lang/rust/issues/108114", "id": 1587001566, "node_id": "I_kwDOAAsO6M5el7je", "number": 108114, "title": "implied lifetimes lead to mismatched type error with seemingly identical types in the msg - async closure edition", "user": {"login": "luketpeterson", "id": 36806965, "node_id": "MDQ6VXNlcjM2ODA2OTY1", "avatar_url": "https://avatars.githubusercontent.com/u/36806965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luketpeterson", "html_url": "https://github.com/luketpeterson", "followers_url": "https://api.github.com/users/luketpeterson/followers", "following_url": "https://api.github.com/users/luketpeterson/following{/other_user}", "gists_url": "https://api.github.com/users/luketpeterson/gists{/gist_id}", "starred_url": "https://api.github.com/users/luketpeterson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luketpeterson/subscriptions", "organizations_url": "https://api.github.com/users/luketpeterson/orgs", "repos_url": "https://api.github.com/users/luketpeterson/repos", "events_url": "https://api.github.com/users/luketpeterson/events{/privacy}", "received_events_url": "https://api.github.com/users/luketpeterson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-02-16T04:37:42Z", "updated_at": "2023-03-01T06:44:22Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\n\n```Rust\nuse core::future::{Future};\r\nuse anyhow::Error;\r\n\r\nstruct Session {}\r\n\r\nimpl Session {\r\n    pub async fn dispatch_request<T, F, Fut>(&self, interpreter: F) -> Result<T, Error>\r\n        where\r\n        F: FnMut(&mut String) -> Fut,\r\n        Fut: Future<Output = Result<T, Error>>,\r\n    {\r\n        let mut interpreter = interpreter;\r\n        let mut stream = \"hello\".to_string();\r\n        interpreter(&mut stream).await\r\n    }\r\n}\r\n\r\nasync fn test_interpreter(input_stream: &mut String) -> Result<String, Error> {\r\n\r\n    Ok(input_stream.clone())\r\n}\r\n\r\n#[tokio::main]\r\nasync fn main() {\r\n    let session = Session{};\r\n\r\n    session.dispatch_request(test_interpreter).await.unwrap();\r\n}\n```\n\n\n### Current output\n\n```Shell\nCompiling playground v0.0.1 (/playground)\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:27:5\r\n   |\r\n27 |     session.dispatch_request(test_interpreter).await.unwrap();\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\r\n   |\r\n   = note: expected trait `for<'a> <for<'a> fn(&'a mut String) -> impl Future<Output = Result<String, anyhow::Error>> {test_interpreter} as FnOnce<(&'a mut String,)>>`\r\n              found trait `for<'a> <for<'a> fn(&'a mut String) -> impl Future<Output = Result<String, anyhow::Error>> {test_interpreter} as FnOnce<(&'a mut String,)>>`\r\nnote: the lifetime requirement is introduced here\r\n  --> src/main.rs:9:34\r\n   |\r\n9  |         F: FnMut(&mut String) -> Fut,\r\n   |                                  ^^^\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground` due to previous error\n```\n\n\n### Desired output\n\n```Shell\nSomething that makes it more clear what is causing the problem or how to address it.\n```\n\n\n### Rationale and extra context\n\nThis thread has some additional context as well as two proposed solutions.  https://users.rust-lang.org/t/lifetime-bounds-to-use-for-future-that-isnt-supposed-to-outlive-calling-scope/89277\r\n\r\nI understand this situation is one among a set of situations under which the same confusing error might manifest.  However this might be a candidate for a special case check.\r\n\r\nThank you.\n\n### Other cases\n\n_No response_\n\n### Anything else?\n\n_No response_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108114/timeline", "performed_via_github_app": null, "state_reason": null}