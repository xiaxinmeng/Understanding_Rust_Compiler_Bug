{"url": "https://api.github.com/repos/rust-lang/rust/issues/13438", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/13438/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/13438/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/13438/events", "html_url": "https://github.com/rust-lang/rust/issues/13438", "id": 31227892, "node_id": "MDU6SXNzdWUzMTIyNzg5Mg==", "number": 13438, "title": "Share allows for unsafe mutations in safe code", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/20", "html_url": "https://github.com/rust-lang/rust/milestone/20", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/20/labels", "id": 452034, "node_id": "MDk6TWlsZXN0b25lNDUyMDM0", "number": 20, "title": "1.0", "description": "This will be the first major release of Rust, where we offer some guaranteed level of support and backwards compatibility.\r\n\r\nThe significant criteria for this release are:\r\n\r\n* Language backwards compatibility - All major features are in, and in their final form. Generally, the only new language features added after this milestone must be backwards compatible, or to fix soundness holes, though we do expect to have some leeway to make small incompatible fixes that have low impact on existing code bases.\r\n\r\n* Library stability - We have a system of measuring and ensuring the stability of API's, and a significant portion of the standard library is declared stable. Stable API's will not change. Large portions of the standard library need to be stable for 1.0, including primitive types, vectors, strings, option, numerics, collections, some I/O and concurrency.\r\n\r\n* User experience - The system is polished and the presentation is complete and professional. New users have a clear path to using and learning the system. This encompasses the web site, documentation, installation, and tooling.\r\n", "creator": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 376, "state": "closed", "created_at": "2013-10-10T18:48:33Z", "updated_at": "2016-08-28T23:13:24Z", "due_on": "2015-05-15T07:00:00Z", "closed_at": "2015-05-21T20:59:13Z"}, "comments": 11, "created_at": "2014-04-10T09:42:21Z", "updated_at": "2014-06-19T21:16:40Z", "closed_at": "2014-06-19T21:16:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Since the `Freeze` kind has been replaced with `Share` it's possible to break things in safe code, such as mutating keys in a collection and thus invalidating the collection. With `Freeze` one was able to prevent this.\n\nHere is an example of how one can break the standard hashmap:\n\n``` rust\n#![feature(default_type_params)]\n\nextern crate collections;\nextern crate sync;\n\nuse collections::hashmap::HashMap;\nuse std::hash::Hash;\nuse std::sync::atomics::{AtomicUint, SeqCst};\n\n// A perfectly valid `Share` type\nstruct Shareable {\n    val: AtomicUint\n}\n\nimpl Shareable {\n    fn new(val: uint) -> Shareable {\n        Shareable { val: AtomicUint::new(val) }\n    }\n\n    fn mutate_threadsafe(&self, val: uint) {\n        self.val.store(val, SeqCst);\n    }\n}\n\nimpl Eq for Shareable {\n    fn eq(&self, other: &Shareable) -> bool {\n        self.val.load(SeqCst) == other.val.load(SeqCst)\n    }\n}\n\nimpl TotalEq for Shareable {}\n\nimpl<S: Writer> Hash<S> for Shareable {\n    fn hash(&self, state: &mut S) {\n        let _ = state.write_le_uint(self.val.load(SeqCst));\n    }\n}\n\n#[test]\nfn test() {\n    let mut map = HashMap::new();\n\n    for i in range(0u, 1000u) {\n        map.insert(Shareable::new(i), i);\n    }\n\n    // With `Share` you can mutate through immutable references ...\n    for k in map.keys() {\n        k.mutate_threadsafe(999999u);\n    }\n\n    // ... leads to problems that Rust promises to prevent :(\n    for i in range(0u, 1000u) {\n        assert_eq!(map.find_copy(&Shareable::new(i)), Some(i));\n    }\n}\n```\n\nI think it might be a good idea to re-introduce `Freeze` (which could then imply `Share`). Being able to specify that a type can be made deeply immutable is a very strong and a very useful guarantee. It's one of the reasons why Rust's `&T` is much more useful than C++'s `const T&`. And as the above example shows, `Share` cannot provide a replacement for this as it basically just means that access to the object is synchronized. (I'm not even sure that `Share` as it is defined now---allowing for mutation through & references---is a good idea; but that's just a gut feeling)\n", "closed_by": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/13438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/13438/timeline", "performed_via_github_app": null, "state_reason": "completed"}