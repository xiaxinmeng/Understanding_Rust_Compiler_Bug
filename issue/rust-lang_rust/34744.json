{"url": "https://api.github.com/repos/rust-lang/rust/issues/34744", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34744/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34744/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34744/events", "html_url": "https://github.com/rust-lang/rust/issues/34744", "id": 164687670, "node_id": "MDU6SXNzdWUxNjQ2ODc2NzA=", "number": 34744, "title": "Nightly Rust: -C lto and -C opt-level=2 or 3 -C no-prepopulate-passes leads to incorrect assembly of loop on arm.", "user": {"login": "spwilson2", "id": 11496248, "node_id": "MDQ6VXNlcjExNDk2MjQ4", "avatar_url": "https://avatars.githubusercontent.com/u/11496248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spwilson2", "html_url": "https://github.com/spwilson2", "followers_url": "https://api.github.com/users/spwilson2/followers", "following_url": "https://api.github.com/users/spwilson2/following{/other_user}", "gists_url": "https://api.github.com/users/spwilson2/gists{/gist_id}", "starred_url": "https://api.github.com/users/spwilson2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spwilson2/subscriptions", "organizations_url": "https://api.github.com/users/spwilson2/orgs", "repos_url": "https://api.github.com/users/spwilson2/repos", "events_url": "https://api.github.com/users/spwilson2/events{/privacy}", "received_events_url": "https://api.github.com/users/spwilson2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-09T22:00:27Z", "updated_at": "2016-07-10T00:46:16Z", "closed_at": "2016-07-10T00:46:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running nigthly rust with flags `--target=target arm-unknown-linux-gnueabi -C lto -C opt-level=3 -C no-prepopulate-passes` is leading to an incorrect branching address being calculated, which leads to an infinite loop in generated assembly.\n\nHere's a repo with as tight an example I could make: https://github.com/spwilson2/rustc-issue/tree/lto-infinte-loop\n\n``` rust\n#![crate_type=\"staticlib\"]\n#![feature(lang_items)]\n#![no_std]\n\n// Allow this to be called from asm boot and not be optimized out.\n#[no_mangle]\npub extern \"cdecl\" fn rust_main() -> !{\n    uart::putc(&'s');\n    loop{}\n}\n\nmod mmio {\n    pub unsafe fn write(address: *mut usize, value: usize) {\n        *address = value;\n    }\n    pub unsafe fn read(address: *mut usize) -> usize {\n        *address\n    }\n\n}\n\nmod uart {\n    use mmio;\n\n    pub const READ_ADDR: *mut usize = 0x1000 as *mut usize;\n    pub const WRITE_ADDR: *mut usize = 0x2000 as *mut usize;\n\n    pub fn putc(byte: &char)\n    {\n        unsafe {\n            // Wait for UART to become ready to transmit.\n            'outer: loop {\n                if (mmio::read(READ_ADDR) & (1usize << 5usize) ) > 0\n                {\n                    break 'outer;\n                }\n            }\n\n            mmio::write(WRITE_ADDR, *byte as usize);\n        }\n    }\n}\n\n// Fix undeclared.\n#[lang = \"eh_personality\"] extern fn eh_personality() {}\n#[lang = \"panic_fmt\"] extern fn panic_fmt() -> ! {loop{}}\n\n// Fix llbv landing pads.\n#[no_mangle]\npub extern fn __aeabi_unwind_cpp_pr1 () -> ! {loop{}}\n#[no_mangle]\npub extern fn __aeabi_unwind_cpp_pr0 () -> ! {loop{}}\n#[no_mangle]\n#[allow(non_snake_case)]\npub extern fn _Unwind_Resume() -> ! {loop{}}\n```\n\nWhile building with rustc flags `-C lto -C opt-level=2 -C no-prepopulate-passes` (and my target)\n\nThe following assembly is generated\n\n``` asm\n00000000 <rust_main>:\n   0:   e3a00a01        mov     r0, #4096       ; 0x1000\n   4:   e5900000        ldr     r0, [r0]\n   8:   e2000020        and     r0, r0, #32\n   c:   e3500000        cmp     r0, #0\n  10:   0afffffd        beq     c <rust_main+0xc>\n  14:   e3a00a02        mov     r0, #8192       ; 0x2000\n  18:   e3a01073        mov     r1, #115        ; 0x73\n  1c:   e5801000        str     r1, [r0]\n  20:   eafffffe        b       20 <rust_main+0x20>\n```\n\nInstruction 10 should branch to `0 <rust_main>` to recheck the value at address 0x1000. Instead, this loops infinitely since it runs a compare on two 0 values.\n\n``` bash\nrustc --version --verbose\nrustc 1.11.0-nightly (696b703b5 2016-07-03)\nbinary: rustc\ncommit-hash: 696b703b5a58816bb0e549ac332a98fa7e635949\ncommit-date: 2016-07-03\nhost: x86_64-unknown-linux-gnu\nrelease: 1.11.0-nightly\n```\n", "closed_by": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34744/timeline", "performed_via_github_app": null, "state_reason": "completed"}