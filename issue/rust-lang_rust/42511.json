{"url": "https://api.github.com/repos/rust-lang/rust/issues/42511", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42511/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42511/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42511/events", "html_url": "https://github.com/rust-lang/rust/issues/42511", "id": 234317983, "node_id": "MDU6SXNzdWUyMzQzMTc5ODM=", "number": 42511, "title": "refactor lint handling to be more \"eager\"", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2017-06-07T19:32:27Z", "updated_at": "2017-08-10T13:50:48Z", "closed_at": "2017-08-10T13:50:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Lint handling at present works like this:\r\n\r\n- During most of compilation, when we see something we might want to lint about, we insert this potential lint into a [mutable table in the session](https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src/librustc/session/mod.rs#L79). This comes along with a `NodeId` that identifies the AST/HIR node that the lint is attached to, along with the lint name, message, etc.\r\n- We then have a dedicated pass that walks over the HIR. At each point, it tracks which lints are \"allowed\", \"denied\", etc. At the same time, it extracts entries from this table and reports them. It also invokes \"lint visitors\" that may generate additional lints.\r\n    - In particular, some lints are just a custom pass, but others are generated as a side-effect of other things (like type-checking). It just depends on when the information that is needed is most readily available.\r\n\r\nThis is not a very good setup. Among other things:\r\n\r\n- It requires us to generate a big table of \"pending\" lints, even in the case where a lint is `#[allow]`. Wasteful.\r\n- It means that lints all get displayed fairly late in compilation -- this limits their value, since often a lint is detected early which might be useful in solving a compilation error, but we can't report the lint.\r\n- It's not very incremental friendly because of the Big Mutable Table.\r\n\r\n@eddyb proposed an alternative architecture that I think is better.\r\n\r\n- In HIR lowering, we would compute which lints are in scope at each point. We would store this information in the HIR in some way (some thoughts on this below). \r\n- When we detect (in some phase) a lintable scenario, we would check *immediately* whether the lint is \"allow\", \"warn\", etc, and -- if needed -- issue the appropriate diagnostic right then.\r\n- We can still run the custom lint code, it would simply query the HIR settings in the same way.\r\n\r\nThe best way to store this lint table is not 100% clear. Something sparse seems obviously like a good idea, since most nodes in the HIR do not have lint-related attributes on them (and hence just inherit the settings from their parent). I think maybe having each item store a link to the \"current\" settings for each lint makes sense; this can be easily shared between items. Then, *within* an item, if we need to compute the settings for some particular node, we would walk up the parents in the HIR map, looking for lint-related attributes and -- when we reach the item -- just using the settings stored on the item itself. \r\n\r\nAlternatively, we could just cache nothing and compute *everything* this way, at least to start. If more caching is desired, maybe have passes keep a local cache that would then be populated within the things within a particular item.\r\n\r\nI'm available to mentor this. It is a bit of a \"design needed\" sort of job, so I'm not sure what the immediate instructions would be. The first step is obviously familiarizing yourself with the current setup. After that, I would probably try to make a commit that adds a method to the HIR map that will compute the innermost applicable lint setting for a particular node (just by walking up the parents). We could then use this and remove all the existing lint code for tracking. That should work, but be slow (O(n^2) lookups). Presumably we can then adopt some sort of caching strategy.\r\n\r\n@eddyb also mentioned that for bonus points, we should probably \"decode\" attributes during HIR lowering more generally, so that we are not walking the general attribute data structures, but rather something specific to the stuff the compiler cares about. \r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42511/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42511/timeline", "performed_via_github_app": null, "state_reason": "completed"}