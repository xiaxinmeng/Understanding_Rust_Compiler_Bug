{"url": "https://api.github.com/repos/rust-lang/rust/issues/67186", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67186/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67186/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67186/events", "html_url": "https://github.com/rust-lang/rust/issues/67186", "id": 535406188, "node_id": "MDU6SXNzdWU1MzU0MDYxODg=", "number": 67186, "title": "Missed optimization on value range of `slice::len`", "user": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-09T23:51:42Z", "updated_at": "2020-10-04T23:18:28Z", "closed_at": "2020-10-04T23:18:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The internals of llvm do not permit creation of slices spanning more\r\nthan `isize::MAX` bytes, as a limit resulting from pointer offsetting\r\ninbounds. It must be both possible to represent arbitrary pointer \r\ndifferences of the same allocation within an `isize` and there must be \r\nno wrapping in the `ptr::offset` and array indexing. This has influenced\r\nthe surface documentation for `slice::from_raw_parts`:\r\n\r\n> The total size of the slice must be no larger than isize::MAX bytes in\r\n> memory. See the safety documentation of pointer::offset.\r\n\r\nHowever, the implementation in the `core` library can not leverage this\r\nproperty for optimization. To illustrate this, the following code should never\r\nrequire an overflow check and never panic but the compiler is unable to\r\nremove the panic path.\r\n\r\n```rust\r\npub fn len_add(a: &[u8], b: &[u8]) -> usize {\r\n    a.len().checked_add(b.len()).unwrap()\r\n}\r\n```\r\n\r\n[play](https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=fcca0377c5504b1a179908be71a1c828)\r\n\r\nThe `core` library could add an optimization hint in its implementation\r\nof `slice::len` asserting that the value range is in fact at most as large as\r\nthe maximum possible values of `isize`. This information *should* then be\r\npropagated automatically at each call site in optimizer passes.\r\n\r\n```rust\r\n// This is libcore, referring to the stabilized `unreachable_unchecked`.\r\nuse crate::intrinsics::unreachable;\r\n\r\n// Alternative of `[T]::len` in libcore\r\npub const fn len(&self) -> usize {\r\n    let raw_len = unsafe {\r\n        crate::ptr::Repr { rust: self }.raw.len\r\n    };\r\n    \r\n    if mem::size_of::<T>() > 0 {\r\n        if raw_len > isize::max_value() as usize / mem::size_of::<T>() {\r\n            // SAFETY: allocations can not be larger than `isize::MAX`\r\n            // bytes. Since slices refer to a single allocation, this extends\r\n            // to slice lengths of sized types. At this point we would have\r\n            // however:\r\n            //\r\n            // > `len() * mem::size_of::<T>() > isize::MAX`.\r\n            //\r\n            // Since this path can be deduced as unreachable due to the \r\n            // below hint, the optimizer can restrict the value range of\r\n            // return values for the purpose of optimization at each\r\n            // call site.\r\n            unsafe { unreachable() }\r\n        }\r\n    }\r\n    \r\n    raw_len\r\n}\r\n```\r\n\r\nThis *currently* allows the optimizer to remove the bounds check, as can be seen in this implementation: https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=6e46ce72b9affea080a33eee72b53267\r\n\r\nI don't see a way to enable this on current nightly as `slice::len` is a `const fn` and several parts of the above implementation will consequently not yet work.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67186/timeline", "performed_via_github_app": null, "state_reason": "completed"}