{"url": "https://api.github.com/repos/rust-lang/rust/issues/13472", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/13472/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/13472/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/13472/events", "html_url": "https://github.com/rust-lang/rust/issues/13472", "id": 31373630, "node_id": "MDU6SXNzdWUzMTM3MzYzMA==", "number": 13472, "title": "Cloning a 1MB vector is 30x slower than cloning a 1MB ~str", "user": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2014-04-12T01:25:05Z", "updated_at": "2014-06-16T21:56:38Z", "closed_at": "2014-04-16T12:06:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Benchmark program at the end.  The results:\n\n```\n$ rustc -v\nrustc 0.11-pre (cee9a83 2014-04-11 15:54:46 -0700)\nhost: x86_64-unknown-linux-gnu\n\n$ rustc -O --test foo.rs && ./foo --bench\n\nrunning 5 tests\ntest clone_owned          ... bench:   5319322 ns/iter (+/- 166831)\ntest clone_owned_to_owned ... bench:   5293984 ns/iter (+/- 125331)\ntest clone_str            ... bench:     85526 ns/iter (+/- 1333)\ntest clone_vec            ... bench:   3332139 ns/iter (+/- 17227)\ntest test_memcpy          ... bench:     85931 ns/iter (+/- 563)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 5 measured\n```\n\nThat comes out to 300 MB/s\u2026 really bad for a memory copy.  I'm guessing this has to do with the fact that `Vec<T>` is generic.  Its `clone` looks like\n\n``` .rs\nimpl<T:Clone> Clone for Vec<T> {\n    fn clone(&self) -> Vec<T> {\n        self.iter().map(|x| x.clone()).collect()\n    }\n}\n```\n\nand LLVM probably isn't smart enough to optimize this down to a `memcpy`.  But anyway, there is a need for efficient vectors of primitive numerical types.  If this can't happen by optimization magic, we need something like\n\n``` .rs\nimpl<T: POD> Vec<T> {\n    fn fast_clone(&self) -> Vec<T> {\n        let mut vector = Vec::with_capacity(self.len);\n        unsafe {\n            vector.set_len(self.len);\n            vector.copy_memory(self.as_slice());\n        }\n        vector\n    }\n}\n```\n\n(untested).  I can also imagine a language feature which would let you write\n\n``` .rs\nimpl<T: Clone> Clone for Vec<T> {\n    fn clone(&self) -> Vec<T> {\n        if implements_trait!(T, POD) {\n            // ...\n        } else {\n            // ...\n        }\n    }\n}\n```\n\nThis is worryingly close to C++ template specialization, but might be worth it for core data structures.  It's really counterintuitive if you need to use a special vector type or a special clone method to get acceptable performance on vectors of primitive integers.\n\nBonus weirdness: If you comment out `clone_owned` then `clone_owned_to_owned` gets significantly faster (though still way too slow):\n\n```\nrunning 4 tests\ntest clone_owned_to_owned ... bench:   3355442 ns/iter (+/- 69257)\ntest clone_str            ... bench:     78866 ns/iter (+/- 5433)\ntest clone_vec            ... bench:   3346685 ns/iter (+/- 134001)\ntest test_memcpy          ... bench:     85116 ns/iter (+/- 3570)\n```\n\nIf you comment out `clone_owned_to_owned` instead, nothing in particular happens.\n\nHere's the benchmark program:\n\n``` .rs\nextern crate test;\nextern crate libc;\n\nuse test::{Bencher, black_box};\nuse libc::size_t;\nuse std::slice;\n\nstatic size: uint = 1024*1024;\n\n#[bench]\nfn clone_str(bh: &mut Bencher) {\n    let mut x = StrBuf::with_capacity(size);\n    for _ in range(0, size) {\n        x.push_char('x');\n    }\n    let x: ~str = x.into_owned();\n    bh.iter(|| black_box(x.clone()));\n}\n\n#[bench]\nfn clone_vec(bh: &mut Bencher) {\n    let mut x: Vec<u8> = Vec::with_capacity(size);\n    for _ in range(0, size) {\n        x.push(0x78);\n    }\n    bh.iter(|| black_box(x.clone()));\n}\n\n#[bench]\nfn clone_owned(bh: &mut Bencher) {\n    let mut x: ~[u8] = slice::with_capacity(size);\n    for _ in range(0, size) {\n        x.push(0x78);\n    }\n    bh.iter(|| black_box(x.clone()));\n}\n\n#[bench]\nfn clone_owned_to_owned(bh: &mut Bencher) {\n    let mut x: ~[u8] = slice::with_capacity(size);\n    for _ in range(0, size) {\n        x.push(0x78);\n    }\n    let y = x.to_owned();\n    bh.iter(|| black_box(y.clone()));\n}\n\nextern {\n    fn memcpy(dest: *mut u8, src: *u8, n: size_t);\n}\n\n#[bench]\nfn test_memcpy(bh: &mut Bencher) {\n    let src = ~[0x78_u8, ..size];\n    let mut dst = ~[0_u8, ..size];\n    bh.iter(|| {\n        unsafe {\n            memcpy(dst.as_mut_ptr(), src.as_ptr(), size as u64);\n        }\n    })\n}\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/13472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/13472/timeline", "performed_via_github_app": null, "state_reason": "completed"}