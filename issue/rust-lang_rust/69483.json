{"url": "https://api.github.com/repos/rust-lang/rust/issues/69483", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69483/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69483/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69483/events", "html_url": "https://github.com/rust-lang/rust/issues/69483", "id": 571423557, "node_id": "MDU6SXNzdWU1NzE0MjM1NTc=", "number": 69483, "title": "PathBuf join sometimes adds ASCII 0x7F to the end of the path", "user": {"login": "rehwinkel", "id": 22814608, "node_id": "MDQ6VXNlcjIyODE0NjA4", "avatar_url": "https://avatars.githubusercontent.com/u/22814608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rehwinkel", "html_url": "https://github.com/rehwinkel", "followers_url": "https://api.github.com/users/rehwinkel/followers", "following_url": "https://api.github.com/users/rehwinkel/following{/other_user}", "gists_url": "https://api.github.com/users/rehwinkel/gists{/gist_id}", "starred_url": "https://api.github.com/users/rehwinkel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rehwinkel/subscriptions", "organizations_url": "https://api.github.com/users/rehwinkel/orgs", "repos_url": "https://api.github.com/users/rehwinkel/repos", "events_url": "https://api.github.com/users/rehwinkel/events{/privacy}", "received_events_url": "https://api.github.com/users/rehwinkel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-26T14:32:36Z", "updated_at": "2020-02-26T14:42:52Z", "closed_at": "2020-02-26T14:42:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nlet current_dir = env::current_dir().expect(\"no current dir\");\r\nlet lib_path = current_dir.join(libname);\r\nlet str_path = lib_path.to_str().unwrap(); // for debugging\r\nlet bytes_path = lib_path.to_str().unwrap().as_bytes(); // for debugging\r\nlet lib = unsafe { LibRc::new(lib_path) }.expect(\"failed to load library\");\r\n```\r\n\r\nI expected to see this happen: The `PathBuf` should be passed to `LibRc::new` and load a dynamic library. LibRc uses the byte representation of the String to load a dynamic library. The contents of the PathBuf should be the joined path name.\r\n\r\nInstead, this happened: Sometimes, the byte representation of the PathBuf is correct and the library loads sucessfully. Sometimes there is a strange 0x7f at the end of the string, and `LibRc::new` fails to load the library because it can't find the file anymore. Here's the lldb output when the error arises:\r\n```\r\n(&str) libname = (data_ptr = \"libmath.so\", length = 10)\r\n(std::path::PathBuf) lib_path = {\r\n  inner = {\r\n    inner = {\r\n      inner = {\r\n        buf = {\r\n          ptr = (pointer = \"/home/ian/Desktop/Rust/OliveScript/libmath.so\\x7f\", _marker = core::marker::PhantomData<unsigned char> @ 0x00007fffffffa550)\r\n          cap = 68\r\n          a = {}\r\n        }\r\n        len = 45\r\n      }\r\n    }\r\n  }\r\n}\r\n(&str) str_path = (data_ptr = \"/home/ian/Desktop/Rust/OliveScript/libmath.so\\x7f\", length = 45)\r\n(&[u8]) bytes_path = (data_ptr = \"/home/ian/Desktop/Rust/OliveScript/libmath.so\\x7f\", length = 45)\r\n```\r\n\r\nAnd here's the lldb output where the error doesn't happen:\r\n```\r\n(&str) libname = (data_ptr = \"libmath.so\", length = 10)\r\n(std::path::PathBuf) lib_path = {\r\n  inner = {\r\n    inner = {\r\n      inner = {\r\n        buf = {\r\n          ptr = (pointer = \"/home/ian/Desktop/Rust/OliveScript/libmath.so\", _marker = core::marker::PhantomData<unsigned char> @ 0x00007fffffffa550)\r\n          cap = 68\r\n          a = {}\r\n        }\r\n        len = 45\r\n      }\r\n    }\r\n  }\r\n}\r\n(&str) str_path = (data_ptr = \"/home/ian/Desktop/Rust/OliveScript/libmath.so\", length = 45)\r\n(&[u8]) bytes_path = (data_ptr = \"/home/ian/Desktop/Rust/OliveScript/libmath.so\", length = 45)\r\n```\r\n\r\nIm aware that this issue could also be with the [sharedlib](https://crates.io/crates/sharedlib) crate, but this is unexpected behavior from PathBuf so I'm filing the issue here too.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.41.0 (5e1a79984 2020-01-27)\r\nbinary: rustc\r\ncommit-hash: 5e1a799842ba6ed4a57e91f7ab9435947482f7d8\r\ncommit-date: 2020-01-27\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.41.0\r\nLLVM version: 9.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nthread 'main' panicked at 'failed to load library: Error(LibraryOpen(\"/home/ian/Desktop/Rust/OliveScript/libmath.so\"), State { next_error: Some(Error(OsError(\"/home/ian/Desktop/Rust/OliveScript/libmath.so\\u{7f}: cannot open shared object file: No such file or directory\", \"dlopen\"), State { next_error: None })) })', src/libcore/result.rs:1188:5\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:84\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:61\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1025\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1426\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:65\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:50\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:193\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:210\r\n  10: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:471\r\n  11: rust_begin_unwind\r\n             at src/libstd/panicking.rs:375\r\n  12: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:84\r\n  13: core::result::unwrap_failed\r\n             at src/libcore/result.rs:1188\r\n  14: core::result::Result<T,E>::expect\r\n             at /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libcore/result.rs:983\r\n  15: olv::interpreter::n_import\r\n             at src/interpreter.rs:428\r\n  16: olv::interpreter::run\r\n             at src/interpreter.rs:722\r\n  17: olv::main\r\n             at src/main_interpreter.rs:14\r\n  18: std::rt::lang_start::{{closure}}\r\n             at /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libstd/rt.rs:67\r\n  19: std::rt::lang_start_internal::{{closure}}\r\n             at src/libstd/rt.rs:52\r\n  20: std::panicking::try::do_call\r\n             at src/libstd/panicking.rs:292\r\n  21: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:78\r\n  22: std::panicking::try\r\n             at src/libstd/panicking.rs:270\r\n  23: std::panic::catch_unwind\r\n             at src/libstd/panic.rs:394\r\n  24: std::rt::lang_start_internal\r\n             at src/libstd/rt.rs:51\r\n  25: std::rt::lang_start\r\n             at /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libstd/rt.rs:67\r\n  26: main\r\n  27: __libc_start_main\r\n  28: _start\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69483/timeline", "performed_via_github_app": null, "state_reason": "completed"}