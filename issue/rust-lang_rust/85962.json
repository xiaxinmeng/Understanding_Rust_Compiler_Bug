{"url": "https://api.github.com/repos/rust-lang/rust/issues/85962", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85962/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85962/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85962/events", "html_url": "https://github.com/rust-lang/rust/issues/85962", "id": 910370814, "node_id": "MDU6SXNzdWU5MTAzNzA4MTQ=", "number": 85962, "title": "AtomicUsize `fetch_add` hangs indefinetly on aarch64 (ThunderX)", "user": {"login": "Licenser", "id": 119093, "node_id": "MDQ6VXNlcjExOTA5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/119093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Licenser", "html_url": "https://github.com/Licenser", "followers_url": "https://api.github.com/users/Licenser/followers", "following_url": "https://api.github.com/users/Licenser/following{/other_user}", "gists_url": "https://api.github.com/users/Licenser/gists{/gist_id}", "starred_url": "https://api.github.com/users/Licenser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Licenser/subscriptions", "organizations_url": "https://api.github.com/users/Licenser/orgs", "repos_url": "https://api.github.com/users/Licenser/repos", "events_url": "https://api.github.com/users/Licenser/events{/privacy}", "received_events_url": "https://api.github.com/users/Licenser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3940166907, "node_id": "LA_kwDOAAsO6M7q2iz7", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-AArch64", "name": "O-AArch64", "color": "6e6ec0", "default": false, "description": "Armv8-A or later processors in AArch64 mode"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-06-03T10:51:26Z", "updated_at": "2022-03-18T01:38:38Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nuse std::sync::atomic::{AtomicUsize, Ordering};\r\n\r\nstatic ID: AtomicUsize = AtomicUsize::new(0);\r\n\r\nfn main() {\r\n  ID.fetch_add(1, Ordering::Relaxed);\r\n}\r\n```\r\n\r\nI expected to see this happen: The program to end\r\n\r\nInstead, this happened: The program hung forever with a core at 100% load\r\n\r\n\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.52.1 (9bc8c42bb 2021-05-09)\r\nbinary: rustc\r\ncommit-hash: 9bc8c42bb2f19e745a63f3445f1ac248fb015e53\r\ncommit-date: 2021-05-09\r\nhost: aarch64-unknown-linux-gnu\r\nrelease: 1.52.1\r\nLLVM version: 12.0.0\r\n```\r\n\r\nand\r\n\r\n```\r\nrustc 1.54.0-nightly (dbe459ded 2021-06-02)\r\nbinary: rustc\r\ncommit-hash: dbe459dedd33470f2cb28101157de316caaffa66\r\ncommit-date: 2021-06-02\r\nhost: aarch64-unknown-linux-gnu\r\nrelease: 1.54.0-nightly\r\nLLVM version: 12.0.1\r\n```\r\n\r\nThis is running in a Cavium ThunderX ARM cpu:\r\n\r\n```\r\nArchitecture:                    aarch64\r\nCPU op-mode(s):                  64-bit\r\nByte Order:                      Little Endian\r\nCPU(s):                          48\r\nOn-line CPU(s) list:             0-47\r\nThread(s) per core:              1\r\nCore(s) per socket:              48\r\nSocket(s):                       1\r\nNUMA node(s):                    1\r\nVendor ID:                       Cavium\r\nModel:                           1\r\nModel name:                      ThunderX 88XX\r\nStepping:                        0x1\r\nBogoMIPS:                        200.00\r\nNUMA node0 CPU(s):               0-47\r\nVulnerability Itlb multihit:     Not affected\r\nVulnerability L1tf:              Not affected\r\nVulnerability Mds:               Not affected\r\nVulnerability Meltdown:          Vulnerable\r\nVulnerability Spec store bypass: Vulnerable\r\nVulnerability Spectre v1:        Mitigation; __user pointer sanitization\r\nVulnerability Spectre v2:        Vulnerable\r\nVulnerability Srbds:             Not affected\r\nVulnerability Tsx async abort:   Not affected\r\nFlags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid\r\n```\r\n\r\n\r\n<details><summary>Backtrace</summary>\r\n\r\nSince the program hangs indefinitely no crash backtrace exists, but running it in `rust-lldb` gives the following backtrace:\r\n\r\n<p>\r\n\r\n```\r\n* thread #1, name = 'atomic-add', stop reason = signal SIGSTOP\r\n    frame #0: 0x0000aaaaaaaafa6c atomic-add`core::sync::atomic::atomic_add::h05d87558f9bdb971(dst=0x0000aaaaaaaf2060, val=1, order=Relaxed) at atomic.rs:2382:24\r\n(lldb) bt\r\nerror: need to add support for DW_TAG_base_type '()' encoded with DW_ATE = 0x7, bit_size = 0\r\n* thread #1, name = 'atomic-add', stop reason = signal SIGSTOP\r\n  * frame #0: 0x0000aaaaaaaafa6c atomic-add`core::sync::atomic::atomic_add::h05d87558f9bdb971(dst=0x0000aaaaaaaf2060, val=1, order=Relaxed) at atomic.rs:2382:24\r\n    frame #1: 0x0000aaaaaaaafac8 atomic-add`core::sync::atomic::AtomicUsize::fetch_add::h38e434dfb7de1826(self=0x0000aaaaaaaf2060, val=1, order=Relaxed) at atomic.rs:1735:26\r\n    frame #2: 0x0000aaaaaaaaf834 atomic-add`atomic_add::main::h89962fd9723e6a47 at main.rs:6:3\r\n    frame #3: 0x0000aaaaaaaaf8a8 atomic-add`core::ops::function::FnOnce::call_once::h274b37448b4bd3f4((null)=(atomic-add`atomic_add::main::h89962fd9723e6a47 at main.rs:5), (null)=<unavailable>) at function.rs:227:5\r\n    frame #4: 0x0000aaaaaaaafb3c atomic-add`std::sys_common::backtrace::__rust_begin_short_backtrace::h96ff16390dff76e9(f=(atomic-add`atomic_add::main::h89962fd9723e6a47 at main.rs:5)) at backtrace.rs:125:18\r\n    frame #5: 0x0000aaaaaaaaf96c atomic-add`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h7c395efe9cdd05c0 at rt.rs:66:18\r\n    frame #6: 0x0000aaaaaaac2908 atomic-add`std::rt::lang_start_internal::hac4960093806604a [inlined] core::ops::function::impls::_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$F$GT$::call_once::h4d3b62c1d18fb3b6 at function.rs:259:13\r\n    frame #7: 0x0000aaaaaaac28fc atomic-add`std::rt::lang_start_internal::hac4960093806604a [inlined] std::panicking::try::do_call::hc71f0a2fd1d3493d at panicking.rs:379\r\n    frame #8: 0x0000aaaaaaac28fc atomic-add`std::rt::lang_start_internal::hac4960093806604a [inlined] std::panicking::try::h80c19bdf246b0ee1 at panicking.rs:343\r\n    frame #9: 0x0000aaaaaaac28fc atomic-add`std::rt::lang_start_internal::hac4960093806604a [inlined] std::panic::catch_unwind::h287ea33e6344c7c1 at panic.rs:431\r\n    frame #10: 0x0000aaaaaaac28fc atomic-add`std::rt::lang_start_internal::hac4960093806604a at rt.rs:51\r\n    frame #11: 0x0000aaaaaaaaf944 atomic-add`std::rt::lang_start::h09be16629ca574c0(main=(atomic-add`atomic_add::main::h89962fd9723e6a47 at main.rs:5), argc=1, argv=0x0000fffffffff268) at rt.rs:65:5\r\n    frame #12: 0x0000aaaaaaaaf868 atomic-add`main + 40\r\n    frame #13: 0x0000fffff7e14090 libc.so.6`__libc_start_main + 232\r\n    frame #14: 0x0000aaaaaaaaf718 atomic-add`_start + 52\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\ncredit to @cuviper for helping to track this down ( https://github.com/cuviper/autocfg/issues/36 )\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85962/timeline", "performed_via_github_app": null, "state_reason": null}