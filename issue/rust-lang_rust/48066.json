{"url": "https://api.github.com/repos/rust-lang/rust/issues/48066", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48066/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48066/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48066/events", "html_url": "https://github.com/rust-lang/rust/issues/48066", "id": 295428860, "node_id": "MDU6SXNzdWUyOTU0Mjg4NjA=", "number": 48066, "title": "Crate-level proc-macro attributes have issues", "user": {"login": "Rantanen", "id": 385385, "node_id": "MDQ6VXNlcjM4NTM4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/385385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rantanen", "html_url": "https://github.com/Rantanen", "followers_url": "https://api.github.com/users/Rantanen/followers", "following_url": "https://api.github.com/users/Rantanen/following{/other_user}", "gists_url": "https://api.github.com/users/Rantanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rantanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rantanen/subscriptions", "organizations_url": "https://api.github.com/users/Rantanen/orgs", "repos_url": "https://api.github.com/users/Rantanen/repos", "events_url": "https://api.github.com/users/Rantanen/events{/privacy}", "received_events_url": "https://api.github.com/users/Rantanen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-08T08:49:43Z", "updated_at": "2018-02-08T10:08:36Z", "closed_at": "2018-02-08T10:06:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\n#![my_attribute]\r\n```\r\n\r\nWhile normal proc-macro attribute work, crate level proc-macro attributes seem to have several issues. The clearest of these is the order of the attributes and `extern crate` statements: https://github.com/rust-lang/rust/issues/41430. `#![feature(extern_absolute_paths)]` feature can work around this specific issue; However this alone doesn't make proc macros work.\r\n\r\nSome of these issues are due to lack of library support (syn), but some are caused by rustc itself.\r\n\r\n## Identity macro \u2714\ufe0f \r\n\r\nFirst of all: The following proc-macro works just fine with nightly 29c8276ce:\r\n```rust\r\n#[proc_macro_attribute]\r\nfn attribute(_: TokenStream, input: TokenStream) -> TokenStream {\r\n    input\r\n}\r\n```\r\n\r\n```rust\r\n#![feature(extern_absolute_paths)]\r\n#![::my_crate::attribute]\r\nfn main() {}\r\n```\r\n\r\n## Round trip through FromIterator :x:\r\n\r\nAs long as the macro doesn't touch the input, everything works just fine. However this isn't really that useful for a macro. Once we try doing _anything_ with the input token stream (short of a `.clone()`), things start breaking.\r\n\r\n```rust\r\n#[proc_macro_attribute]\r\nfn attribute(_: TokenStream, input: TokenStream) -> TokenStream {\r\n    TokenStream::from_iter( input.into_iter() )\r\n}\r\n```\r\n\r\n```rust\r\n#![feature(extern_absolute_paths)]\r\n#![::my_crate::attribute]\r\nfn main() {}\r\n```\r\n\r\nThis results in the following error message\r\n\r\n```\r\nerror: expected identifier, found `{`\r\n --> <macro expansion>:1:1\r\n  |\r\n1 | pub mod  {\r\n  | ^^^ expected identifier\r\n```\r\n\r\nThe reason seems to be that the `TokenStream` the attribute receives looks like:\r\n\r\n```rust\r\npub mod {\r\n    ...\r\n}\r\n```\r\n\r\nThis is most likely caused by the `ast::Crate` modeling the items as a `Mod` with no `Ident`: https://github.com/rust-lang/rust/blob/master/src/libsyntax/ast.rs#L447-L451\r\n\r\n## Stripping the `pub mod` away :x:\r\n\r\nImplementing a `Crate` type for Syn and having its `to_tokens` skip the `pub mod {` .. `}` bits allows the parser to process the output correctly. I'm also hoping this would be the way to go, since the [parse_crate_mod](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/parser.rs#L6892-L6901) method just parses inner attributes and mod items without seemingly caring about the `mod` keywords or braces.\r\n\r\nHowever now we encounter the following ICE:\r\n\r\n<details><summary>thread 'rustc' panicked at 'internal error: entered unreachable code', libsyntax/ext/expand.rs:258:18</summary><p>\r\n\r\n```\r\nerror: an inner attribute is not permitted in this context\r\n  |\r\n  = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\r\n\r\nthread 'rustc' panicked at 'internal error: entered unreachable code', libsyntax/ext/expand.rs:258:18\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::_print\r\n             at libstd/sys_common/backtrace.rs:71\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/sys_common/backtrace.rs:59\r\n             at libstd/panicking.rs:380\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:396\r\n   4: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:576\r\n   5: std::panicking::begin_panic\r\n   6: syntax::ext::expand::MacroExpander::expand_crate\r\n   7: rustc_driver::driver::phase_2_configure_and_expand_inner::{{closure}}\r\n   8: rustc_driver::driver::phase_2_configure_and_expand_inner\r\n   9: rustc_driver::driver::compile_input\r\n  10: rustc_driver::run_compiler\r\n\r\nerror: internal compiler error: unexpected panic\r\n```\r\n</p></details><p></p>\r\n\r\nAs far as I can tell, the only way for this ICE to happen is for the `MacroExpander` to successfully [`expand`](https://github.com/rust-lang/rust/blob/master/src/libsyntax/ext/expand.rs#L245-L259) the attribute. However the code expects the expansion to result in `ast::Item(Mod)`\r\n\r\nI tried compiling a debug version of rustc for this, however then I end up with...\r\n\r\n## `syn::parse(input)` panics :x:\r\n\r\nAt this point my attribute fn does nothing but parses and quotes the input using syn using a custom `Crate` type that handles `pub mod` without an ident:\r\n\r\n```rust\r\n#[proc_macro_attribute]\r\npub fn attribute(_attr: TokenStream, input: TokenStream) -> TokenStream {\r\n    let file : Crate = parse( input ).unwrap();\r\n    quote!( #file ).into()\r\n}\r\n```\r\n\r\nThis results in the following panic:\r\n\r\n<details><summary>thread '<unnamed>' panicked at 'proc_macro::__internal::with_sess() called before set_parse_sess()!',</summary><p>\r\n\r\n```\r\n   Compiling test_crate v0.1.0 (file:///C:/Dev/Projects/crate_level_proc_macro/test_crate)\r\nthread '<unnamed>' panicked at 'proc_macro::__internal::with_sess() called before set_parse_sess()!', libproc_macro\\lib.rs:851:9\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::windows::backtrace::unwind_backtrace\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\sys\\windows\\backtrace\\mod.rs:65\r\n   1: std::sys_common::backtrace::_print\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\sys_common\\backtrace.rs:71\r\n   2: std::sys_common::backtrace::print\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\sys_common\\backtrace.rs:58\r\n   3: std::panicking::default_hook::{{closure}}\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\panicking.rs:380\r\n   4: std::panicking::default_hook\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\panicking.rs:396\r\n   5: std::panicking::rust_panic_with_hook\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\panicking.rs:576\r\n   6: std::panicking::begin_panic<str*>\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\panicking.rs:537\r\n   7: proc_macro::__internal::with_sess\r\n             at C:\\Dev\\Projects\\rust\\src\\libproc_macro\\lib.rs:851\r\n   8: proc_macro::TokenTree::from_internal\r\n             at C:\\Dev\\Projects\\rust\\src\\libproc_macro\\lib.rs:682\r\n   9: proc_macro::{{impl}}::next\r\n             at C:\\Dev\\Projects\\rust\\src\\libproc_macro\\lib.rs:570\r\n  10: proc_macro2::imp::{{impl}}::next\r\n             at C:\\Users\\Rantanen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\proc-macro2-0.2.2\\src\\unstable.rs:117\r\n  11: proc_macro2::{{impl}}::next\r\n             at C:\\Users\\Rantanen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\proc-macro2-0.2.2\\src\\lib.rs:326\r\n  12: syn::buffer::TokenBuffer::inner_new\r\n             at C:\\Users\\Rantanen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\syn-0.12.12\\src\\buffer.rs:176\r\n  13: syn::buffer::TokenBuffer::new2\r\n             at C:\\Users\\Rantanen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\syn-0.12.12\\src\\buffer.rs:228\r\n  14: syn::synom::{{impl}}::parse2<fn(syn::buffer::Cursor) -> core::result::Result<(crate_level_proc_macro::Crate, syn::buffer::Cursor), syn::error::ParseError>,crate_level_proc_macro::Crate>\r\n             at C:\\Users\\Rantanen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\syn-0.12.12\\src\\synom.rs:221\r\n  15: syn::parse2<crate_level_proc_macro::Crate>\r\n             at C:\\Users\\Rantanen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\syn-0.12.12\\src\\lib.rs:601\r\n  16: syn::parse<crate_level_proc_macro::Crate>\r\n             at C:\\Users\\Rantanen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\syn-0.12.12\\src\\lib.rs:580\r\n  17: crate_level_proc_macro::attribute\r\n             at C:\\Dev\\Projects\\crate_level_proc_macro\\src\\lib.rs:54\r\n  18: std::panicking::try::do_call\r\n  19: _rust_maybe_catch_panic\r\n  20: <std::thread::local::LocalKey<T>>::with\r\n  21: <syntax_ext::proc_macro_impl::AttrProcMacro as syntax::ext::base::AttrProcMacro>::expand\r\n  22: syntax::ext::expand::MacroExpander::expand\r\n  23: syntax::ext::expand::MacroExpander::expand\r\n  24: syntax::ext::expand::MacroExpander::expand_crate\r\n  25: rustc_driver::driver::count_nodes\r\n  26: rustc_driver::driver::count_nodes\r\n  27: rustc_driver::driver::compile_input\r\n  28: rustc_driver::run_compiler\r\nerror: custom attribute panicked\r\n --> src\\main.rs:2:1\r\n  |\r\n2 | #![::crate_level_proc_macro::attribute]\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = help: message: proc_macro::__internal::with_sess() called before set_parse_sess()!\r\n```\r\n</p></details><p></p>\r\n\r\nThe fact that the same code breaks on my own stage-1 rustc build based on the commit `29c8276ce`, while it \"works\" on nightly `29c8276ce 2018-02-07` is a bit weird. Shouldn't those two compilers have the same code base?\r\n\r\nIn any case, I can try working around that specific issue by not going through `proc_macro2` crate and instead using Syn's `parse_str`. However...\r\n\r\n## `.to_string()` on TokenStream :x: \r\n\r\nWe can skip `proc_macro2` by using the `TokenStream::to_string()` to turn the stream into rust-code that Syn can parse on its own. This gives us the following attribute function:\r\n\r\n```rust\r\n#[proc_macro_attribute]\r\npub fn attribute(_attr: TokenStream, input: TokenStream) -> TokenStream {\r\n    let file : Crate = parse_str( &input.to_string() ).unwrap();\r\n    quote!( #file ).into()\r\n}\r\n```\r\n\r\nRunning this results in the following panic\r\n\r\n<details><summary>thread '&lt;unnamed&gt;' panicked at 'index out of bounds: the len is 0 but the index is 0',</summary><p>\r\n\r\n```\r\n   Compiling test_crate v0.1.0 (file:///C:/Dev/Projects/crate_level_proc_macro/test_crate)\r\nthread '<unnamed>' panicked at 'index out of bounds: the len is 0 but the index is 0', C:\\Dev\\Projects\\rust\\src\\liballoc\\vec.rs:1551:10\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::windows::backtrace::unwind_backtrace\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\sys\\windows\\backtrace\\mod.rs:65\r\n   1: std::sys_common::backtrace::_print\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\sys_common\\backtrace.rs:71\r\n   2: std::sys_common::backtrace::print\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\sys_common\\backtrace.rs:58\r\n   3: std::panicking::default_hook::{{closure}}\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\panicking.rs:380\r\n   4: std::panicking::default_hook\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\panicking.rs:396\r\n   5: std::panicking::rust_panic_with_hook\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\panicking.rs:576\r\n   6: std::panicking::begin_panic<alloc::string::String>\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\panicking.rs:537\r\n   7: std::panicking::begin_panic_fmt\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\panicking.rs:521\r\n   8: std::panicking::rust_begin_panic\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\panicking.rs:497\r\n   9: core::panicking::panic_fmt\r\n             at C:\\Dev\\Projects\\rust\\src\\libcore\\panicking.rs:71\r\n  10: core::panicking::panic_bounds_check\r\n             at C:\\Dev\\Projects\\rust\\src\\libcore\\panicking.rs:58\r\n  11: alloc::vec::{{impl}}::index\r\n             at C:\\Dev\\Projects\\rust\\src\\liballoc\\vec.rs:1551\r\n  12: syntax_pos::span_encoding::SpanInterner::get\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax_pos\\span_encoding.rs:134\r\n  13: syntax_pos::span_encoding::decode::{{closure}}\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax_pos\\span_encoding.rs:109\r\n  14: syntax_pos::span_encoding::with_span_interner::{{closure}}\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax_pos\\span_encoding.rs:144\r\n  15: std::thread::local::LocalKey<core::cell::RefCell<syntax_pos::span_encoding::SpanInterner>>::try_with\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\thread\\local.rs:377\r\n  16: std::thread::local::LocalKey<core::cell::RefCell<syntax_pos::span_encoding::SpanInterner>>::with<core::cell::RefCell<syntax_pos::span_encoding::SpanInterner>,closure,syntax_pos::SpanData>\r\n             at C:\\Dev\\Projects\\rust\\src\\libstd\\thread\\local.rs:290\r\n  17: syntax_pos::span_encoding::with_span_interner\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax_pos\\span_encoding.rs:144\r\n  18: syntax_pos::span_encoding::decode\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax_pos\\span_encoding.rs:109\r\n  19: syntax_pos::span_encoding::Span::data\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax_pos\\span_encoding.rs:47\r\n  20: syntax_pos::span_encoding::Span::lo\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax_pos\\lib.rs:196\r\n  21: syntax::print::pprust::State::print_item\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\print\\pprust.rs:1173\r\n  22: syntax::print::pprust::item_to_string::{{closure}}\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\print\\pprust.rs:332\r\n  23: syntax::print::pprust::to_string\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\print\\pprust.rs:165\r\n  24: syntax::print::pprust::item_to_string\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\print\\pprust.rs:331\r\n  25: syntax::print::pprust::token_to_string\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\print\\pprust.rs:269\r\n  26: syntax::print::pprust::PrintState::print_tt<syntax::print::pprust::State>\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\print\\pprust.rs:794\r\n  27: syntax::print::pprust::PrintState::print_tts<syntax::print::pprust::State>\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\print\\pprust.rs:818\r\n  28: syntax::print::pprust::tokens_to_string::{{closure}}\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\print\\pprust.rs:320\r\n  29: syntax::print::pprust::to_string\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\print\\pprust.rs:165\r\n  30: syntax::print::pprust::tokens_to_string\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\print\\pprust.rs:320\r\n  31: syntax::tokenstream::{{impl}}::fmt\r\n             at C:\\Dev\\Projects\\rust\\src\\libsyntax\\tokenstream.rs:555\r\n  32: core::fmt::{{impl}}::fmt<proc_macro::TokenStream>\r\n             at C:\\Dev\\Projects\\rust\\src\\libcore\\fmt\\mod.rs:1566\r\n  33: core::fmt::Formatter::run\r\n             at C:\\Dev\\Projects\\rust\\src\\libcore\\fmt\\mod.rs:1084\r\n  34: core::fmt::write\r\n             at C:\\Dev\\Projects\\rust\\src\\libcore\\fmt\\mod.rs:1030\r\n  35: core::fmt::Write::write_fmt<alloc::string::String>\r\n             at C:\\Dev\\Projects\\rust\\src\\libcore\\fmt\\mod.rs:226\r\n  36: alloc::string::{{impl}}::to_string<proc_macro::TokenStream>\r\n             at C:\\Dev\\Projects\\rust\\src\\liballoc\\string.rs:2054\r\n  37: crate_level_proc_macro::attribute\r\n             at C:\\Dev\\Projects\\crate_level_proc_macro\\src\\lib.rs:54\r\n  38: std::panicking::try::do_call\r\n  39: _rust_maybe_catch_panic\r\n  40: <std::thread::local::LocalKey<T>>::with\r\n  41: <syntax_ext::proc_macro_impl::AttrProcMacro as syntax::ext::base::AttrProcMacro>::expand\r\n  42: syntax::ext::expand::MacroExpander::expand\r\n  43: syntax::ext::expand::MacroExpander::expand\r\n  44: syntax::ext::expand::MacroExpander::expand_crate\r\n  45: rustc_driver::driver::count_nodes\r\n  46: rustc_driver::driver::count_nodes\r\n  47: rustc_driver::driver::compile_input\r\n  48: rustc_driver::run_compiler\r\nerror: custom attribute panicked\r\n --> src\\main.rs:2:1\r\n  |\r\n2 | #![::crate_level_proc_macro::attribute]\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: Could not compile `test_crate`.\r\n```\r\n</p></details><p></p>\r\n\r\nI suspect this has something to do with the token stream including those `pub mod` bits, which do not have proper span information. The panic seems to result from the pretty printer trying to fetch `SpanData` for tokens that don't have any.\r\n\r\n--------------------------\r\n\r\nThat's as far as I've gotten with this. I still believe crate-level macro attributes are a strong feature that is worth pursuing.\r\n\r\nMy own use case for these is to emit some FFI entry point functions, which enable the crate to be used as a COM library. While these could be done from a normal macro, an attribute would make it feel more declarative.\r\n\r\nThese attributes also came up in custom test frameworks. A while back I was playing around with a Catch-inspired [ratcc](https://github.com/Rantanen/ratcc) test framework, where I would have loved to to use a crate-level attribute to _alter_ the crate contents.\r\n\r\nAnd continuing on the test framework theme, they also came up in the eRFC discussion for custom test frameworks: https://github.com/catchorg/Catch2/blob/master/examples/010-TestCase.cpp\r\n\r\nGiven the amount of different panics I encountered in trying to work around the issues hints that they are currently far from supported. However the fact that an identity attribute works makes me hopeful that _if_ the parsing could be fixed so that a `TokenStream` could be parsed into an `ast::Crate` (or similar), then the rest of the macro pipeline would \"just work\".", "closed_by": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48066/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48066/timeline", "performed_via_github_app": null, "state_reason": "completed"}