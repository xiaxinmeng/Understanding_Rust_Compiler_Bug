{"url": "https://api.github.com/repos/rust-lang/rust/issues/70779", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70779/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70779/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70779/events", "html_url": "https://github.com/rust-lang/rust/issues/70779", "id": 593962892, "node_id": "MDU6SXNzdWU1OTM5NjI4OTI=", "number": 70779, "title": "Generate better memcpy code for types with alignment padding", "user": {"login": "reinerp", "id": 777239, "node_id": "MDQ6VXNlcjc3NzIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/777239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reinerp", "html_url": "https://github.com/reinerp", "followers_url": "https://api.github.com/users/reinerp/followers", "following_url": "https://api.github.com/users/reinerp/following{/other_user}", "gists_url": "https://api.github.com/users/reinerp/gists{/gist_id}", "starred_url": "https://api.github.com/users/reinerp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reinerp/subscriptions", "organizations_url": "https://api.github.com/users/reinerp/orgs", "repos_url": "https://api.github.com/users/reinerp/repos", "events_url": "https://api.github.com/users/reinerp/events{/privacy}", "received_events_url": "https://api.github.com/users/reinerp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-04T17:36:48Z", "updated_at": "2020-04-04T18:26:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider the type `S0` below, which has 9 bytes of payload data, but because of alignment requirements its size is 16 bytes. It implements `Copy`, so it can be cloned and copied by `memcpy`. rustc tends to emit 9-byte `memcpy` calls for it in several cases, even though it would be legal to emit `memcpy` calls of size anywhere between 9 bytes and 16 bytes. On x86-64, a 9-byte memcpy is 2x slower than a 16-byte memcpy: the former requires 2 loads and 2 stores, whereas the latter can use just 1 load and 1 store. It would be nice for Rust to emit the more efficient memcpy calls. Currently I'm working around this issue by manually padding my type up to 16 bytes of payload data, like in `S1`.\r\n\r\nCompare the generated assembly of `copy_s0` and `copy_s1`:\r\n\r\n```asm\r\nplayground::copy_s0:\r\n\tmovq\t(%rsi), %rax\r\n\tmovb\t8(%rsi), %cl\r\n\tmovq\t%rax, (%rdi)\r\n\tmovb\t%cl, 8(%rdi)\r\n\tretq\r\n\r\nplayground::copy_s1:\r\n\tmovups\t(%rsi), %xmm0\r\n\tmovups\t%xmm0, (%rdi)\r\n\tretq\r\n```\r\n\r\nSimilar issues show up for `clone_from_slice`.\r\n\r\n```rust\r\n#[derive(Clone, Copy)]\r\npub struct S0(u64, u8);\r\n\r\npub fn clone_s0(dst: &mut S0, src: &S0) {\r\n    *dst = src.clone();\r\n}\r\n\r\npub fn copy_s0(dst: &mut S0, src: &S0) {\r\n    *dst = *src;\r\n}\r\n\r\npub fn clone_s0_array(dst: &mut [S0; 8], src: & [S0; 8]) {\r\n    *dst = src.clone();\r\n}\r\n\r\npub fn copy_s0_array(dst: &mut [S0; 8], src: & [S0; 8]) {\r\n    *dst = *src;\r\n}\r\n\r\npub fn clone_s0_slice(dst: &mut [S0; 8], src: & [S0; 8]) {\r\n    dst.clone_from_slice(src);\r\n}\r\n\r\npub fn copy_s0_slice(dst: &mut [S0; 8], src: & [S0; 8]) {\r\n    dst.copy_from_slice(src);\r\n}\r\n\r\n#[derive(Clone, Copy)]\r\npub struct S1(u64, u8, [u8; 7]);\r\n\r\npub fn clone_s1(dst: &mut S1, src: &S1) {\r\n    *dst = src.clone();\r\n}\r\n\r\npub fn copy_s1(dst: &mut S1, src: &S1) {\r\n    *dst = *src;\r\n}\r\n\r\npub fn clone_s1_array(dst: &mut [S1; 8], src: & [S1; 8]) {\r\n    *dst = src.clone();\r\n}\r\n\r\npub fn copy_s1_array(dst: &mut [S1; 8], src: & [S1; 8]) {\r\n    *dst = *src;\r\n}\r\n\r\npub fn clone_s1_slice(dst: &mut [S1; 8], src: & [S1; 8]) {\r\n    dst.clone_from_slice(src);\r\n}\r\n\r\npub fn copy_s1_slice(dst: &mut [S1; 8], src: & [S1; 8]) {\r\n    dst.copy_from_slice(src);\r\n}\r\n\r\n\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=820411986f8028ac6ad00a93ac953898))", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70779/timeline", "performed_via_github_app": null, "state_reason": null}