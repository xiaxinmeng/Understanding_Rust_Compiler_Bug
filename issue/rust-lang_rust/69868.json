{"url": "https://api.github.com/repos/rust-lang/rust/issues/69868", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69868/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69868/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69868/events", "html_url": "https://github.com/rust-lang/rust/issues/69868", "id": 578201800, "node_id": "MDU6SXNzdWU1NzgyMDE4MDA=", "number": 69868, "title": "Detect introduction of deadlock by using `if lock.read()`/`else lock.write()` in the same expression", "user": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-09T21:28:09Z", "updated_at": "2020-03-10T15:54:34Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A coworker came across the following:\r\n\r\n```rust\r\nuse std::sync::RwLock;\r\nuse std::collections::HashMap;\r\n\r\nfn foo() {\r\n    let lock: RwLock<HashMap<u32, String>> = RwLock::new(HashMap::new());\r\n    \r\n    let test = if let Some(item) = lock.read().unwrap().get(&5) {\r\n        println!(\"its in there\");\r\n        item.clone()\r\n    } else { lock.write().unwrap().entry(5).or_insert(\" eggs\".to_string());\r\n        println!(\"ok we put it there\");\r\n        \" eggs\".to_string()\r\n    };\r\n    println!(\"There were {}\", test);\r\n}\r\n\r\nfn main() {\r\n    foo();\r\n}\r\n```\r\n\r\nThis code compiles, but it will deadlock because of the `lock.read().unwrap()` in the `if let` being kept alive until the end of the `foo` function. MIRI actually catches this, but it would be nice to have a lint against this kind of usage, given that it is a latent foot-gun.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69868/timeline", "performed_via_github_app": null, "state_reason": null}