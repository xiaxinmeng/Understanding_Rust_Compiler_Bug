{"url": "https://api.github.com/repos/rust-lang/rust/issues/90609", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90609/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90609/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90609/events", "html_url": "https://github.com/rust-lang/rust/issues/90609", "id": 1045911185, "node_id": "I_kwDOAAsO6M4-V1aR", "number": 90609, "title": "Range.contains failed to be inlined/optimized", "user": {"login": "senevoldsen", "id": 234546, "node_id": "MDQ6VXNlcjIzNDU0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/234546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/senevoldsen", "html_url": "https://github.com/senevoldsen", "followers_url": "https://api.github.com/users/senevoldsen/followers", "following_url": "https://api.github.com/users/senevoldsen/following{/other_user}", "gists_url": "https://api.github.com/users/senevoldsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/senevoldsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/senevoldsen/subscriptions", "organizations_url": "https://api.github.com/users/senevoldsen/orgs", "repos_url": "https://api.github.com/users/senevoldsen/repos", "events_url": "https://api.github.com/users/senevoldsen/events{/privacy}", "received_events_url": "https://api.github.com/users/senevoldsen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2021-11-05T14:29:14Z", "updated_at": "2022-02-19T15:00:48Z", "closed_at": "2022-02-19T15:00:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was suggested on Stack Overflow (https://stackoverflow.com/questions/69844819/rust-range-contains-failed-to-be-inlined-optimized) to ask here.\r\n\r\nI am aware that optimization in complex situations can fail to apply. However, rather straightforward inlining \"in the small\" should still apply.\r\n\r\nI was running my code through Clippy and it suggested changing the following:\r\n```rust\r\nconst SPECIAL_VALUE: u8 = 0; // May change eventually.\r\n\r\npub fn version1(value: u8) -> bool {\r\n    (value >= 1 && value <= 9) || value == SPECIAL_VALUE\r\n}\r\n```\r\nInto\r\n```rust\r\npub fn version2(value: u8) -> bool {\r\n    (1..=9).contains(&value) || value == SPECIAL_VALUE\r\n}\r\n```\r\nSince it is more readable. Unfortunately the resulting assembly output is twice as long, even with optimization level 3. Manually inlining it (2-nestings down), gives almost the same code as `version1` and is as efficient.\r\n```rust\r\npub fn manually_inlined(value: u8) -> bool {\r\n    (1 <= value && value <= 9) || value == SPECIAL_VALUE\r\n}\r\n```\r\nIf I remove the `|| value == SPECIAL_VALUE` they all resolve with the same (though with 1 more instruction added to decrement the parameter value before a compare). Also if I change `SPECIAL_VALUE` to something not adjacent to the range they all resolve to same assembly code as `version2`, which is the reason why I kept it `0` unless I eventually have to change it.\r\n\r\nI have a link to Godbolt with the code here: https://rust.godbolt.org/z/d9PWYEKc8\r\n\r\nWhy is the compiler failing to properly inline/optimize `version2`? Is it an \"optimization bug\"? Or am I misunderstanding some semantics of Rust, maybe something with the borrowing prevents the optimization, but can't the compiler assume no mutation of value due to the aliasing and referencing rules? Because the optimization is applied in `version1` it would suggest LLVM knows that because the value is unsigned it can simplify the comparison. So it may be that there is a missed optimization opportunity in the Rust frontend?\r\n\r\n\r\nTrying to do something similar in C++ gives the optimum short assembly in GCC but not in Clang https://godbolt.org/z/erYPYsvhf\r\n", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90609/timeline", "performed_via_github_app": null, "state_reason": "completed"}