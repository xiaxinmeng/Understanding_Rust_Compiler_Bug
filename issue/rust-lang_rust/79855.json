{"url": "https://api.github.com/repos/rust-lang/rust/issues/79855", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79855/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79855/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79855/events", "html_url": "https://github.com/rust-lang/rust/issues/79855", "id": 760389081, "node_id": "MDU6SXNzdWU3NjAzODkwODE=", "number": 79855, "title": "panicked at 'called `Option::unwrap()` on a `None` value', compiler/rustc_metadata/src/rmeta/decoder.rs", "user": {"login": "hstefan", "id": 341397, "node_id": "MDQ6VXNlcjM0MTM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/341397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hstefan", "html_url": "https://github.com/hstefan", "followers_url": "https://api.github.com/users/hstefan/followers", "following_url": "https://api.github.com/users/hstefan/following{/other_user}", "gists_url": "https://api.github.com/users/hstefan/gists{/gist_id}", "starred_url": "https://api.github.com/users/hstefan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hstefan/subscriptions", "organizations_url": "https://api.github.com/users/hstefan/orgs", "repos_url": "https://api.github.com/users/hstefan/repos", "events_url": "https://api.github.com/users/hstefan/events{/privacy}", "received_events_url": "https://api.github.com/users/hstefan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-12-09T14:42:23Z", "updated_at": "2020-12-09T21:46:55Z", "closed_at": "2020-12-09T21:46:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Code\r\n\r\nUnfortunately I don't think I would know how to isolate this properly, especially since the problem went away after a running cargo clean and rebuilding. For what it's worth, I had just modified my build.rs script which looked like this, and the change was that I refactor it into two functions for each generation step which were previously inlined under `fn main`. I also had introduced a type alias for `CompileResult`.\r\n\r\nSorry about being unable to provide much more detailed info, feel free to ask any questions about the set-up if it helps.\r\n\r\n```Rust\r\nuse glob;\r\nuse prost_build;\r\n\r\ntype CompileResult = Result<(), std::io::Error>;\r\n\r\nfn compile_company_protos() -> CompileResult {\r\n    prost_build::compile_protos(&[\"proto/company_v1.proto\"], &[\"proto/\"])\r\n}\r\n\r\nfn compile_vendored() -> CompileResult{\r\n    let vendored_paths: Vec<String> = glob::glob(\"proto/vendored/**/*.proto\")\r\n        .expect(\"Failed to glob files\")\r\n        .map(|x| x.unwrap().display().to_string())\r\n        .collect();\r\n    prost_build::compile_protos(&vendored_paths, &[\"proto/vendored\".to_owned()])\r\n}\r\n\r\nfn main() {\r\n    if let Err(e) = compile_company_protos() {\r\n        panic!(\"Failed to compile $Company protos:\\n{}\", e);\r\n    }\r\n    if let Err(e) = compile_vendored() {\r\n        panic!(\"Failed to compile vendored protos:\\n{}\", e);\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.50.0-nightly (3d6705aa5 2020-12-07)\r\nbinary: rustc\r\ncommit-hash: 3d6705aa5abffe94c83bf09af8c3ba3c599845fc\r\ncommit-date: 2020-12-07\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.50.0-nightly\r\n```\r\n\r\n### Error output\r\n\r\n```\r\n     Running `rustc --crate-name build_script_build --edition=2018 build.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C metadata=4d81dfae1d2a4aa9 -C extra-filename=-4d81dfae1d2a4aa9 --out-dir /home/stefanp/dev/ffwd-agent-rs/target/debug/build/ffwd-agent-rs-4d81dfae1d2a4aa9 -C incremental=/home/stefanp/dev/ffwd-agent-rs/target/debug/incremental -L dependency=/home/stefanp/dev/ffwd-agent-rs/target/debug/deps --extern glob=/home/stefanp/dev/ffwd-agent-rs/target/debug/deps/libglob-c57da5286c7fae6e.rlib --extern prost_build=/home/stefanp/dev/ffwd-agent-rs/target/debug/deps/libprost_build-fea39453bcd0be0c.rlib`\r\nthread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', compiler/rustc_metadata/src/rmeta/decoder.rs:1565:75\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.50.0-nightly (3d6705aa5 2020-12-07) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [normalize_generic_arg_after_erasing_regions] normalizing `bytes::buf::buf_impl::Buf::get_u64_le::SIZE`\r\n#1 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\nerror: could not compile `ffwd-agent-rs`\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name build_script_build --edition=2018 build.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C metadata=4d81dfae1d2a4aa9 -C extra-filename=-4d81dfae1d2a4aa9 --out-dir /home/stefanp/dev/ffwd-agent-rs/target/debug/build/ffwd-agent-rs-4d81dfae1d2a4aa9 -C incremental=/home/stefanp/dev/ffwd-agent-rs/target/debug/incremental -L dependency=/home/stefanp/dev/ffwd-agent-rs/target/debug/deps --extern glob=/home/stefanp/dev/ffwd-agent-rs/target/debug/deps/libglob-c57da5286c7fae6e.rlib --extern prost_build=/home/stefanp/dev/ffwd-agent-rs/target/debug/deps/libprost_build-fea39453bcd0be0c.rlib` (exit code: 101)\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\nI don't have the back trace as I didn't realize the problem would go away after `cargo clean`.\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79855/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79855/timeline", "performed_via_github_app": null, "state_reason": "completed"}