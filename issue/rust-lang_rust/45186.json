{"url": "https://api.github.com/repos/rust-lang/rust/issues/45186", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45186/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45186/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45186/events", "html_url": "https://github.com/rust-lang/rust/issues/45186", "id": 264379814, "node_id": "MDU6SXNzdWUyNjQzNzk4MTQ=", "number": 45186, "title": "[NLL] integrate liveness with inference", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 693664741, "node_id": "MDU6TGFiZWw2OTM2NjQ3NDE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mentor", "name": "E-needs-mentor", "color": "02e10c", "default": false, "description": "Call for participation: This issue is in need of a mentor."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/42", "html_url": "https://github.com/rust-lang/rust/milestone/42", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/42/labels", "id": 2915417, "node_id": "MDk6TWlsZXN0b25lMjkxNTQxNw==", "number": 42, "title": "NLL prototype", "description": "NLL prototype for All-Hands", "creator": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 27, "state": "closed", "created_at": "2017-11-15T20:57:55Z", "updated_at": "2018-08-04T03:41:20Z", "due_on": "2017-12-08T08:00:00Z", "closed_at": "2018-01-03T19:04:26Z"}, "comments": 5, "created_at": "2017-10-10T21:18:10Z", "updated_at": "2017-11-16T14:51:49Z", "closed_at": "2017-11-16T14:51:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Once https://github.com/rust-lang/rust/issues/44904 is fixed, the next step is to start adding constraints. I think that the liveness constraints are the easiest to add. These come in two forms. The first part are the constraints that are due to active uses, and the other are constraints due to drops.\r\n\r\nThe basic idea is this:\r\n\r\n- If at some point P a value V may be used again (excluding future drops):\r\n    - Then all lifetimes appearing in the type of V must be live at P.\r\n- If at some point P a value V may be dropped:\r\n    - Then all lifetimes appearing in the type of V **which are not marked as may-dangle** must be live at P.\r\n\r\nThat said, I think that, for this first issue, we should basically just ignore the special case of drop. In fact, we are going to want to make a few further refinements [as discussed here](https://github.com/nikomatsakis/nll-rfc/issues/42) -- in particular extending this code to consider not only liveness, but also which values are initialized. Let's ignore all of that for now and just get the basics up and going.\r\n\r\nAs it happens, we have some existing code for [computing which values are live, located here](https://github.com/rust-lang/rust/blob/ec016f80cf725a9c8a613cdcd2ac97588d5f9af2/src/librustc_mir/util/liveness.rs). Unfortunately, it has some limitations:\r\n\r\n- First off, it doesn't distinguish drops from other uses, but let's ignore that for now.\r\n    - In the prototype, distinguishing drops is done by having [two distinct bits](https://github.com/nikomatsakis/nll/blob/master/nll/src/liveness.rs#L18) that we track per variable. \r\n- Second, it only computes the liveness at basic block boundaries.\r\n    - We're going to need finer-grained information.\r\n    - The liveness code has the kind of \"classic\" setup of computing overall defs and uses for the entire basic block, then applying those.\r\n    - In the prototype, we use a slightly different setup, where we \r\n        1. have [one big bit-set storing all the things that are live on entry to a basic block](https://github.com/nikomatsakis/nll/blob/master/nll/src/liveness.rs#L55) -- we don't store the things live on exit, we can easily recompute that by unioning together the preds\r\n        2. have a function `walk()` that will tell you what is leave in between each action in a basic block:\r\n            - [it starts by taking the union of all things live in successors of the block](https://github.com/nikomatsakis/nll/blob/master/nll/src/liveness.rs#L139-L142)\r\n            - [invokes the callback to indicate the things live before the terminator starts](https://github.com/nikomatsakis/nll/blob/master/nll/src/liveness.rs#L145)\r\n            - [then it walks each action](https://github.com/nikomatsakis/nll/blob/master/nll/src/liveness.rs#L147):\r\n                - [adjusts the set of things live to account for the action's effects](https://github.com/nikomatsakis/nll/blob/master/nll/src/liveness.rs#L156-L167)\r\n                - [and invokes a callback with the intermediate result](https://github.com/nikomatsakis/nll/blob/master/nll/src/liveness.rs#L184)\r\n            - [then take the final result to update the set of things live on entry, if it changed](https://github.com/nikomatsakis/nll/blob/master/nll/src/liveness.rs#L128)\r\n\r\nI'm not sure if we want to take precisely the same approach with the liveness code or not. It's a convenient setup, in any case, since we can then re-use this same \"simulate\" code to compute the fixed-point and -- after the fixed-point is computed -- to find the live bits at any particular point within the basic block.\r\n\r\nAnyway, I have to run now, so I'll try to write up more mentoring notes later on.", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45186/timeline", "performed_via_github_app": null, "state_reason": "completed"}