{"url": "https://api.github.com/repos/rust-lang/rust/issues/60912", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60912/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60912/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60912/events", "html_url": "https://github.com/rust-lang/rust/issues/60912", "id": 445393166, "node_id": "MDU6SXNzdWU0NDUzOTMxNjY=", "number": 60912, "title": "MinGW: undefined reference to _imp___wassert", "user": {"login": "spl", "id": 54900, "node_id": "MDQ6VXNlcjU0OTAw", "avatar_url": "https://avatars.githubusercontent.com/u/54900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spl", "html_url": "https://github.com/spl", "followers_url": "https://api.github.com/users/spl/followers", "following_url": "https://api.github.com/users/spl/following{/other_user}", "gists_url": "https://api.github.com/users/spl/gists{/gist_id}", "starred_url": "https://api.github.com/users/spl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spl/subscriptions", "organizations_url": "https://api.github.com/users/spl/orgs", "repos_url": "https://api.github.com/users/spl/repos", "events_url": "https://api.github.com/users/spl/events{/privacy}", "received_events_url": "https://api.github.com/users/spl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 266005714, "node_id": "MDU6TGFiZWwyNjYwMDU3MTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-gnu", "name": "O-windows-gnu", "color": "6e6ec0", "default": false, "description": "Toolchain: GNU, Operating system: Windows"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-05-17T11:18:50Z", "updated_at": "2020-02-05T22:42:02Z", "closed_at": "2020-02-05T22:42:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a very particular set of circumstances that leads to the following error when compiling some C++ files and linking them into a Rust executable targeted at `stable-i686-pc-windows-gnu`:\r\n\r\n```\r\n$ cargo run -vv\r\n[...]\r\n  = note: C:\\...\\out\\libval.a(val.o): In function `ZN3val9do_assertEv':\r\n          C:\\....\\src\\val.h:8: undefined reference to `_imp___wassert'\r\n```\r\n\r\n**Summary**: I believe the Rust MinGW toolchain needs to be rebuilt or updated to include `_imp___wassert` (which I believe is the dynamically linked [`_wassert`](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/assert-macro-assert-wassert?view=vs-2019)).\r\n\r\nI used the repository https://github.com/spl/rust-assert-unicode-test on a [Windows VM](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/) with MSYS2 and MingW32 installed. Unfortunately, I could not reproduce the issue on [Travis-CI](https://travis-ci.com/spl/rust-assert-unicode-test/builds/112196125) or [AppVeyor](https://ci.appveyor.com/project/spl/rust-assert-unicode-test/builds/24614839), but it happens reliably on my VM. (I don't have MSVC installed, but I don't know if that's the reason.)\r\n\r\nThese are the key files:\r\n\r\n`src/val.h`:\r\n\r\n```c++\r\n#include <cassert>\r\nclass val {\r\n    int mv;\r\npublic:\r\n    val(int v) : mv(v) { }\r\n    void do_assert() { assert(mv > 0); }\r\n};\r\n```\r\n\r\n`src/val.cpp`:\r\n\r\n```c++\r\n#include \"val.h\"\r\nvoid use_val() {\r\n    val v(42);\r\n    v.do_assert();\r\n}\r\n```\r\n\r\n`build.rs`:\r\n\r\n```rust\r\nextern crate cc;\r\nfn main() {\r\n    println!(\"cargo:rerun-if-env-changed=UNICODE\");\r\n    let mut cfg = cc::Build::new();\r\n    if std::env::var_os(\"UNICODE\").is_some() {\r\n        cfg.define(\"UNICODE\", None);\r\n    }\r\n    cfg.file(\"src/val.cpp\").cpp(true).compile(\"libval.a\");\r\n}\r\n```\r\n\r\nFor context, here is the snippet that defines `assert()` in [`assert.h`](https://github.com/Alexpux/mingw-w64/blob/c7d4925fd55972ea5e71010888951db0fb35bdeb/mingw-w64-headers/crt/assert.h) from mingw-w64:\r\n\r\n```c\r\n#ifdef NDEBUG\r\n#if defined(_UNICODE) || defined(UNICODE)\r\n#define assert(_Expression) \\\r\n  (void) \\\r\n  ((!!(_Expression)) || \\\r\n    (_wassert(_CRT_WIDE(#_Expression),_CRT_WIDE(__FILE__),__LINE__),0))\r\n#else /* not unicode */\r\n#define assert(_Expression) \\\r\n  (void) \\\r\n  ((!!(_Expression)) || \\\r\n    (_assert(#_Expression,__FILE__,__LINE__),0))\r\n#endif /* _UNICODE||UNICODE */\r\n#endif /* !defined (NDEBUG) */\r\n```\r\n\r\nWith nothing in the environment, the build succeeds:\r\n\r\n```\r\n$ cargo build -vv\r\n[...]\r\n[rust-assert-unicode-test 0.1.0] running: \"g++.exe\" \"-O0\" \"-ffunction-sections\" \"-fdata-sections\" \"-g\" \"-fno-omit-frame-pointer\" \"-m32\" \"-Wall\" \"-Wextra\" \"-o\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\build\\\\rust-assert-unicode-test-...\\\\out\\\\src\\\\val.o\" \"-c\" \"src/val.cpp\"\r\n[...]\r\n```\r\n\r\nIt's useful to look at the symbols in the library:\r\n\r\n```\r\n$ nm target/debug/build/rust-assert-unicode-test-.../out/libval.a | grep assert\r\n00000000 r .eh_frame$_ZN3val9do_assertEv\r\n00000000 t .text$_ZN3val9do_assertEv\r\n         U __imp___assert\r\n00000000 T __ZN3val9do_assertEv\r\n```\r\n\r\nWith `-DUNICODE`, the build fails:\r\n\r\n```\r\n$ export UNICODE=-DUNICODE\r\n$ cargo build -vv\r\nerror: linking with `gcc` failed: exit code: 1\r\n  |\r\n  = note: \"gcc\" \"-Wl,--enable-long-section-names\" \"-fno-use-linker-plugin\" \"-Wl,--nxcompat\" \"-nostdlib\" \"-Wl,--large-address-aware\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\crt2.o\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\rsbegin.o\" \"-L\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\deps\\\\rust_assert_unicode_test-....1y0whtr9r0u7l2ur.rcgu.o\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\deps\\\\rust_assert_unicode_test-....24fzsbft0yc0w6fe.rcgu.o\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\deps\\\\rust_assert_unicode_test-....2b0sh6ymgfums8kn.rcgu.o\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\deps\\\\rust_assert_unicode_test-....3vrz8j8szp1mh8k8.rcgu.o\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\deps\\\\rust_assert_unicode_test-....4mut1jzgau8wqplt.rcgu.o\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\deps\\\\rust_assert_unicode_test-....599jfg9iyzg2frg1.rcgu.o\" \"-o\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\deps\\\\rust_assert_unicode_test-....exe\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\deps\\\\rust_assert_unicode_test-....phl7t4fk0vvdm4y.rcgu.o\" \"-Wl,--gc-sections\" \"-nodefaultlibs\" \"-L\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\deps\" \"-L\" \"C:\\\\...\\\\rust-assert-unicode-test\\\\target\\\\debug\\\\build\\\\rust-assert-unicode-test-...\\\\out\" \"-L\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\" \"-Wl,-Bstatic\" \"-Wl,--whole-archive\" \"-lval\" \"-Wl,--no-whole-archive\" \"-Wl,-Bdynamic\" \"-lstdc++\" \"-Wl,--start-group\" \"-Wl,-Bstatic\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\libstd-352224e4f0f52495.rlib\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\libpanic_unwind-1df48bb698babe0f.rlib\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\libbacktrace_sys-e33d2aecefe6e52a.rlib\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\libunwind-6cd6f50b682d440b.rlib\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\librustc_demangle-f70dc1fec692eefd.rlib\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\liblibc-659fb6a5c340607f.rlib\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\liballoc-9d1d98d6712272cf.rlib\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\librustc_std_workspace_core-899502000089d7f2.rlib\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\libcore-dcb03e66209691e3.rlib\" \"-Wl,--end-group\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\libcompiler_builtins-d3bba173fb7c9a29.rlib\" \"-Wl,-Bdynamic\" \"-ladvapi32\" \"-lws2_32\" \"-luserenv\" \"-Wl,-Bstatic\" \"-lgcc_eh\" \"-lpthread\" \"-Wl,-Bdynamic\" \"-lmingwex\" \"-lmingw32\" \"-lgcc\" \"-lmsvcrt\" \"-lmsvcrt\" \"-luser32\" \"-lkernel32\" \"C:\\\\...\\\\.rustup\\\\toolchains\\\\stable-i686-pc-windows-gnu\\\\lib\\\\rustlib\\\\i686-pc-windows-gnu\\\\lib\\\\rsend.o\"\r\n  = note: C:\\...\\rust-assert-unicode-test\\target\\debug\\build\\rust-assert-unicode-test-...\\out\\libval.a(val.o): In function `ZN3val9do_assertEv':\r\n          C:\\...\\rust-assert-unicode-test/src/val.h:8: undefined reference to `_imp___wassert'\r\n```\r\n\r\nLooking at the symbols in the library confirms that `_imp___wassert` is there (and that `__imp___assert` is not, as would be expected):\r\n\r\n```\r\n$ nm target/debug/build/rust-assert-unicode-test-.../out/libval.a | grep assert\r\n00000000 r .eh_frame$_ZN3val9do_assertEv\r\n00000000 t .text$_ZN3val9do_assertEv\r\n         U __imp___wassert\r\n00000000 T __ZN3val9do_assertEv\r\n```\r\n\r\nOne way to work around this issue is to link directly to the MinGW `msvcrt` library:\r\n\r\n```\r\n$ RUSTFLAGS=\"-Clink-arg=C:/msys32/mingw32/i686-w64-mingw32/lib/libmsvcrt.a\" cargo build -vv\r\n```\r\n\r\nLooking at what was linked with [Process Monitor](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon), I found that the bundled `msvcrt` library was being used. And, indeed, that library is missing `__imp___wassert`:\r\n\r\n```\r\n$ nm C:/.../.rustup/toolchains/stable-i686-pc-windows-gnu/lib/rustlib/i686-pc-windows-gnu/lib/libmsvcrt.a | grep assert\r\n00000000 I __imp___assert\r\n```\r\n\r\nLooking at the symbols in MinGW's `msvcrt`, I can now see why linking to it works:\r\n\r\n```\r\n$ nm C:/msys32/mingw32/i686-w64-mingw32/lib/libmsvcrt.a | grep assert\r\n00000000 T __assert\r\n00000000 I __imp___assert\r\nlib32_libmsvcrt_os_a-wassert.o:\r\n         U __assert\r\n00000000 D __imp___wassert\r\n000000d0 t _init_wassert\r\n00000000 t _mingw_wassert\r\n```\r\n\r\nThere are no definitions of the `__imp___wassert` symbol in `C:/.../.rustup/toolchains/stable-i686-pc-windows-gnu/lib/rustlib/i686-pc-windows-gnu/lib/*.a`.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60912/timeline", "performed_via_github_app": null, "state_reason": "completed"}