{"url": "https://api.github.com/repos/rust-lang/rust/issues/44285", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44285/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44285/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44285/events", "html_url": "https://github.com/rust-lang/rust/issues/44285", "id": 254864911, "node_id": "MDU6SXNzdWUyNTQ4NjQ5MTE=", "number": 44285, "title": "MIR optimization tracking issue.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37977651, "node_id": "MDU6TGFiZWwzNzk3NzY1MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/metabug", "name": "metabug", "color": "5319e7", "default": false, "description": "Issues about issues themselves (\"bugs about bugs\")"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-09-03T09:58:51Z", "updated_at": "2022-04-28T15:00:29Z", "closed_at": "2022-04-28T15:00:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As all efforts have more stalled, I'll use this to note down some ideas (cc @rust-lang/compiler):\r\n\r\n* [ ] `rustc_mir::expand`: take a MIR fragment (e.g. an intrinsic call) and *lazily* emit another MIR fragment which is the equivalent expansion\r\n* [ ] `rustc_mir::reduce`: generalized dataflow toolkit for writing localized transformations which *must* cause dataflow information to converge, and thus can be run until fixpoint\r\n  * this will require require a lot of design work if we want to pull it off, at least for anything more than constant folding and CFG simplification\r\n  * similar to `expand` but instead of (just) emitting a MIR fragment, a few blessed mutations (somewhat like @arielb1's patch tools) could be allowed, which are interpreted by the dataflow toolkit with minimal recomputation\r\n* [ ] extract and cache the points of the CFG through which dataflow *might* change during iterations (e.g. loop bodies and the backedges pointing to them) to minimize the copies of the dataflow state that must be kept around - that is, a function with no loops should complete forward dataflow with no per-block state caching (assuming RPO traversal)\r\n  * would allow keeping more than plain bits without worrying as much about memory usage\r\n  * could let us switch to EBBs without caching the non-EBB CFG, which is what @Mark-Simulacrum hit when he attempted EBBs\r\n* [x] [#44308] ~~use `Local` instead of `Operand` for index projections, so that `Lvalue` stops being a tree~~\r\n* [x] [#44308] ~~use `Local` instead of `Lvalue` in `Storage{Live,Dead}`~~\r\n* [ ] compress some lvalues (field/const-index paths) into `[u8; 8]` / `u64` for `O(1)` dataflow lookup or even on-the-fly SROA\r\n* [x] [#46142] ~~split `Operand::Consume` into copies and moves, the latter invalidating all borrows~~\r\n* [ ] last-use analysis to turn the last copy of an unborrowed local into a move\r\n  * MIR borrowck could do more here, at least in safe code\r\n* [ ] shrink/regenerate live ranges based on moves\r\n* [ ] propagate destinations backwards (and sources forward?) through moves\r\n* [ ] remove `Rvalue::Aggregate` in favor of field assignment and `SetDiscriminant`\r\n  * `SetDiscriminant(0)` on non-enums can be pruned after borrowck runs\r\n* [ ] track fields and overlaps within a local, in def-use chains\r\n* [x] [#63420] ~~`mir::Place` should not be a recursive datastructure (https://paper.dropbox.com/doc/Place-2.0-current-PR-status--AYpEHnZVlMVhug5z7XDxiqgbAg-vmbnFv8VkCEuL57QfWWMH)~~\r\n* [ ] Make `Deref` not a place projection (https://paper.dropbox.com/doc/Place-2.0--AYrQzvo5k2eL2v57XD__sDrZAg-9NjhX4N9I3dEt6YCJM8Ln)\r\n* [ ] Make `Index` not a place projection (https://paper.dropbox.com/doc/Place-2.0--AYrQzvo5k2eL2v57XD__sDrZAg-9NjhX4N9I3dEt6YCJM8Ln)", "closed_by": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44285/reactions", "total_count": 6, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44285/timeline", "performed_via_github_app": null, "state_reason": "completed"}