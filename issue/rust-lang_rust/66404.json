{"url": "https://api.github.com/repos/rust-lang/rust/issues/66404", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66404/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66404/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66404/events", "html_url": "https://github.com/rust-lang/rust/issues/66404", "id": 522641296, "node_id": "MDU6SXNzdWU1MjI2NDEyOTY=", "number": 66404, "title": "Feature request: Add a wrapper around fexecve", "user": {"login": "danieldulaney", "id": 12433940, "node_id": "MDQ6VXNlcjEyNDMzOTQw", "avatar_url": "https://avatars.githubusercontent.com/u/12433940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldulaney", "html_url": "https://github.com/danieldulaney", "followers_url": "https://api.github.com/users/danieldulaney/followers", "following_url": "https://api.github.com/users/danieldulaney/following{/other_user}", "gists_url": "https://api.github.com/users/danieldulaney/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldulaney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldulaney/subscriptions", "organizations_url": "https://api.github.com/users/danieldulaney/orgs", "repos_url": "https://api.github.com/users/danieldulaney/repos", "events_url": "https://api.github.com/users/danieldulaney/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldulaney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-14T05:53:23Z", "updated_at": "2019-11-16T13:41:31Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "`fexecve` is a little-known but very useful Unix (POSIX-2008, implemented on [Linux](https://linux.die.net/man/3/fexecve) and [BSD](https://www.freebsd.org/cgi/man.cgi?query=fexecve&apropos=0&sektion=0&manpath=FreeBSD+12.1-RELEASE+and+Ports&arch=default&format=html)) library function that works just like `execve`, but based on a file descriptor instead of a file name. It would fit nicely into the [`std::os::unix::process::CommandExt`](https://doc.rust-lang.org/std/os/unix/process/trait.CommandExt.html) trait.\r\n\r\nIt could be added inside `CommandExt` as `fn new_fd(file: &mut File) -> Self` or as `unsafe fn new_fd(fd: RawFd) -> Self`.\r\n\r\nOutstanding questions include:\r\n- Should the API call accept a `File` or a `RawFd`?\r\n\r\nPotential issues include:\r\n- The Linux man page mentions that it may fail on systems without `/proc` (no mention on the OpenBSD manpage).\r\n- The behavior can be emulated fairly easily (though potentially not zero-cost) by using the existing process spawning features with `/proc/{pid}/fd/{fd}` as the path.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66404/timeline", "performed_via_github_app": null, "state_reason": null}