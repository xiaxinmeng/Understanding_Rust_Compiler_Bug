{"url": "https://api.github.com/repos/rust-lang/rust/issues/48290", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48290/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48290/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48290/events", "html_url": "https://github.com/rust-lang/rust/issues/48290", "id": 297976866, "node_id": "MDU6SXNzdWUyOTc5NzY4NjY=", "number": 48290, "title": "Confusing Error Message with Impl Trait in E0308", "user": {"login": "WalkerCodeRanger", "id": 186398, "node_id": "MDQ6VXNlcjE4NjM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/186398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WalkerCodeRanger", "html_url": "https://github.com/WalkerCodeRanger", "followers_url": "https://api.github.com/users/WalkerCodeRanger/followers", "following_url": "https://api.github.com/users/WalkerCodeRanger/following{/other_user}", "gists_url": "https://api.github.com/users/WalkerCodeRanger/gists{/gist_id}", "starred_url": "https://api.github.com/users/WalkerCodeRanger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WalkerCodeRanger/subscriptions", "organizations_url": "https://api.github.com/users/WalkerCodeRanger/orgs", "repos_url": "https://api.github.com/users/WalkerCodeRanger/repos", "events_url": "https://api.github.com/users/WalkerCodeRanger/events{/privacy}", "received_events_url": "https://api.github.com/users/WalkerCodeRanger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-02-17T04:02:55Z", "updated_at": "2023-01-08T07:47:02Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "While trying out the new impl trait feature #34511, I wrote some incorrect code. The error message was confusing to me. I've simplified the code and in the process found a very similar error message that is much clearer.  My example shows both.\r\n\r\nThe code (which can be run in the [playground](https://play.rust-lang.org) on nightly):\r\n```rust\r\n#![feature(conservative_impl_trait)]\r\n\r\nuse std::iter;\r\n\r\nfn mask<T: Iterator<Item = i32>>(iter: T) -> impl Iterator<Item = i32> {\r\n    return iter;\r\n}\r\n\r\n// this compile error clearly indicated the role of the impl trait\r\nfn test_clear_error_message(condition: bool) -> impl Iterator<Item = i32> {\r\n    if condition {\r\n        mask(iter::once(23))\r\n    } else {\r\n        mask(1..23)\r\n    }\r\n}\r\n\r\n// this error message is confusing because the compiler has inferred through\r\n// the impl trait, but gives no indication it has done so\r\nfn test_confusing_error_message(condition: bool) -> impl Iterator<Item = i32> {\r\n    if condition {\r\n        return mask(iter::once(23));\r\n    }\r\n    mask(1..23)\r\n}\r\n\r\nfn main() {\r\n    test_clear_error_message(true);\r\n    test_confusing_error_message(true);\r\n}\r\n```\r\n\r\nThe first error message is clear. It indicates that impl trait types are involved and that it has figured out what their underlying types are with this nice notation `` `impl std::iter::Iterator` (struct `std::iter::Once`)``.\r\n\r\n```\r\nerror[E0308]: if and else have incompatible types\r\n  --> src/main.rs:11:5\r\n   |\r\n11 | /     if condition {\r\n12 | |         mask(iter::once(23))\r\n13 | |     } else {\r\n14 | |         mask(1..23)\r\n15 | |     }\r\n   | |_____^ expected struct `std::iter::Once`, found struct `std::ops::Range`\r\n   |\r\n   = note: expected type `impl std::iter::Iterator` (struct `std::iter::Once`)\r\n              found type `impl std::iter::Iterator` (struct `std::ops::Range`)\r\n```\r\n\r\nThe second error message is the confusing one. I understand that the compiler has inferred the types and that the types the error message names are not impl trait types.  However, it's surprising that the real types are leaking out. I feel like the error message needs to indicate that the inference has passed through the impl trait types. I imagine that something similar could happen in a case where one of the two types was coming from code in a third-party crate. That would be very confusing.\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:24:10\r\n   |\r\n24 |     mask(1..23)\r\n   |          ^^^^^ expected struct `std::iter::Once`, found struct `std::ops::Range`\r\n   |\r\n   = note: expected type `std::iter::Once<i32>`\r\n              found type `std::ops::Range<{integer}>`\r\n```\r\n\r\n## Compiler Version\r\n```\r\n>rustc --version --verbose\r\nrustc 1.25.0-nightly (3ec5a99aa 2018-02-14)\r\nbinary: rustc\r\ncommit-hash: 3ec5a99aaa0084d97a9e845b34fdf03d1462c475\r\ncommit-date: 2018-02-14\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.25.0-nightly\r\nLLVM version: 6.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48290/timeline", "performed_via_github_app": null, "state_reason": null}