{"url": "https://api.github.com/repos/rust-lang/rust/issues/111241", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111241/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111241/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111241/events", "html_url": "https://github.com/rust-lang/rust/issues/111241", "id": 1697301640, "node_id": "I_kwDOAAsO6M5lKsSI", "number": 111241, "title": "Suggest use Enum::* when it is likely users intent.", "user": {"login": "tomas789", "id": 2953646, "node_id": "MDQ6VXNlcjI5NTM2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2953646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomas789", "html_url": "https://github.com/tomas789", "followers_url": "https://api.github.com/users/tomas789/followers", "following_url": "https://api.github.com/users/tomas789/following{/other_user}", "gists_url": "https://api.github.com/users/tomas789/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomas789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomas789/subscriptions", "organizations_url": "https://api.github.com/users/tomas789/orgs", "repos_url": "https://api.github.com/users/tomas789/repos", "events_url": "https://api.github.com/users/tomas789/events{/privacy}", "received_events_url": "https://api.github.com/users/tomas789/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-05-05T09:32:06Z", "updated_at": "2023-05-05T20:30:27Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\n\n```Rust\n// use Color::*;\r\n\r\n#[allow(dead_code)]\r\nenum Color {\r\n  Red,\r\n  Green,\r\n  Blue\r\n}\r\n\r\nimpl Color {\r\n  fn name(self) -> &'static str {\r\n    match self {\r\n      Red => \"red color\",\r\n      Green => \"green color\",\r\n      Blue => \"blue color\"\r\n    }\r\n  }\r\n}\r\n\r\nfn main() {\r\n  let color = Color::Red;\r\n  println!(\"You have {}.\", color.name());\r\n}\n```\n\n\n### Current output\n\n```Shell\n\u279c  test git:(main) \u2717 rustc test.rs \r\nerror[E0170]: pattern binding `Red` is named the same as one of the variants of the type `Color`\r\n  --> test.rs:13:7\r\n   |\r\n13 |       Red => \"red color\",\r\n   |       ^^^ help: to match on the variant, qualify the path: `Color::Red`\r\n   |\r\n   = note: `#[deny(bindings_with_variant_name)]` on by default\r\n\r\nerror[E0170]: pattern binding `Green` is named the same as one of the variants of the type `Color`\r\n  --> test.rs:14:7\r\n   |\r\n14 |       Green => \"green color\",\r\n   |       ^^^^^ help: to match on the variant, qualify the path: `Color::Green`\r\n\r\nerror[E0170]: pattern binding `Blue` is named the same as one of the variants of the type `Color`\r\n  --> test.rs:15:7\r\n   |\r\n15 |       Blue => \"blue color\"\r\n   |       ^^^^ help: to match on the variant, qualify the path: `Color::Blue`\r\n\r\nwarning: unreachable pattern\r\n  --> test.rs:14:7\r\n   |\r\n13 |       Red => \"red color\",\r\n   |       --- matches any value\r\n14 |       Green => \"green color\",\r\n   |       ^^^^^ unreachable pattern\r\n   |\r\n   = note: `#[warn(unreachable_patterns)]` on by default\r\n\r\nwarning: unreachable pattern\r\n  --> test.rs:15:7\r\n   |\r\n13 |       Red => \"red color\",\r\n   |       --- matches any value\r\n14 |       Green => \"green color\",\r\n15 |       Blue => \"blue color\"\r\n   |       ^^^^ unreachable pattern\r\n\r\nwarning: unused variable: `Red`\r\n  --> test.rs:13:7\r\n   |\r\n13 |       Red => \"red color\",\r\n   |       ^^^ help: if this is intentional, prefix it with an underscore: `_Red`\r\n   |\r\n   = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: unused variable: `Green`\r\n  --> test.rs:14:7\r\n   |\r\n14 |       Green => \"green color\",\r\n   |       ^^^^^ help: if this is intentional, prefix it with an underscore: `_Green`\r\n\r\nwarning: unused variable: `Blue`\r\n  --> test.rs:15:7\r\n   |\r\n15 |       Blue => \"blue color\"\r\n   |       ^^^^ help: if this is intentional, prefix it with an underscore: `_Blue`\r\n\r\nwarning: variable `Red` should have a snake case name\r\n  --> test.rs:13:7\r\n   |\r\n13 |       Red => \"red color\",\r\n   |       ^^^ help: convert the identifier to snake case: `red`\r\n   |\r\n   = note: `#[warn(non_snake_case)]` on by default\r\n\r\nwarning: variable `Green` should have a snake case name\r\n  --> test.rs:14:7\r\n   |\r\n14 |       Green => \"green color\",\r\n   |       ^^^^^ help: convert the identifier to snake case: `green`\r\n\r\nwarning: variable `Blue` should have a snake case name\r\n  --> test.rs:15:7\r\n   |\r\n15 |       Blue => \"blue color\"\r\n   |       ^^^^ help: convert the identifier to snake case: `blue`\r\n\r\nerror: aborting due to 3 previous errors; 8 warnings emitted\r\n\r\nFor more information about this error, try `rustc --explain E0170`.\n```\n\n\n### Desired output\n\n```Shell\nerror[E0170]: pattern binding `Red` is named the same as one of the variants of the type `Color`\r\n  --> test.rs:13:7\r\n   |\r\n13 |       Red => \"red color\",\r\n   |       ^^^ help: to match on the variant, add `use Color::*` to the file\r\n   |\r\n   = note: `#[deny(bindings_with_variant_name)]` on by default\r\n   = note: Alternatively a recommended solution is to qualify each variant as `Color::Red`.\n```\n\n\n### Rationale and extra context\n\nThere are multiple ways to resolve the issue. In my case the code was copy-pasted and I wanted to add the `use Color::*` but I forgot about it. The enum was much bigger and I was flooded with warnings. The solution I wanted to do was not in the warnings.\r\n\r\nMy suggestion is to \r\n - Compress those warnings to a single one and have a note that this problem is repeated for other cases.\r\n - When all of the cases are used as unqualified I probably did not mean to do `Color::Red` but `use Color::*` instead.\r\n\r\nThe `use Color::*` solution is not recommended but this snippet suggests that it is actually something that the user wanted to do so it might be a good idea to lean into it and give a helping hand instead.\n\n### Other cases\n\n_No response_\n\n### Anything else?\n\nrustc 1.71.0-nightly (74c482104 2023-05-04)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111241/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111241/timeline", "performed_via_github_app": null, "state_reason": null}