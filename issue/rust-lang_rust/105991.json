{"url": "https://api.github.com/repos/rust-lang/rust/issues/105991", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105991/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105991/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105991/events", "html_url": "https://github.com/rust-lang/rust/issues/105991", "id": 1506075792, "node_id": "I_kwDOAAsO6M5ZxOSQ", "number": 105991, "title": "Are dwp files the right choice for split-debuginfo=packed on Linux?", "user": {"login": "mstange", "id": 961291, "node_id": "MDQ6VXNlcjk2MTI5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/961291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstange", "html_url": "https://github.com/mstange", "followers_url": "https://api.github.com/users/mstange/followers", "following_url": "https://api.github.com/users/mstange/following{/other_user}", "gists_url": "https://api.github.com/users/mstange/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstange/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstange/subscriptions", "organizations_url": "https://api.github.com/users/mstange/orgs", "repos_url": "https://api.github.com/users/mstange/repos", "events_url": "https://api.github.com/users/mstange/events{/privacy}", "received_events_url": "https://api.github.com/users/mstange/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2022-12-21T10:30:29Z", "updated_at": "2023-04-05T17:44:01Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "@davidtwco @bjorn3 @philipc @Gankra @khuey \r\n\r\nHi all,\r\nI was reading up on split dwarf and DWP files and came away rather confused.\r\n\r\nWhat is a situation in which using split dwarf + DWP is preferable over the traditional way of splitting an ELF file into a binary and a debug file with the help of `objcopy --only-keep-debug`?\r\n\r\nIt seems to me that DWP files don't address either of these situations:\r\n\r\n 1. For local development I want fast builds, and I don't mind keeping around a whole lot of intermediate files in order to have a working debugger.\r\n 2. For releases I want a small binary and a single redistributable debug file.\r\n\r\nOn macOS and Windows, `split-debuginfo=packed` addresses the second case. The binary is small because all debug information has been removed from it. And the binary contains an ID (and on Windows also a file path) which allows looking up the debug file (i.e. the PDB file / dSYM bundle). I can drop the debug file in a big directory with the debug files from all my other releases, and it's easy to find the right one for a given binary based on its ID; on Windows I can even put the PDB file on a symbol server and my debugger will find it based on the information in the binary. Also, if I want to look up symbol information for an address, for example for a crash stack, I can get it from the debug file and don't need the binary.\r\n\r\nDWP files do not appear to address the second use case at all:\r\n\r\n - The binary still contains a small amount of debug information (e.g. \"skeleton units\"). This information is needed to make sense of the information in the DWP file. So the binary is not as small as it could be. It also contains the debug information for the Rust standard library, which is not moved into the DWP file. If I want to strip off the debug information from the binary, I end up with three files: The stripped binary, the file with the skeleton + std debug information, and the DWP file.\r\n - The binary does not contain a pointer to the DWP file. It contains DWO IDs and paths to the original DWO files, but the point of the DWP file is that I shouldn't need those DWO files. So those paths are not useful. It sounds like `gdb` expects the DWP file to be located in the same directory as the binary, with the binary's filename plus a `.dwp` extension. If I have a binary and a corresponding DWP file, at least I can validate that it's the correct DWP file by checking for matching DWO IDs, I think.\r\n - Because the DWP file is identified by being in the same directory as the binary, I cannot drop it into a big directory with my other symbol files.\r\n - I cannot use a DWP file on a symbol server, for example with debuginfod, because afaik the DWP file has no build ID.\r\n - To resolve the symbol / debug info for an address, the DWP file is not sufficient on its own; I have to consult both the binary with the skeleton units + std debug info, as well as the DWP file.\r\n\r\nPlease correct me if any of the above is incorrect. I'm basing these statements on my read of the [DebugFissionDWP document](https://gcc.gnu.org/wiki/DebugFissionDWP) and on the fact that gimli's dwarfdump example [requires the `--dwp` argument to be paired with a `--dwo-parent` argument](https://github.com/gimli-rs/gimli/blame/059c553fe73abba2b52b56983c32b7f33484629d/examples/dwarfdump.rs#L516-L519). I haven't read the DWARF 5 spec yet, and I might also be mixing up GNU extension dwp with DWARF 5 dwp.\r\n\r\nAnyway, all of this leaves me wondering whether it would have a better choice to make `split-debuginfo=packed` behave in the \"Linux distro packager\" way: Compile everything *without* split dwarf, and then run the commands from https://github.com/rust-lang/rust/issues/34651#issuecomment-1253008705 to split the resulting file into a binary and a `.debug` file. This would satisfy all the use cases I listed above:\r\n\r\n - The binary contains no debug information.\r\n - The binary and the debug file have the same ELF build ID.\r\n - The binary contains a \"debuglink\" with the filename of the debug file.\r\n - I can put the debug file on a debuginfod server, and it is found by gdb / perf / etc. by its build ID.\r\n - To symbolicate an address, I only need the debug file.\r\n\r\nAlso, just to clarify, I think split dwarf is perfectly fine for `split-debuginfo=unpacked`. My issue is only with `split-debuginfo=packed`.\r\n\r\nThoughts?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105991/reactions", "total_count": 5, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 4}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105991/timeline", "performed_via_github_app": null, "state_reason": null}