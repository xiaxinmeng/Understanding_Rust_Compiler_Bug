{"url": "https://api.github.com/repos/rust-lang/rust/issues/96221", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96221/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96221/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96221/events", "html_url": "https://github.com/rust-lang/rust/issues/96221", "id": 1208711900, "node_id": "I_kwDOAAsO6M5IC3rc", "number": 96221, "title": "For enums with ScalarPair ABI, some variants have Aggregate ABI", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-04-19T18:34:01Z", "updated_at": "2022-05-10T10:53:54Z", "closed_at": "2022-05-10T10:53:54Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I noticed this while working on https://github.com/rust-lang/rust/issues/96185: I added the following sanity check in Miri's `operand_downcast`:\r\n```diff\r\n--- a/compiler/rustc_const_eval/src/interpret/operand.rs\r\n+++ b/compiler/rustc_const_eval/src/interpret/operand.rs\r\n@@ -441,6 +441,14 @@ pub fn operand_downcast(\r\n                 // (In particular, no check about whether this is even the active variant -- that's by design,\r\n                 // see https://github.com/rust-lang/rust/issues/93688#issuecomment-1032929496.)\r\n                 let layout = op.layout.for_variant(self, variant);\r\n+                if matches!(op.layout.abi, Abi::ScalarPair { .. }) {\r\n+                    assert!(\r\n+                        matches!(layout.abi, Abi::ScalarPair { .. } | Abi::Scalar { .. }),\r\n+                        \"downcast to {variant:?} turned ScalarPair layout into non-scalar layout: {:#?} to {:#?}\",\r\n+                        op.layout,\r\n+                        layout,\r\n+                    );\r\n+                }\r\n                 OpTy { layout, ..*op }\r\n             }\r\n         })\r\n```\r\nThis assertion indeed fails. When downcasting `std::option::Option<*mut std::ffi::c_void>` to variant 1, the ABI changes from `ScalarPair` to `Aggegreate`.\r\n\r\n<details>\r\n\r\n```\r\ndowncast to 1 turned ScalarPair layout into non-scalar layout: TyAndLayout {\r\n    ty: std::option::Option<*mut std::ffi::c_void>,\r\n    layout: Layout {\r\n        fields: Arbitrary {\r\n            offsets: [\r\n                Size {\r\n                    raw: 0,\r\n                },\r\n            ],\r\n            memory_index: [\r\n                0,\r\n            ],\r\n        },\r\n        variants: Multiple {\r\n            tag: Initialized {\r\n                value: Int(\r\n                    I64,\r\n                    false,\r\n                ),\r\n                valid_range: 0..=1,\r\n            },\r\n            tag_encoding: Direct,\r\n            tag_field: 0,\r\n            variants: [\r\n                Layout {\r\n                    fields: Arbitrary {\r\n                        offsets: [],\r\n                        memory_index: [],\r\n                    },\r\n                    variants: Single {\r\n                        index: 0,\r\n                    },\r\n                    abi: Aggregate {\r\n                        sized: true,\r\n                    },\r\n                    largest_niche: None,\r\n                    align: AbiAndPrefAlign {\r\n                        abi: Align {\r\n                            pow2: 0,\r\n                        },\r\n                        pref: Align {\r\n                            pow2: 3,\r\n                        },\r\n                    },\r\n                    size: Size {\r\n                        raw: 8,\r\n                    },\r\n                },\r\n                Layout {\r\n                    fields: Arbitrary {\r\n                        offsets: [\r\n                            Size {\r\n                                raw: 8,\r\n                            },\r\n                        ],\r\n                        memory_index: [\r\n                            0,\r\n                        ],\r\n                    },\r\n                    variants: Single {\r\n                        index: 1,\r\n                    },\r\n                    abi: Aggregate {\r\n                        sized: true,\r\n                    },\r\n                    largest_niche: None,\r\n                    align: AbiAndPrefAlign {\r\n                        abi: Align {\r\n                            pow2: 3,\r\n                        },\r\n                        pref: Align {\r\n                            pow2: 3,\r\n                        },\r\n                    },\r\n                    size: Size {\r\n                        raw: 16,\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n        abi: ScalarPair(\r\n            Initialized {\r\n                value: Int(\r\n                    I64,\r\n                    false,\r\n                ),\r\n                valid_range: 0..=1,\r\n            },\r\n            Initialized {\r\n                value: Pointer,\r\n                valid_range: 0..=18446744073709551615,\r\n            },\r\n        ),\r\n        largest_niche: Some(\r\n            Niche {\r\n                offset: Size {\r\n                    raw: 0,\r\n                },\r\n                value: Int(\r\n                    I64,\r\n                    false,\r\n                ),\r\n                valid_range: 0..=1,\r\n            },\r\n        ),\r\n        align: AbiAndPrefAlign {\r\n            abi: Align {\r\n                pow2: 3,\r\n            },\r\n            pref: Align {\r\n                pow2: 3,\r\n            },\r\n        },\r\n        size: Size {\r\n            raw: 16,\r\n        },\r\n    },\r\n} to TyAndLayout {\r\n    ty: std::option::Option<*mut std::ffi::c_void>,\r\n    layout: Layout {\r\n        fields: Arbitrary {\r\n            offsets: [\r\n                Size {\r\n                    raw: 8,\r\n                },\r\n            ],\r\n            memory_index: [\r\n                0,\r\n            ],\r\n        },\r\n        variants: Single {\r\n            index: 1,\r\n        },\r\n        abi: Aggregate {\r\n            sized: true,\r\n        },\r\n        largest_niche: None,\r\n        align: AbiAndPrefAlign {\r\n            abi: Align {\r\n                pow2: 3,\r\n            },\r\n            pref: Align {\r\n                pow2: 3,\r\n            },\r\n        },\r\n        size: Size {\r\n            raw: 16,\r\n        },\r\n    },\r\n}\r\n```\r\n\r\n</details>\r\n\r\nCc @oli-obk @erikdesjardins ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96221/timeline", "performed_via_github_app": null, "state_reason": "completed"}