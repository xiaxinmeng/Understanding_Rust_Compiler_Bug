{"url": "https://api.github.com/repos/rust-lang/rust/issues/91586", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91586/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91586/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91586/events", "html_url": "https://github.com/rust-lang/rust/issues/91586", "id": 1072008155, "node_id": "I_kwDOAAsO6M4_5Yvb", "number": 91586, "title": "Proposal: Implement `core::ops::*<T>` on `Saturating<T>` / `Wrapping<T>` type", "user": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-12-06T10:56:19Z", "updated_at": "2021-12-28T21:27:15Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nRelevant RFC \"928\" (rust-lang/rfcs#928).\r\n - #87920\r\n - #32463\r\n\r\n<!--\r\nThis is a tracking issue for ...\r\n-->\r\n\r\n<!--\r\nInclude a short description of the feature.\r\n-->\r\n\r\n### Public API\r\nThe [`Wrapping`](https://doc.rust-lang.org/core/num/struct.Wrapping.html) and [`Saturating`](https://doc.rust-lang.org/core/num/struct.Saturating.html) types enforce that a certain behaviour for all operations on the underlying integer is performed - `.wrapping_*` or `.saturating_*`. When doing the \"simplified\" operations, `.add` *always* becomes `.wrapping_add` or `.saturating_add`, `.sub` *always* becomes `.wrapping_sub` / `.saturating_sub` and so on.\r\n\r\nThe fundamental ideas seem to be:\r\n 1. Never perform the an integer operation with the wrong behaviour by forgetting to write `.wrapping_*` or `.saturating_*`\r\n 2. Reduce boiler-plate code / text by being able to omit writing `.wrapping_*` or `.saturating_*`\r\n\r\nBut number 2 seems to fall short in reality. The traits in `core::ops::` are only implemented for `Wrapping` and `Saturating` where the other type is `Wrapping` or `Saturating` as well (`impl core::ops::*<Wrapping<T>> for Wrapping<T>`\u00b9). So, instead of writing a integer addition like this:\r\n```rust\r\n    let mut value = 17u8;\r\n    // ...\r\n    value += 8;\r\n    value *= 7;\r\n    // ...\r\n    let other: u8 = value / 3;\r\n```\r\nfor `Wrapping` and `Saturating` types, it looks likes this:\r\n```rust\r\n    let mut value = Wrapping(17u8);\r\n    // ...\r\n    value += Wrapping(8);\r\n    value *= Wrapping(7);\r\n    // ...\r\n    let other: Wrapping<u8> = value / Wrapping(3);\r\n```\r\n\r\nThis introduces the need for additional mentions of `Wrapping` /  `Saturating` in every code location where an integer operation is performed - and in my opinion, adds unnecessary noise to the code. In my opinion, having the integer being wrapped in either `Wrapping` or  `Saturating` in the declaration / initialization should be all that is needed.\r\n\r\nI propose that - in addition to `impl core::ops::*<Wrapping<T>> for Wrapping<T>`\u00b9 - the integer operations are also implemented using the raw integer type itself (`impl core::ops::*<T> for Wrapping<T>`\u00b9), and therefore the following is being made possible:\r\n\r\n```rust\r\n    let mut value = Wrapping(17u8);\r\n    // ...\r\n    value += 8;\r\n    value *= 7;\r\n    // ...\r\n    let other: Wrapping<u8> = value / 3;\r\n```\r\n\r\n\u00b9 as well as for `Saturating`\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Decide on wrapping integer (rust-lang/rfcs#928)\r\n- [x] Implement basic `Wrapping` type  #32463\r\n  - [x] Stabilize it\r\n- [x] Implement basic `Saturating` type #87920\r\n  - [ ] Stabilize it (WIP)\r\n- [ ] Add raw integer operations\r\n  - [ ] on `Wrapping` TBD\r\n  - [ ] on `Saturating` #92354\r\n- [ ] Stabilize raw integer operations\r\n  - [ ] on `Wrapping`\r\n  - [ ] on `Saturating`\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- RFC vs PR?.\r\n  Following [\"The overarching philosophy is: do whatever is easiest\"](https://github.com/rust-lang/rfcs/blob/master/libs_changes.md), I created this PR because the underlying types already exist, and it **\"only\"** proposes additional trait impls. Or does this change need a proper RFC?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91586/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91586/timeline", "performed_via_github_app": null, "state_reason": null}