{"url": "https://api.github.com/repos/rust-lang/rust/issues/111688", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111688/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111688/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111688/events", "html_url": "https://github.com/rust-lang/rust/issues/111688", "id": 1714313150, "node_id": "I_kwDOAAsO6M5mLle-", "number": 111688, "title": "Tracking Issue for ExitCodeExt on Windows", "user": {"login": "AronParker", "id": 2510861, "node_id": "MDQ6VXNlcjI1MTA4NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2510861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AronParker", "html_url": "https://github.com/AronParker", "followers_url": "https://api.github.com/users/AronParker/followers", "following_url": "https://api.github.com/users/AronParker/following{/other_user}", "gists_url": "https://api.github.com/users/AronParker/gists{/gist_id}", "starred_url": "https://api.github.com/users/AronParker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AronParker/subscriptions", "organizations_url": "https://api.github.com/users/AronParker/orgs", "repos_url": "https://api.github.com/users/AronParker/repos", "events_url": "https://api.github.com/users/AronParker/events{/privacy}", "received_events_url": "https://api.github.com/users/AronParker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-05-17T17:07:03Z", "updated_at": "2023-05-18T11:36:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(windows_process_exit_code_from)]`\r\n\r\nThis is a tracking issue for implementing additional `ExitCode`s for Windows.\r\n\r\n### Motivation\r\n\r\nOn Windows it is common for applications to return `HRESULT` (`i32`) or `DWORD` (`u32`) values. These stem from COM based components ([HRESULTS](https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-coinitialize)), Win32 errors ([GetLastError](https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror)), GUI applications ([WM_QUIT](https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-quit)) and more. The newly stabilized `ExitCode` provides an excellent fit for propagating these values, because `std::process::exit` does not run deconstructors which can result in errors. However, `ExitCode` currently only implements `From<u8> for ExitCode`, which disallows the full range of `i32`/`u32` values. This pull requests attempts to address that shortcoming by providing windows specific extensions that accept a `u32` value (which covers all possible `HRESULTS` and Win32 errors) analog to [ExitStatusExt::from_raw](https://doc.rust-lang.org/std/os/windows/process/trait.ExitStatusExt.html#tymethod.from_raw).\r\n\r\nThis was also intended by the original Stabilization https://github.com/rust-lang/rust/pull/93840#issue-1129209143=  as pointed out by @eggyal in https://github.com/rust-lang/rust/issues/97914#issuecomment-1151076755:\r\n\r\n> Issues around platform specific representations: We resolved this issue by changing the return type of report from i32 to the opaque type ExitCode. __That way we can change the underlying representation without affecting the API, letting us offer full support for platform specific exit code APIs in the future.__\r\n\r\n[Emphasis added]\r\n\r\n### Public API\r\n\r\n```rust\r\n/// Windows-specific extensions to [`process::ExitCode`].\r\n///\r\n/// This trait is sealed: it cannot be implemented outside the standard library.\r\n/// This is so that future additional methods are not breaking changes.\r\n#[stable(feature = \"windows_process_exit_code_from\", since = \"1.63.0\")]\r\npub trait ExitCodeExt: Sealed {\r\n    /// Creates a new `ExitCode` from the raw underlying `u32` return value of\r\n    /// a process.\r\n    #[stable(feature = \"windows_process_exit_code_from\", since = \"1.63.0\")]\r\n    fn from_raw(raw: u32) -> Self;\r\n}\r\n\r\n#[stable(feature = \"windows_process_exit_code_from\", since = \"1.63.0\")]\r\nimpl ExitCodeExt for process::ExitCode {\r\n    fn from_raw(raw: u32) -> Self {\r\n        process::ExitCode::from_inner(From::from(raw))\r\n    }\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [ ] Implementation: #...\r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilization PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- None yet.\r\n\r\n### Additional Links\r\n\r\n[Original suggestion](https://github.com/rust-lang/rust/pull/93445#issue-1117891580)\r\n[Proposal](https://github.com/rust-lang/libs-team/issues/48)\r\n[Implementation](https://github.com/rust-lang/rust/pull/97917)\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111688/timeline", "performed_via_github_app": null, "state_reason": null}