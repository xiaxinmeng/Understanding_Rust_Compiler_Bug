{"url": "https://api.github.com/repos/rust-lang/rust/issues/20797", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/20797/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/20797/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/20797/events", "html_url": "https://github.com/rust-lang/rust/issues/20797", "id": 53839594, "node_id": "MDU6SXNzdWU1MzgzOTU5NA==", "number": 20797, "title": "Associated types: ICE \"get_unique_type_id_of_type() - unexpected type\"", "user": {"login": "kinghajj", "id": 3409, "node_id": "MDQ6VXNlcjM0MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kinghajj", "html_url": "https://github.com/kinghajj", "followers_url": "https://api.github.com/users/kinghajj/followers", "following_url": "https://api.github.com/users/kinghajj/following{/other_user}", "gists_url": "https://api.github.com/users/kinghajj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kinghajj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kinghajj/subscriptions", "organizations_url": "https://api.github.com/users/kinghajj/orgs", "repos_url": "https://api.github.com/users/kinghajj/repos", "events_url": "https://api.github.com/users/kinghajj/events{/privacy}", "received_events_url": "https://api.github.com/users/kinghajj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 30, "created_at": "2015-01-09T06:59:07Z", "updated_at": "2015-01-23T19:16:24Z", "closed_at": "2015-01-23T19:16:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I thought that my example in #20368 was sufficient to cover one of my desired uses of associated types, but, while that example does now successfully compile, the module I really wanted to improve still fails with yet another ICE. Here's the module in full:\n\n``` rust\n    use std::default::Default;\n    use std::io::IoResult;\n    use std::io::fs;\n    use std::io::fs::PathExtensions;\n\n    /// A strategy for acquiring more subpaths to walk.\n    pub trait Strategy {\n      type P: PathExtensions;\n      /// Get additional subpaths from a given path.\n      fn get_more(&self, item: &Self::P) -> IoResult<Vec<Self::P>>;\n      /// Determine whether a path should be walked further.\n      /// This is run against each item from `get_more()`.\n      fn prune(&self, p: &Self::P) -> bool;\n    }\n\n    /// The basic fully-recursive strategy. Nothing is pruned.\n    #[derive(Copy, Default)]\n    pub struct Recursive;\n\n    impl Strategy for Recursive {\n      type P = Path;\n      fn get_more(&self, p: &Path) -> IoResult<Vec<Path>> { fs::readdir(p) }\n\n      fn prune(&self, _: &Path) -> bool { false }\n    }\n\n    /// A directory walker of `P` using strategy `S`.\n    pub struct Subpaths<S: Strategy> {\n        stack: Vec<S::P>,\n        strategy: S,\n    }\n\n    impl<S: Strategy> Subpaths<S> {\n      /// Create a directory walker with a root path and strategy.\n      pub fn new(p: &S::P, strategy: S) -> IoResult<Subpaths<S>> {\n        let stack = try!(strategy.get_more(p));\n        Ok(Subpaths { stack: stack, strategy: strategy })\n      }\n    }\n\n    impl<S: Default + Strategy> Subpaths<S> {\n      /// Create a directory walker with a root path and a default strategy.\n      pub fn walk(p: &S::P) -> IoResult<Subpaths<S>> {\n          Subpaths::new(p, Default::default())\n      }\n    }\n\n    impl<S: Default + Strategy> Default for Subpaths<S> {\n      fn default() -> Subpaths<S> {\n        Subpaths { stack: Vec::new(), strategy: Default::default() }\n      }\n    }\n\n    impl<S: Strategy> Iterator for Subpaths<S> {\n      type Item = S::P;\n      fn next (&mut self) -> Option<S::P> {\n        let mut opt_path = self.stack.pop();\n        while opt_path.is_some() && self.strategy.prune(opt_path.as_ref().unwrap()) {\n          opt_path = self.stack.pop();\n        }\n        match opt_path {\n          Some(path) => {\n            if PathExtensions::is_dir(&path) {\n              let result = self.strategy.get_more(&path);\n              match result {\n                Ok(dirs) => { self.stack.extend(dirs.into_iter()); },\n                Err(..) => { }\n              }\n            }\n            Some(path)\n          }\n          None => None,\n        }\n      }\n    }\n\n    #[test]\n    fn woot() {\n      let mut walker: Subpaths<Recursive> = Subpaths::walk(&Path::new(\"/home\")).unwrap();\n    }\n```\n\nHere's the error and backtrace:\n\n```\nerror: internal compiler error: get_unique_type_id_of_type() - unexpected type: <Recursive as Strategy>::P, ty_projection(ProjectionTy { trait_ref: Rc(TraitRef { def_id: DefId { krate: 0u32, node: 8u32 }, substs: Substs { types: VecPerParamSpace {TypeSpace: [], SelfSpace: [TyS { sty: ty_struct(DefId { krate: 0u32, node: 40u32 }, Substs { types: VecPerParamSpace {TypeSpace: [], SelfSpace: [], FnSpace: [], }, regions: ErasedRegions }), flags: 0, region_depth: 0u32 }], FnSpace: [], }, regions: NonerasedRegions(VecPerParamSpace {TypeSpace: [], SelfSpace: [], FnSpace: [], }) } }), item_name: \"P\"(73) })\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: http://doc.rust-lang.org/complement-bugreport.html\nnote: run with `RUST_BACKTRACE=1` for a backtrace\nthread 'rustc' panicked at 'Box<Any>', /home/samuel/rust/src/libsyntax/diagnostic.rs:182\n\nstack backtrace:\n   1:     0x7f4a265a0570 - sys::backtrace::write::h3452feb04e320bcfCzt\n   2:     0x7f4a265c2780 - failure::on_fail::hd0efae8686875716aPz\n   3:     0x7f4a26530300 - rt::unwind::begin_unwind_inner::h229232f5734654792tz\n   4:     0x7f4a214ada20 - rt::unwind::begin_unwind::h9438643137198476843\n   5:     0x7f4a214ae2d0 - diagnostic::Handler::bug::he657a4296d705a33tWF\n   6:     0x7f4a2488f180 - session::Session::bug::ha8836431c543757ciRq\n   7:     0x7f4a25673ba0 - trans::debuginfo::TypeMap<'tcx>::get_unique_type_id_of_type::h606c89215412cd5brGD\n   8:     0x7f4a256778d0 - trans::debuginfo::TypeMap<'tcx>::get_unique_type_id_of_type::from_def_id_and_substs::h9fa1f90635ed12d03PD\n   9:     0x7f4a25673ba0 - trans::debuginfo::TypeMap<'tcx>::get_unique_type_id_of_type::h606c89215412cd5brGD\n  10:     0x7f4a25679e30 - trans::debuginfo::type_metadata::h7557684678d0dd25RSF\n  11:     0x7f4a25682220 - trans::debuginfo::StructMemberDescriptionFactory<'tcx>::create_member_descriptions::unboxed_closure.45598\n  12:     0x7f4a25681e00 - vec::Vec<T>.FromIterator<T>::from_iter::h9648212210143919248\n  13:     0x7f4a2567dda0 - trans::debuginfo::StructMemberDescriptionFactory<'tcx>::create_member_descriptions::hf79fdc4d3167c5d0j9E\n  14:     0x7f4a25680980 - trans::debuginfo::RecursiveTypeDescription<'tcx>::finalize::h0ff9cf1ab1bdbcef26E\n  15:     0x7f4a25679e30 - trans::debuginfo::type_metadata::h7557684678d0dd25RSF\n  16:     0x7f4a25684fd0 - trans::debuginfo::VariantMemberDescriptionFactory<'tcx>::create_member_descriptions::unboxed_closure.45632\n  17:     0x7f4a25684be0 - vec::Vec<T>.FromIterator<T>::from_iter::h5453357870208096995\n  18:     0x7f4a25683270 - trans::debuginfo::EnumMemberDescriptionFactory<'tcx>::create_member_descriptions::unboxed_closure.45606\n  19:     0x7f4a25682e50 - vec::Vec<T>.FromIterator<T>::from_iter::h13188062602912948975\n  20:     0x7f4a2567de90 - trans::debuginfo::EnumMemberDescriptionFactory<'tcx>::create_member_descriptions::h1355d0387a727939hgF\n  21:     0x7f4a25680980 - trans::debuginfo::RecursiveTypeDescription<'tcx>::finalize::h0ff9cf1ab1bdbcef26E\n  22:     0x7f4a25679e30 - trans::debuginfo::type_metadata::h7557684678d0dd25RSF\n  23:     0x7f4a25688070 - trans::debuginfo::subroutine_type_metadata::haec4c13f9a5d7a59vOF\n  24:     0x7f4a25679e30 - trans::debuginfo::type_metadata::h7557684678d0dd25RSF\n  25:     0x7f4a25620ae0 - trans::debuginfo::create_function_debug_context::h985b11ad61da52fdwsE\n  26:     0x7f4a25580890 - trans::base::new_fn_ctxt::hbe79965b1049ecf2Zxt\n  27:     0x7f4a25626410 - trans::base::trans_closure::h5c0a7253f08a6c1bEYt\n  28:     0x7f4a255452b0 - trans::base::trans_fn::h84cc11dd50b05f50j9t\n  29:     0x7f4a25545710 - trans::monomorphize::monomorphic_fn::h44708ba9400c75dbFpd\n  30:     0x7f4a25597ff0 - trans::callee::trans_fn_ref_with_substs::h1741ea29b53c270fGxg\n  31:     0x7f4a25596590 - trans::callee::trans_fn_ref::h611f01f0cbdf2e42Rlg\n  32:     0x7f4a25593870 - trans::callee::trans::h2d6fbfb713fd152ayag\n  33:     0x7f4a2559da90 - trans::callee::trans_call_inner::h893956557312987459\n  34:     0x7f4a255a34b0 - trans::expr::trans_rvalue_dps_unadjusted::h4ab35d4af002299e1Si\n  35:     0x7f4a255a2790 - trans::expr::trans_unadjusted::h15f19eba475549d3Oji\n  36:     0x7f4a2555b000 - trans::expr::trans::ha962b869e642f0b8eCh\n  37:     0x7f4a2556c0b0 - trans::callee::trans_args::h2dbfd3d1c7128174xch\n  38:     0x7f4a2559f460 - trans::callee::trans_call_inner::h11730372111330536098\n  39:     0x7f4a255a34b0 - trans::expr::trans_rvalue_dps_unadjusted::h4ab35d4af002299e1Si\n  40:     0x7f4a25559d90 - trans::expr::trans_into::h70023b40e1df277dKyh\n  41:     0x7f4a2565e030 - trans::_match::mk_binding_alloca::h14708251032129145358\n  42:     0x7f4a25559390 - trans::base::init_local::h17113ff3a822f41bC7s\n  43:     0x7f4a2555a3e0 - trans::controlflow::trans_block::hd4046f45161d1f00B3d\n  44:     0x7f4a25626410 - trans::base::trans_closure::h5c0a7253f08a6c1bEYt\n  45:     0x7f4a255452b0 - trans::base::trans_fn::h84cc11dd50b05f50j9t\n  46:     0x7f4a25540840 - trans::base::trans_item::h560b1558a6cec5e6Ewu\n  47:     0x7f4a2562dc30 - trans::base::trans_crate::heb94c899d24982b8lsv\n  48:     0x7f4a26b09fa0 - driver::phase_4_translate_to_llvm::h4be77ff61772864dPFa\n  49:     0x7f4a26ae3f30 - driver::compile_input::hefa96b3bea08e00bxba\n  50:     0x7f4a26bb3bc0 - monitor::unboxed_closure.22498\n  51:     0x7f4a26bb3a20 - thunk::F.Invoke<A, R>::invoke::h2604081160332846052\n  52:     0x7f4a26bb27a0 - rt::unwind::try::try_fn::h10712615664574212328\n  53:     0x7f4a26630f00 - rust_try_inner\n  54:     0x7f4a26630ef0 - rust_try\n  55:     0x7f4a26bb2a90 - thunk::F.Invoke<A, R>::invoke::h6088602545528080049\n  56:     0x7f4a265b0630 - sys::thread::thread_start::h803dac673dcdb1abqrw\n  57:     0x7f4a20cc7250 - start_thread\n  58:     0x7f4a261e0219 - clone\n  59:                0x0 - <unknown>\n\nCould not compile `subpaths`.\n```\n", "closed_by": {"login": "kinghajj", "id": 3409, "node_id": "MDQ6VXNlcjM0MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kinghajj", "html_url": "https://github.com/kinghajj", "followers_url": "https://api.github.com/users/kinghajj/followers", "following_url": "https://api.github.com/users/kinghajj/following{/other_user}", "gists_url": "https://api.github.com/users/kinghajj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kinghajj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kinghajj/subscriptions", "organizations_url": "https://api.github.com/users/kinghajj/orgs", "repos_url": "https://api.github.com/users/kinghajj/repos", "events_url": "https://api.github.com/users/kinghajj/events{/privacy}", "received_events_url": "https://api.github.com/users/kinghajj/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/20797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/20797/timeline", "performed_via_github_app": null, "state_reason": "completed"}