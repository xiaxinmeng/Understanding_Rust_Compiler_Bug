{"url": "https://api.github.com/repos/rust-lang/rust/issues/62126", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62126/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62126/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62126/events", "html_url": "https://github.com/rust-lang/rust/issues/62126", "id": 460605528, "node_id": "MDU6SXNzdWU0NjA2MDU1Mjg=", "number": 62126, "title": "src/librustc_mir/transform/generator.rs:715: Broken MIR", "user": {"login": "gila", "id": 15957973, "node_id": "MDQ6VXNlcjE1OTU3OTcz", "avatar_url": "https://avatars.githubusercontent.com/u/15957973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gila", "html_url": "https://github.com/gila", "followers_url": "https://api.github.com/users/gila/followers", "following_url": "https://api.github.com/users/gila/following{/other_user}", "gists_url": "https://api.github.com/users/gila/gists{/gist_id}", "starred_url": "https://api.github.com/users/gila/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gila/subscriptions", "organizations_url": "https://api.github.com/users/gila/orgs", "repos_url": "https://api.github.com/users/gila/repos", "events_url": "https://api.github.com/users/gila/events{/privacy}", "received_events_url": "https://api.github.com/users/gila/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-25T19:42:51Z", "updated_at": "2019-06-26T17:43:48Z", "closed_at": "2019-06-26T17:43:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "The minimal code that reproduces the issue:\r\n\r\n```rust\r\n#![feature(async_await)]\r\nuse futures::{executor::LocalPool, future, task::LocalSpawnExt};\r\n\r\nasync fn do_something(s: String) -> Result<String, String> {\r\n    Ok(s)\r\n}\r\n\r\nasync fn do_it() {\r\n    for i in 0 ..= 3 {\r\n        let s = format!(\"test-{}\", i);\r\n        let result = do_something(s).await;\r\n        // when removing the dbg!() the code compiles \r\n        dbg!(result);\r\n    }\r\n}\r\n\r\n#[test]\r\nfn mir_error() {\r\n    let mut p = LocalPool::new();\r\n    let mut s = p.spawner();\r\n    s.spawn_local(do_it()).unwrap();\r\n    p.run_until_stalled();\r\n}\r\n```\r\n\r\nGetting the following error:\r\n\r\n```error: internal compiler error: src/librustc_mir/transform/generator.rs:715: Broken MIR: generator contains type std::result::Result<std::string::String, std::string::String> in MIR, but typeck only knows about {fn(std::ops::RangeInclusive<i32>) -> <std::ops::RangeInclusive<i32> as std::iter::IntoIterator>::IntoIter {<std::ops::RangeInclusive<i32> as std::iter::IntoIterator>::into_iter}, fn(i32, i32) -> std::ops::RangeInclusive<i32> {std::ops::RangeInclusive::<i32>::new}, i32, std::ops::RangeInclusive<i32>, std::string::String, impl core::future::future::Future, ()}\r\n  --> spdk-rs/tests/for.rs:8:18\r\n   |\r\n8  |   async fn do_it() {\r\n   |  __________________^\r\n9  | |     for i in 0 ..= 3 {\r\n10 | |         let s = format!(\"test-{}\", i);\r\n11 | |         let result = do_something(s).await;\r\n12 | |         dbg!(result);\r\n13 | |     }\r\n14 | | }\r\n   | |_^\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:578:9\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:47\r\n   3: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:36\r\n   4: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   5: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:212\r\n   6: rustc::util::common::panic_hook\r\n   7: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:479\r\n   8: std::panicking::begin_panic\r\n   9: rustc_errors::Handler::span_bug\r\n  10: rustc::util::bug::opt_span_bug_fmt::{{closure}}\r\n  11: rustc::ty::context::tls::with_opt::{{closure}}\r\n  12: rustc::ty::context::tls::with_context_opt\r\n  13: rustc::ty::context::tls::with_opt\r\n  14: rustc::util::bug::opt_span_bug_fmt\r\n  15: rustc::util::bug::span_bug_fmt\r\n  16: rustc_mir::transform::generator::compute_layout\r\n  17: <rustc_mir::transform::generator::StateTransform as rustc_mir::transform::MirPass>::run_pass\r\n  18: rustc_mir::transform::run_passes::{{closure}}\r\n  19: rustc_mir::transform::run_passes\r\n  20: rustc_mir::transform::optimized_mir\r\n  21: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::optimized_mir>::compute\r\n  22: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  23: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::force_query\r\n  24: rustc::ty::query::plumbing::force_from_dep_node\r\n  25: rustc::dep_graph::graph::DepGraph::try_mark_previous_green\r\n  26: rustc::dep_graph::graph::DepGraph::try_mark_green\r\n  27: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  28: <rustc::ty::layout::LayoutCx<rustc::ty::context::TyCtxt> as rustc_target::abi::LayoutOf>::layout_of\r\n  29: <rustc_mir::transform::const_prop::ConstPropagator as rustc::mir::visit::MutVisitor>::visit_statement\r\n  30: <rustc_mir::transform::const_prop::ConstProp as rustc_mir::transform::MirPass>::run_pass\r\n  31: rustc_mir::transform::run_passes::{{closure}}\r\n  32: rustc_mir::transform::run_passes\r\n  33: rustc_mir::transform::optimized_mir\r\n  34: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::optimized_mir>::compute\r\n  35: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  36: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  37: rustc_mir::monomorphize::collector::collect_items_rec\r\n  38: rustc_mir::monomorphize::collector::collect_items_rec\r\n  39: rustc_mir::monomorphize::collector::collect_items_rec\r\n  40: rustc_mir::monomorphize::collector::collect_items_rec\r\n  41: rustc_mir::monomorphize::collector::collect_crate_mono_items::{{closure}}\r\n  42: rustc::util::common::time\r\n  43: rustc_mir::monomorphize::collector::collect_crate_mono_items\r\n  44: rustc::util::common::time\r\n  45: rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items\r\n  46: rustc::ty::query::__query_compute::collect_and_partition_mono_items\r\n  47: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::collect_and_partition_mono_items>::compute\r\n  48: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  49: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  50: rustc_codegen_ssa::base::codegen_crate\r\n  51: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_utils::codegen_backend::CodegenBackend>::codegen_crate\r\n  52: rustc::util::common::time\r\n  53: rustc_interface::passes::start_codegen\r\n  54: rustc::ty::context::tls::enter_global\r\n  55: rustc_interface::passes::BoxedGlobalCtxt::access::{{closure}}\r\n  56: rustc_interface::passes::create_global_ctxt::{{closure}}\r\n  57: rustc_interface::passes::BoxedGlobalCtxt::enter\r\n  58: rustc_interface::queries::Query<T>::compute\r\n  59: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::ongoing_codegen\r\n  60: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  61: std::thread::local::LocalKey<T>::with\r\n  62: scoped_tls::ScopedKey<T>::set\r\n  63: syntax::with_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nquery stack during panic:\r\n#0 [optimized_mir] processing `do_it::{{closure}}#0`\r\n#1 [layout_raw] computing layout of `[static generator@spdk-rs/tests/for.rs:8:18: 14:2 {fn(std::ops::RangeInclusive<i32>) -> <std::ops::RangeInclusive<i32> as std::iter::IntoIterator>::IntoIter {<std::ops::RangeInclusive<i32> as std::iter::IntoIterator>::into_iter}, fn(i32, i32) -> std::ops::RangeInclusive<i32> {std::ops::RangeInclusive::<i32>::new}, i32, std::ops::RangeInclusive<i32>, std::string::String, std::future::GenFuture<[static generator@spdk-rs/tests/for.rs:4:60: 6:2 s:std::string::String {}]>, ()}]`\r\n#2 [optimized_mir] processing `do_it`\r\n#3 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\n```\r\n\r\n## Meta\r\n```\r\nrustc 1.37.0-nightly (8aa42ed7c 2019-06-24)\r\nbinary: rustc\r\ncommit-hash: 8aa42ed7c2adb9f37faa6eb905f890f6199e1db9\r\ncommit-date: 2019-06-24\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.37.0-nightly\r\nLLVM version: 8.0\r\n```\r\n\r\nI think this might be somewhat related to #62025 and perhaps  #61442 but i'll leave that to the experts.", "closed_by": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62126/timeline", "performed_via_github_app": null, "state_reason": "completed"}