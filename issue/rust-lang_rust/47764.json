{"url": "https://api.github.com/repos/rust-lang/rust/issues/47764", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47764/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47764/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47764/events", "html_url": "https://github.com/rust-lang/rust/issues/47764", "id": 291791167, "node_id": "MDU6SXNzdWUyOTE3OTExNjc=", "number": 47764, "title": "ICE with `impl FnOnce...` in argument position. Unexpected panic.", "user": {"login": "thedodd", "id": 2380740, "node_id": "MDQ6VXNlcjIzODA3NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/2380740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedodd", "html_url": "https://github.com/thedodd", "followers_url": "https://api.github.com/users/thedodd/followers", "following_url": "https://api.github.com/users/thedodd/following{/other_user}", "gists_url": "https://api.github.com/users/thedodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedodd/subscriptions", "organizations_url": "https://api.github.com/users/thedodd/orgs", "repos_url": "https://api.github.com/users/thedodd/repos", "events_url": "https://api.github.com/users/thedodd/events{/privacy}", "received_events_url": "https://api.github.com/users/thedodd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-26T03:37:51Z", "updated_at": "2019-02-25T23:42:05Z", "closed_at": "2019-02-25T23:42:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "ICE when using `impl FnOnce...` in argument position on `1.25.0-nightly 2018-01-24`. Unexpected panic.\r\n\r\nA quick note, the offending argument is of type: `impl FnOnce(_) -> Box<_>` (omitting the concrete types with `_`). That said, I'm not sure if `universal_impl_trait` actually explicitly supports `impl Trait` in argument position for the `fn` family at this point in time.\r\n\r\n### code sample that causes the bug\r\n**Working example:**\r\n\r\n```rust\r\n#[derive(Clone, StateData, NewMiddleware)]\r\npub struct CoreServices {\r\n    pub header_value: Arc<String>,\r\n}\r\n\r\nimpl Middleware for CoreServices {\r\n    fn call<Chain>(self, mut state: State, chain: Chain) -> Box<HandlerFuture>\r\n        where Chain: FnOnce(State) -> Box<HandlerFuture>,\r\n    {\r\n        state.put(self);\r\n        let f = chain(state).and_then(move |(state, mut response)| {\r\n            let data = state.borrow::<CoreServices>();\r\n            let headers = response.headers_mut();\r\n            let header_val = (*data.header_value).clone();\r\n            headers.set_raw(String::from(\"X-Super-Header\"), header_val);\r\n            future::ok((state, response))\r\n        });\r\n        Box::new(f)\r\n    }\r\n}\r\n```\r\n\r\n**The code which breaks it:**\r\n\r\n```rust\r\n#[derive(Clone, StateData, NewMiddleware)]\r\npub struct CoreServices {\r\n    pub header_value: Arc<String>,\r\n}\r\n\r\nimpl Middleware for CoreServices {\r\n    fn call(self, mut state: State, chain: impl FnOnce(State) -> Box<HandlerFuture>) -> Box<HandlerFuture>\r\n    {\r\n        state.put(self);\r\n        let f = chain(state).and_then(move |(state, mut response)| {\r\n            let data = state.borrow::<CoreServices>();\r\n            let headers = response.headers_mut();\r\n            let header_val = (*data.header_value).clone();\r\n            headers.set_raw(String::from(\"X-Super-Header\"), header_val);\r\n            future::ok((state, response))\r\n        });\r\n        Box::new(f)\r\n    }\r\n}\r\n```\r\n\r\nI expected the code to compile. I have the following nightly features enabled:\r\n\r\n```rust\r\n#![feature(\r\n    conservative_impl_trait,\r\n    generators,\r\n    nll,\r\n    proc_macro,\r\n    universal_impl_trait,\r\n    use_nested_groups,\r\n)]\r\n```\r\n\r\n### meta\r\n**rustc info:**\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.25.0-nightly (a0dcecff9 2018-01-24)\r\nbinary: rustc\r\ncommit-hash: a0dcecff90c45ad5d4eb60859e22bb3f1b03842a\r\ncommit-date: 2018-01-24\r\nhost: x86_64-apple-darwin\r\nrelease: 1.25.0-nightly\r\nLLVM version: 4.0\r\n```\r\n\r\n**Backtrace:**\r\n```\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.25.0-nightly (a0dcecff9 2018-01-24) running on x86_64-apple-darwin\r\n\r\nnote: run with `RUST_BACKTRACE=1` for a backtrace\r\n\r\nthread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', libcore/option.rs:335:21\r\nstack backtrace:\r\n   0:        0x10ca43eab - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::ha9efc95a1760cacd\r\n   1:        0x10ca50044 - std::sys_common::backtrace::print::hf5c8aa5eb53db16a\r\n   2:        0x10ca436e0 - std::panicking::default_hook::{{closure}}::hdce9608c60053b8f\r\n   3:        0x10ca433e3 - std::panicking::default_hook::hba09553cc28730a2\r\n   4:        0x10ca43b66 - std::panicking::rust_panic_with_hook::h3639511a0c7cb848\r\n   5:        0x10ca439be - std::panicking::begin_panic::h0e3595e70a446052\r\n   6:        0x10ca43913 - std::panicking::begin_panic_fmt::h94f1111cdb67ea95\r\n   7:        0x10ca43882 - rust_begin_unwind\r\n   8:        0x10cab9df3 - core::panicking::panic_fmt::h7800179476794181\r\n   9:        0x10cab9ce6 - core::panicking::panic::h4f9b253c2f9854a3\r\n  10:        0x109dfacf9 - rustc_typeck::check::compare_method::compare_impl_method::h257f59c3b52215a2\r\n  11:        0x109d86fda - rustc_typeck::check::check_item_type::h969b3c82c24011db\r\n  12:        0x109d0da8f - rustc::hir::Crate::visit_all_item_likes::h14dadb1787741be5\r\n  13:        0x109ddd868 - rustc_typeck::check_crate::h6ea8f3ed64500660\r\n  14:        0x106649aba - <std::thread::local::LocalKey<T>>::with::hc97c0f695fc47a37\r\n  15:        0x1066471ec - <std::thread::local::LocalKey<T>>::with::h5232c8db13d095a5\r\n  16:        0x1066753e3 - rustc_driver::driver::compile_input::h13c6388277ea77a3\r\n  17:        0x10668617c - rustc_driver::run_compiler::hebc5d6e3e17d092c\r\n  18:        0x1066042d1 - std::sys_common::backtrace::__rust_begin_short_backtrace::he16271a6bff11c29\r\n  19:        0x10ca72fbe - __rust_maybe_catch_panic\r\n  20:        0x1065b8ddd - <F as alloc::boxed::FnBox<A>>::call_box::h838126c6997c937c\r\n  21:        0x10ca52a67 - std::sys_common::thread::start_thread::hee6a12d8ac7037fd\r\n  22:        0x10ca5eda8 - std::sys::unix::thread::Thread::new::thread_start::hca6ddd0e0fdf932d\r\n  23:     0x7fff6b51d6c0 - _pthread_body\r\n  24:     0x7fff6b51d56c - _pthread_start\r\n```", "closed_by": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47764/timeline", "performed_via_github_app": null, "state_reason": "completed"}