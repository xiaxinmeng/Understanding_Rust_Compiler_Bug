{"url": "https://api.github.com/repos/rust-lang/rust/issues/93123", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93123/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93123/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93123/events", "html_url": "https://github.com/rust-lang/rust/issues/93123", "id": 1109551227, "node_id": "I_kwDOAAsO6M5CImh7", "number": 93123, "title": "Rustc bug when building Elrond Smart Contract", "user": {"login": "ThounyBreasty", "id": 92447129, "node_id": "U_kgDOBYKhmQ", "avatar_url": "https://avatars.githubusercontent.com/u/92447129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThounyBreasty", "html_url": "https://github.com/ThounyBreasty", "followers_url": "https://api.github.com/users/ThounyBreasty/followers", "following_url": "https://api.github.com/users/ThounyBreasty/following{/other_user}", "gists_url": "https://api.github.com/users/ThounyBreasty/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThounyBreasty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThounyBreasty/subscriptions", "organizations_url": "https://api.github.com/users/ThounyBreasty/orgs", "repos_url": "https://api.github.com/users/ThounyBreasty/repos", "events_url": "https://api.github.com/users/ThounyBreasty/events{/privacy}", "received_events_url": "https://api.github.com/users/ThounyBreasty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-01-20T17:03:48Z", "updated_at": "2022-12-20T10:44:05Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Edit\r\nSomeone found how to fix the bug. Apparently by modifying lines above contract trait in main.rs it creates the bug when compiling. So the DIY solution is to delete ./meta and build the contract again.\r\n\r\n### Context\r\nDeveloping Smart Contract on Elrond with their sdk. Basically following this tutorial https://docs.elrond.com/developers/tutorials/crowdfunding-p2/\r\n\r\nWhen I run erdpy build contract I get this bug. First time I fixed it by deleting and typing the content of the smart contract a second time. But now I get this bug again and the contract is too long.\r\n\r\nChecking backtrace I got \"error[E0554]: `#![feature]` may not be used on the stable release channel\". So I tried with nightly but nothing change.\r\n\r\n### Code\r\n\r\n```Rust\r\n#![no_std]\r\n\r\nelrond_wasm::imports!();\r\nelrond_wasm::derive_imports!();\r\n\r\n#[derive(TopEncode, TopDecode, TypeAbi, PartialEq, Clone, Copy)]\r\npub enum Status {\r\n    FundingPeriod,\r\n    Successful,\r\n    Failed,\r\n}\r\n\r\n#[elrond_wasm::contract]\r\npub trait Crowdfunding {\r\n\r\n  #[view(getTarget)]\r\n  #[storage_mapper(\"target\")]\r\n  fn target(&self) -> SingleValueMapper<BigUint>;\r\n\r\n  #[view(getDeadline)]\r\n  #[storage_mapper(\"deadline\")]\r\n  fn deadline(&self) -> SingleValueMapper<u64>;\r\n\r\n  #[view(getDeposit)]\r\n  #[storage_mapper(\"deposit\")]\r\n  fn deposit(&self, donor: &ManagedAddress) -> SingleValueMapper<BigUint>;\r\n\r\n  #[init]\r\n  fn init(&self, target: BigUint, deadline: u64) {\r\n      self.target().set(&target);\r\n      self.deadline().set(&deadline);\r\n  }\r\n\r\n  #[view]\r\n  fn status(&self) -> Status {\r\n      if self.blockchain().get_block_nonce() <= self.deadline().get() {\r\n          Status::FundingPeriod\r\n      } else if self.get_current_funds() >= self.target().get() {\r\n          Status::Successful\r\n      } else {\r\n          Status::Failed\r\n      }\r\n  }\r\n\r\n  #[view(getCurrentFunds)]\r\n  fn get_current_funds(&self) -> BigUint {\r\n      self.blockchain().get_sc_balance(&TokenIdentifier::egld(), 0)\r\n  }\r\n\r\n  #[payable(\"*\")]\r\n  #[endpoint]\r\n  fn fund(&self, #[payment] payment: BigUint) -> SCResult<()> {\r\n      let current_time = self.blockchain().get_block_nonce();\r\n      require!(current_time < self.deadline().get(), \"cannot fund after deadline\");\r\n\r\n      let caller = self.blockchain().get_caller();\r\n      self.deposit(&caller).update(|deposit| *deposit += payment);\r\n      Ok(())\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc --version --verbose\r\nrustc 1.60.0-nightly (5e57faa78 2022-01-19)\r\nbinary: rustc\r\ncommit-hash: 5e57faa78aa7661c6000204591558f6665f11abc\r\ncommit-date: 2022-01-19\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.60.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nCompiling crowdfunding-meta v0.0.0 (/home/thoune/ThounyBreasty/Courses/Elrond/crowdfunding/meta)\r\nthread 'rustc' panicked at 'no entry found for key', compiler/rustc_metadata/src/rmeta/decoder.rs:1640:13\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\n[...]\r\n\r\n\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nerror[E0554]: `#![feature]` may not be used on the stable release channel\r\n --> /home/thoune/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-wasm-derive-0.26.0/src/lib.rs:4:12\r\n  |\r\n4 | #![feature(proc_macro_quote)]\r\n  |            ^^^^^^^^^^^^^^^^\r\n\r\nFor more information about this error, try `rustc --explain E0554`.\r\nerror: could not compile `elrond-wasm-derive` due to previous error\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror: build failed\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93123/timeline", "performed_via_github_app": null, "state_reason": null}