{"url": "https://api.github.com/repos/rust-lang/rust/issues/17149", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/17149/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/17149/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/17149/events", "html_url": "https://github.com/rust-lang/rust/issues/17149", "id": 42442693, "node_id": "MDU6SXNzdWU0MjQ0MjY5Mw==", "number": 17149, "title": "Implement the <= and >= operators via a trait that doesn't require (T, <=) to be a partial order.", "user": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-09-10T18:16:32Z", "updated_at": "2015-01-27T17:12:13Z", "closed_at": "2015-01-27T17:12:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now the way to get the `<=` and `>=` operators is to implement `PartialOrd`. Unfortunately there seems to be some confusion whether `T: PartialOrd` implies that `(T, <=)` is a partial order [1]. The name implies it but the documentation [2] doesn't mention it. This is especially confusing since the documentation for `Ord` [3] mentions that `(T, <=)` has to be a total order.\n\nEither way, `PartialOrd: PartialEq` and thus implementing `<=` requires you to implement `==`. This doesn't make much sense for objects that aren't part of a partial order. For example:\n- `T` is a set of operators and `<=` orders them by operator precedence.\n-  More generally: `(T, \u2264)` where `\u2264` is defined via `a \u2264 b \u21d4 f(a) \u227c f(b)` where `f` is some non-injective function into an ordered space.\n\nTherefore implementing `<=` should not require implementing `==`. Instead:\n\n``` rust\n/// Trait for types that form a [preorder](http://en.wikipedia.org/wiki/Preorder).\n///\n/// A preorder `(T, <=)` has two requirements that your implementation must follow:\n///\n/// - `a <= a`\n/// - `a <= b` and `b <= c` implies `a <= c`\n///\n/// Note that, if you also implement the `==` operator, then the first requirement also\n/// implies\n///\n/// - `a == b` implies `a <= b` and `b <= a`.\n///\n/// If you implement `<=` and `==`, then people might get confused by a lack of\n/// antisymmetry. Consider one of the following:\n///\n/// - If `(T, <=)` is a partial order, implement `PartialOrd` instead.\n/// - If `(T, <=)` is not a partial order, don't implement the `==` operator.\n/// - Document clearly that `(T, <=)` is not antisymmetric.\ntrait PreOrd {\n    /// This method tests `self <= other`.\n    fn le(&self, other: &Self) -> bool;\n\n    /// This method tests greater or equal to (>=).\n    fn ge(&self, other: &Self) -> bool {\n        other.le(self)\n    }\n}\n```\n\n[1] http://en.wikipedia.org/wiki/Partially_ordered_set\n[2] http://doc.rust-lang.org/std/cmp/trait.PartialOrd.html\n[3] http://doc.rust-lang.org/std/cmp/trait.Ord.html\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/17149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/17149/timeline", "performed_via_github_app": null, "state_reason": "completed"}