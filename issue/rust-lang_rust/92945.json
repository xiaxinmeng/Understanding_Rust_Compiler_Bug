{"url": "https://api.github.com/repos/rust-lang/rust/issues/92945", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92945/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92945/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92945/events", "html_url": "https://github.com/rust-lang/rust/issues/92945", "id": 1104856356, "node_id": "I_kwDOAAsO6M5B2sUk", "number": 92945, "title": "[rustdoc-json] Free-floating `struct_field` items with enum tuple struct variants", "user": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 2682491374, "node_id": "MDU6TGFiZWwyNjgyNDkxMzc0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-rustdoc-json", "name": "A-rustdoc-json", "color": "f7e101", "default": false, "description": "Area: Rustdoc JSON backend"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-01-15T21:27:44Z", "updated_at": "2022-09-06T21:05:31Z", "closed_at": "2022-09-06T21:05:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is currently a problematic inconsistency with regards to the generated rustdoc JSON for tuple structs. If the tuple struct is an enum variant, a \"parentless\" or \"free-floating\" item is generated. This does not happen with regular tuple structs.\r\n\r\nConsider this code in `src/lib.rs`.\r\n\r\n```rust\r\npub struct S1(pub usize);\r\n\r\npub enum E1 {\r\n    S2(usize)\r\n}\r\n\r\npub struct S3 {\r\n    pub s3: usize,\r\n}\r\n\r\npub enum E2 {\r\n    S4 {\r\n        s4: usize,\r\n    }\r\n}\r\n```\r\n\r\nNow we generate the rustdoc JSON (I used `rustc 1.60.0-nightly (ad46af247 2022-01-14)`):\r\n\r\n```\r\nRUSTDOCFLAGS='-Z unstable-options --output-format json' cargo doc\r\n```\r\n\r\nThe rustdoc JSON output will contain 4 `struct_field` items, corresponding to `S1.0`, `S2.0`, `S3.s3` and `S4.s4` above.\r\n\r\nThe JSON item for `S1` includes a reference to `S1.0` (some parts of the JSON are omitted for brevity):\r\n\r\n```\r\n        \"0:3\": {\r\n            \"id\": \"0:3\",\r\n            \"crate_id\": 0,\r\n            \"name\": \"S1\",\r\n            \"kind\": \"struct\",\r\n            \"inner\": {\r\n                \"struct_type\": \"tuple\",\r\n                \"fields\": [\r\n                    \"0:5\"            <-- this is `S1.0`\r\n                ],\r\n        },\r\n```\r\n\r\nAnd the JSON item for `S3` includes a reference to `S3.s3`:\r\n\r\n```\r\n        \"0:10\": {\r\n            \"id\": \"0:10\",\r\n            \"crate_id\": 0,\r\n            \"name\": \"S3\",\r\n            \"kind\": \"struct\",\r\n            \"inner\": {\r\n                \"struct_type\": \"plain\",\r\n                \"fields\": [\r\n                    \"0:11\"       <-- this is `S3.s3`\r\n                ],\r\n            }\r\n        },\r\n```\r\n\r\nAnd the JSON item for `S4` includes a reference to `S4.s4`:\r\n```\r\n        \"0:13\": {\r\n            \"id\": \"0:13\",\r\n            \"crate_id\": 0,\r\n            \"name\": \"S4\",\r\n            \"kind\": \"variant\",\r\n            \"inner\": {\r\n                \"variant_kind\": \"struct\",\r\n                \"variant_inner\": [\r\n                    \"0:14\"       <-- this is `S4.s4`\r\n                ]\r\n            }\r\n        },\r\n```\r\n\r\nHowever, and this is the bug, the JSON item for `S2` does not contain a reference to `S2.0`:\r\n```\r\n        \"0:7\": {\r\n            \"id\": \"0:7\",\r\n            \"crate_id\": 0,\r\n            \"name\": \"S2\",\r\n            \"kind\": \"variant\",\r\n            \"inner\": {\r\n                \"variant_kind\": \"tuple\",\r\n                \"variant_inner\": [\r\n                    {\r\n                        \"kind\": \"primitive\",\r\n                        \"inner\": \"usize\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n```\r\n\r\nBut an item for `S2.0` is still included in the output. Here are all `struct_field` items in the JSON output:\r\n\r\n```\r\n% jq  '.index | .[] | select(.crate_id == 0) | select(.kind == \"struct_field\")' target/doc/repro.json \r\n{\r\n  \"id\": \"0:11\",\r\n  \"crate_id\": 0,\r\n  \"name\": \"s3\",\r\n  \"kind\": \"struct_field\",\r\n  \"inner\": {\r\n    \"kind\": \"primitive\",\r\n    \"inner\": \"usize\"\r\n  }\r\n}\r\n{\r\n  \"id\": \"0:14\",\r\n  \"crate_id\": 0,\r\n  \"name\": \"s4\",\r\n  \"kind\": \"struct_field\",\r\n  \"inner\": {\r\n    \"kind\": \"primitive\",\r\n    \"inner\": \"usize\"\r\n  }\r\n}\r\n{\r\n  \"id\": \"0:9\",\r\n  \"crate_id\": 0,\r\n  \"name\": \"0\",\r\n  \"kind\": \"struct_field\",\r\n  \"inner\": {\r\n    \"kind\": \"primitive\",\r\n    \"inner\": \"usize\"\r\n  }\r\n}\r\n{\r\n  \"id\": \"0:5\",\r\n  \"crate_id\": 0,\r\n  \"name\": \"0\",\r\n  \"kind\": \"struct_field\",\r\n  \"inner\": {\r\n    \"kind\": \"primitive\",\r\n    \"inner\": \"usize\"\r\n  }\r\n}\r\n```\r\n\r\nbut `\"0:9\"` is \"free-floating\" or \"parentless\", because it is not referenced by any other item. These \"free-floating\" rustdoc JSON items that are not referenced by any other items are problematic, because tools that processes the rustdoc JSON can't do anything sensible with them. They can't be ignored, because they describe items that are part of the public API of a crate. But they can't be used either, because they can not be put in a context since they are not referenced by anything.\r\n\r\nFortunately, I think fixing this is pretty straightforward. First, let us note that for a regular struct, the fields of it are referenced regardless of if it is a regular struct or a tuple struct (code from https://github.com/rust-lang/rust/blob/master/src/rustdoc-json-types/lib.rs):\r\n\r\n```rust\r\n#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\r\npub struct Struct {\r\n    pub struct_type: StructType,\r\n    pub generics: Generics,\r\n    pub fields_stripped: bool,\r\n    pub fields: Vec<Id>,\r\n    pub impls: Vec<Id>,\r\n}\r\n```\r\n\r\nHowever, for enum variant structs, fields are only referenced for regular struct variants:\r\n\r\n```rust\r\n#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\r\n#[serde(rename_all = \"snake_case\")]\r\n#[serde(tag = \"variant_kind\", content = \"variant_inner\")]\r\npub enum Variant {\r\n    Plain,\r\n    Tuple(Vec<Type>),\r\n    Struct(Vec<Id>),\r\n}\r\n```\r\n\r\nConceptually I think the fix should be to replace `Tuple(Vec<Type>),` with `Tuple(Vec<Id>),` in the snippet above. But I have not thought this through in depth, it just intuitively seems like the right way to tackle this.\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92945/timeline", "performed_via_github_app": null, "state_reason": "completed"}