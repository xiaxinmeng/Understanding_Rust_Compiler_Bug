{"url": "https://api.github.com/repos/rust-lang/rust/issues/87309", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87309/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87309/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87309/events", "html_url": "https://github.com/rust-lang/rust/issues/87309", "id": 948546105, "node_id": "MDU6SXNzdWU5NDg1NDYxMDU=", "number": 87309, "title": "Moved value is considered as held across an `await` in `async fn`", "user": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2021-07-20T11:07:23Z", "updated_at": "2022-05-23T20:05:08Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nstruct Ref<'a, T>(&'a T, *const () /* !Send */);\r\n\r\nimpl<'a, T> Ref<'a, T> {\r\n    fn borrow(r: &'a T) -> Result<Self, ()> {\r\n        Ok(Self(r, 0 as _))\r\n    }\r\n}\r\n\r\n// Not `async fn` because `async fn` always captures lifetimes of arguments\r\nfn accept_ref<'a, T>(\r\n    _: Ref<'a, T>,\r\n) -> impl core::future::Future<Output = ()> + Send + Sync + 'static {\r\n    async {}\r\n}\r\n\r\nfn test<T: Send + Sync>(arg: T) {\r\n    let fut = async move {\r\n        match Ref::borrow(&arg) {\r\n            Ok(r) => {\r\n                // `r` is moved into `accept_ref` before `await`.\r\n                let fut = accept_ref(r);\r\n                Ok(fut.await)\r\n            },\r\n        //  - compiler thinks that `r` is dropped here, even though it's already moved \r\n        \r\n            Err(()) => Err(arg),\r\n        }\r\n    };\r\n\r\n    fn assert_send<T: Send>(_: T) {}\r\n\r\n    assert_send(fut);\r\n}\r\n```\r\n[[playground]](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=51d54e549a0981de80e20493fd15238e)\r\n\r\nI expected to see this happen: the code compiles.\r\n\r\nInstead, this happened: the following compile error:\r\n\r\n\r\n```text\r\nerror: future cannot be sent between threads safely\r\n  --> src/lib.rs:32:5\r\n   |\r\n30 |     fn assert_send<T: Send>(_: T) {}\r\n   |                       ---- required by this bound in `assert_send`\r\n31 | \r\n32 |     assert_send(fut);\r\n   |     ^^^^^^^^^^^ future created by async block is not `Send`\r\n   |\r\n   = help: within `impl Future`, the trait `Send` is not implemented for `*const ()`\r\nnote: future is not `Send` as this value is used across an await\r\n  --> src/lib.rs:22:20\r\n   |\r\n19 |             Ok(r) => {\r\n   |                - has type `Ref<'_, T>` which is not `Send`\r\n...\r\n22 |                 Ok(fut.await)\r\n   |                    ^^^^^^^^^ await occurs here, with `r` maybe used later\r\n23 |             },\r\n   |             - `r` is later dropped here\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.55.0-nightly (240ff4c4a 2021-07-09)\r\nbinary: rustc\r\ncommit-hash: 240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4\r\ncommit-date: 2021-07-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.55.0-nightly\r\nLLVM version: 12.0.1\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87309/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87309/timeline", "performed_via_github_app": null, "state_reason": null}