{"url": "https://api.github.com/repos/rust-lang/rust/issues/106875", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106875/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106875/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106875/events", "html_url": "https://github.com/rust-lang/rust/issues/106875", "id": 1533461428, "node_id": "I_kwDOAAsO6M5bZsO0", "number": 106875, "title": "derive(Debug) on simple enums should emit a single call to Formatter::write_str", "user": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-01-14T20:15:24Z", "updated_at": "2023-01-21T10:43:19Z", "closed_at": "2023-01-21T10:43:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, this code:\r\n```rust\r\n#[derive(Debug)]\r\npub enum ErrorKind {\r\n    A,\r\n    B,\r\n    C,\r\n}\r\n```\r\nExpands to this:\r\n```rust\r\n#[automatically_derived]\r\nimpl ::core::fmt::Debug for ErrorKind {\r\n    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\r\n        match self {\r\n            ErrorKind::A => ::core::fmt::Formatter::write_str(f, \"A\"),\r\n            ErrorKind::B => ::core::fmt::Formatter::write_str(f, \"B\"),\r\n            ErrorKind::C => ::core::fmt::Formatter::write_str(f, \"C\"),\r\n        }\r\n    }\r\n}\r\n```\r\nIt should expand to this instead:\r\n```rust\r\n#[automatically_derived]\r\nimpl ::core::fmt::Debug for ErrorKind {\r\n    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\r\n        ::core::fmt::Formatter::write_str(f, match self {\r\n            ErrorKind::A => \"A\",\r\n            ErrorKind::B => \"B\",\r\n            ErrorKind::C => \"C\",\r\n        })\r\n    }\r\n}\r\n```\r\n\r\nThe current version compiles to MIR that looks like this:\r\n```\r\n    bb3: {\r\n        _4 = &mut (*_2);\r\n        _6 = const \"A\";\r\n        _5 = _6;\r\n        _0 = Formatter::<'_>::write_str(move _4, move _5) -> bb5; // bb5 is the return block\r\n    }   \r\n```\r\nHoisting the `write_str` out of the match should dramatically reduce the amount of MIR we generate.\r\n\r\n@Kixiron suggested that storing all the string literals in an array and indexing into it with the discriminant might be even better, with the extra requirement that the discriminants are consecutive. That sounds more complicated to me in implementation, though it would have the nice extra benefit of generating a function body that is O(1) with respect to the number of variants in the enum.\r\n\r\nThis is similar to https://github.com/rust-lang/rust/issues/88793, the change I'm looking for here would let such an optimization apply.\r\n\r\n@rustbot label +C-enhancement +A-macros +A-proc-macros", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106875/timeline", "performed_via_github_app": null, "state_reason": "completed"}