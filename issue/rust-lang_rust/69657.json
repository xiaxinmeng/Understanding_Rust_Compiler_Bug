{"url": "https://api.github.com/repos/rust-lang/rust/issues/69657", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69657/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69657/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69657/events", "html_url": "https://github.com/rust-lang/rust/issues/69657", "id": 574375059, "node_id": "MDU6SXNzdWU1NzQzNzUwNTk=", "number": 69657, "title": "Very hard to read error when returning `?` from closure not returning Result or Option", "user": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-03T02:32:37Z", "updated_at": "2020-03-04T02:58:20Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The original code:\r\n```rust\r\n    // '[' expr ']' | '(' argument* ')' | '.' ID | '->' ID | '++' | '--'\r\n    fn match_postfix_op(&mut self) -> SyntaxResult<Option<Locatable<impl Fn(Expr) -> ExprType>>> {\r\n        let needs_id = |this: &mut Self, constructor: fn(Box<Expr>, InternedStr) -> ExprType| {\r\n            let start = this.next_token().unwrap().location;\r\n            let Locatable { data: id, location } = this.expect_id()?;\r\n            let location = start.merge(&location);\r\n            (move |expr| constructor(expr, id), location)\r\n        };\r\n        // prefix operator\r\n        let (func, location) = match self.peek_token() {\r\n            Some(Token::Dot) => needs_id(self, ExprType::Member)?,\r\n            _ => return Ok(None),\r\n        };\r\n        Ok(Some(Locatable {\r\n            data: move |e| func(Box::new(e)),\r\n            location,\r\n        }))\r\n    }\r\n```\r\n\r\n```\r\nerror[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\r\n   --> src/expr.rs:237:52\r\n    |\r\n235 |           let needs_id = |this: &mut Self, constructor: fn(Box<Expr>, InternedStr) -> ExprType| {\r\n    |  ________________________-\r\n236 | |             let start = this.next_token().unwrap().location;\r\n237 | |             let Locatable { data: id, location } = this.expect_id()?;\r\n    | |                                                    ^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a closure that returns `([closure@src/expr.rs:239:14: 239:47 constructor:_, id:_], data::lex::DefaultLocation)`\r\n238 | |             let location = start.merge(&location);\r\n239 | |             (move |expr| constructor(expr, id), location)\r\n240 | |         };\r\n    | |_________- this function should return `Result` or `Option` to accept `?`\r\n    |\r\n    = help: the trait `std::ops::Try` is not implemented for `([closure@src/expr.rs:239:14: 239:47 constructor:_, id:_], data::lex::DefaultLocation)`\r\n    = note: required by `std::ops::Try::from_error`\r\n\r\nerror[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\r\n   --> src/expr.rs:243:33\r\n    |\r\n243 |             Some(Token::Dot) => needs_id(self, ExprType::Member)?,\r\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `([closure@src/expr.rs:239:14: 239:47 constructor:_, id:_], data::lex::DefaultLocation)`\r\n    |\r\n    = help: the trait `std::ops::Try` is not implemented for `([closure@src/expr.rs:239:14: 239:47 constructor:_, id:_], data::lex::DefaultLocation)`\r\n    = note: required by `std::ops::Try::into_result`\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\nThe fix was to return `Ok()` at the end of the closure: `            Ok((move |expr| constructor(expr, id), location))`. It would be much more helpful if the error message suggested returning `Ok()` at the end instead of spouting a wall of text at me.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69657/timeline", "performed_via_github_app": null, "state_reason": null}