{"url": "https://api.github.com/repos/rust-lang/rust/issues/51362", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51362/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51362/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51362/events", "html_url": "https://github.com/rust-lang/rust/issues/51362", "id": 329344276, "node_id": "MDU6SXNzdWUzMjkzNDQyNzY=", "number": 51362, "title": "to_lowercase only uses unconditional parts of unicode.org's special-casing", "user": {"login": "squelart", "id": 8499548, "node_id": "MDQ6VXNlcjg0OTk1NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/8499548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/squelart", "html_url": "https://github.com/squelart", "followers_url": "https://api.github.com/users/squelart/followers", "following_url": "https://api.github.com/users/squelart/following{/other_user}", "gists_url": "https://api.github.com/users/squelart/gists{/gist_id}", "starred_url": "https://api.github.com/users/squelart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/squelart/subscriptions", "organizations_url": "https://api.github.com/users/squelart/orgs", "repos_url": "https://api.github.com/users/squelart/repos", "events_url": "https://api.github.com/users/squelart/events{/privacy}", "received_events_url": "https://api.github.com/users/squelart/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46311113, "node_id": "MDU6TGFiZWw0NjMxMTExMw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-unicode", "name": "A-unicode", "color": "f7e101", "default": false, "description": "Area: unicode related"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-05T08:05:55Z", "updated_at": "2018-06-05T15:57:14Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/rust-lang/rust/blob/f9157f5b869fdb14308eaf6778d01ee3d0e1268a/src/libcore/unicode/unicode.py#L168-169\r\n\r\nSince #25800, to_lowercase uses unicode.org's SpecialCasing.txt.\r\nHowever, it only follows unconditional rules from this file. One \"interesting\" case is:\r\n1. The main UnicodeData.txt file says that the lowercase of '\u0130' (0130, Latin capital letter I with dot above) should be 'i' (0069, good-old boring ASCII Latin small letter i).\r\n2. SpecialCasing.txt adds an unconditional rule that '\u0130' (0130) should in fact be lowercased to 'i\u0307' (0069 Latin small letter i + 0307 combining dot above).\r\n3. SpecialCasing.txt then adds a rule for tr (Turkish) and az (Azerbaijani) where '\u0130' (0130) should now be lowercased to just 'i' (0069 Latin small letter i) -- There are other related rules, dotted-i's match and non-dotted-i's match too.\r\n\r\nI think that (2) only makes sense when accompanied by (3): They are in the same file, touching the same character; (3) for tr/az and (2) for other languages.\r\nBut because only unconditional rules are handled, we end up with something hybrid that was intended for non-tr/az languages in contrast with tr/az, while ignoring the default language-independent specification from UnicodeData.txt.\r\n\r\nI realize that it's quite a corner case, and open to interpretation.\r\nAlso, SpecialCasing.txt contains other useful unconditional rules that are worth having, so it would be unfortunate to lose those.\r\nAnd (2) does have the advantage of making lowercasing reversible; though it's not a goal of unicode AFAIK.\r\n\r\nSo in the end, I'm not sure if&how this should be fixed -- other than implementing conditions, which would require handling languages.\r\n\r\nA compromise would be to ignore this one rule, by hard-coding an exception.\r\nThis restriction could be made less arbitrary, by saying: Unconditional rules are only accepted for characters that do **not** also have conditional rules.\r\n\r\nI understand if this won't be fixed, I at least wanted to bring attention to this case.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51362/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51362/timeline", "performed_via_github_app": null, "state_reason": null}