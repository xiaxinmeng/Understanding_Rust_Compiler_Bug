{"url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/10611", "repository_url": "https://api.github.com/repos/rust-lang/rust-clippy", "labels_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/10611/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/10611/comments", "events_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/10611/events", "html_url": "https://github.com/rust-lang/rust-clippy/issues/10611", "id": 1659627082, "node_id": "I_kwDOAZm0i85i6-ZK", "number": 10611, "title": "Cargo clippy --fix fails for thiserror #[from] macro derivations", "user": {"login": "ViddeM", "id": 16452604, "node_id": "MDQ6VXNlcjE2NDUyNjA0", "avatar_url": "https://avatars.githubusercontent.com/u/16452604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ViddeM", "html_url": "https://github.com/ViddeM", "followers_url": "https://api.github.com/users/ViddeM/followers", "following_url": "https://api.github.com/users/ViddeM/following{/other_user}", "gists_url": "https://api.github.com/users/ViddeM/gists{/gist_id}", "starred_url": "https://api.github.com/users/ViddeM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ViddeM/subscriptions", "organizations_url": "https://api.github.com/users/ViddeM/orgs", "repos_url": "https://api.github.com/users/ViddeM/repos", "events_url": "https://api.github.com/users/ViddeM/events{/privacy}", "received_events_url": "https://api.github.com/users/ViddeM/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149309557, "node_id": "MDU6TGFiZWwxNDkzMDk1NTc=", "url": "https://api.github.com/repos/rust-lang/rust-clippy/labels/C-bug", "name": "C-bug", "color": "F5F1FD", "default": false, "description": "Category: Clippy is not doing the correct thing"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-04-08T14:05:47Z", "updated_at": "2023-04-08T19:48:29Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n### Issue\r\n`cargo clippy --fix` fails with a warning saying that there likely is a bug in cargo or rustc itself.\r\nIt seems that the issue is related to the `#[from]` macro of the `thiserror` crate so maybe the issue is on their end but since the warning asked for a bug-report I thought I'd follow that.\r\n\r\nAll of the reported issues seems to be instances of \r\n```\r\nerror[E0277]: `?` couldn't convert the error to `ERROR_TYPE_A`\r\n...\r\nthe trait `std::convert::From<std::result::Result<_, ERROR_TYPE_B>>` is not implemented for `ERROR_TYPE_A`\r\n```\r\nHowever, the code compiles normally (using `cargo build`) as the trait is implemented using the [`thiserror`](https://crates.io/crates/thiserror) crates `#[from]` macro.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustup 1.25.2 (2023-02-04)\r\ninfo: This is the version for the rustup toolchain manager, not the rustc compiler.\r\ninfo: The currently active `rustc` version is `rustc 1.70.0-nightly (23ee2af2f 2023-04-07)`\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nwarning: failed to automatically apply fixes suggested by rustc to crate `accounts_rs`\r\n\r\nafter fixes were automatically applied the compiler reported errors within these files:\r\n\r\n  * src/services/email_service.rs\r\n  * src/services/google_api_service.rs\r\n  * src/services/reset_password_service.rs\r\n\r\nThis likely indicates a bug in either rustc or cargo itself,\r\nand we would appreciate a bug report! You're likely to see\r\na number of compiler warnings after this message which cargo\r\nattempted to fix but failed. If you could open an issue at\r\nhttps://github.com/rust-lang/rust/issues\r\nquoting the full output of this command we'd be very appreciative!\r\nNote that you may be able to make some more progress in the near-term\r\nfixing code with the `--broken-code` flag\r\n\r\nThe following errors were reported:\r\nerror[E0277]: `?` couldn't convert the error to `services::email_service::EmailError`\r\n  --> src/services/email_service.rs:34:15\r\n   |\r\n34 |             })?;\r\n   |               ^ the trait `std::convert::From<std::result::Result<_, services::google_api_service::GoogleApiError>>` is not implemented for `services::email_service::EmailError`\r\n   |\r\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n   = help: the trait `std::convert::From<services::google_api_service::GoogleApiError>` is implemented for `services::email_service::EmailError`\r\n   = note: required for `std::result::Result<(), services::email_service::EmailError>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::result::Result<_, services::google_api_service::GoogleApiError>>>`\r\n\r\nerror[E0277]: `?` couldn't convert the error to `services::email_service::EmailError`\r\n  --> src/services/email_service.rs:40:15\r\n   |\r\n40 |             })?;\r\n   |               ^ the trait `std::convert::From<std::result::Result<_, services::google_api_service::GoogleApiError>>` is not implemented for `services::email_service::EmailError`\r\n   |\r\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n   = help: the trait `std::convert::From<services::google_api_service::GoogleApiError>` is implemented for `services::email_service::EmailError`\r\n   = note: required for `std::result::Result<(), services::email_service::EmailError>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::result::Result<_, services::google_api_service::GoogleApiError>>>`\r\n\r\nerror[E0277]: `?` couldn't convert the error to `services::reset_password_service::ResetPasswordError`\r\n  --> src/services/reset_password_service.rs:55:11\r\n   |\r\n55 |         })?;\r\n   |           ^ the trait `std::convert::From<std::result::Result<_, services::reset_password_service::ResetPasswordError>>` is not implemented for `services::reset_password_service::ResetPasswordError`\r\n   |\r\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n   = help: the following other types implement trait `std::convert::From<T>`:\r\n             <services::reset_password_service::ResetPasswordError as std::convert::From<services::email_service::EmailError>>\r\n             <services::reset_password_service::ResetPasswordError as std::convert::From<sqlx::Error>>\r\n             <services::reset_password_service::ResetPasswordError as std::convert::From<util::accounts_error::AccountsError>>\r\n   = note: required for `std::result::Result<(), services::reset_password_service::ResetPasswordError>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::result::Result<_, services::reset_password_service::ResetPasswordError>>>`\r\n\r\nerror[E0277]: `?` couldn't convert the error to `services::reset_password_service::ResetPasswordError`\r\n   --> src/services/reset_password_service.rs:166:11\r\n    |\r\n166 |         })?;\r\n    |           ^ the trait `std::convert::From<std::result::Result<_, services::reset_password_service::ResetPasswordError>>` is not implemented for `services::reset_password_service::ResetPasswordError`\r\n    |\r\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n    = help: the following other types implement trait `std::convert::From<T>`:\r\n              <services::reset_password_service::ResetPasswordError as std::convert::From<services::email_service::EmailError>>\r\n              <services::reset_password_service::ResetPasswordError as std::convert::From<sqlx::Error>>\r\n              <services::reset_password_service::ResetPasswordError as std::convert::From<util::accounts_error::AccountsError>>\r\n    = note: required for `std::result::Result<(), services::reset_password_service::ResetPasswordError>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::result::Result<_, services::reset_password_service::ResetPasswordError>>>`\r\n\r\nerror[E0277]: `?` couldn't convert the error to `services::google_api_service::GoogleApiError`\r\n  --> src/services/google_api_service.rs:94:7\r\n   |\r\n94 |     })?;\r\n   |       ^ the trait `std::convert::From<std::result::Result<_, services::google_api_service::GoogleApiError>>` is not implemented for `services::google_api_service::GoogleApiError`\r\n   |\r\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n   = help: the following other types implement trait `std::convert::From<T>`:\r\n             <services::google_api_service::GoogleApiError as std::convert::From<jwt::Error>>\r\n             <services::google_api_service::GoogleApiError as std::convert::From<openssl::error::ErrorStack>>\r\n             <services::google_api_service::GoogleApiError as std::convert::From<reqwest::Error>>\r\n   = note: required for `std::result::Result<std::string::String, services::google_api_service::GoogleApiError>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::result::Result<_, services::google_api_service::GoogleApiError>>>`\r\n\r\nerror[E0277]: `?` couldn't convert the error to `services::google_api_service::GoogleApiError`\r\n   --> src/services/google_api_service.rs:158:11\r\n    |\r\n158 |         })?;\r\n    |           ^ the trait `std::convert::From<std::result::Result<_, services::google_api_service::GoogleApiError>>` is not implemented for `services::google_api_service::GoogleApiError`\r\n    |\r\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n    = help: the following other types implement trait `std::convert::From<T>`:\r\n              <services::google_api_service::GoogleApiError as std::convert::From<jwt::Error>>\r\n              <services::google_api_service::GoogleApiError as std::convert::From<openssl::error::ErrorStack>>\r\n              <services::google_api_service::GoogleApiError as std::convert::From<reqwest::Error>>\r\n    = note: required for `std::result::Result<(), services::google_api_service::GoogleApiError>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::result::Result<_, services::google_api_service::GoogleApiError>>>`\r\n\r\nerror: aborting due to 6 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nOriginal diagnostics will follow.\r\n```\r\n\r\nThis is followed by the standard `cargo clippy` output. \r\n\r\n</p>\r\n</details>\r\n\r\nIf helpful, the project in question is [`https://github.com/viddem/accounts-rs`](https://github.com/ViddeM/accounts-rs) and the output above is on [commit `d9b0694`](https://github.com/ViddeM/accounts-rs/commit/d9b0694bcf35eb21ae855cfd7a50278bcede6d2b). ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/10611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/10611/timeline", "performed_via_github_app": null, "state_reason": null}