{"url": "https://api.github.com/repos/rust-lang/rust/issues/46316", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46316/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46316/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46316/events", "html_url": "https://github.com/rust-lang/rust/issues/46316", "id": 277173908, "node_id": "MDU6SXNzdWUyNzcxNzM5MDg=", "number": 46316, "title": "API convention for blocking-, timeout-, and/or deadline-related functions", "user": {"login": "ia0", "id": 969295, "node_id": "MDQ6VXNlcjk2OTI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/969295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ia0", "html_url": "https://github.com/ia0", "followers_url": "https://api.github.com/users/ia0/followers", "following_url": "https://api.github.com/users/ia0/following{/other_user}", "gists_url": "https://api.github.com/users/ia0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ia0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ia0/subscriptions", "organizations_url": "https://api.github.com/users/ia0/orgs", "repos_url": "https://api.github.com/users/ia0/repos", "events_url": "https://api.github.com/users/ia0/events{/privacy}", "received_events_url": "https://api.github.com/users/ia0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 2635892938, "node_id": "MDU6TGFiZWwyNjM1ODkyOTM4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-time", "name": "A-time", "color": "f7e101", "default": false, "description": "Area: Time"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-11-27T21:23:58Z", "updated_at": "2023-03-18T02:43:25Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The standard library currently exposes several blocking- and/or timeout-related functions:\r\n\r\nFunction \\ Versions | Blocking | Timeout (ms) | Timeout\r\n--- | --- | --- | ---\r\n`std::sync::Condvar::wait*` | `wait` | `wait_timeout_ms` | `wait_timeout`\r\n`std::sync::mpsc::Receiver::recv*` | `recv` | none | `recv_timeout`\r\n`std::thread::park*` | `park` | `park_timeout_ms` | `park_timeout`\r\n`std::thread::sleep*` | none | `sleep_ms` | `sleep`\r\n\r\nThe timeout versions taking a `u32` in milliseconds are actually deprecated for the version taking a `Duration` since `1.6.0`.\r\n\r\nThis issue tracks the possibility to extend these APIs and provide a convention for blocking-, timeout-, and/or deadline-related functions. The current suggestion is:\r\n\r\nFunction \\ Versions | Blocking | Timeout | Deadline\r\n--- | --- | --- | ---\r\n`std::sync::Condvar::wait*` | `wait` | `wait_timeout` | `wait_deadline`\r\n`std::sync::mpsc::Receiver::recv*` | `recv` | `recv_timeout` | `recv_deadline`\r\n`std::thread::park*` | `park` | `park_timeout` | `park_deadline`\r\n`std::thread::sleep*` | none | `sleep_for` | `sleep_until`\r\n\r\nThe blocking versions do not take any extra argument and are not suffixed. The timeout versions take a timeout as a `Duration` and return if this timeout is reached (the timeout starts when the function is called with best-effort precision). They are suffixed by `_timeout`. The deadline versions take a deadline as an `Instant` and return if this deadline is reached (the deadline precision is best-effort). They are suffixed by `_deadline`.\r\n\r\nFor functions that do not have a meaningful blocking version (like sleep which would essentially block until the program ends), the timeout version would be suffixed by `_for` and the deadline version would be suffixed by `_until`. We don't have enough data-points to see if this rule is actually applicable. In a first iteration, we could leave aside those functions that do not have a meaningful blocking version.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46316/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46316/timeline", "performed_via_github_app": null, "state_reason": null}