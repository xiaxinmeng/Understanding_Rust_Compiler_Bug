{"url": "https://api.github.com/repos/rust-lang/rust/issues/110767", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110767/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110767/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110767/events", "html_url": "https://github.com/rust-lang/rust/issues/110767", "id": 1681488587, "node_id": "I_kwDOAAsO6M5kOXrL", "number": 110767, "title": "fragile codegen for autovectorized code (x86_64)", "user": {"login": "pdmetcalfe", "id": 1857420, "node_id": "MDQ6VXNlcjE4NTc0MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/1857420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pdmetcalfe", "html_url": "https://github.com/pdmetcalfe", "followers_url": "https://api.github.com/users/pdmetcalfe/followers", "following_url": "https://api.github.com/users/pdmetcalfe/following{/other_user}", "gists_url": "https://api.github.com/users/pdmetcalfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/pdmetcalfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pdmetcalfe/subscriptions", "organizations_url": "https://api.github.com/users/pdmetcalfe/orgs", "repos_url": "https://api.github.com/users/pdmetcalfe/repos", "events_url": "https://api.github.com/users/pdmetcalfe/events{/privacy}", "received_events_url": "https://api.github.com/users/pdmetcalfe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-04-24T15:01:01Z", "updated_at": "2023-04-25T21:26:24Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Using ```rustc --crate-type=lib  -C opt-level=3 -C target-cpu=skylake --emit asm lib.rs``` I tried this code:\r\n\r\n```rust\r\npub fn count_match_good(cs: &[u8], gs: &[u8]) -> usize {\r\n    let cs = &cs[..32];\r\n    let gs = &gs[..32];\r\n    cs.iter().zip(gs.iter())\r\n        .filter(|(&c, &g)| (c == b'C') & (g == b'G'))\r\n        .count()\r\n}\r\n\r\npub fn count_match_bad(xs: &[u8]) -> usize {\r\n    let cs = &xs[..32];\r\n    let gs = &xs[1..][..32];\r\n    cs.iter().zip(gs.iter())\r\n        .filter(|(&c, &g)| (c == b'C') & (g == b'G'))\r\n        .count()\r\n}\r\n```\r\n\r\nI expected both functions to generate similar assembler: two vector comparisons, one vector and, and a popcnt (and a few bounds checks). What I got was a bit different.\r\n\r\n```count_match_good``` actually generated the code I was expecting:\r\n\r\n```asm\r\n.LCPI0_0:\r\n\t.zero\t32,67\r\n.LCPI0_1:\r\n\t.zero\t32,71\r\n\t.section\t.text._ZN3lib16count_match_good17haddcacd7c4588d66E,\"ax\",@progbits\r\n\t.globl\t_ZN3lib16count_match_good17haddcacd7c4588d66E\r\n\t.p2align\t4, 0x90\r\n\t.type\t_ZN3lib16count_match_good17haddcacd7c4588d66E,@function\r\n_ZN3lib16count_match_good17haddcacd7c4588d66E:\r\n\t.cfi_startproc\r\n\tpushq\t%rax\r\n\t.cfi_def_cfa_offset 16\r\n\tcmpq\t$31, %rsi\r\n\tjbe\t.LBB0_3\r\n\tcmpq\t$32, %rcx\r\n\tjb\t.LBB0_2\r\n\tvmovdqu\t(%rdi), %ymm0\r\n\tvpcmpeqb\t.LCPI0_0(%rip), %ymm0, %ymm0\r\n\tvmovdqu\t(%rdx), %ymm1\r\n\tvpcmpeqb\t.LCPI0_1(%rip), %ymm1, %ymm1\r\n\tvpand\t%ymm1, %ymm0, %ymm0\r\n\tvpmovmskb\t%ymm0, %eax\r\n\tpopcntl\t%eax, %eax\r\n\tpopq\t%rcx\r\n\t.cfi_def_cfa_offset 8\r\n\tvzeroupper\r\n\tretq\r\n.LBB0_3:\r\n\t.cfi_def_cfa_offset 16\r\n\tleaq\t.L__unnamed_1(%rip), %rdx\r\n\tmovl\t$32, %edi\r\n\tcallq\t*_ZN4core5slice5index24slice_end_index_len_fail17h954ac87ccda54c62E@GOTPCREL(%rip)\r\n\tud2\r\n.LBB0_2:\r\n\tleaq\t.L__unnamed_2(%rip), %rdx\r\n\tmovl\t$32, %edi\r\n\tmovq\t%rcx, %rsi\r\n\tcallq\t*_ZN4core5slice5index24slice_end_index_len_fail17h954ac87ccda54c62E@GOTPCREL(%rip)\r\n\tud2\r\n.Lfunc_end0:\r\n\t.size\t_ZN3lib16count_match_good17haddcacd7c4588d66E, .Lfunc_end0-_ZN3lib16count_match_good17haddcacd7c4588d66E\r\n\t.cfi_endproc\r\n```\r\n\r\nBut ```count_match_bad``` was quite a bit different:\r\n\r\n```asm\r\n\t.p2align\t4\r\n.LCPI1_0:\r\n\t.byte\t0\r\n\t.byte\t1\r\n\t.byte\t2\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n.LCPI1_4:\r\n\t.byte\t1\r\n\t.byte\t0\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.byte\t128\r\n\t.section\t.rodata.cst32,\"aM\",@progbits,32\r\n\t.p2align\t5\r\n.LCPI1_1:\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t0\r\n\t.byte\t0\r\n\t.byte\t0\r\n\t.byte\t0\r\n\t.zero\t1\r\n\t.zero\t1\r\n\t.zero\t1\r\n\t.zero\t1\r\n\t.zero\t1\r\n\t.zero\t1\r\n\t.zero\t1\r\n.LCPI1_2:\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t255\r\n\t.byte\t0\r\n\t.byte\t0\r\n\t.byte\t0\r\n\t.byte\t0\r\n\t.byte\t0\r\n\t.byte\t0\r\n\t.byte\t0\r\n.LCPI1_3:\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t67\r\n.LCPI1_5:\r\n\t.byte\t67\r\n\t.byte\t67\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.byte\t71\r\n\t.section\t.text._ZN3lib15count_match_bad17h34fbcdcf3635493dE,\"ax\",@progbits\r\n\t.globl\t_ZN3lib15count_match_bad17h34fbcdcf3635493dE\r\n\t.p2align\t4, 0x90\r\n\t.type\t_ZN3lib15count_match_bad17h34fbcdcf3635493dE,@function\r\n_ZN3lib15count_match_bad17h34fbcdcf3635493dE:\r\n\t.cfi_startproc\r\n\tpushq\t%rax\r\n\t.cfi_def_cfa_offset 16\r\n\tcmpq\t$31, %rsi\r\n\tjbe\t.LBB1_1\r\n\tdecq\t%rsi\r\n\tcmpq\t$32, %rsi\r\n\tjb\t.LBB1_5\r\n\tvmovdqu\t3(%rdi), %xmm0\r\n\tmovzwl\t(%rdi), %eax\r\n\tvmovd\t%eax, %xmm1\r\n\tmovzbl\t2(%rdi), %eax\r\n\tvpinsrb\t$0, %eax, %xmm1, %xmm2\r\n\tvpinsrb\t$2, %eax, %xmm2, %xmm2\r\n\tvpshufb\t.LCPI1_0(%rip), %xmm2, %xmm2\r\n\tvpslldq\t$3, %xmm0, %xmm3\r\n\tvpsrldq\t$13, %xmm0, %xmm4\r\n\tmovzbl\t19(%rdi), %eax\r\n\tvpinsrb\t$3, %eax, %xmm4, %xmm4\r\n\tmovzbl\t20(%rdi), %ecx\r\n\tvpinsrb\t$4, %ecx, %xmm4, %xmm4\r\n\tvpor\t%xmm2, %xmm3, %xmm2\r\n\tvinserti128\t$1, %xmm4, %ymm2, %ymm2\r\n\tvmovd\t21(%rdi), %xmm3\r\n\tvpbroadcastd\t%xmm3, %ymm3\r\n\tvpslldq\t$5, %xmm3, %xmm4\r\n\tvinserti128\t$1, %xmm4, %ymm0, %ymm4\r\n\tvmovdqa\t.LCPI1_1(%rip), %ymm5\r\n\tvpblendvb\t%ymm5, %ymm2, %ymm4, %ymm2\r\n\tvmovq\t25(%rdi), %xmm4\r\n\tvpbroadcastq\t%xmm4, %ymm4\r\n\tvpslldq\t$9, %xmm4, %xmm5\r\n\tvinserti128\t$1, %xmm5, %ymm0, %ymm5\r\n\tvmovdqa\t.LCPI1_2(%rip), %ymm6\r\n\tvpblendvb\t%ymm6, %ymm2, %ymm5, %ymm2\r\n\tvpcmpeqb\t.LCPI1_3(%rip), %ymm2, %ymm2\r\n\tvpslldq\t$2, %xmm0, %xmm5\r\n\tvpshufb\t.LCPI1_4(%rip), %xmm1, %xmm1\r\n\tvpor\t%xmm1, %xmm5, %xmm1\r\n\tvpsrldq\t$14, %xmm0, %xmm0\r\n\tvpinsrb\t$2, %eax, %xmm0, %xmm0\r\n\tvpinsrb\t$3, %ecx, %xmm0, %xmm0\r\n\tvinserti128\t$1, %xmm0, %ymm1, %ymm0\r\n\tvpblendd\t$32, %ymm3, %ymm0, %ymm0\r\n\tvpblendd\t$192, %ymm4, %ymm0, %ymm0\r\n\tvpcmpeqb\t.LCPI1_5(%rip), %ymm0, %ymm0\r\n\tvpand\t%ymm0, %ymm2, %ymm0\r\n\tvpmovmskb\t%ymm0, %eax\r\n\tpopcntl\t%eax, %eax\r\n\tpopq\t%rcx\r\n\t.cfi_def_cfa_offset 8\r\n\tvzeroupper\r\n\tretq\r\n.LBB1_1:\r\n\t.cfi_def_cfa_offset 16\r\n\tleaq\t.L__unnamed_3(%rip), %rdx\r\n\tjmp\t.LBB1_2\r\n.LBB1_5:\r\n\tleaq\t.L__unnamed_4(%rip), %rdx\r\n.LBB1_2:\r\n\tmovl\t$32, %edi\r\n\tcallq\t*_ZN4core5slice5index24slice_end_index_len_fail17h954ac87ccda54c62E@GOTPCREL(%rip)\r\n\tud2\r\n.Lfunc_end1:\r\n\t.size\t_ZN3lib15count_match_bad17h34fbcdcf3635493dE, .Lfunc_end1-_ZN3lib15count_match_bad17h34fbcdcf3635493dE\r\n\t.cfi_endproc\r\n```\r\n\r\nThis is a minimal reproducible example for my Real Problem (which is a loop over chunks of a ```&[u8]```, summing ```count_match```). Code corresponding to ```count_match_bad``` is notably slower than that corresponding to ```count_match_good```.\r\n\r\n[Godbolt link](https://godbolt.org/z/W3qha884Y)\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.69.0 (84c898d65 2023-04-16)\r\nbinary: rustc\r\ncommit-hash: 84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc\r\ncommit-date: 2023-04-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.69.0\r\nLLVM version: 15.0.7\r\n```\r\n\r\nThis also exists in nightly as of \r\n```\r\nrustc 1.71.0-nightly (7f94b314c 2023-04-23)\r\nbinary: rustc\r\ncommit-hash: 7f94b314cead7059a71a265a8b64905ef2511796\r\ncommit-date: 2023-04-23\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.71.0-nightly\r\nLLVM version: 16.0.2\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110767/timeline", "performed_via_github_app": null, "state_reason": null}