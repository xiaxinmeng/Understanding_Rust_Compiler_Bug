{"url": "https://api.github.com/repos/rust-lang/rust/issues/80038", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80038/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80038/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80038/events", "html_url": "https://github.com/rust-lang/rust/issues/80038", "id": 766923495, "node_id": "MDU6SXNzdWU3NjY5MjM0OTU=", "number": 80038, "title": "Tracking Issue for Non-Lexical Constant Propagation", "user": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-12-14T21:00:30Z", "updated_at": "2022-11-15T12:35:53Z", "closed_at": "2022-11-15T12:35:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilization. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labelled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis is a tracking issue for the work I'm doing together with @oli-obk, regarding the upgrade of the MIR `const-prop` pass into a dataflow-analysis-enhanced Constant Propagation pass. This is part of my undergrad thesis, so as long as I am able to work on it, I should have at least the equivalent of part-time availability for the development of the feature.\r\n\r\nThe feature gate for this issue is `#![feature(non_lexical_constprop)]`\r\n(feature gate is not in-tree yet)\r\n\r\n### What this feature means\r\n\r\nCurrently, there is a MIR optimization pass that does what is commonly know as [Constant Folding](https://en.wikipedia.org/wiki/Constant_folding). In this post however, I'll refer to it as Constant Propagation, since that is the name that we've given it in the mir-opts directory and documentation :slightly_smiling_face:\r\n\r\nWhat the Constant Propagation pass currently does is very limited in scope: it has no awareness of conditional execution (the true and false branches of an `if` block, for example) and therefore, it limits the propagation range of values known-to-be-constant to just the block in which these values reside.\r\n\r\nIn this work we will do our best to bring CP up to at least the standard constant propagation passes present in the literature: where the compiler is smart enough to understand control flow, and can **conditionally propagate values** into control-flow-dependent blocks. For this, the tool we expect to use is the [MIR dataflow analysis framework](https://rustc-dev-guide.rust-lang.org/mir/dataflow.html), since CP is a problem known to be well-suited for dataflow analysis.\r\n\r\nThere are two end goals for this feature so far:\r\n\r\n1. To bring faster compilation times via the `rustc` frontend giving `IR` of greater quality to `LLVM`.\r\n2. To make certain kinds of static analyses possible, that so far require ad-hoc machinery to even be possible, like [this Clippy lint](https://github.com/rust-lang/rust-clippy/issues/628) that tries to catch whether or not the user is transmuting a `null` pointer at compile time. By having better compile-time information on the value of variables, we expect many analyses like this one to be more viable to realize.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilizes the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n(Subject to further breakup into smaller steps)\r\n\r\n- [ ] Implement CP based on the [MIR dataflow framework](https://rustc-dev-guide.rust-lang.org/mir/dataflow.html) that's currently available in `rustc`\r\n- [ ] Test the implementation thoroughly (using a feature flag).\r\n- [ ] Adjust relevant documentation (CC @oli-obk is there docs on MIR opts? I think we've discussed this before. Maybe it doesn't make sense to document the optimization per se until we've really found an end to the road of available const-prop enhancements, since CP will definitely get upgraded until that happens).\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n\r\nNone so far. Please ask away, I'm sure there's something I've missed :slightly_smiling_face: \r\n\r\n### Implementation history\r\n\r\nThere's no implementation yet, although I can look up the recent changes to the `const-prop` pass and outline them here.\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n\r\n### Closing note\r\n\r\nThis should probably be called Non-Lexical ConstProp, since Lexical boundaries are precisely as far as ConstProp can reach right now, and dataflow-aware ConstProp will go beyond, just like the Lifetime analysis did ^^\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80038/reactions", "total_count": 4, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 4, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80038/timeline", "performed_via_github_app": null, "state_reason": "completed"}