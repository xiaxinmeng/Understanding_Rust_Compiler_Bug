{"url": "https://api.github.com/repos/rust-lang/rust/issues/69593", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69593/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69593/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69593/events", "html_url": "https://github.com/rust-lang/rust/issues/69593", "id": 573398375, "node_id": "MDU6SXNzdWU1NzMzOTgzNzU=", "number": 69593, "title": "Moving a method from struct impl to trait causes performance degradation", "user": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2020-02-29T19:43:13Z", "updated_at": "2020-03-05T12:04:39Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi all, thanks for all the work on the rust project!\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::time::Instant;\r\n\r\nfn main() {\r\n    let finder = OddFinderOne;\r\n\r\n    let start_time = Instant::now();\r\n    let result = find_nth_odd(finder, 1_000_000_000);\r\n    let elapsed_time = start_time.elapsed().as_millis();\r\n\r\n    println!(\"{} in {} ms\", result, elapsed_time);\r\n}\r\n\r\nfn find_nth_odd(odd_finder: OddFinderOne, n: u64) -> u64 {\r\n    let mut i = 0;\r\n    let mut odd_count = 0;\r\n\r\n    while odd_count != n {\r\n        i += 1;\r\n        if odd_finder.is_odd(i) {\r\n            odd_count += 1;\r\n        }\r\n    }\r\n\r\n    i\r\n}\r\n\r\ntrait OddFinder {\r\n    fn is_odd(&self, n: u64) -> bool;\r\n}\r\n\r\nstruct OddFinderOne;\r\n\r\nimpl OddFinder for OddFinderOne {\r\n    fn is_odd(&self, n: u64) -> bool {\r\n        n % 2 == 1\r\n    }\r\n}\r\n```\r\n\r\nI expected it to perform similarly to this code:\r\n\r\n```rust\r\nuse std::time::Instant;\r\n\r\nfn main() {\r\n    let finder = OddFinder;\r\n\r\n    let start_time = Instant::now();\r\n    let result = find_nth_odd(finder, 1_000_000_000);\r\n    let elapsed_time = start_time.elapsed().as_millis();\r\n\r\n    println!(\"{} in {} ms\", result, elapsed_time);\r\n}\r\n\r\nfn find_nth_odd(odd_finder: OddFinder, n: u64) -> u64 {\r\n    let mut i = 0;\r\n    let mut odd_count = 0;\r\n\r\n    while odd_count != n {\r\n        i += 1;\r\n        if odd_finder.is_odd(i) {\r\n            odd_count += 1;\r\n        }\r\n    }\r\n\r\n    i\r\n}\r\n\r\nstruct OddFinder;\r\n\r\nimpl OddFinder {\r\n    fn is_odd(&self, n: u64) -> bool {\r\n        n % 2 == 1\r\n    }\r\n}\r\n```\r\n\r\nInstead, this happened:\r\n\r\nThe version with the `is_odd` method defined directly on the struct completes in 1032 ms, while the version where `is_odd` is defined as part of the trait completes in 1340 ms. I would expect this abstraction to be zero cost, since the `find_nth_odd` method in both cases is defined as taking the concrete struct as an argument (as opposed to a trait object).\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.41.0 (5e1a79984 2020-01-27)\r\nbinary: rustc\r\ncommit-hash: 5e1a799842ba6ed4a57e91f7ab9435947482f7d8\r\ncommit-date: 2020-01-27\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.41.0\r\nLLVM version: 9.0\r\n```\r\n\r\n`rustc +nightly --version --verbose`\r\n```\r\nrustc 1.43.0-nightly (0eb878d2a 2020-02-28)\r\nbinary: rustc\r\ncommit-hash: 0eb878d2aa6e3a1cb315f3f328681b26bb4bffdb\r\ncommit-date: 2020-02-28\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.43.0-nightly\r\nLLVM version: 9.0\r\n```\r\nI see the same behavior with both the latest stable and nightly compilers. I run both version of the program in release mode. The reported performance numbers have proven to be very repeatable. \r\n\r\nLet me know if I can provide any additional useful information. You can find my repo containing this benchmark code at the link below.\r\n\r\nhttps://github.com/JoshMcguigan/cost-of-indirection", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69593/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69593/timeline", "performed_via_github_app": null, "state_reason": null}