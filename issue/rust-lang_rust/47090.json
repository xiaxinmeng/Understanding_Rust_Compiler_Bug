{"url": "https://api.github.com/repos/rust-lang/rust/issues/47090", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47090/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47090/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47090/events", "html_url": "https://github.com/rust-lang/rust/issues/47090", "id": 285252522, "node_id": "MDU6SXNzdWUyODUyNTI1MjI=", "number": 47090, "title": "Macro fails to generate generic implementation unless it is with ident", "user": {"login": "uzytkownik", "id": 5706, "node_id": "MDQ6VXNlcjU3MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uzytkownik", "html_url": "https://github.com/uzytkownik", "followers_url": "https://api.github.com/users/uzytkownik/followers", "following_url": "https://api.github.com/users/uzytkownik/following{/other_user}", "gists_url": "https://api.github.com/users/uzytkownik/gists{/gist_id}", "starred_url": "https://api.github.com/users/uzytkownik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uzytkownik/subscriptions", "organizations_url": "https://api.github.com/users/uzytkownik/orgs", "repos_url": "https://api.github.com/users/uzytkownik/repos", "events_url": "https://api.github.com/users/uzytkownik/events{/privacy}", "received_events_url": "https://api.github.com/users/uzytkownik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-31T11:16:48Z", "updated_at": "2018-01-30T14:50:48Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I've tried several ways but it looks like the only way is to 'smuggle' the ops by using ident. It seems that macros should be able to stuck path with generic arguments as idents seems counterintuitive.\r\n\r\n```rust\r\nmacro_rules! gen_impl1 {\r\n    ($trt:path, $arg:ty, $fr:ty, $o:ty, $f:ident) => {\r\n        impl $trt<$arg> for $fr {\r\n            type Output = $o;\r\n            fn $f(self, rhs: $arg) -> Self::Output {\r\n                loop {}\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nmacro_rules! gen_impl2 {\r\n    ($trt:tt, $arg:ty, $fr:ty, $o:ty, $f:ident) => {\r\n        impl $trt<$arg> for $fr {\r\n            type Output = $o;\r\n            fn $f(self, rhs: $arg) -> Self::Output {\r\n                loop {}\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nmacro_rules! gen_impl3 {\r\n    ($trt:path, $arg:ty, $fr:ty, $o:ty, $f:ident) => {\r\n        gen_impl3!([$trt<$arg>], $fr, $o, $f);\r\n    };\r\n    ([$($trt:tt)*], $fr:ty, $o:ty, $f:ident) => {\r\n        impl $($trt)* for $fr {\r\n            type Output = $o;\r\n            fn $f(self, rhs: $arg) -> Self::Output {\r\n                loop {}\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nmacro_rules! gen_impl4 {\r\n    ($trt:path, $arg:ty, $fr:ty, $o:ty, $f:ident) => {\r\n        gen_impl3!($trt<$arg>, $fr, $o, $f);\r\n    };\r\n    ($trt:ty, $fr:ty, $o:ty, $f:ident) => {\r\n        impl $trt for $fr {\r\n            type Output = $o;\r\n            fn $f(self, rhs: $arg) -> Self::Output {\r\n                loop {}\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nmacro_rules! gen_impl5 {\r\n    ($($trt:ident)::*, $arg:ty, $fr:ty, $o:ty, $f:ident) => {\r\n        impl $($trt)::*<$arg> for $fr {\r\n            type Output = $o;\r\n            fn $f(self, rhs: $arg) -> Self::Output {\r\n                loop {}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmacro_rules! gen_impl_ident {\r\n    ($trt:ident, $arg:ty, $fr:ty, $o:ty, $f:ident) => {\r\n        impl $trt<$arg> for $fr {\r\n            type Output = $o;\r\n            fn $f(self, rhs: $arg) -> Self::Output {\r\n                loop {}\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nstruct Foo;\r\nstruct Bar;\r\nstruct FooBar;\r\n\r\n// Those fails with: no rules expected the token `<`\r\ngen_impl1!(std::ops::Add, Foo, Bar, FooBar, add);\r\ngen_impl2!(std::ops::Add, Foo, Bar, FooBar, add);\r\ngen_impl3!(std::ops::Add, Foo, Bar, FooBar, add);\r\ngen_impl4!(std::ops::Add, Foo, Bar, FooBar, add);\r\n\r\n// This works\r\ngen_impl5!(std::ops::Add, Foo, Bar, FooBar, add);\r\nuse std::ops::Add;\r\ngen_impl_ident!(Add, Foo, Bar, FooBar, add);\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47090/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47090/timeline", "performed_via_github_app": null, "state_reason": null}