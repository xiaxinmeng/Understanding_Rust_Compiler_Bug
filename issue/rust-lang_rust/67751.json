{"url": "https://api.github.com/repos/rust-lang/rust/issues/67751", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67751/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67751/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67751/events", "html_url": "https://github.com/rust-lang/rust/issues/67751", "id": 544180459, "node_id": "MDU6SXNzdWU1NDQxODA0NTk=", "number": 67751, "title": "Trait alias compilation failure when returning impl Alias", "user": {"login": "hniksic", "id": 1078190, "node_id": "MDQ6VXNlcjEwNzgxOTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1078190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hniksic", "html_url": "https://github.com/hniksic", "followers_url": "https://api.github.com/users/hniksic/followers", "following_url": "https://api.github.com/users/hniksic/following{/other_user}", "gists_url": "https://api.github.com/users/hniksic/gists{/gist_id}", "starred_url": "https://api.github.com/users/hniksic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hniksic/subscriptions", "organizations_url": "https://api.github.com/users/hniksic/orgs", "repos_url": "https://api.github.com/users/hniksic/repos", "events_url": "https://api.github.com/users/hniksic/events{/privacy}", "received_events_url": "https://api.github.com/users/hniksic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472515602, "node_id": "MDU6TGFiZWwxNDcyNTE1NjAy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-trait_alias", "name": "F-trait_alias", "color": "f9c0cc", "default": false, "description": "`#![feature(trait_alias)]`"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-31T12:41:11Z", "updated_at": "2022-11-12T16:33:18Z", "closed_at": "2022-11-12T16:33:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While working on a [stackoverflow question](https://stackoverflow.com/q/59535042/1600898) I encountered the need for trait aliases. For example, this code ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=291acfce5a541b53d3bb5ee3eee6c267)) uses a very long trait several times:\r\n\r\n```rust\r\nfn to_box_factory<F, RET>(f: F) -> impl Fn(&'static str) -> Box<dyn Iterator<Item = &'static str>>\r\nwhere\r\n    F: Fn(&'static str) -> RET,\r\n    RET: Iterator<Item = &'static str> + 'static,\r\n{\r\n    move |s| Box::new(f(s))\r\n}\r\n\r\nfn main() {\r\n    let f1: &dyn Fn(&'static str) -> Box<dyn Iterator<Item = &'static str>> = &to_box_factory(|s| s.split_whitespace());\r\n    let f2: &dyn Fn(&'static str) -> Box<dyn Iterator<Item = &'static str>> = &to_box_factory(|s| s.split_ascii_whitespace());\r\n    let fs = vec![f1, f2];\r\n    fs[0](\"rust 2020\").for_each(|s| println!(\"{}\", s));\r\n    fs[1](\"rust 2020\").for_each(|s| println!(\"{}\", s));\r\n}\r\n```\r\n\r\nIt would improve readability and reduce duplication to introduce a trait alias for `Fn(&'static str) -> Box<dyn Iterator<Item = &'static str>>`. My attempt was to simply replace all uses of the trait with the alias, resulting in the following ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f43b7b261c6560dbdcf8c24831fe1eb9)):\r\n\r\n```rust\r\n#![feature(trait_alias)]\r\ntrait BoxFactory = Fn(&'static str) -> Box<dyn Iterator<Item = &'static str>>;\r\n\r\nfn to_box_factory<F, RET>(f: F) -> impl BoxFactory\r\nwhere\r\n    F: Fn(&'static str) -> RET,\r\n    RET: Iterator<Item = &'static str> + 'static,\r\n{\r\n    move |s| Box::new(f(s))\r\n}\r\n\r\nfn main() {\r\n    let f1: &dyn BoxFactory = &to_box_factory(|s| s.split_whitespace());\r\n    let f2: &dyn BoxFactory = &to_box_factory(|s| s.split_ascii_whitespace());\r\n    let fs = vec![f1, f2];\r\n    fs[0](\"rust 2020\").for_each(|s| println!(\"{}\", s));\r\n    fs[1](\"rust 2020\").for_each(|s| println!(\"{}\", s));\r\n}\r\n```\r\n\r\nHowever, that fails to compile with the following error:\r\n\r\n```\r\nerror[E0271]: type mismatch resolving `<[closure@src/main.rs:9:5: 9:28 f:_] as std::ops::FnOnce<(&'static str,)>>::Output == std::boxed::Box<(dyn std::iter::Iterator<Item = &'static str> + 'static)>`\r\n --> src/main.rs:4:36\r\n  |\r\n4 | fn to_box_factory<F, RET>(f: F) -> impl BoxFactory\r\n  |                      ---           ^^^^^^^^^^^^^^^ expected type parameter `RET`, found trait `std::iter::Iterator`\r\n  |                      |\r\n  |                      this type parameter\r\n  |\r\n  = note: expected struct `std::boxed::Box<RET>`\r\n             found struct `std::boxed::Box<(dyn std::iter::Iterator<Item = &'static str> + 'static)>`\r\n  = help: type parameters must be constrained to match other types\r\n  = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n  = note: the return type of a function must have a statically known size\r\n```\r\n\r\nI'm not sure I understand that error, nor do I understand why the error doesn't appear in the first version.\r\n\r\nCuriously, if I just replace `-> impl BoxFactory` with the full incantation of `-> impl Fn(&'static str) -> Box<dyn Iterator<Item = &'static str>>` ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=5d1fb060e67f7bf0add8c70f917b7631)), but leave the other two uses of the alias in `main()`, the code compiles and runs correctly. Is it a bug that returning `impl Alias` fails, while returning `impl [original trait]` works?\r\n\r\nNote: I am aware that trait aliases are experimental. My motivation for reporting this issue is to ensure that problems with the feature (if any) are worked out before it is stabilized.", "closed_by": {"login": "hniksic", "id": 1078190, "node_id": "MDQ6VXNlcjEwNzgxOTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1078190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hniksic", "html_url": "https://github.com/hniksic", "followers_url": "https://api.github.com/users/hniksic/followers", "following_url": "https://api.github.com/users/hniksic/following{/other_user}", "gists_url": "https://api.github.com/users/hniksic/gists{/gist_id}", "starred_url": "https://api.github.com/users/hniksic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hniksic/subscriptions", "organizations_url": "https://api.github.com/users/hniksic/orgs", "repos_url": "https://api.github.com/users/hniksic/repos", "events_url": "https://api.github.com/users/hniksic/events{/privacy}", "received_events_url": "https://api.github.com/users/hniksic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67751/timeline", "performed_via_github_app": null, "state_reason": "completed"}