{"url": "https://api.github.com/repos/rust-lang/rust/issues/86224", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86224/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86224/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86224/events", "html_url": "https://github.com/rust-lang/rust/issues/86224", "id": 918924575, "node_id": "MDU6SXNzdWU5MTg5MjQ1NzU=", "number": 86224, "title": "Generators generating wrong lifetimes", "user": {"login": "nappa85", "id": 7566389, "node_id": "MDQ6VXNlcjc1NjYzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/7566389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nappa85", "html_url": "https://github.com/nappa85", "followers_url": "https://api.github.com/users/nappa85/followers", "following_url": "https://api.github.com/users/nappa85/following{/other_user}", "gists_url": "https://api.github.com/users/nappa85/gists{/gist_id}", "starred_url": "https://api.github.com/users/nappa85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nappa85/subscriptions", "organizations_url": "https://api.github.com/users/nappa85/orgs", "repos_url": "https://api.github.com/users/nappa85/repos", "events_url": "https://api.github.com/users/nappa85/events{/privacy}", "received_events_url": "https://api.github.com/users/nappa85/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-06-11T15:55:41Z", "updated_at": "2021-06-11T15:55:41Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I'm pretty sure something like that has already been reported, maybe about HRTB, but I can't find an exact issue.\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::{cmp::Eq, collections::HashMap, hash::Hash, sync::Arc, time::Duration, future::Future};\r\n\r\nuse tokio::{sync::RwLock, time::sleep};\r\n\r\n/// This struct works as an async barrier like OnceCell, but locks disappear from memory after a given time, and there are different callbacks for read and write\r\npub struct OnceBarrier<T>\r\nwhere T: Hash + Eq + Clone + Send + Sync + 'static {\r\n    delay: Duration,\r\n    inner: Arc<RwLock<HashMap<T, Arc<RwLock<()>>>>>,\r\n}\r\n\r\nimpl<T> OnceBarrier<T>\r\nwhere T: Hash + Eq + Clone + Send + Sync + 'static {\r\n    pub fn new(delay: Duration) -> Self {\r\n        OnceBarrier {\r\n            delay,\r\n            inner: Arc::new(RwLock::new(HashMap::new())),\r\n        }\r\n    }\r\n\r\n    async fn can_read(&self, key: &T) -> bool {\r\n        let lock = self.inner.read().await;\r\n        if let Some(rw) = lock.get(key) {\r\n            rw.read().await;\r\n            true\r\n        }\r\n        else {\r\n            false\r\n        }\r\n    }\r\n\r\n    pub async fn get<Read, ReadFut, Write, WriteFut, Out>(&self, key: T, read_callback: Read, write_callback: Write) -> Out\r\n    where\r\n        Read: Fn(&T) -> ReadFut,\r\n        ReadFut: Future<Output=Out>,\r\n        Write: Fn(&T) -> WriteFut,\r\n        WriteFut: Future<Output=Out>,\r\n    {\r\n        // check if entry exists\r\n        if self.can_read(&key).await {\r\n            return read_callback(&key).await;\r\n        }\r\n\r\n        // entry still doesn't exists\r\n        let mut lock = self.inner.write().await;\r\n        if lock.get(&key).is_some() {\r\n            // we are late, drop write lock to dequeue and retry\r\n            drop(lock);\r\n            if self.can_read(&key).await {\r\n                return read_callback(&key).await;\r\n            }\r\n            else {\r\n                unreachable!();\r\n            }\r\n        }\r\n\r\n        // create the entry and write-lock it\r\n        let inner = Arc::new(RwLock::new(()));\r\n        lock.insert(key.clone(), Arc::clone(&inner));\r\n        let temp = inner.write().await;\r\n        drop(lock);\r\n\r\n        // call write callback\r\n        let res = write_callback(&key).await;\r\n        // delete the entry after given time\r\n        let delay = self.delay;\r\n        let inner = Arc::clone(&self.inner);\r\n        tokio::spawn(async move {\r\n            sleep(delay).await;\r\n            let mut lock = inner.write().await;\r\n            lock.remove(&key);\r\n        });\r\n        // free write lock and return\r\n        drop(temp);\r\n        res\r\n    }\r\n}\r\n\r\n#[tokio::main]\r\nasync fn main() {\r\n    let ob = OnceBarrier::new(Duration::from_secs(1));\r\n    println!(\"{}\", ob.get(String::from(\"foo\"), |foo| async move { println!(\"read {}\", foo); 1_u8 }, |foo| async move { println!(\"write {}\", foo); 2_u8 }).await);\r\n    println!(\"{}\", ob.get(String::from(\"foo\"), |foo| async move { println!(\"read {}\", foo); 1_u8 }, |foo| async move { println!(\"write {}\", foo); 2_u8 }).await);\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\neverything should works fine, like it's sync counterpart:\r\n```rust\r\nuse std::{cmp::Eq, collections::HashMap, hash::Hash, sync::Arc, time::Duration};\r\n\r\nuse std::{sync::RwLock, thread};\r\n\r\n/// This struct works as an async barrier like OnceCell, but locks disappear from memory after a given time, and there are different callbacks for read and write\r\npub struct OnceBarrier<T>\r\nwhere T: Hash + Eq + Clone + Send + Sync + 'static {\r\n    delay: Duration,\r\n    inner: Arc<RwLock<HashMap<T, Arc<RwLock<()>>>>>,\r\n}\r\n\r\nimpl<T> OnceBarrier<T>\r\nwhere T: Hash + Eq + Clone + Send + Sync + 'static {\r\n    pub fn new(delay: Duration) -> Self {\r\n        OnceBarrier {\r\n            delay,\r\n            inner: Arc::new(RwLock::new(HashMap::new())),\r\n        }\r\n    }\r\n\r\n    fn can_read(&self, key: &T) -> bool {\r\n        let lock = self.inner.read().unwrap();\r\n        if let Some(rw) = lock.get(key) {\r\n            rw.read().unwrap();\r\n            true\r\n        }\r\n        else {\r\n            false\r\n        }\r\n    }\r\n\r\n    pub fn get<Read, Write, Out>(&self, key: T, read_callback: Read, write_callback: Write) -> Out\r\n    where\r\n        Read: Fn(&T) -> Out,\r\n        Write: Fn(&T) -> Out,\r\n    {\r\n        // check if entry exists\r\n        if self.can_read(&key) {\r\n            return read_callback(&key);\r\n        }\r\n\r\n        // entry still doesn't exists\r\n        let mut lock = self.inner.write().unwrap();\r\n        if lock.get(&key).is_some() {\r\n            // we are late, drop write lock to dequeue and retry\r\n            drop(lock);\r\n            if self.can_read(&key) {\r\n                return read_callback(&key);\r\n            }\r\n            else {\r\n                unreachable!();\r\n            }\r\n        }\r\n\r\n        // create the entry and write-lock it\r\n        let inner = Arc::new(RwLock::new(()));\r\n        lock.insert(key.clone(), Arc::clone(&inner));\r\n        let temp = inner.write().unwrap();\r\n        drop(lock);\r\n\r\n        // call write callback\r\n        let res = write_callback(&key);\r\n        // delete the entry after given time\r\n        let delay = self.delay;\r\n        let inner = Arc::clone(&self.inner);\r\n        thread::spawn(move || {\r\n            thread::sleep(delay);\r\n            let mut lock = inner.write().unwrap();\r\n            lock.remove(&key);\r\n        });\r\n        // free write lock and return\r\n        drop(temp);\r\n        res\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let ob = OnceBarrier::new(Duration::from_secs(1));\r\n    println!(\"{}\", ob.get(String::from(\"foo\"), |foo| { println!(\"read {}\", foo); 1_u8 }, |foo| { println!(\"write {}\", foo); 2_u8 }));\r\n    println!(\"{}\", ob.get(String::from(\"foo\"), |foo| { println!(\"read {}\", foo); 1_u8 }, |foo| { println!(\"write {}\", foo); 2_u8 }));\r\n}\r\n```\r\n\r\nInstead, this happened:\r\nI get an error like\r\n```\r\n82 | ...rom(\"foo\"), |foo| async move { println!(\"read {}\", foo); 1_u8 }, |foo| async move { println!(\"write {}\", foo); 2_u8 }).await);\r\n   |                 ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\r\n   |                 |  |\r\n   |                 |  return type of closure `impl Future` contains a lifetime `'2`\r\n   |                 has type `&'1 String`\r\n```\r\nObviously I tried naming a lifetime for &T and giving it to the returned Future, making things worse", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86224/timeline", "performed_via_github_app": null, "state_reason": null}