{"url": "https://api.github.com/repos/rust-lang/rust/issues/13909", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/13909/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/13909/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/13909/events", "html_url": "https://github.com/rust-lang/rust/issues/13909", "id": 32736437, "node_id": "MDU6SXNzdWUzMjczNjQzNw==", "number": 13909, "title": "No modulo operator?", "user": {"login": "atg", "id": 32292, "node_id": "MDQ6VXNlcjMyMjky", "avatar_url": "https://avatars.githubusercontent.com/u/32292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atg", "html_url": "https://github.com/atg", "followers_url": "https://api.github.com/users/atg/followers", "following_url": "https://api.github.com/users/atg/following{/other_user}", "gists_url": "https://api.github.com/users/atg/gists{/gist_id}", "starred_url": "https://api.github.com/users/atg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atg/subscriptions", "organizations_url": "https://api.github.com/users/atg/orgs", "repos_url": "https://api.github.com/users/atg/repos", "events_url": "https://api.github.com/users/atg/events{/privacy}", "received_events_url": "https://api.github.com/users/atg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-05-03T00:53:31Z", "updated_at": "2014-05-03T04:08:36Z", "closed_at": "2014-05-03T04:08:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's rather disappointing to me that Rust has no working modulo operator. I had hoped that, like Ruby and Python, `%` would give correct results on negative numbers (e.g. -4 is 2 (mod 3)). Alas it has the same broken behaviour as C.\n\nI see `%` has been retconned as a \"remainder\" operator, but realistically, most people expect correctness rather than historical artefacts. Apparently, [I'm not the only one](https://stackoverflow.com/questions/4003232/how-to-code-a-modulo-operator-in-c-c-obj-c-that-handles-negative-numbers) bothered by it.\n\nIf it were me, I would change % to match Ruby and Python, and introduce a \"rem\" keyword to fulfil the current behaviour. This is a neat solution because it doesn't give up any performance (for all those people doing modulo division in a tight loop, I guess?), but it doesn't give the middle finger to mathematicians either.\n\n2\u00a2.\n", "closed_by": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/13909/reactions", "total_count": 8, "+1": 6, "-1": 2, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/13909/timeline", "performed_via_github_app": null, "state_reason": "completed"}