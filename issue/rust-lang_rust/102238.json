{"url": "https://api.github.com/repos/rust-lang/rust/issues/102238", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102238/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102238/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102238/events", "html_url": "https://github.com/rust-lang/rust/issues/102238", "id": 1384716314, "node_id": "I_kwDOAAsO6M5SiRga", "number": 102238, "title": "`#[must_use]` on traits should apply to all types that implement the trait, not just for `impl Trait` placeholders", "user": {"login": "KarelPeeters", "id": 7887115, "node_id": "MDQ6VXNlcjc4ODcxMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/7887115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KarelPeeters", "html_url": "https://github.com/KarelPeeters", "followers_url": "https://api.github.com/users/KarelPeeters/followers", "following_url": "https://api.github.com/users/KarelPeeters/following{/other_user}", "gists_url": "https://api.github.com/users/KarelPeeters/gists{/gist_id}", "starred_url": "https://api.github.com/users/KarelPeeters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KarelPeeters/subscriptions", "organizations_url": "https://api.github.com/users/KarelPeeters/orgs", "repos_url": "https://api.github.com/users/KarelPeeters/repos", "events_url": "https://api.github.com/users/KarelPeeters/events{/privacy}", "received_events_url": "https://api.github.com/users/KarelPeeters/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-09-24T15:32:34Z", "updated_at": "2023-04-05T17:28:44Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "# General issue\r\n\r\nCurrently, `#[must_use]` on a trait `Foo` does not extend to types that implement `Foo`, it only works on `impl Foo` return types, and `Box<dyn Foo>` as a [special case](https://github.com/rust-lang/rust/pull/62228):\r\n\r\n```rust\r\n#[must_use]\r\ntrait Foo {}\r\n\r\nstruct Bar;\r\nimpl Foo for Bar {}\r\n\r\nfn build_foo() -> impl Foo { Bar }\r\n\r\nfn build_box() -> Box<dyn Foo> { Box::new(Bar) }\r\n\r\nfn build_bar() -> Bar { Bar }\r\n\r\nfn main() {\r\n    build_foo(); // warning: unused implementer of `Foo` that must be used\r\n    build_box(); // warning: unused boxed `Foo` trait object that must be used\r\n    build_bar(); // no warning!\r\n}\r\n```\r\n\r\n[(playground)](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=e20f4a36678da8e8b02f4c7e30276199)\r\n\r\nThis does not make much sense, presumably if a trait must always be used all types that implement that trait must also be used.\r\n\r\n# Application to `Future`\r\n\r\nI came across this when dealing with futures. The Future trait has a `#[must_use]` annotation, with the useful reminder to `.await` or poll them:\r\n\r\nhttps://github.com/rust-lang/rust/blob/b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a/library/core/src/future/future.rs#L28-L37\r\n\r\nI was specifically using specifically [`BoxFuture`](https://docs.rs/futures/latest/futures/future/type.BoxFuture.html), a type alias for `Pin<Box<dyn Future>>`. This type [implements `Future`](https://doc.rust-lang.org/beta/core/future/trait.Future.html#impl-Future-for-Pin%3CP%3E), but there is no warning message when you forget to use it. This was also the original justification in https://github.com/rust-lang/rust/issues/67387, where a very different solution is proposed (extending `must_use` to `Pin` and other wrapper types).\r\n\r\nAnother effect of this missing warning is that any struct that implements `Future` has to repeat the same `must_use` annotation. Some examples:\r\n* [`futures::future::Ready`](https://github.com/rust-lang/futures-rs/blob/dddfc35cbde4bd35e7103f4720ebfea1e3c55913/futures-util/src/future/ready.rs#L8)\r\n* [`tokio::time::Sleep`](https://github.com/tokio-rs/tokio/blob/ebeb78ed40027032feb77c89a1de4b58d2dcafbf/tokio/src/time/sleep.rs#L227)\r\n* `async_std` doesn't expose any public types that implement `Future`, instead they almost always use an `impl Future` return type. There is still the internal [`WriteFmtFuture`](https://github.com/async-rs/async-std/blob/798ce31e1095af16fe760aa97e86b924324bf118/src/io/write/write_fmt.rs#L9).\r\n\r\nIf `must_use` on traits infected any type that implemented it, these duplicate annotations could be removed and there would be no risk of forgetting them for any future types.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102238/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102238/timeline", "performed_via_github_app": null, "state_reason": null}