{"url": "https://api.github.com/repos/rust-lang/rust/issues/71320", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71320/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71320/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71320/events", "html_url": "https://github.com/rust-lang/rust/issues/71320", "id": 602701954, "node_id": "MDU6SXNzdWU2MDI3MDE5NTQ=", "number": 71320, "title": "Implement `From<Cow<'a, B>> for Cow<'static, B>`", "user": {"login": "Luro02", "id": 24826124, "node_id": "MDQ6VXNlcjI0ODI2MTI0", "avatar_url": "https://avatars.githubusercontent.com/u/24826124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Luro02", "html_url": "https://github.com/Luro02", "followers_url": "https://api.github.com/users/Luro02/followers", "following_url": "https://api.github.com/users/Luro02/following{/other_user}", "gists_url": "https://api.github.com/users/Luro02/gists{/gist_id}", "starred_url": "https://api.github.com/users/Luro02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Luro02/subscriptions", "organizations_url": "https://api.github.com/users/Luro02/orgs", "repos_url": "https://api.github.com/users/Luro02/repos", "events_url": "https://api.github.com/users/Luro02/events{/privacy}", "received_events_url": "https://api.github.com/users/Luro02/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-19T12:23:45Z", "updated_at": "2020-04-19T12:27:38Z", "closed_at": "2020-04-19T12:27:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[`std::borrow::Cow`](https://doc.rust-lang.org/std/borrow/enum.Cow.html) should provide a `From<Cow<'a, B>> for Cow<'static, B>` implementation.\r\n\r\nWhich could be used to make types independent of lifetimes:\r\n\r\n```rust\r\nuse std::borrow::Cow;\r\n\r\n#[derive(Debug)]\r\npub struct Uri<'a>(pub Cow<'a, str>);\r\n\r\npub fn create_uri<'a>(input: &'a str) -> Uri<'a> { Uri(Cow::Borrowed(input)) }\r\n\r\nfn main() {\r\n    let uri = {\r\n        let base = String::from(\"https://www.example.com/\");\r\n\r\n        create_uri(base.as_str())\r\n    }; // errors, because `base` does not live long enough\r\n    \r\n    dbg!(uri);\r\n}\r\n```\r\n\r\nthis would error with\r\n\r\n```\r\nerror[E0597]: `base` does not live long enough\r\n  --> src/main.rs:49:20\r\n   |\r\n46 |     let uri = {\r\n   |         --- borrow later stored here\r\n...\r\n49 |         create_uri(base.as_str())\r\n   |                    ^^^^ borrowed value does not live long enough\r\n50 |     };\r\n   |     - `base` dropped here while still borrowed\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nIn the above case, one could move the `base` variable out of the block, but this is not always possible or desired.\r\n\r\nIt would be useful if one could do this:\r\n\r\n```rust\r\nfn main() {\r\n    let uri = {\r\n        let base = String::from(\"https://www.example.com/\");\r\n\r\n        create_uri(base.as_str()).into_owned()\r\n    }; // compiles, because the returned type is Uri<'static>\r\n\r\n    dbg!(uri);\r\n}\r\n```\r\n\r\nThis is another example of how this can be useful:\r\n\r\n```rust\r\nuse std::borrow::Cow;\r\n\r\n#[derive(Debug)]\r\npub struct Uri<'a>(pub Cow<'a, str>);\r\n\r\nimpl<'a> Uri<'a> {\r\n    pub fn into_owned(self) -> Uri<'static> {\r\n        Uri(Cow::from_custom(self.0))\r\n    }\r\n}\r\n\r\n#[derive(Debug)]\r\npub struct Request {\r\n    uri: Uri<'static>,\r\n}\r\n\r\nimpl Request {\r\n    pub fn with_uri<'a>(uri: Uri<'a>) -> Self {\r\n        Self {\r\n            uri: uri.into_owned(),\r\n        }\r\n    }\r\n\r\n    pub fn with_uri_2(uri: Uri<'static>) -> Self {\r\n        Self { uri }\r\n    }\r\n}\r\n\r\npub fn create_uri<'a>(input: &'a str) -> Uri<'a> {\r\n    Uri(Cow::Borrowed(input))\r\n}\r\n\r\nfn main() {\r\n    let base = String::from(\"https://www.example.com/\");\r\n    let uri = create_uri(base.as_str());\r\n\r\n    // let request = Request::with_uri(uri); // works as expected\r\n    let request = Request::with_uri_2(uri); // fails to compile\r\n\r\n    dbg!(request);\r\n}\r\n```\r\n\r\n----\r\n\r\nThe implementation looks like this\r\n\r\n```rust\r\nimpl<'a, B: ?Sized + ToOwned> From<Cow<'a, B>> for Cow<'static, B> {\r\n    fn from(value: Cow<'a, B>) -> Self {\r\n        match value {\r\n            Cow::Borrowed(b) => Cow::Owned(b.to_owned()),\r\n            Cow::Owned(o) => Cow::Owned(o),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=use%20std%3A%3Aborrow%3A%3ACow%3B%0A%0A%0Apub%20trait%20From%3CT%3E%20%7B%0A%20%20%20%20fn%20from_custom(_%3A%20T)%20-%3E%20Self%3B%0A%7D%0A%0Aimpl%3C'a%2C%20B%3A%20%3FSized%20%2B%20ToOwned%3E%20From%3CCow%3C'a%2C%20B%3E%3E%20for%20Cow%3C'static%2C%20B%3E%20%7B%0A%20%20%20%20fn%20from_custom(value%3A%20Cow%3C'a%2C%20B%3E)%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20match%20value%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Cow%3A%3ABorrowed(b)%20%3D%3E%20Cow%3A%3AOwned(b.to_owned())%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Cow%3A%3AOwned(o)%20%3D%3E%20Cow%3A%3AOwned(o)%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0A%23%5Bderive(Debug)%5D%0Apub%20struct%20Example%3C'a%3E%20%7B%0A%20%20%20%20pub%20field%3A%20Cow%3C'a%2C%20str%3E%2C%0A%7D%0A%0Aimpl%3C'a%3E%20Example%3C'a%3E%20%7B%0A%20%20%20%20pub%20fn%20into_owned(self)%20-%3E%20Example%3C'static%3E%20%7B%0A%20%20%20%20%20%20%20%20Example%20%7B%20field%3A%20Cow%3A%3Afrom_custom(self.field)%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20example%20%3D%20Example%20%7B%20field%3A%20%22hello%22.into()%20%7D%3B%0A%0A%20%20%20%20dbg!(example.into_owned())%3B%0A%7D)", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71320/timeline", "performed_via_github_app": null, "state_reason": "completed"}