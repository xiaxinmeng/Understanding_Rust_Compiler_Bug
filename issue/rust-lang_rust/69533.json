{"url": "https://api.github.com/repos/rust-lang/rust/issues/69533", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69533/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69533/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69533/events", "html_url": "https://github.com/rust-lang/rust/issues/69533", "id": 572451233, "node_id": "MDU6SXNzdWU1NzI0NTEyMzM=", "number": 69533, "title": "Rust's signal stack should be guarded against overflow", "user": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-28T00:51:49Z", "updated_at": "2020-03-19T09:14:47Z", "closed_at": "2020-03-19T09:14:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Rust's runtime installs a `SIGSEGV` signal handler to distinguish stack overflows from other faults. This requires using an alternate signal stack (`sigaltstack`), which we create with the default size `SIGSTKSZ`. That's usually quite small, 8KB or so depending on the target, but it's still plenty for what the `SIGSEGV` handler is doing. There's currently no guard page like we have on normal stacks.\r\n\r\nThat alternate stack is shared by all signals for a thread, so if a user installs any other signal handler, and they opt in with the flag `SA_ONSTACK`, they'll be limited to the same tiny stack. If their handler happens to be more involved and overflows that stack, it may silently clobber other memory. If we had a guard page on the signal stack, that would cause a process abort instead.\r\n\r\nThis was reported to the Security Response WG with a reproducer in [this repo](https://github.com/eust/rust_sigstack_overflow). However, after discussion we decided to treat this as a normal issue for a few reasons:\r\n\r\n- Setting a custom signal handler requires `unsafe` code.\r\n- Signal handlers already run in a quite constrained environment, e.g. [`signal-safety(7)`](http://man7.org/linux/man-pages/man7/signal-safety.7.html).\r\n- It's unusual to use `SA_ONSTACK` for signals other than `SIGSEGV`, and if you choose so, you also bear responsibility to make sure that stack suffices.\r\n\r\nNevertheless, as a defensive measure, it's still a reasonable idea to map a `PROT_NONE` guard page when Rust is creating its signal stack, so an unexpected overflow will abort rather than silently corrupting memory. For full protection, that would also depend on the guard page not being skipped, but not all targets have stack probes yet (#43241).\r\n\r\n---\r\n\r\nThanks to @eust for reporting this in accordance with our [security policy](https://www.rust-lang.org/policies/security), even though we have decided not to treat this as a security issue at this time.\r\n\r\ncc @rust-lang/security ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69533/timeline", "performed_via_github_app": null, "state_reason": "completed"}