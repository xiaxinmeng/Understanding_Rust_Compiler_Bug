{"url": "https://api.github.com/repos/rust-lang/rust/issues/70155", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70155/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70155/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70155/events", "html_url": "https://github.com/rust-lang/rust/issues/70155", "id": 584531042, "node_id": "MDU6SXNzdWU1ODQ1MzEwNDI=", "number": 70155, "title": "RangeInclusive cannot be used in const generics.", "user": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1486687397, "node_id": "MDU6TGFiZWwxNDg2Njg3Mzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_generics", "name": "F-const_generics", "color": "f9c0cc", "default": false, "description": "`#![feature(const_generics)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-19T16:17:15Z", "updated_at": "2020-03-24T04:16:01Z", "closed_at": "2020-03-24T04:16:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "All range types except `RangeInclusive` can be used in const generics:\r\n\r\n```rust\r\n#![feature(const_generics)]\r\n\r\nstruct A<const R: Range<usize>>;\r\nstruct B<const R: RangeTo<usize>>;\r\nstruct C<const R: RangeFrom<usize>>;\r\nstruct D<const R: RangeToInclusive<usize>>;\r\nstruct E<const R: RangeFull<usize>>;\r\n```\r\nThis [compiles](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=fc43f8e353ac76d4f061ca7091307e65) (on nightly), while the following [does not](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=257007d2880c3db1196d2fe5bc27fc14):\r\n```rust\r\n#![feature(const_generics)]\r\n\r\nstruct S<const R: RangeInclusive<usize>>;\r\n```\r\n\r\nThis is because `RangeInclusive` does not implement `StructuralPartialEq` and `StructuralEq` (#63438). `RangeInclusive` has fields `start` and `end` similar to the other range types, but also has an extra field: `exhausted: bool` (#68835). This was recently changed from a field `is_empty: Option<bool>`. This extra field tracks state for iteration and was added to address performance issues (#45222). \r\n\r\nThe old implementation with `is_empty` had *semantic* equality, however the new implementation with `exhausted` has *structural* equality:\r\n\r\n```rust\r\nimpl<Idx: PartialEq> PartialEq for RangeInclusive<Idx> {\r\n    #[inline]\r\n    fn eq(&self, other: &Self) -> bool {\r\n        self.start == other.start && self.end == other.end && self.exhausted == other.exhausted\r\n    }\r\n} \r\n```\r\nfrom [range.rs](https://github.com/CAD97/rust/blob/3e115b6c9dea4806fa18254cd946858c27fe5ad0/src/libcore/ops/range.rs#L354-L359)\r\n\r\nI believe this means we can either manually add implementations for `StructuralPartialEq` and `StructuralEq`, or just derive `PartialEq` and `Eq`, which will allow `RangeInclusive` to also be used in const generics and remove the inconsistency with other range types. \r\n\r\n", "closed_by": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70155/timeline", "performed_via_github_app": null, "state_reason": "completed"}