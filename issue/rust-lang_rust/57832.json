{"url": "https://api.github.com/repos/rust-lang/rust/issues/57832", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57832/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57832/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57832/events", "html_url": "https://github.com/rust-lang/rust/issues/57832", "id": 401751582, "node_id": "MDU6SXNzdWU0MDE3NTE1ODI=", "number": 57832, "title": "repr(simd) struct with one i64 element incorrectly emits x86_mmx", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 55302148, "node_id": "MDU6TGFiZWw1NTMwMjE0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86_64", "name": "O-x86_64", "color": "6e6ec0", "default": false, "description": "Target: x64 processors"}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-22T12:55:05Z", "updated_at": "2020-10-15T02:52:26Z", "closed_at": "2020-10-15T02:52:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Reproducer ([godbolt](https://gcc.godbolt.org/z/Wk6IMd)):\r\n\r\n```rust\r\n#[repr(simd)] pub struct Foo(i64);\r\n#[no_mangle] pub fn foo(x: Foo) -> Foo { x } \r\n```\r\n\r\non x86_64 emits\r\n\r\n```llvm\r\ndefine void @foo(x86_mmx* noalias nocapture sret dereferenceable(8), x86_mmx* noalias nocapture readonly dereferenceable(8) %x) unnamed_addr #0 {\r\n  %1 = bitcast x86_mmx* %x to i64*\r\n  %2 = load i64, i64* %1, align 8\r\n  %3 = bitcast x86_mmx* %0 to i64*\r\n  store i64 %2, i64* %3, align 8\r\n  ret void\r\n}\r\n```\r\n\r\nIt should be emitting a `<1 x i64>` type instead. The `x86_mmx` type forces the use of MMX registers and comes with its huge bag of pitfalls when interfacing between MMX and x87 code. \r\n\r\nAccess to this type should be provided on x86 and x86_64 somehow else, maybe using a `repr(simd_x86_mmx)` ?  This type is only relevant for `core::arch` when implementing `__m64` on x86/x86_64 anyways. \r\n\r\nInternally, we probably want to treat `x86_mmx` as a vector type in rustc, but it should be a vector type different from all other vector types. Maybe we can add a `.is_mmx()` method to the `simd_vector` types that can be used to query whether a 64-bit wide vector is an x86_mmx type. I don't remember if whether a vector type is `x86_mmx` or a normal vector types matters anywhere in rustc except for when doing codegen for the vector type.", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57832/timeline", "performed_via_github_app": null, "state_reason": "completed"}