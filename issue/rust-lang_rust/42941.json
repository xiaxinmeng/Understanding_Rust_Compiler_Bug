{"url": "https://api.github.com/repos/rust-lang/rust/issues/42941", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42941/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42941/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42941/events", "html_url": "https://github.com/rust-lang/rust/issues/42941", "id": 238965376, "node_id": "MDU6SXNzdWUyMzg5NjUzNzY=", "number": 42941, "title": "Long compile time due to excessively long translation passes", "user": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-06-27T20:01:39Z", "updated_at": "2017-07-02T22:02:36Z", "closed_at": "2017-07-02T21:38:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Following up from https://github.com/rust-lang/rust/issues/41696#issuecomment-310563913, I'm seeing compile times in excess of 13 *minutes* for a relatively simple program. In particular, running `cargo test --lib --no-run` on https://github.com/jonhoo/fantoccini/commit/0802a57bcac2c50e569dc7649f3b90ae4e8787c9 takes ~925s on my laptop, as does even a simple program that *uses* the library in a similar way as the tests. The output of `-Z time-passes` is \r\n```\r\ntime: 0.007; rss: 55MB  parsing\r\ntime: 0.000; rss: 55MB  recursion limit\r\ntime: 0.000; rss: 55MB  crate injection\r\ntime: 0.000; rss: 55MB  plugin loading\r\ntime: 0.000; rss: 55MB  plugin registration\r\ntime: 0.099; rss: 112MB expansion\r\ntime: 0.003; rss: 112MB maybe building test harness\r\ntime: 0.000; rss: 112MB maybe creating a macro crate\r\ntime: 0.000; rss: 112MB checking for inline asm in case the target doesn't support it\r\ntime: 0.001; rss: 112MB early lint checks\r\ntime: 0.000; rss: 112MB AST validation\r\ntime: 0.011; rss: 120MB name resolution\r\ntime: 0.002; rss: 120MB complete gated feature checking\r\ntime: 0.004; rss: 122MB lowering ast -> hir\r\ntime: 0.001; rss: 122MB indexing hir\r\ntime: 0.000; rss: 122MB attribute checking\r\ntime: 0.000; rss: 122MB language item collection\r\ntime: 0.000; rss: 122MB lifetime resolution\r\ntime: 0.000; rss: 122MB looking for entry point\r\ntime: 0.000; rss: 122MB looking for plugin registrar\r\ntime: 0.000; rss: 122MB loop checking\r\ntime: 0.000; rss: 122MB static item recursion checking\r\ntime: 0.005; rss: 122MB compute_incremental_hashes_map\r\ntime: 0.000; rss: 122MB load_dep_graph\r\ntime: 0.000; rss: 122MB stability index\r\ntime: 0.001; rss: 122MB stability checking\r\ntime: 0.009; rss: 132MB type collecting\r\ntime: 0.000; rss: 132MB impl wf inference\r\ntime: 0.031; rss: 154MB coherence checking\r\ntime: 0.000; rss: 154MB variance testing\r\ntime: 0.006; rss: 154MB wf checking\r\ntime: 0.006; rss: 158MB item-types checking\r\ntime: 0.205; rss: 164MB item-bodies checking\r\ntime: 0.021; rss: 168MB const checking\r\ntime: 0.001; rss: 168MB privacy checking\r\ntime: 0.000; rss: 168MB intrinsic checking\r\ntime: 0.000; rss: 168MB effect checking\r\ntime: 0.003; rss: 168MB match checking\r\ntime: 0.001; rss: 168MB liveness checking\r\ntime: 0.070; rss: 174MB borrow checking\r\ntime: 0.000; rss: 174MB reachability checking\r\ntime: 0.001; rss: 174MB death checking\r\ntime: 0.000; rss: 174MB unused lib feature checking\r\ntime: 0.014; rss: 174MB lint checking\r\ntime: 0.000; rss: 174MB resolving dependency formats\r\n  time: 0.001; rss: 174MB       write metadata\r\n  time: 495.029; rss: 206MB     translation item collection\r\n  time: 0.012; rss: 214MB       codegen unit partitioning\r\n  time: 0.007; rss: 337MB       internalize symbols\r\ntime: 807.783; rss: 337MB       translation\r\ntime: 0.000; rss: 337MB assert dep graph\r\ntime: 0.000; rss: 337MB serialize dep graph\r\n  time: 0.002; rss: 324MB       codegen passes [0]\r\n  time: 0.205; rss: 326MB       llvm function passes [1]\r\n  time: 0.129; rss: 330MB       llvm module passes [1]\r\n  time: 4.515; rss: 336MB       codegen passes [1]\r\ntime: 4.852; rss: 332MB LLVM passes\r\ntime: 0.000; rss: 332MB serialize work products\r\n  time: 0.682; rss: 245MB       running linker\r\ntime: 0.685; rss: 245MB linking\r\n```\r\nThe gap in\r\n```\r\n  time: 0.001; rss: 174MB       write metadata\r\n  time: 495.029; rss: 206MB     translation item collection\r\n  time: 0.012; rss: 214MB       codegen unit partitioning\r\n  time: 0.007; rss: 337MB       internalize symbols\r\ntime: 807.783; rss: 337MB       translation\r\n```\r\nis pretty curious. The extra time is spent *between* when `codegen unit partitioning` is printed and when `internalize symbols` is printed, but not sure if that helps?", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42941/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42941/timeline", "performed_via_github_app": null, "state_reason": "completed"}