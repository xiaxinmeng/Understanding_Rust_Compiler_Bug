{"url": "https://api.github.com/repos/rust-lang/rust/issues/70788", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70788/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70788/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70788/events", "html_url": "https://github.com/rust-lang/rust/issues/70788", "id": 594068367, "node_id": "MDU6SXNzdWU1OTQwNjgzNjc=", "number": 70788, "title": "Better diagnostics for single type with multiple lifetimes that flow into each other", "user": {"login": "Ekleog", "id": 411447, "node_id": "MDQ6VXNlcjQxMTQ0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ekleog", "html_url": "https://github.com/Ekleog", "followers_url": "https://api.github.com/users/Ekleog/followers", "following_url": "https://api.github.com/users/Ekleog/following{/other_user}", "gists_url": "https://api.github.com/users/Ekleog/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ekleog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ekleog/subscriptions", "organizations_url": "https://api.github.com/users/Ekleog/orgs", "repos_url": "https://api.github.com/users/Ekleog/repos", "events_url": "https://api.github.com/users/Ekleog/events{/privacy}", "received_events_url": "https://api.github.com/users/Ekleog/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-04T20:22:23Z", "updated_at": "2020-04-04T21:38:51Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Unfortunately, I haven't managed to create a reasonably small reproducer on play.rust-lang.org, so here is the reproducer I\u00a0have. Checked with `rustc 1.42.0 (b8cedc004 2020-03-09)`.\r\n\r\nThe repository can be found [here](https://github.com/Ekleog/rlua-async/commit/821d91bd2a9d248b67e77701febda171e2a332fd).\r\n\r\nThe diagnostics look like this:\r\n```rust\r\nerror[E0623]: lifetime mismatch\r\n   --> src/lib.rs:159:10\r\n    |\r\n150 |     scop: &'callback Scope<'lua, 'scope>,\r\n    |           ------------------------------\r\n    |           |\r\n    |           these two types are declared with different lifetimes...\r\n...\r\n159 |     scop.create_function_mut(move |ctx, _: MultiValue<'lua>| -> Result<MultiValue<'lua>> {\r\n    |          ^^^^^^^^^^^^^^^^^^^ ...but data from `scop` flows into `scop` here\r\n```\r\n\r\nFor code that looks like this:\r\n```rust\r\nfn scoped_poller_fn<'lua, 'scope, 'callback, Ret, RetFut>(\r\n    scop: &'callback Scope<'lua, 'scope>,\r\n    mut fut: Pin<Box<RetFut>>,\r\n) -> Result<Function<'lua>>\r\nwhere\r\n    'lua: 'scope,\r\n    'scope: 'callback,\r\n    Ret: ToLuaMulti<'callback>,\r\n    RetFut: 'scope + Send + Future<Output = Result<Ret>>,\r\n{\r\n    scop.create_function_mut(move |ctx, _: MultiValue<'lua>| -> Result<MultiValue<'lua>> {\r\n        FUTURE_CTX.with(|fut_ctx| {\r\n            let fut_ctx_ref = unsafe { &mut *(*fut_ctx as *mut task::Context) };\r\n            match Future::poll(fut.as_mut(), fut_ctx_ref) {\r\n                Poll::Pending => ToLuaMulti::to_lua_multi((rlua::Value::Nil, false), ctx),\r\n                Poll::Ready(v) => {\r\n                    let v = ToLuaMulti::to_lua_multi(v?, ctx)?.into_vec();\r\n                    ToLuaMulti::to_lua_multi((v, true), ctx)\r\n                }\r\n            }\r\n        })\r\n    })\r\n}\r\n```\r\n\r\n(the fix being to replace the `MultiValue<'lua>` by `MultiValue<'callback>`).\r\n\r\nThe closest I've reached to reproducing on play.rlo is https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b6b2c097fe4cf8dd843c57412b906821 ; but this one does do diagnostics properly, so\u2026\r\n\r\nOne element of note: the error in the diagnostics disappear if one removes the `'lua: 'scope` line.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70788/timeline", "performed_via_github_app": null, "state_reason": null}