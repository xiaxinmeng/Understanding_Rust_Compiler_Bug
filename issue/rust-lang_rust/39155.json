{"url": "https://api.github.com/repos/rust-lang/rust/issues/39155", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39155/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39155/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39155/events", "html_url": "https://github.com/rust-lang/rust/issues/39155", "id": 201579836, "node_id": "MDU6SXNzdWUyMDE1Nzk4MzY=", "number": 39155, "title": "Guarantee that values in hash map are disjoint from each other and the HashMap struct.", "user": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-01-18T13:53:33Z", "updated_at": "2021-06-10T11:31:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There was some discussion about the unsafe guarantees of `HashMap` on Reddit[1] which inspired me to write this issue.\r\n\r\nThe current HashMap implementation has its entries at memory locations that are disjoint from each other and from the `HashMap` struct. That means that in principle, there could simultaneously exist multiple mutable references to different, disjoint values contained in hash map without aliasing happening. This idea is similar in principle to the reason why `split_at_mut` API on mutable slices can exist.\r\n\r\nHowever, as the `HashMap` currently provides no guarantees for supporting the disjointness of its entries, no unsafe code is allowed to trust it \u2013 especially because `HashMap` is a part of the `std`, and we can't currently pin version dependencies to `std`; the implementation of `HashMap` is allowed to \"silently\" change and break unsafe code.\r\n\r\nI think it would make sense to document what the current implementation does in practice as a guarantee: the values stored in hash map are disjoint from each other and from the `HashMap` struct. In practice, this disallows the following situations:\r\n\r\n* The `HashMap` struct containing some of its values \"inline\", inside the struct.\r\n* Some value `v1` containing an instance of another value `v2` (for example, a boxed struct that contains more boxed structs of the same type), and `HashMap` returning a reference to `v2` as a reference to \"separate\" value from `v1`.\r\n\r\nTo be sure, I don't mean that `HashMap` should necessarily guarantee that each key maps to a separate value \u2013 just that separate values don't alias. Also I don't propose an API that allows multiple unaliased mutable references to the values in hash map; but this guarantee can be seen as a preliminary requirement for such an API to exist in future.\r\n\r\n[1] https://www.reddit.com/r/rust/comments/5ofuun/multi_mut_multiple_mutable_references_to_hashmap/ ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39155/timeline", "performed_via_github_app": null, "state_reason": null}