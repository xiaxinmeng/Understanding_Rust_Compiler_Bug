{"url": "https://api.github.com/repos/rust-lang/rust/issues/45994", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45994/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45994/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45994/events", "html_url": "https://github.com/rust-lang/rust/issues/45994", "id": 273997687, "node_id": "MDU6SXNzdWUyNzM5OTc2ODc=", "number": 45994, "title": "[impl Trait] Should we allow `impl Trait` after `->` in `fn` types or parentheses sugar?", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-11-15T00:58:01Z", "updated_at": "2021-05-28T14:57:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[RFC 1951] disallowed uses of impl Trait within Fn trait sugar or higher-ranked bounds. For example, the following is disallowed:\r\n\r\n[RFC 1951]: https://github.com/rust-lang/rfcs/blob/master/text/1951-expand-impl-trait.md#expansion-to-arguments\r\n\r\n```\r\nfn foo(f: impl Fn(impl SomeTrait) -> impl OtherTrait)\r\nfn bar() -> (impl Fn(impl SomeTrait) -> impl OtherTrait)\r\n```\r\n\r\nThis tracking issue exists to discuss -- if we were to allow them -- what semantics they ought to have. Some known concerns around the syntax are:\r\n\r\n- Should the `()` switch from existential to universal quantification and back?\r\n    - I think the general feeling here is now \"no\", basically because \"too complex\".\r\n- If HRTB were introduced, where would we (e.g.) want `impl OtherTrait` to be bound?\r\n\r\nFor consistency, we are disallow `fn(impl SomeTrait) -> impl OtherTrait` and `dyn Fn(impl SomeTrait) -> impl OtherTrait` as well. When considering the questions, one should also consider what the meaning would be in those contexts.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45994/reactions", "total_count": 17, "+1": 12, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 2, "rocket": 2, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45994/timeline", "performed_via_github_app": null, "state_reason": null}