{"url": "https://api.github.com/repos/rust-lang/rust/issues/1846", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1846/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1846/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1846/events", "html_url": "https://github.com/rust-lang/rust/issues/1846", "id": 3229731, "node_id": "MDU6SXNzdWUzMjI5NzMx", "number": 1846, "title": "alias checker rules seem inconsistent or buggy around boxes", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2012-02-15T03:15:48Z", "updated_at": "2014-06-16T21:56:30Z", "closed_at": "2012-02-15T10:53:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems to me that the alias checker rules are at least inconsistent and quite possibly buggy around shared boxes and closures.  It's possible, however, that I just don't understand what's going on. \n\nThis was motivated by the [future code I posted in a recent blog post](http://smallcultfollowing.com/babysteps/blog/2012/02/14/using-futures-in-the-task-api/).  The code does something very similar to this:\n\n```\ntype foo<T> = { mutable  f: option<T> };\nfn foo<T>(&&f: foo<T>, g: fn(T)) {\n    alt f.f {\n      some(v) { g(v); } // X\n      none { ... }\n    }\n}\n```\n\nHowever, the alias checker complained at line `X`, presumably because the closure `g()` might modify the contents of `f.f`, thus invalidating the reference `v`.\n\nTo fix this without introducing a copy of the type `T`, brson and I tried using an immutable box to store the value:\n\n```\nfn foo<T>(&&f: foo<T>, g: fn(T)) {\n    alt f.f {\n      some(v) { g(*v); } // X\n      none { ... }\n    }\n}\n```\n\nThe thought was that the `@T` is immutable, so this should be ok.  But of course the alias checker still complained---and rightly so, since (as far as I understand) we are not holding a ref on `v` except via `f.f`, which is still mutable.  So we replaced `g(*v)` with `g(*(copy v))`, which it accepts.  But this seems wrong to me, because although the execution of `g` is now safe, there is still no guarantee that `v` is valid after `g()` executes.  \n\nI could do this, for example:\n\n```\nfn foo<T>(&&f: foo<T>, g: fn(T)) {\n    alt f.f {\n      some(v) {\n          g(*(copy v));  \n          #error[\"v=%?\", v]; // but v could be dead here\n      }\n      none { ... }\n    }\n}\n```\n\nThis code does indeed compile but the ref count seems to always be 1.  However, the same code with uniques gives various errors.  In any case, it seems to me that if in fact `some(v)` _is_ taking a ref on `v`, then this code is safe, but the `*(copy v)` is unnecessary.  On the other hand, if `some(v)` is _not_ taking a ref, then this code is dangerous.  So something seems wrong.  Unless I'm just confused.\n\nHere, by the way, is a complete program that would seem to demonstrate the safety hole, except that the ref counts printed out are 2 and 1 respectively (I'm not sure where the ref comes from in the second print out...):\n\n```\nuse std;\n\nimport std::dbg::refcount;\n\ntype foo<T> = {\n    mutable f: option<@T>\n};\n\nfn upd<T>(&&f: foo<T>, g: fn(T)) {\n    alt f.f {\n      some(v) {\n        #error[\"f.f=%? v=%? rc=%?\", f.f, v, refcount(v)];\n        g(*(copy v));\n        #error[\"f.f=%? v=%? rc=%?\", f.f, v, refcount(v)];\n      }\n      none { }\n    }\n}\n\nfn main() {\n    let x = @{mutable f: some(@3u)};\n    upd(*x) {|v|\n        x.f = none;\n    }\n}\n```\n", "closed_by": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1846/timeline", "performed_via_github_app": null, "state_reason": "completed"}