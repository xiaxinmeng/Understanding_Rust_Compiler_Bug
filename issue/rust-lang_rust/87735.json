{"url": "https://api.github.com/repos/rust-lang/rust/issues/87735", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87735/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87735/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87735/events", "html_url": "https://github.com/rust-lang/rust/issues/87735", "id": 959423624, "node_id": "MDU6SXNzdWU5NTk0MjM2MjQ=", "number": 87735, "title": "[`GAT`] Associated type lifetime on regular type", "user": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 3307663436, "node_id": "MDU6TGFiZWwzMzA3NjYzNDM2", "url": "https://api.github.com/repos/rust-lang/rust/labels/GATs-triaged", "name": "GATs-triaged", "color": "e88000", "default": false, "description": "Issues using the `generic_associated_types` feature that have been triaged"}, {"id": 3921861239, "node_id": "LA_kwDOAAsO6M7pwtp3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-bug-has-test", "name": "S-bug-has-test", "color": "862eff", "default": false, "description": "A `known-bug` test has been added for this bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-08-03T19:28:33Z", "updated_at": "2022-04-15T18:09:34Z", "closed_at": "2022-04-15T18:09:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After playing with Generic Associated Types, the following snippet was successfully created:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\npub trait AsRef2 {\r\n  type Output<'a> where Self: 'a;\r\n\r\n  fn as_ref2<'a>(&'a self) -> Self::Output<'a>;\r\n}\r\n\r\nimpl<T> AsRef2 for Vec<T> {\r\n  type Output<'a> where Self: 'a = &'a [T];\r\n\r\n  fn as_ref2<'a>(&'a self) -> Self::Output<'a> {\r\n    &self[..]\r\n  }\r\n}\r\n\r\n#[derive(Debug)]\r\nstruct Foo<T>(T);\r\n#[derive(Debug)]\r\nstruct FooRef<'a, U>(&'a [U]);\r\n\r\nimpl<U> AsRef2 for Foo<Vec<U>> {\r\n  type Output<'a> where Self: 'a = FooRef<'a, U>;\r\n\r\n  fn as_ref2<'a>(&'a self) -> Self::Output<'a> {\r\n    FooRef(self.0.as_ref2())\r\n  }\r\n}\r\n\r\nfn main() {\r\n    let foo = Foo(vec![1, 2, 3]);\r\n    dbg!(foo.as_ref2());\r\n}\r\n```\r\n\r\nBut then I was wondering if it is possible to generalize the above statement for every `Foo<T>` with `T: AsRef2`. Here is what was accomplished so far:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\npub trait AsRef2 {\r\n  type Output<'a> where Self: 'a;\r\n\r\n  fn as_ref2<'a>(&'a self) -> Self::Output<'a>;\r\n}\r\n\r\nimpl<T> AsRef2 for Vec<T> {\r\n  type Output<'a> where Self: 'a = &'a [T];\r\n\r\n  fn as_ref2<'a>(&'a self) -> Self::Output<'a> {\r\n    &self[..]\r\n  }\r\n}\r\n\r\n#[derive(Debug)]\r\nstruct Foo<T>(T);\r\n#[derive(Debug)]\r\nstruct FooRef<'a, U>(&'a [U]);\r\n\r\nimpl<'b, T, U> AsRef2 for Foo<T>\r\nwhere\r\n    // * `for<'b, 'c> T: AsRef2<Output<'b> = &'c [U]>>` does not work\r\n    //\r\n    // * `U` is unconstrained but should be allowed in this context because `Output` is\r\n    // an associated type\r\n    T: AsRef2<Output<'b> = &'b [U]>,\r\n    U: 'b\r\n{\r\n  type Output<'a> where Self: 'a = FooRef<'a, U>;\r\n\r\n  fn as_ref2<'a>(&'a self) -> Self::Output<'a> {\r\n    FooRef(self.0.as_ref2())\r\n  }\r\n}\r\n\r\nfn main() {\r\n    let foo = Foo(vec![1, 2, 3]);\r\n    dbg!(foo.as_ref2());\r\n}\r\n```\r\n\r\nAny clues? Feel free to close this issue if duplicated.\r\n", "closed_by": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87735/timeline", "performed_via_github_app": null, "state_reason": "completed"}