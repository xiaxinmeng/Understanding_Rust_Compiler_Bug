{"url": "https://api.github.com/repos/rust-lang/rust/issues/30767", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30767/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30767/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30767/events", "html_url": "https://github.com/rust-lang/rust/issues/30767", "id": 125463986, "node_id": "MDU6SXNzdWUxMjU0NjM5ODY=", "number": 30767, "title": "Adding a normal where-clause bound causes inferencer to equate wrong types", "user": {"login": "soltanmm", "id": 4889063, "node_id": "MDQ6VXNlcjQ4ODkwNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4889063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm", "html_url": "https://github.com/soltanmm", "followers_url": "https://api.github.com/users/soltanmm/followers", "following_url": "https://api.github.com/users/soltanmm/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm/orgs", "repos_url": "https://api.github.com/users/soltanmm/repos", "events_url": "https://api.github.com/users/soltanmm/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-01-07T19:05:54Z", "updated_at": "2017-04-15T23:53:30Z", "closed_at": "2017-04-15T23:53:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "On stable/beta/nightly:\n\n``` rust\npub struct O<X>(X);\npub trait M {\n    type X;\n    fn get(&self) -> O<Self::X>;  // <-- Make this return just Self::X, and inference proceeds just fine\n}\nimpl M for () {\n    type X = (usize, usize);\n    fn get(&self) -> O<Self::X> { O((0, 0)) }\n}\n\nfn TEST_FN<T>()\n    where (T,T): Sized  // <-- Remove this line, and inference proceeds just fine\n{\n    match M::get(&()) {  // <-- Make this ().get(), and inference proceeds just fine\n        O((a, b)) => {\n            let i: usize = a;  // ERROR\n        }\n    }\n}\nfn main() {}\n```\n\n[play-pen](http://is.gd/ch7w6D)\n\nError:\n\n```\n<anon>:16:28: 16:29 error: mismatched types:\n expected `usize`,\n    found `T`\n(expected usize,\n    found type parameter) [E0308]\n<anon>:16             let i: usize = a;  // ERROR\n                                     ^\n<anon>:16:28: 16:29 help: see the detailed explanation for E0308\n<anon>:14:11: 14:17 error: type mismatch resolving `<() as M>::X == (T, T)`:\n expected usize,\n    found type parameter [E0271]\n<anon>:14     match M::get(&()) {  // <-- Make this ().get(), and inference proceeds just fine\n                    ^~~~~~\n<anon>:14:11: 14:17 help: see the detailed explanation for E0271\nerror: aborting due to 2 previous errors\nplaypen: application terminated with error code 101\n```\n\nFrom what I gather of debug output of similar code (take this with a grain of salt!), the bound `(T, T): Sized` is unified with the `_` equal to `()::X` via `()::X: Sized` in [`match_poly_trait_ref`](https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src/librustc/middle/traits/select.rs#L2756). Then everything falls apart.\n\nThis is why simply elaborating all predicates in [`normalize_param_env_or_error` in `librustc/middle/traits/mod.rs` ](https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src/librustc/middle/traits/mod.rs#L393) breaks compilation of `libserialize` and everything under the sun that includes a bound of the form `FnOnce(A, B) -> C` and a `for` loop over an `Enumerate` iterator, because the bound `(A, B): Sized` ends up elaborated and unified with a type variable constrained to `Enumerate::Item`. Otherwise harmless bounds are unified in questionable ways.\n\ncc @jroesch @nikomatsakis @arielb1 (I think?)\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30767/timeline", "performed_via_github_app": null, "state_reason": "completed"}