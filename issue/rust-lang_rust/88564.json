{"url": "https://api.github.com/repos/rust-lang/rust/issues/88564", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88564/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88564/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88564/events", "html_url": "https://github.com/rust-lang/rust/issues/88564", "id": 985360007, "node_id": "MDU6SXNzdWU5ODUzNjAwMDc=", "number": 88564, "title": "BorrowedFd::to_owned() gives you another BorrowedFd", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-09-01T16:32:05Z", "updated_at": "2022-03-03T14:30:10Z", "closed_at": "2022-03-03T14:30:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nFirstly, I should say that I really like the basic ideas in  RFC3128 (#87074) .  I'm reporting a wrinkle which may or may not be soluble.\r\n\r\nThis program:\r\n\r\n```rust\r\n#![feature(io_safety)]\r\nuse std::os::unix::prelude::*;\r\n\r\nfn main() -> std::io::Result<()> {\r\n    let file = std::fs::File::open(\"/dev/null\")?;\r\n    let borrowed = file.as_fd();\r\n    let owned = borrowed.to_owned();\r\n    eprintln!(\"file={:?}\\nborrd={:?}\\nowned={:?}\", &file, &borrowed, &owned);\r\n    Ok(())\r\n}\r\n```\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d51ddfa5a390e4d1b8f8bf81af8b0d73\r\n\r\nPrints:\r\n```\r\nfile=File { fd: 3, path: \"/dev/null\", read: true, write: false }\r\nborrd=BorrowedFd { fd: 3 }\r\nowned=BorrowedFd { fd: 3 }\r\n```\r\n\r\nA naive reader might have thought it would print:\r\n```\r\nfile=File { fd: 3, path: \"/dev/null\", read: true, write: false }\r\nborrd=BorrowedFd { fd: 3 }\r\nowned=OwnedFd { fd: 4 }\r\n```\r\n\r\nBut of course converting a borrowed to an owned fd is fallible.  And there is no `TryToOwned`.  This no-op `to_owned()` exists because `BorrowedFd` is `Copy` and therefore `Clone` and eveyrhing `Clone` has a no-op `ToOwned`.\r\n\r\nThe ideal fix from a type system and traits point of view (other than going back in time and abolishing the blanket `ToOwned for Clone`) would be for `BorrowedFd` to somehow be a reference type.  But it would have to actually be represented as an integer.  `pub struct BorrowableFdValue { x:() }` and transmuting `c_int` via `usize` to `&BorrowableFdValue` and back would solve this but that is really quite stomach-churning (and the result can't be used in ffi the way the existing `BorrowedFd` can).\r\n\r\nMaybe the answer is to simply document this quirk.  We should probably provide `impl TryFrom<OwnedFd> from BorrowedFd` at the very least, and of course `OwnedFd::try_clone()`.", "closed_by": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88564/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88564/timeline", "performed_via_github_app": null, "state_reason": "completed"}