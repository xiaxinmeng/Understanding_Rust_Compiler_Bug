{"url": "https://api.github.com/repos/rust-lang/rust/issues/53819", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53819/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53819/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53819/events", "html_url": "https://github.com/rust-lang/rust/issues/53819", "id": 355473473, "node_id": "MDU6SXNzdWUzNTU0NzM0NzM=", "number": 53819, "title": "Const qualification", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2018-08-30T08:14:20Z", "updated_at": "2021-01-03T17:17:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "cc @eddyb @RalfJung \r\n\r\nLet's figure out what exactly we need, because I'm very confused about it.\r\n\r\nSo, currently const qualification is doing a few things at once:\r\n\r\n1. figure out all the feature gates and forbid things not allowed in constants/statics/const_fn at all or without the feature gates\r\n2. figure out what things are promotable by ruling out values containing `Drop` or `UnsafeCell` types (`None` is always ok, even if `Some(value)` would not be due to the type, even if `Option<T>` would technically propagate said type.\r\n3. In order to guarantee this for promotion we also check the bodies of `const fn` and `const` for `Drop` and `UnsafeCell` value creations, even if it is ignored for the constant itself and only checked when the constant is used in a value checked for promotion\r\n\r\nWhy I want to stop looking at bodies, and instead just check the final value of constants:\r\n\r\n* This analysis is imperfect. E.g. `(UnsafeCell::new(42), 42).1` is treated as if you end up with an `UnsafeCell` value\r\n* If we keep looking at the body, we're essentially saying that a `const fn`'s body is not allowed to change, even for changes which would not change the final value for any input, because such a change might subtly lead to the analysis suddenly thinking there's an `UnsafeCell` in the final value\r\n\r\nWhy we cannot just look at the final value right now:\r\n\r\n* when promoting associated constants inside a generic function we might not have enough information to actually compute the final value. We'd need to wait for monomorphization to tell us whether the value is problematic. This is obviously not something we want. All the analyses should run before monomophization\r\n\r\nSolution brainstorm:\r\n\r\n1. don't promote calls to `const fn` if its return type may contain `UnsafeCell` or `Drop`. So `Option::<String>` is not promoted, even if the actual value is `None`. (not a breaking change, since there are no stable const fn for which this could break any code)\r\n2. Always assume the worst with associated constants (already the case https://play.rust-lang.org/?gist=36546b7a589178413e28ba09f1cd0201&version=stable&mode=debug&edition=2015 ) So we don't promote associated constant uses unless monomorphized.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53819/timeline", "performed_via_github_app": null, "state_reason": null}