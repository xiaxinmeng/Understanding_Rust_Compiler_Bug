{"url": "https://api.github.com/repos/rust-lang/rust/issues/73788", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73788/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73788/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73788/events", "html_url": "https://github.com/rust-lang/rust/issues/73788", "id": 646611975, "node_id": "MDU6SXNzdWU2NDY2MTE5NzU=", "number": 73788, "title": "HashSet and BTreeSet difference() method argument lifetime overconstrained", "user": {"login": "BartMassey", "id": 117151, "node_id": "MDQ6VXNlcjExNzE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/117151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BartMassey", "html_url": "https://github.com/BartMassey", "followers_url": "https://api.github.com/users/BartMassey/followers", "following_url": "https://api.github.com/users/BartMassey/following{/other_user}", "gists_url": "https://api.github.com/users/BartMassey/gists{/gist_id}", "starred_url": "https://api.github.com/users/BartMassey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BartMassey/subscriptions", "organizations_url": "https://api.github.com/users/BartMassey/orgs", "repos_url": "https://api.github.com/users/BartMassey/repos", "events_url": "https://api.github.com/users/BartMassey/events{/privacy}", "received_events_url": "https://api.github.com/users/BartMassey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-27T05:19:54Z", "updated_at": "2023-03-04T13:47:48Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider this code.\r\n\r\n```rust\r\nuse std::collections::HashSet as Set;\r\nuse std::ops::Deref;\r\n\r\nfn exclude_set<'a>(given: &Set<&'a str>, to_exclude: &Set<&str>) -> Set<&'a str> {\r\n    given.difference(to_exclude).cloned().collect()\r\n}\r\n\r\nfn main() {\r\n    let given: Set<&str> = vec![\"a\", \"b\", \"c\"].into_iter().collect();\r\n    let b = \"b\".to_string();\r\n    let to_exclude: Set<&str> = vec![b.deref()].into_iter().collect();\r\n    let excluded = exclude_set(&given, &to_exclude);\r\n    drop(b);\r\n    println!(\"{:?}\", excluded);\r\n}\r\n```\r\n\r\nThis fails to compile.\r\n\r\n```text\r\nerror[E0621]: explicit lifetime required in the type of `to_exclude`\r\n --> src/main.rs:5:5\r\n  |\r\n4 | fn exclude_set<'a>(given: &Set<&'a str>, to_exclude: &Set<&str>) -> Set<&'a str> {\r\n  |                                                      ---------- help: add explicit lifetime `'a` to the type of `to_exclude`: `&std::collections::HashSet<&'a str>`\r\n5 |     given.difference(to_exclude).cloned().collect()\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\r\n```\r\n\r\nNow change `exclude_set()` so that `to_exclude` takes `&Set<&'a str>>`. Again, this will fail to compile.\r\n\r\n```text\r\nerror[E0505]: cannot move out of `b` because it is borrowed\r\n  --> src/main.rs:13:10\r\n   |\r\n11 |     let to_exclude: Set<&str> = vec![b.deref()].into_iter().collect();\r\n   |                                      - borrow of `b` occurs here\r\n12 |     let excluded = exclude_set(&given, &to_exclude);\r\n13 |     drop(b);\r\n   |          ^ move out of `b` occurs here\r\n14 |     println!(\"{:?}\", excluded);\r\n   |                      -------- borrow later used here\r\n```\r\n\r\nCommenting out the `drop()` will result in successful compile and execute. \r\n\r\nNo value from `to_exclude` should appear in the result of `exclude_set()`: set difference can only remove elements, not insert them. Thus, the drop should be harmless.\r\n\r\nSome bodging around with code inspired by the implementation of `std::collections::hash_set::Difference` gets this, which compiles and executes.\r\n\r\n```rust\r\nuse std::collections::HashSet as Set;\r\nuse std::ops::Deref;\r\n\r\nfn exclude_set<'a>(\r\n    given: &Set<&'a str>,\r\n    to_exclude: &Set<&str>,\r\n) -> Set<&'a str> {\r\n    set_difference(given, to_exclude).collect()\r\n}\r\n\r\nfn main() {\r\n    let given: Set<&str> = vec![\"a\", \"b\", \"c\"].into_iter().collect();\r\n    let b = \"b\".to_string();\r\n    let to_exclude: Set<&str> = vec![b.deref()].into_iter().collect();\r\n    let excluded = exclude_set(&given, &to_exclude);\r\n    drop(b);\r\n    println!(\"{:?}\", excluded);\r\n}\r\n\r\nstruct SetDifference<'a, 'b, T: ?Sized> {\r\n    iter: Vec<&'a T>,\r\n    other: &'b Set<&'b T>,\r\n}\r\n\r\nimpl<'a, 'b, T> Iterator for SetDifference<'a, 'b, T>\r\nwhere\r\n    T: std::hash::Hash + Eq + ?Sized,\r\n{\r\n    type Item = &'a T;\r\n\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        loop {\r\n            let elt: &'a T = self.iter.pop()?;\r\n            if !self.other.contains(elt) {\r\n                return Some(elt);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfn set_difference<'a, 'b, T: ?Sized>(\r\n    source: &Set<&'a T>,\r\n    other: &'b Set<&T>,\r\n) -> SetDifference<'a, 'b, T> {\r\n    SetDifference {\r\n        iter: source.iter().cloned().collect(),\r\n        other,\r\n    }\r\n}\r\n```\r\n\r\nSadly, I haven't figured out how to generalize the types and lifetimes for the new implementation in a way that the typechecker/borrowchecker is happy with.\r\n\r\nThe same issue exists for `BTreeSet`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73788/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73788/timeline", "performed_via_github_app": null, "state_reason": null}