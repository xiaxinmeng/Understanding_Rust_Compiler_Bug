{"url": "https://api.github.com/repos/rust-lang/rust/issues/107273", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107273/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107273/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107273/events", "html_url": "https://github.com/rust-lang/rust/issues/107273", "id": 1555543103, "node_id": "I_kwDOAAsO6M5ct7Q_", "number": 107273, "title": "Incorrect type inference with generic associated types?", "user": {"login": "s-arash", "id": 4473311, "node_id": "MDQ6VXNlcjQ0NzMzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4473311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s-arash", "html_url": "https://github.com/s-arash", "followers_url": "https://api.github.com/users/s-arash/followers", "following_url": "https://api.github.com/users/s-arash/following{/other_user}", "gists_url": "https://api.github.com/users/s-arash/gists{/gist_id}", "starred_url": "https://api.github.com/users/s-arash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s-arash/subscriptions", "organizations_url": "https://api.github.com/users/s-arash/orgs", "repos_url": "https://api.github.com/users/s-arash/repos", "events_url": "https://api.github.com/users/s-arash/events{/privacy}", "received_events_url": "https://api.github.com/users/s-arash/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-01-24T19:24:52Z", "updated_at": "2023-01-25T23:36:45Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nPlaying around with generic associated types, I encountered what looks like a compiler bug:\r\n```rust\r\ntrait Monad {\r\n    type M<T>;\r\n    fn bind<T, U, F: Fn(T) -> Self::M<U>>(m: Self::M<T>, f: F) -> Self::M<U>;\r\n    fn unit<T>(x: T) -> Self::M<T>;\r\n\r\n    fn map<T, U, F: Fn(T) -> U>(m: Self::M<T>, f: F) -> Self::M<U> {\r\n        Self::bind(m, |x| Self::unit(f(x)))\r\n    }\r\n\r\n    /// applicative operator `<*>`\r\n    fn app<T, U, F: Fn(T) -> U>(f: Self::M<F>, m: Self::M<T>) -> Self::M<U> where Self::M<T>: Clone {\r\n        Self::bind(f, |f| Self::map(m.clone(), f)) // this fails with: \r\n        //                ^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found type parameter `U`\r\n        // Self::bind::<_, U, _>(f, |f| Self::map(m.clone(), f)) // this compiles\r\n    }\r\n}\r\n```\r\nThe `app` implementation fails with the error above, which looks to me like type inference is inferring the wrong types (and not failing to infer types).\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.66.1 (90743e729 2023-01-10)\r\nbinary: rustc\r\ncommit-hash: 90743e7298aca107ddaa0c202a4d3604e29bfeb6\r\ncommit-date: 2023-01-10\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.66.1\r\nLLVM version: 15.0.2\r\n```\r\nAlso tried on nightly, same error.\r\n```\r\nrustc 1.69.0-nightly (c8e6a9e8b 2023-01-23)\r\nbinary: rustc\r\ncommit-hash: c8e6a9e8b6251bbc8276cb78cabe1998deecbed7\r\ncommit-date: 2023-01-23\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.69.0-nightly\r\nLLVM version: 15.0.7\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Compiler Output</summary>\r\n<p>\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src\\monad.rs:12:27\r\n   |\r\n11 |     fn app<T, U, F: Fn(T) -> U>(f: Self::M<F>, m: Self::M<T>) -> Self::M<U> where Self::M<T>: Clone {\r\n   |            -  - found type parameter\r\n   |            |\r\n   |            expected type parameter\r\n12 |         Self::bind(f, |f| Self::map(m.clone(), f)) // this fails\r\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found type parameter `U`\r\n   |\r\n   = note: expected associated type `<Self as Monad>::M<T>`\r\n              found associated type `<Self as Monad>::M<U>`\r\n   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n\r\nerror[E0308]: mismatched types\r\n  --> src\\monad.rs:12:9\r\n   |\r\n11 |     fn app<T, U, F: Fn(T) -> U>(f: Self::M<F>, m: Self::M<T>) -> Self::M<U> where Self::M<T>: Clone {\r\n   |            -  - expected type parameter                          ---------- expected `<Self as Monad>::M<U>` because of return type\r\n   |            |\r\n   |            found type parameter\r\n12 |         Self::bind(f, |f| Self::map(m.clone(), f)) // this fails\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `U`, found type parameter `T`\r\n   |\r\n   = note: expected associated type `<Self as Monad>::M<U>`\r\n              found associated type `<Self as Monad>::M<T>`\r\n   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `misc` due to 2 previous errors\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107273/timeline", "performed_via_github_app": null, "state_reason": null}