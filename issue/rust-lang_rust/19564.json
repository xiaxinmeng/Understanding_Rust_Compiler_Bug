{"url": "https://api.github.com/repos/rust-lang/rust/issues/19564", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19564/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19564/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19564/events", "html_url": "https://github.com/rust-lang/rust/issues/19564", "id": 51079284, "node_id": "MDU6SXNzdWU1MTA3OTI4NA==", "number": 19564, "title": "Lifetime inference with stack-boxed trait objects of unboxed closures", "user": {"login": "netvl", "id": 280456, "node_id": "MDQ6VXNlcjI4MDQ1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/280456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netvl", "html_url": "https://github.com/netvl", "followers_url": "https://api.github.com/users/netvl/followers", "following_url": "https://api.github.com/users/netvl/following{/other_user}", "gists_url": "https://api.github.com/users/netvl/gists{/gist_id}", "starred_url": "https://api.github.com/users/netvl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netvl/subscriptions", "organizations_url": "https://api.github.com/users/netvl/orgs", "repos_url": "https://api.github.com/users/netvl/repos", "events_url": "https://api.github.com/users/netvl/events{/privacy}", "received_events_url": "https://api.github.com/users/netvl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-12-05T09:36:40Z", "updated_at": "2015-06-22T16:54:24Z", "closed_at": "2015-06-22T16:54:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This works:\n\n``` rust\n#![feature(unboxed_closures)]\n\nfn f1(i: i32) -> i32 { i * 2 }\n\nfn main() {\n    let mut arr: Vec<&Fn(i32) -> i32> = Vec::new();\n    let p1 = &f1; \n    arr.push(p1);\n    arr[0].call((1, ));\n}\n```\n\nThis doesn't, which is surprising:\n\n``` rust\n#![feature(unboxed_closures)]\n\nfn f1(i: i32) -> i32 { i * 2 }\n\nfn main() {\n    let mut arr: Vec<&Fn(i32) -> i32> = Vec::new();\n    arr.push(&f1);\n    arr[0].call((1, ));\n}\n```\n\n```\ntest.rs:7:15: 7:17 error: borrowed value does not live long enough\ntest.rs:7     arr.push(&f1);\n                        ^~\ntest.rs:5:11: 9:2 note: reference must be valid for the block at 5:10...\ntest.rs:5 fn main() {\ntest.rs:6     let mut arr: Vec<&Fn(i32) -> i32> = Vec::new();\ntest.rs:7     arr.push(&f1);\ntest.rs:8     arr[0].call((1, ));\ntest.rs:9 }\ntest.rs:7:5: 7:19 note: ...but borrowed value is only valid for the statement at 7:4\ntest.rs:7     arr.push(&f1);\n              ^~~~~~~~~~~~~~\ntest.rs:7:5: 7:19 help: consider using a `let` binding to increase its lifetime\ntest.rs:7     arr.push(&f1);\n              ^~~~~~~~~~~~~~\n```\n\nThe bigger problem is that this does not work as well:\n\n``` rust\n#![feature(unboxed_closures)]\n\nfn main() {\n    let mut arr: Vec<&Fn(i32) -> i32> = Vec::new();\n    arr.push(&|x| x * 4);\n    arr[0].call((1, ));\n}\n```\n\n```\ntest.rs:5:15: 5:24 error: borrowed value does not live long enough\ntest.rs:5     arr.push(&|x| x * 4);\n                        ^~~~~~~~~\ntest.rs:3:11: 7:2 note: reference must be valid for the block at 3:10...\ntest.rs:3 fn main() {\ntest.rs:4     let mut arr: Vec<&Fn(i32) -> i32> = Vec::new();\ntest.rs:5     arr.push(&|x| x * 4);\ntest.rs:6     arr[0].call((1, ));\ntest.rs:7 }\ntest.rs:5:5: 5:26 note: ...but borrowed value is only valid for the statement at 5:4\ntest.rs:5     arr.push(&|x| x * 4);\n              ^~~~~~~~~~~~~~~~~~~~~\ntest.rs:5:5: 5:26 help: consider using a `let` binding to increase its lifetime\ntest.rs:5     arr.push(&|x| x * 4);\n              ^~~~~~~~~~~~~~~~~~~~~\n```\n\nAnd there is no workaround - I can't bind the closure to a separate variable because a lot of type inference issues arise, most notably is that closure is interpreted as an old closure (and I don't know how to force it to be interpreted as a new one).\n\nDiscovered in [this](http://stackoverflow.com/questions/27312069/rust-iterate-over-vector-of-functions/27312410) SO question.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19564/timeline", "performed_via_github_app": null, "state_reason": "completed"}