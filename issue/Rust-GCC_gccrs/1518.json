{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1518", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1518/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1518/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1518/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1518", "id": 1357563786, "node_id": "I_kwDOANBUbM5Q6seK", "number": 1518, "title": "Bad generic substitution on generic structs", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/10", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/10", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/10/labels", "id": 8145768, "node_id": "MI_kwDOANBUbM4AfEto", "number": 10, "title": "Basic const generics and missing features", "description": "", "creator": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 103, "state": "closed", "created_at": "2022-06-29T08:59:36Z", "updated_at": "2022-10-14T12:49:09Z", "due_on": "2022-10-17T07:00:00Z", "closed_at": "2022-10-14T12:49:09Z"}, "comments": 0, "created_at": "2022-08-31T16:12:55Z", "updated_at": "2022-08-31T22:10:34Z", "closed_at": "2022-08-31T22:10:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nmod intrinsics {\r\n    extern \"rust-intrinsic\" {\r\n        pub fn wrapping_add<T>(a: T, b: T) -> T;\r\n        pub fn rotate_left<T>(a: T, b: T) -> T;\r\n        pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\r\n    }\r\n}\r\n\r\n#[lang = \"add\"]\r\ntrait Add<Rhs = Self> {\r\n    type Output;\r\n\r\n    fn add(self, rhs: Rhs) -> Self::Output;\r\n}\r\n\r\nmacro_rules! add_impl {\r\n    ($($t:ty)*) => ($(\r\n        impl Add for $t {\r\n            type Output = $t;\r\n\r\n            #[inline]\r\n            fn add(self, other: $t) -> $t { self + other }\r\n        }\r\n\r\n        //forward_ref_binop! { impl const Add, add for $t, $t }\r\n    )*)\r\n}\r\n\r\nadd_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\r\n\r\nimpl<T> *const T {\r\n    pub unsafe fn add(self, count: usize) -> Self {\r\n        // SAFETY: the caller must uphold the safety contract for `offset`.\r\n        unsafe { self.offset(count as isize) }\r\n    }\r\n\r\n    pub unsafe fn offset(self, count: isize) -> *const T {\r\n        // SAFETY: the caller must uphold the safety contract for `offset`.\r\n        unsafe { intrinsics::offset(self, count) }\r\n    }\r\n}\r\n\r\nmacro_rules! impl_uint {\r\n    ($($ty:ident = $lang:literal),*) => {\r\n        $(\r\n            //#[lang = $lang]\r\n            impl $ty {\r\n                pub fn wrapping_add(self, rhs: Self) -> Self {\r\n                    unsafe { intrinsics::wrapping_add(self, rhs) }\r\n                }\r\n\r\n                pub fn rotate_left(self, n: u32) -> Self {\r\n                    unsafe { intrinsics::rotate_left(self, n as Self) }\r\n                }\r\n\r\n                pub fn to_le(self) -> Self {\r\n                    #[cfg(target_endian = \"little\")]\r\n                    {\r\n                        self\r\n                    }\r\n                    //FIXME(#1446)\r\n                    //#[cfg(not(target_endian = \"little\"))]\r\n                    //{\r\n                    //    self.swap_bytes()\r\n                    //}\r\n                }\r\n            }\r\n        )*\r\n    }\r\n}\r\n\r\nimpl_uint!(u8 = \"u8\", u16 = \"u16\", u32 = \"u32\", u64 = \"u64\", u128 = \"u128\", usize = \"usize\");\r\n\r\n#[repr(C)]\r\npub struct SliceComponents {\r\n    pub data_address: *const (),\r\n    pub metadata: usize,\r\n}\r\n\r\n#[repr(C)]\r\npub union SliceRepr<T> {\r\n    pub const_ptr: *const [T],\r\n    pub mut_ptr: *mut [T],\r\n    pub components: SliceComponents,\r\n}\r\n\r\nimpl<T> [T] {\r\n    pub const fn as_ptr(&self) -> *const T {\r\n        self as *const [T] as *const T\r\n    }\r\n\r\n    pub unsafe fn get_unchecked(&self, index: usize) -> &T {\r\n        unsafe { &*self.as_ptr().add(index) }\r\n    }\r\n\r\n    pub fn len(&self) -> usize {\r\n        unsafe { SliceRepr { const_ptr: self as *const _ }.components.metadata }\r\n    }\r\n}\r\n\r\ntrait HasherTrait {\r\n    fn write(&mut self, msg: &[u8]);\r\n    fn finish(&self) -> u64;\r\n}\r\n\r\nmod cmp {\r\n    pub fn min(a: usize, b: usize) -> usize {\r\n        if a < b {\r\n            a\r\n        } else {\r\n            b\r\n        }\r\n    }\r\n}\r\n\r\nstruct PhantomData<T>;\r\n\r\nmod mem {\r\n    extern \"rust-intrinsic\" {\r\n        fn transmute<T, U>(_: T) -> U;\r\n        fn size_of<T>() -> usize;\r\n    }\r\n}\r\n\r\nmod ptr {\r\n    extern \"rust-intrinsic\" {\r\n        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\r\n    }\r\n}\r\n\r\n#[repr(C)]\r\nstruct State {\r\n    // v0, v2 and v1, v3 show up in pairs in the algorithm,\r\n    // and simd implementations of SipHash will use vectors\r\n    // of v02 and v13. By placing them in this order in the struct,\r\n    // the compiler can pick up on just a few simd optimizations by itself.\r\n    v0: u64,\r\n    v2: u64,\r\n    v1: u64,\r\n    v3: u64,\r\n}\r\n\r\nstruct Hasher<S: Sip> {\r\n    k0: u64,\r\n    k1: u64,\r\n    length: usize, // how many bytes we've processed\r\n    state: State,  // hash State\r\n    tail: u64,     // unprocessed bytes le\r\n    ntail: usize,  // how many bytes in tail are valid\r\n    _marker: PhantomData<S>,\r\n}\r\n\r\nmacro_rules! compress {\r\n    ($state:expr) => {{ compress!($state.v0, $state.v1, $state.v2, $state.v3) }};\r\n    ($v0:expr, $v1:expr, $v2:expr, $v3:expr) => {{\r\n        $v0 = $v0.wrapping_add($v1);\r\n        $v1 = $v1.rotate_left(13);\r\n        $v1 ^= $v0;\r\n        $v0 = $v0.rotate_left(32);\r\n        $v2 = $v2.wrapping_add($v3);\r\n        $v3 = $v3.rotate_left(16);\r\n        $v3 ^= $v2;\r\n        $v0 = $v0.wrapping_add($v3);\r\n        $v3 = $v3.rotate_left(21);\r\n        $v3 ^= $v0;\r\n        $v2 = $v2.wrapping_add($v1);\r\n        $v1 = $v1.rotate_left(17);\r\n        $v1 ^= $v2;\r\n        $v2 = $v2.rotate_left(32);\r\n    }};\r\n}\r\n\r\n/// Loads an integer of the desired type from a byte stream, in LE order. Uses\r\n/// `copy_nonoverlapping` to let the compiler generate the most efficient way\r\n/// to load it from a possibly unaligned address.\r\n///\r\n/// Unsafe because: unchecked indexing at i..i+size_of(int_ty)\r\nmacro_rules! load_int_le {\r\n    ($buf:expr, $i:expr, $int_ty:ident) => {{\r\n        let mut data = 0 as $int_ty;\r\n        ptr::copy_nonoverlapping(\r\n            $buf.as_ptr().add($i),\r\n            &mut data as *mut _ as *mut u8,\r\n            mem::size_of::<$int_ty>(),\r\n        );\r\n        data.to_le()\r\n    }};\r\n}\r\n\r\n/// Loads a u64 using up to 7 bytes of a byte slice. It looks clumsy but the\r\n/// `copy_nonoverlapping` calls that occur (via `load_int_le!`) all have fixed\r\n/// sizes and avoid calling `memcpy`, which is good for speed.\r\n///\r\n/// Unsafe because: unchecked indexing at start..start+len\r\n#[inline]\r\nunsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\r\n    let mut i = 0; // current byte index (from LSB) in the output u64\r\n    let mut out = 0;\r\n    if i + 3 < len {\r\n        // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee\r\n        // that the index start..start+len is in bounds.\r\n        out = unsafe { load_int_le!(buf, start + i, u32) } as u64;\r\n        i += 4;\r\n    }\r\n    if i + 1 < len {\r\n        // SAFETY: same as above.\r\n        out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);\r\n        i += 2\r\n    }\r\n    if i < len {\r\n        // SAFETY: same as above.\r\n        out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);\r\n        i += 1;\r\n    }\r\n    out\r\n}\r\n\r\n#[doc(hidden)]\r\ntrait Sip {\r\n    fn c_rounds(_: &mut State);\r\n    fn d_rounds(_: &mut State);\r\n}\r\n\r\nstruct Sip13Rounds;\r\n\r\nimpl Sip for Sip13Rounds {\r\n    #[inline]\r\n    fn c_rounds(state: &mut State) {\r\n        compress!(state);\r\n    }\r\n\r\n    #[inline]\r\n    fn d_rounds(state: &mut State) {\r\n        compress!(state);\r\n        compress!(state);\r\n        compress!(state);\r\n    }\r\n}\r\n\r\nstruct Sip24Rounds;\r\n\r\nimpl Sip for Sip24Rounds {\r\n    #[inline]\r\n    fn c_rounds(state: &mut State) {\r\n        compress!(state);\r\n        compress!(state);\r\n    }\r\n\r\n    #[inline]\r\n    fn d_rounds(state: &mut State) {\r\n        compress!(state);\r\n        compress!(state);\r\n        compress!(state);\r\n        compress!(state);\r\n    }\r\n}\r\n\r\n/// An implementation of SipHash 1-3.\r\n///\r\n/// This is currently the default hashing function used by standard library\r\n/// (e.g., `collections::HashMap` uses it by default).\r\n///\r\n/// See: <https://131002.net/siphash>\r\n#[doc(hidden)]\r\npub struct SipHasher13 {\r\n    hasher: Hasher<Sip13Rounds>,\r\n}\r\n\r\n/// An implementation of SipHash 2-4.\r\n///\r\n/// See: <https://131002.net/siphash/>\r\nstruct SipHasher24 {\r\n    hasher: Hasher<Sip24Rounds>,\r\n}\r\n\r\n/// An implementation of SipHash 2-4.\r\n///\r\n/// See: <https://131002.net/siphash/>\r\n///\r\n/// SipHash is a general-purpose hashing function: it runs at a good\r\n/// speed (competitive with Spooky and City) and permits strong _keyed_\r\n/// hashing. This lets you key your hash tables from a strong RNG, such as\r\n/// [`rand::os::OsRng`](https://doc.rust-lang.org/rand/rand/os/struct.OsRng.html).\r\n///\r\n/// Although the SipHash algorithm is considered to be generally strong,\r\n/// it is not intended for cryptographic purposes. As such, all\r\n/// cryptographic uses of this implementation are _strongly discouraged_.\r\npub struct SipHasher(SipHasher24);\r\n\r\nimpl SipHasher {\r\n    /// Creates a new `SipHasher` with the two initial keys set to 0.\r\n    #[inline]\r\n    #[must_use]\r\n    pub fn new() -> SipHasher {\r\n        SipHasher::new_with_keys(0, 0)\r\n    }\r\n\r\n    /// Creates a `SipHasher` that is keyed off the provided keys.\r\n    #[inline]\r\n    #[must_use]\r\n    pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher {\r\n        SipHasher(SipHasher24 { hasher: Hasher::<Sip24Rounds>::new_with_keys(key0, key1) })\r\n    }\r\n}\r\n\r\nimpl SipHasher13 {\r\n    /// Creates a new `SipHasher13` with the two initial keys set to 0.\r\n    #[inline]\r\n    pub fn new() -> SipHasher13 {\r\n        SipHasher13::new_with_keys(0, 0)\r\n    }\r\n\r\n    /// Creates a `SipHasher13` that is keyed off the provided keys.\r\n    #[inline]\r\n    pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {\r\n        SipHasher13 { hasher: Hasher::<Sip13Rounds>::new_with_keys(key0, key1) }\r\n    }\r\n}\r\n\r\nimpl<S: Sip> Hasher<S> {\r\n    #[inline]\r\n    fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {\r\n        let mut state = Hasher {\r\n            k0: key0,\r\n            k1: key1,\r\n            length: 0,\r\n            state: State { v0: 0, v1: 0, v2: 0, v3: 0 },\r\n            tail: 0,\r\n            ntail: 0,\r\n            _marker: PhantomData,\r\n        };\r\n        state.reset();\r\n        state\r\n    }\r\n\r\n    #[inline]\r\n    fn reset(&mut self) {\r\n        self.length = 0;\r\n        self.state.v0 = self.k0 ^ 0x736f6d6570736575;\r\n        self.state.v1 = self.k1 ^ 0x646f72616e646f6d;\r\n        self.state.v2 = self.k0 ^ 0x6c7967656e657261;\r\n        self.state.v3 = self.k1 ^ 0x7465646279746573;\r\n        self.ntail = 0;\r\n    }\r\n}\r\n\r\nimpl HasherTrait for SipHasher {\r\n    #[inline]\r\n    fn write(&mut self, msg: &[u8]) {\r\n        self.0.hasher.write(msg)\r\n    }\r\n\r\n    #[inline]\r\n    fn finish(&self) -> u64 {\r\n        self.0.hasher.finish()\r\n    }\r\n}\r\n\r\nimpl HasherTrait for SipHasher13 {\r\n    #[inline]\r\n    fn write(&mut self, msg: &[u8]) {\r\n        self.hasher.write(msg)\r\n    }\r\n\r\n    #[inline]\r\n    fn finish(&self) -> u64 {\r\n        self.hasher.finish()\r\n    }\r\n}\r\n\r\nimpl<S: Sip> HasherTrait for Hasher<S> {\r\n    // Note: no integer hashing methods (`write_u*`, `write_i*`) are defined\r\n    // for this type. We could add them, copy the `short_write` implementation\r\n    // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`\r\n    // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would\r\n    // greatly speed up integer hashing by those hashers, at the cost of\r\n    // slightly slowing down compile speeds on some benchmarks. See #69152 for\r\n    // details.\r\n    #[inline]\r\n    fn write(&mut self, msg: &[u8]) {\r\n        let length = msg.len();\r\n        self.length += length;\r\n\r\n        let mut needed = 0;\r\n\r\n        if self.ntail != 0 {\r\n            needed = 8 - self.ntail;\r\n            // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`\r\n            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);\r\n            if length < needed {\r\n                self.ntail += length;\r\n                return;\r\n            } else {\r\n                self.state.v3 ^= self.tail;\r\n                S::c_rounds(&mut self.state);\r\n                self.state.v0 ^= self.tail;\r\n                self.ntail = 0;\r\n            }\r\n        }\r\n\r\n        // Buffered tail is now flushed, process new input.\r\n        let len = length - needed;\r\n        let left = len & 0x7; // len % 8\r\n\r\n        let mut i = needed;\r\n        while i < len - left {\r\n            // SAFETY: because `len - left` is the biggest multiple of 8 under\r\n            // `len`, and because `i` starts at `needed` where `len` is `length - needed`,\r\n            // `i + 8` is guaranteed to be less than or equal to `length`.\r\n            let mi = unsafe { load_int_le!(msg, i, u64) };\r\n\r\n            self.state.v3 ^= mi;\r\n            S::c_rounds(&mut self.state);\r\n            self.state.v0 ^= mi;\r\n\r\n            i += 8;\r\n        }\r\n\r\n        // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,\r\n        // so `i + left` = `needed + len` = `length`, which is by\r\n        // definition equal to `msg.len()`.\r\n        self.tail = unsafe { u8to64_le(msg, i, left) };\r\n        self.ntail = left;\r\n    }\r\n\r\n    #[inline]\r\n    fn finish(&self) -> u64 {\r\n        let mut state = self.state;\r\n\r\n        let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;\r\n\r\n        state.v3 ^= b;\r\n        S::c_rounds(&mut state);\r\n        state.v0 ^= b;\r\n\r\n        state.v2 ^= 0xff;\r\n        S::d_rounds(&mut state);\r\n\r\n        state.v0 ^ state.v1 ^ state.v2 ^ state.v3\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: compile without error\r\n\r\nInstead, this happened:\r\n\r\n```\r\ntest.rs:386:9: error: expected \u2018&mut Hasher<S>\u2019 got \u2018&mut Hasher<Sip13Rounds>\u2019\r\n  386 |         self.hasher.write(msg)                                                                                                   \r\n      |         ^                                                                                                                        \r\n......                                                                                                                                   \r\n  404 |     fn write(&mut self, msg: &[u8]) {                                                                                            \r\n      |              ~ \r\n```\r\n\r\nWe can see from debug:\r\n\r\n```\r\nest.rs:386:21: note: resolved method to: {2817} {fn<S> (ref mut self &mut Hasher<S>{Hasher {k0:u64, k1:u64, length:usize, state:State, tail:u64, ntail:usize, _marker:PhantomData<S>}},msg & [u8],) -> ()}\r\n  386 |         self.hasher.write(msg)                             \r\n      |                     ^                                       \r\nrust1: note: type-checking method_call: {fn<Sip13Rounds> (ref mut self &mut Hasher<S>{Hasher {k0:u64, k1:u64, length:usize, state:State, tail:u64, ntail:usize, _marker:PhantomData<S>}},msg & [u8],) -> ()}\r\n```\r\n\r\n\r\n### Meta\r\n\r\n- What version of Rust GCC were you using, git sha if possible.\r\n\r\n\r\n", "closed_by": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1518/timeline", "performed_via_github_app": null, "state_reason": "completed"}