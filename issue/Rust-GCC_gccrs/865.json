{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/865", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/865/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/865/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/865/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/865", "id": 1095393775, "node_id": "I_kwDOANBUbM5BSmHv", "number": 865, "title": "Add static TyTy::error_mark_node()", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2591793259, "node_id": "MDU6TGFiZWwyNTkxNzkzMjU5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/good-first-pr", "name": "good-first-pr", "color": "A9A76D", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-06T14:52:09Z", "updated_at": "2023-03-01T08:09:54Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "We mark errors in the type resolution graph with the TyTy::ErrorType nodes we are currently allocating these all over the place see:\r\n\r\n```\r\n$ $ grep -r \"new TyTy::Error\" *\r\n```\r\n\r\n### rust-hir-type-check-path.cc\r\n\r\n- [ ] 106:      infered = new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\r\n- [ ] 193:          return new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\r\n- [ ] 209:          return new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\r\n- [ ] 228:          return new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\r\n- [ ] 255:      return new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\r\n- [ ] 265:          return new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\r\n- [ ] 298:          return new TyTy::ErrorType (lookup->get_ref ());\r\n\r\n### rust-hir-type-check-pattern.h\r\n\r\n- [ ] 40:      return new TyTy::ErrorType (1);\r\n\r\n### rust-hir-type-check-type.h\r\n\r\n- [ ] 152:      translated (new TyTy::ErrorType (id))\r\n\r\n### rust-tyty-call.h\r\n\r\n- [ ] 74:    : resolved (new TyTy::ErrorType (c.get_mappings ().get_hirid ())), call (c),\r\n\r\n### rust-hir-type-check.h\r\n\r\n- [ ] 137:    TyTy::BaseType *infer_var = new TyTy::ErrorType (id);\r\n\r\n### rust-hir-trait-ref.h\r\n\r\n- [ ] 149:    return new TyTy::ErrorType (get_mappings ().get_hirid ());\r\n\r\n### rust-hir-type-check-type.cc\r\n\r\n- [ ] 220:            = new TyTy::ErrorType (path.get_mappings ().get_hirid ());\r\n- [ ] 271:          return new TyTy::ErrorType (path.get_mappings ().get_hirid ());\r\n- [ ] 287:          return new TyTy::ErrorType (path.get_mappings ().get_hirid ());\r\n- [ ] 306:          return new TyTy::ErrorType (path.get_mappings ().get_hirid ());\r\n- [ ] 333:      return new TyTy::ErrorType (path.get_mappings ().get_hirid ());\r\n- [ ] 343:          return new TyTy::ErrorType (path.get_mappings ().get_hirid ());\r\n- [ ] 379:          return new TyTy::ErrorType (lookup->get_ref ());\r\n- [ ] 430:          return new TyTy::ErrorType (expr_id);\r\n- [ ] 439:      return new TyTy::ErrorType (expr_id);\r\n- [ ] 482:          return new TyTy::ErrorType (expr_id);\r\n- [ ] 488:        return new TyTy::ErrorType (expr_id);\r\n- [ ] 510:    return new TyTy::ErrorType (expr_id);\r\n\r\nrust-substitution-mapper.h\r\n\r\n- [ ] 145:    : resolved (new TyTy::ErrorType (ref)), generics (generics), locus (locus)\r\n- [ ] 238:    : resolved (new TyTy::ErrorType (ref)), mappings (mappings)\r\n\r\nrust-hir-type-check-struct-field.h\r\n\r\n- [ ] 53:      resolved (new TyTy::ErrorType (e->get_mappings ().get_hirid ())),\r\n\r\nrust-hir-type-check-expr.h\r\n\r\n- [ ] 59:     return new TyTy::ErrorType (expr->get_mappings ().get_hirid ());\r\n\r\nLets replace this allocation with a single ErrorType node and crate a static helper within the TyTy::BaseType class to get it something like:\r\n\r\n```c++\r\nstatic TyTy::ErrorType* error_type_node() {\r\n  static TyTy::ErrorType* error_node = nullptr;\r\n  if (error_node == nullptr) {\r\n    error_node = new TyTy::ErrorType(ERROR_NODE_ID)\r\n  }\r\n  return error_node;\r\n}\r\n```\r\n\r\nWhere ERROR_NODE_ID could just be a known constant of 0 because the id doesn't matter.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/865/timeline", "performed_via_github_app": null, "state_reason": null}