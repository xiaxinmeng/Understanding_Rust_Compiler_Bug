{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1407", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1407/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1407/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1407/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1407", "id": 1311989282, "node_id": "I_kwDOANBUbM5OM14i", "number": 1407, "title": "Example of -fanalyzer with gccrs", "user": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-07-20T21:53:44Z", "updated_at": "2022-07-21T19:46:58Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For fun, I tried running gccrs with `-fanalyzer `; it seems to work; here's an example of detecting a double-free in `unsafe `code:\r\n\r\nhttps://godbolt.org/z/3PrKTP8bs\r\n\r\n```\r\n// This doesn't seem to work yet, so let's use i8 instead...\r\n// use std::ffi::c_void;\r\n\r\nextern \"C\" {\r\n    //fn free(p: *const c_void);\r\n    fn free(p: *const i8);\r\n}\r\n\r\nfn call_free (s: *const i8) {\r\n    unsafe {\r\n        free (s);\r\n    }\r\n}\r\n\r\npub fn test(flag: bool, s: *const i8) {\r\n    call_free (s);\r\n    if (flag) {\r\n        call_free (s);\r\n    }\r\n}\r\n```\r\n\r\nfor which I get this output in Compiler Explorer:\r\n\r\n```\r\n<source>:8:1: warning: function is never used: 'call_free'\r\n    8 | fn call_free (s: *const i8) {\r\n      | ^\r\n<source>:14:5: warning: function is never used: 'test'\r\n   14 | pub fn test(flag: bool, s: *const i8) {\r\n      |     ^\r\n<source>: In function 'example::call_free':\r\n<source>:10:9: warning: double-'free' of 's_2(D)' [CWE-415] [-Wanalyzer-double-free]\r\n   10 |         free (s);\r\n      |         ^\r\n  'example::test': events 1-2\r\n    |\r\n    |   14 | pub fn test(flag: bool, s: *const i8) {\r\n    |      |     ^\r\n    |      |     |\r\n    |      |     (1) entry to 'example::test'\r\n    |   15 |     call_free (s);\r\n    |      |     ~\r\n    |      |     |\r\n    |      |     (2) calling 'example::call_free' from 'example::test'\r\n    |\r\n    +--> 'example::call_free': events 3-4\r\n           |\r\n           |    8 | fn call_free (s: *const i8) {\r\n           |      | ^\r\n           |      | |\r\n           |      | (3) entry to 'example::call_free'\r\n           |    9 |     unsafe {\r\n           |   10 |         free (s);\r\n           |      |         ~\r\n           |      |         |\r\n           |      |         (4) first 'free' here\r\n           |\r\n    <------+\r\n    |\r\n  'example::test': events 5-8\r\n    |\r\n    |   15 |     call_free (s);\r\n    |      |     ^\r\n    |      |     |\r\n    |      |     (5) returning to 'example::test' from 'example::call_free'\r\n    |   16 |     if (flag) {\r\n    |      |     ~\r\n    |      |     |\r\n    |      |     (6) following 'true' branch (when 'flag_5(D) != 0')...\r\n    |   17 |         call_free (s);\r\n    |      |         ~\r\n    |      |         |\r\n    |      |         (7) ...to here\r\n    |      |         (8) passing freed pointer 's_3(D)' in call to 'example::call_free' from 'example::test'\r\n    |\r\n    +--> 'example::call_free': events 9-10\r\n           |\r\n           |    8 | fn call_free (s: *const i8) {\r\n           |      | ^\r\n           |      | |\r\n           |      | (9) entry to 'example::call_free'\r\n           |    9 |     unsafe {\r\n           |   10 |         free (s);\r\n           |      |         ~\r\n           |      |         |\r\n           |      |         (10) second 'free' here; first 'free' was at (4)\r\n           |\r\nASM generation compiler returned: 0\r\n```\r\n\r\nNot sure if this is at all useful, given that both gccrs and -fanalyzer are experimental, but it was fun, and is hopefully of interest to gccrs developers.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1407/reactions", "total_count": 4, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 2, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1407/timeline", "performed_via_github_app": null, "state_reason": null}