{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1436", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1436/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1436/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1436/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1436", "id": 1329886808, "node_id": "I_kwDOANBUbM5PRHZY", "number": 1436, "title": "Array index expression defaults to slice index access via autoderef", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/10", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/10", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/10/labels", "id": 8145768, "node_id": "MI_kwDOANBUbM4AfEto", "number": 10, "title": "Basic const generics and missing features", "description": "", "creator": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 103, "state": "closed", "created_at": "2022-06-29T08:59:36Z", "updated_at": "2022-10-14T12:49:09Z", "due_on": "2022-10-17T07:00:00Z", "closed_at": "2022-10-14T12:49:09Z"}, "comments": 0, "created_at": "2022-08-05T12:40:20Z", "updated_at": "2022-08-05T14:09:06Z", "closed_at": "2022-08-05T14:09:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code: https://godbolt.org/z/qvP46P1ze\r\n\r\n```rust\r\nmod intrinsics {\r\n    extern \"rust-intrinsic\" {\r\n        pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\r\n    }\r\n}\r\n\r\nmod mem {\r\n    extern \"rust-intrinsic\" {\r\n        fn size_of<T>() -> usize;\r\n    }\r\n}\r\n\r\nextern \"C\" {\r\n    fn printf(s: *const i8, ...);\r\n}\r\n\r\nstruct FatPtr<T> {\r\n    data: *const T,\r\n    len: usize,\r\n}\r\n\r\npub union Repr<T> {\r\n    rust: *const [T],\r\n    rust_mut: *mut [T],\r\n    raw: FatPtr<T>,\r\n}\r\n\r\npub enum Option<T> {\r\n    None,\r\n    Some(T),\r\n}\r\n\r\n#[lang = \"Range\"]\r\npub struct Range<Idx> {\r\n    pub start: Idx,\r\n    pub end: Idx,\r\n}\r\n\r\n#[lang = \"const_slice_ptr\"]\r\nimpl<T> *const [T] {\r\n    pub const fn len(self) -> usize {\r\n        let a = unsafe { Repr { rust: self }.raw };\r\n        a.len\r\n    }\r\n\r\n    pub const fn as_ptr(self) -> *const T {\r\n        self as *const T\r\n    }\r\n}\r\n\r\n#[lang = \"const_ptr\"]\r\nimpl<T> *const T {\r\n    pub const unsafe fn offset(self, count: isize) -> *const T {\r\n        unsafe { intrinsics::offset(self, count) }\r\n    }\r\n\r\n    pub const unsafe fn add(self, count: usize) -> Self {\r\n        unsafe { self.offset(count as isize) }\r\n    }\r\n\r\n    pub const fn as_ptr(self) -> *const T {\r\n        self as *const T\r\n    }\r\n}\r\n\r\nconst fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\r\n    unsafe {\r\n        Repr {\r\n            raw: FatPtr { data, len },\r\n        }\r\n        .rust\r\n    }\r\n}\r\n\r\n#[lang = \"index\"]\r\ntrait Index<Idx> {\r\n    type Output;\r\n\r\n    fn index(&self, index: Idx) -> &Self::Output;\r\n}\r\n\r\nimpl<T> [T] {\r\n    pub const fn is_empty(&self) -> bool {\r\n        self.len() == 0\r\n    }\r\n\r\n    pub const fn len(&self) -> usize {\r\n        unsafe { Repr { rust: self }.raw.len }\r\n    }\r\n}\r\n\r\npub unsafe trait SliceIndex<T> {\r\n    type Output;\r\n\r\n    fn get(self, slice: &T) -> Option<&Self::Output>;\r\n\r\n    unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\r\n\r\n    fn index(self, slice: &T) -> &Self::Output;\r\n}\r\n\r\nunsafe impl<T> SliceIndex<[T]> for usize {\r\n    type Output = T;\r\n\r\n    fn get(self, slice: &[T]) -> Option<&T> {\r\n        unsafe { Option::Some(&*self.get_unchecked(slice)) }\r\n    }\r\n\r\n    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {\r\n        // SAFETY: the caller guarantees that `slice` is not dangling, so it\r\n        // cannot be longer than `isize::MAX`. They also guarantee that\r\n        // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\r\n        // so the call to `add` is safe.\r\n        unsafe { slice.as_ptr().add(self) }\r\n    }\r\n\r\n    fn index(self, slice: &[T]) -> &T {\r\n        unsafe { &*self.get_unchecked(slice) }\r\n    }\r\n}\r\n\r\nunsafe impl<T> SliceIndex<[T]> for Range<usize> {\r\n    type Output = [T];\r\n\r\n    fn get(self, slice: &[T]) -> Option<&[T]> {\r\n        if self.start > self.end || self.end > slice.len() {\r\n            Option::None\r\n        } else {\r\n            unsafe { Option::Some(&*self.get_unchecked(slice)) }\r\n        }\r\n    }\r\n\r\n    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {\r\n        unsafe {\r\n            let a: *const T = slice.as_ptr();\r\n            let b: *const T = a.add(self.start);\r\n            slice_from_raw_parts(b, self.end - self.start)\r\n        }\r\n    }\r\n\r\n    fn index(self, slice: &[T]) -> &[T] {\r\n        unsafe { &*self.get_unchecked(slice) }\r\n    }\r\n}\r\n\r\nimpl<T, I> Index<I> for [T]\r\nwhere\r\n    I: SliceIndex<[T]>,\r\n{\r\n    type Output = I::Output;\r\n\r\n    fn index(&self, index: I) -> &I::Output {\r\n        unsafe {\r\n            let a = \"slice-index\\n\\0\";\r\n            let b = a as *const str;\r\n            let c = b as *const i8;\r\n\r\n            printf(c);\r\n        }\r\n\r\n        index.index(self)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let a = [1, 2, 3, 4, 5];\r\n    let b = a[1];\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: the print slice-index should not be output and direct array index operation should occur\r\n\r\nInstead, this happened: the code for array index operation is generating a slice and using slice index operations to access the array instead via unsizing.\r\n\r\n### Meta\r\n\r\n- What version of Rust GCC were you using, git sha if possible. 8809ee8c6a5621e830f3cfe66c381f986e63c7f2\r\n\r\n\r\n", "closed_by": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1436/timeline", "performed_via_github_app": null, "state_reason": "completed"}