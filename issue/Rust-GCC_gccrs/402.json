{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/402", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/402/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/402/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/402", "id": 873802794, "node_id": "MDU6SXNzdWU4NzM4MDI3OTQ=", "number": 402, "title": "Add error checking for inference variables being used within function signitures", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2591793259, "node_id": "MDU6TGFiZWwyNTkxNzkzMjU5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/good-first-pr", "name": "good-first-pr", "color": "A9A76D", "default": false, "description": ""}, {"id": 2628548177, "node_id": "MDU6TGFiZWwyNjI4NTQ4MTc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/diagnostic", "name": "diagnostic", "color": "9A6A99", "default": false, "description": "diagnostic static analysis"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/22", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/22", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/22/labels", "id": 9278274, "node_id": "MI_kwDOANBUbM4AjZNC", "number": 22, "title": "HIR Pipeline for libcore 1.49 Complete", "description": "Support all of the patterns and features used in libcore 1.49 at the HIR level: this includes, and isn't limited to, complex match patterns, inline assembly, some of the more complex type system features such as specialization, etc.", "creator": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "open_issues": 34, "closed_issues": 54, "state": "open", "created_at": "2023-04-13T08:17:13Z", "updated_at": "2023-06-20T19:14:22Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2021-05-02T00:35:52Z", "updated_at": "2023-05-10T08:26:00Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "```rust\r\nfn square(num: i32) -> _ {\r\n    num * num\r\n}\r\n\r\nfn main() {\r\n    square(123);\r\n}\r\n```\r\n\r\ngives:\r\n\r\n```\r\n[...]: error: type annotations needed\r\n    6 |     square(123);\r\n      |     ^\r\n```\r\n\r\nWe should check for inference variables where they are not supported (ie behind a TvVar) rustc gives:\r\n\r\n```\r\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\r\n --> <source>:1:24\r\n  |\r\n1 | fn square(num: i32) -> _ {\r\n  |                        ^\r\n  |                        |\r\n  |                        not allowed in type signatures\r\n  |                        help: replace with the correct return type: `i32`\r\n```\r\n\r\n## Guide\r\n\r\nCheck for inference variables on return types of Functions:\r\n\r\n- [ ] Add helper is_inference_var() which returns if the TypeKind == Infer https://github.com/Rust-GCC/gccrs/blob/28f527c9598339cf834a30b5ee1f14258b8ecbb2/gcc/rust/typecheck/rust-tyty.h#L216\r\n- [ ] Add is general inference variable helper which asserts it iis_inference_var casts over and checks the infer type kind  https://github.com/Rust-GCC/gccrs/blob/28f527c9598339cf834a30b5ee1f14258b8ecbb2/gcc/rust/typecheck/rust-tyty.h#L216\r\n- [ ] https://github.com/Rust-GCC/gccrs/blob/28f527c9598339cf834a30b5ee1f14258b8ecbb2/gcc/rust/typecheck/rust-hir-type-check-toplevel.h#L259-L296\r\n- [ ] https://github.com/Rust-GCC/gccrs/blob/28f527c9598339cf834a30b5ee1f14258b8ecbb2/gcc/rust/typecheck/rust-hir-type-check-implitem.h#L78-L123\r\n- [ ] https://github.com/Rust-GCC/gccrs/blob/28f527c9598339cf834a30b5ee1f14258b8ecbb2/gcc/rust/typecheck/rust-hir-type-check-implitem.h#L194-L211\r\nYou can check for an inference variable with:\r\n\r\n```\r\nTyTy::BaseType* return_type = ...;\r\nbool is_inference_variable = return_type->get_kind() == TyTy::TypeKind::INFER;\r\nTyTy::InferType* infer_var = static_cast<TyTy::InferType*>(infer_var);\r\nbool is_general_inference_variable = infer_var->get_infer_kind() == TyTy::InferType::InferTypeKind::GENERAL;\r\n```\r\n\r\nInference variables are of 3 kinds:\r\n\r\n- general which means it can be anything\r\n- integer the type is some kind of integer which will default to i32\r\n- float the type is some kind of decimal value default f64\r\n\r\nWe should error for any general inference variable, but maybe even if it is just any kind of inference variable.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/402/timeline", "performed_via_github_app": null, "state_reason": null}