{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1894", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1894/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1894/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1894/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1894", "id": 1593276491, "node_id": "I_kwDOANBUbM5e93hL", "number": 1894, "title": "ICE during macro expansion in libcore", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/12", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/12", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/12/labels", "id": 8516486, "node_id": "MI_kwDOANBUbM4AgfOG", "number": 12, "title": "Final upstream patches", "description": "", "creator": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 241, "state": "closed", "created_at": "2022-10-07T08:38:31Z", "updated_at": "2023-06-14T11:12:35Z", "due_on": "2023-04-30T07:00:00Z", "closed_at": "2023-05-10T08:27:18Z"}, "comments": 0, "created_at": "2023-02-21T11:04:54Z", "updated_at": "2023-02-24T11:45:37Z", "closed_at": "2023-02-24T11:45:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\nsee: https://github.com/rust-lang/rust/blob/aa3ca1994904f2e056679fce1f185db8c7ed2703/src/libcore/ops/arith.rs#L76\r\nsee: https://github.com/rust-lang/rust/blob/aa3ca1994904f2e056679fce1f185db8c7ed2703/src/libcore/internal_macros.rs#L34\r\n\r\n```rust\r\nmacro_rules! forward_ref_binop {\r\n    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\r\n        forward_ref_binop!(impl $imp, $method for $t, $u,\r\n                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\r\n    };\r\n    (impl $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\r\n        #[$attr]\r\n        impl<'a> $imp<$u> for &'a $t {\r\n            type Output = <$t as $imp<$u>>::Output;\r\n\r\n            #[inline]\r\n            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {\r\n                $imp::$method(*self, other)\r\n            }\r\n        }\r\n\r\n        #[$attr]\r\n        impl<'a> $imp<&'a $u> for $t {\r\n            type Output = <$t as $imp<$u>>::Output;\r\n\r\n            #[inline]\r\n            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\r\n                $imp::$method(self, *other)\r\n            }\r\n        }\r\n\r\n        #[$attr]\r\n        impl<'a, 'b> $imp<&'a $u> for &'b $t {\r\n            type Output = <$t as $imp<$u>>::Output;\r\n\r\n            #[inline]\r\n            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\r\n                $imp::$method(*self, *other)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n#[lang = \"add\"]\r\npub trait Add<RHS = Self> {\r\n    type Output;\r\n\r\n    fn add(self, rhs: RHS) -> Self::Output;\r\n}\r\n\r\nmacro_rules! add_impl {\r\n    ($($t:ty)*) => ($(\r\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\r\n        impl Add for $t {\r\n            type Output = $t;\r\n\r\n            fn add(self, other: $t) -> $t { self + other }\r\n        }\r\n\r\n        forward_ref_binop! { impl Add, add for $t, $t }\r\n    )*)\r\n}\r\n\r\nadd_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\r\n\r\n```\r\n\r\n### Meta\r\n\r\n- What version of Rust GCC were you using, git sha if possible.\r\n\r\n### Error output\r\n\r\n```\r\nrust1: note: finished parsing new delim token tree - peeked token is now ']' while t is ')'\r\nrust1: note: expanding tokens                                  \r\nrust1: note: expanding metavar: attr                     \r\nrust1: note: expanding metavar: imp                                                                                                                                                                                                                                               \r\nrust1: note: expanding metavar: u                        \r\nrust1: note: expanding metavar: t                                                                                                        \r\nrust1: note: expanding metavar: t                        \r\nrust1: note: expanding metavar: imp                                                                                                                                                                                                                                               \r\nrust1: note: expanding metavar: u                        \r\nrust1: note: expanding metavar: method                                                                                                   \r\nrust1: note: expanding metavar: u                        \r\nrust1: note: expanding metavar: t                              \r\nrust1: note: expanding metavar: imp                      \r\nrust1: note: expanding metavar: u\r\nrust1: note: expanding metavar: imp                         \r\nrust1: note: expanding metavar: method\r\nrust1: note: expanding metavar: attr              \r\nrust1: note: expanding metavar: imp                                                                                                      \r\nrust1: note: expanding metavar: u                 \r\nrust1: note: expanding metavar: t\r\nrust1: note: expanding metavar: t                           \r\nrust1: note: expanding metavar: imp\r\nrust1: note: expanding metavar: u                           \r\nrust1: note: expanding metavar: method\r\nrust1: note: expanding metavar: u                            \r\nrust1: note: expanding metavar: t                                                                                                                                                                                                                                                 rust1: note: expanding metavar: imp                                                                                                                                                                                                                                               \r\nrust1: note: expanding metavar: u                            \r\nrust1: note: expanding metavar: imp                                                                                                      \r\nrust1: note: expanding metavar: method                    \r\nrust1: note: expanding metavar: attr             \r\nrust1: note: expanding metavar: imp              \r\nrust1: note: expanding metavar: u\r\nrust1: note: expanding metavar: t\r\nrust1: note: expanding metavar: t\r\nrust1: note: expanding metavar: imp\r\nrust1: note: expanding metavar: u\r\nrust1: note: expanding metavar: method\r\nrust1: note: expanding metavar: u\r\nrust1: note: expanding metavar: t\r\nrust1: note: expanding metavar: imp\r\nrust1: note: expanding metavar: u\r\nrust1: note: expanding metavar: imp\r\nrust1: note: expanding metavar: method\r\nrust1: note: substituted tokens: { # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] impl < a > Add < usize > for & a usize { type Output = < usize as Add < usize >> :: Output ; # [ inline ] fn add ( self , other : usize ) -> < usize as Add < usize >> :: Output { Add :: \r\nadd ( * self , other ) } } # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] impl < a > Add < & a usize > for usize { type Output = < usize as Add < usize >> :: Output ; # [ inline ] fn add ( self , other : & a usize ) -> < usize as Add < usize >> :: Output { Add :: add \r\n( self , * other ) } } # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] impl < a , b > Add < & a usize > for & b usize { type Output = < usize as Add < usize >> :: Output ; # [ inline ] fn add ( self , other : & a usize ) -> < usize as Add < usize >> :: Output { Add :: \r\nadd ( * self , * other ) } } }\r\nrust1: note: finished parsing new delim token tree - peeked token is now ']' while t is ')'\r\nrust1: note: skipped left angle in generic param\r\nrust1: note: finished parsing actual generic params (i.e. inside angles)\r\nrust1: internal compiler error: in split_current_token, at rust/expand/rust-macro-invoc-lexer.cc:27\r\n```\r\n\r\n<!--\r\nInclude a backtrace if available.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n  <p>\r\n  \r\n  ```\r\nrust1: internal compiler error: in split_current_token, at rust/expand/rust-macro-invoc-lexer.cc:27\r\n0x1363125 Rust::MacroInvocLexer::split_current_token(Rust::TokenId, Rust::TokenId)\r\n        ../../gccrs/gcc/rust/expand/rust-macro-invoc-lexer.cc:27\r\n0x1330590 Rust::Parser<Rust::MacroInvocLexer>::skip_generics_right_angle()\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:222\r\n0x132f754 Rust::Parser<Rust::MacroInvocLexer>::parse_path_generic_args()\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:6488\r\n0x1327a1c Rust::Parser<Rust::MacroInvocLexer>::parse_type_path_segment()\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:6566\r\n0x130e8d0 Rust::Parser<Rust::MacroInvocLexer>::parse_type_path()\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:6266\r\n0x132762b Rust::Parser<Rust::MacroInvocLexer>::parse_qualified_path_type(Location)\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:6873\r\n0x130dd00 Rust::Parser<Rust::MacroInvocLexer>::parse_qualified_path_in_type()\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:6905\r\n0x13001d7 Rust::Parser<Rust::MacroInvocLexer>::parse_type(bool)\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:9226\r\n0x1316db4 Rust::Parser<Rust::MacroInvocLexer>::parse_type_alias(Rust::AST::Visibility, std::vector<Rust::AST::Attribute, std::allocator<Rust::AST::Attribute> >)\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:4017\r\n0x1305c95 Rust::Parser<Rust::MacroInvocLexer>::parse_trait_impl_item()\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:5532\r\n0x1325f28 Rust::Parser<Rust::MacroInvocLexer>::parse_impl(Rust::AST::Visibility, std::vector<Rust::AST::Attribute, std::allocator<Rust::AST::Attribute> >)\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:5242\r\n0x130bce7 Rust::Parser<Rust::MacroInvocLexer>::parse_vis_item(std::vector<Rust::AST::Attribute, std::allocator<Rust::AST::Attribute> >)\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:1310\r\n0x12ffbbe Rust::Parser<Rust::MacroInvocLexer>::parse_item(bool)\r\n        ../../gccrs/gcc/rust/parse/rust-parse-impl.h:1070\r\n0x12f9909 operator()\r\n        ../../gccrs/gcc/rust/expand/rust-macro-expand.cc:873\r\n0x12faf73 _M_invoke\r\n        /usr/include/c++/9/bits/std_function.h:286\r\n0x13034cd std::function<Rust::AST::SingleASTNode ()>::operator()() const\r\n        /usr/include/c++/9/bits/std_function.h:688\r\n0x12f9787 parse_many\r\n        ../../gccrs/gcc/rust/expand/rust-macro-expand.cc:847\r\n0x12f99bf transcribe_many_items\r\n        ../../gccrs/gcc/rust/expand/rust-macro-expand.cc:875\r\n0x12fa577 transcribe_context\r\n        ../../gccrs/gcc/rust/expand/rust-macro-expand.cc:1035\r\n0x12faa40 Rust::MacroExpander::transcribe_rule(Rust::AST::MacroRule&, Rust::AST::DelimTokenTree&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Rust::MatchedFragmentContainer, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Rust::MatchedFragmentContainer> > >&, bool, Rust::MacroExpander::ContextType)\r\n        ../../gccrs/gcc/rust/expand/rust-macro-expand.cc:1130\r\n  ```\r\n  \r\n  </p>\r\n</details>\r\n", "closed_by": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1894/timeline", "performed_via_github_app": null, "state_reason": "completed"}