{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2019", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2019/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2019/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2019/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/2019", "id": 1639518704, "node_id": "I_kwDOANBUbM5huRHw", "number": 2019, "title": "ICE with forward_ref_binop", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/22", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/22", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/22/labels", "id": 9278274, "node_id": "MI_kwDOANBUbM4AjZNC", "number": 22, "title": "HIR Pipeline for libcore 1.49 Complete", "description": "Support all of the patterns and features used in libcore 1.49 at the HIR level: this includes, and isn't limited to, complex match patterns, inline assembly, some of the more complex type system features such as specialization, etc.", "creator": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "open_issues": 34, "closed_issues": 54, "state": "open", "created_at": "2023-04-13T08:17:13Z", "updated_at": "2023-06-20T19:14:22Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2023-03-24T14:38:39Z", "updated_at": "2023-06-14T09:22:39Z", "closed_at": "2023-06-14T09:22:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```rust\r\nmacro_rules! forward_ref_binop {\r\n    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\r\n        forward_ref_binop!(impl $imp, $method for $t, $u,\r\n                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\r\n    };\r\n    (impl $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\r\n        #[$attr]\r\n        impl<'a> $imp<$u> for &'a $t {\r\n            type Output = <$t as $imp<$u>>::Output;\r\n\r\n            #[inline]\r\n            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {\r\n                $imp::$method(*self, other)\r\n            }\r\n        }\r\n\r\n        #[$attr]\r\n        impl<'a> $imp<&'a $u> for $t {\r\n            type Output = <$t as $imp<$u>>::Output;\r\n\r\n            #[inline]\r\n            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\r\n                $imp::$method(self, *other)\r\n            }\r\n        }\r\n\r\n        #[$attr]\r\n        impl<'a, 'b> $imp<&'a $u> for &'b $t {\r\n            type Output = <$t as $imp<$u>>::Output;\r\n\r\n            #[inline]\r\n            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\r\n                $imp::$method(*self, *other)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n#[lang = \"add\"]\r\npub trait Add<RHS = Self> {\r\n    type Output;\r\n\r\n    fn add(self, rhs: RHS) -> Self::Output;\r\n}\r\n\r\nmacro_rules! add_impl {\r\n    ($($t:ty)*) => ($(\r\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\r\n        impl Add for $t {\r\n            type Output = $t;\r\n\r\n            fn add(self, other: $t) -> $t { self + other }\r\n        }\r\n\r\n        forward_ref_binop! { impl Add, add for $t, $t }\r\n    )*)\r\n}\r\n\r\nadd_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\r\n\r\n```\r\n\r\n### Meta\r\n\r\n- What version of Rust GCC were you using, git sha if possible.\r\n\r\n### Error output\r\n\r\n```\r\ncrab1: internal compiler error: in resolve_root_path, at rust/typecheck/rust-hir-type-check-path.cc:247  \r\n```\r\n\r\n<!--\r\nInclude a backtrace if available.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n  <p>\r\n  \r\n  ```                                                                                                                        \r\n0x151eab4 Rust::Resolver::TypeCheckExpr::resolve_root_path(Rust::HIR::PathInExpression&, unsigned long*, unsigned int*)                                                                                                          \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-path.cc:247                                                                                                                                                           \r\n0x151e414 Rust::Resolver::TypeCheckExpr::visit(Rust::HIR::PathInExpression&)                                                                                                                                                     \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-path.cc:150                                                                                                                                                           \r\n0x1385319 Rust::HIR::PathInExpression::accept_vis(Rust::HIR::HIRExpressionVisitor&)                                                                                                                                              \r\n        ../../gccrs/gcc/rust/hir/tree/rust-hir.cc:3726                                                                                                                                                                           \r\n0x14e9b2d Rust::Resolver::TypeCheckExpr::Resolve(Rust::HIR::Expr*)                                                                                                                                                               \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-expr.cc:41                                                                                                                                                            \r\n0x14ea4a3 Rust::Resolver::TypeCheckExpr::visit(Rust::HIR::CallExpr&)                                                                                                                                                             \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-expr.cc:178                                                                                                                                                           \r\n0x1387bdd Rust::HIR::CallExpr::accept_vis(Rust::HIR::HIRExpressionVisitor&)                                                                                                                                                      \r\n        ../../gccrs/gcc/rust/hir/tree/rust-hir.cc:4853                                                                                                                                                                           \r\n0x14e9b2d Rust::Resolver::TypeCheckExpr::Resolve(Rust::HIR::Expr*)                                                                                                                                                               \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-expr.cc:41                                                                                                                                                            \r\n0x14ebff3 Rust::Resolver::TypeCheckExpr::visit(Rust::HIR::BlockExpr&)                                                                                                                                                            \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-expr.cc:537                                                                                                                                                           \r\n0x1388203 Rust::HIR::BlockExpr::accept_vis(Rust::HIR::HIRExpressionVisitor&)                                                                                                                                                     \r\n        ../../gccrs/gcc/rust/hir/tree/rust-hir.cc:5021                                                                                                                                                                           \r\n0x14e9b2d Rust::Resolver::TypeCheckExpr::Resolve(Rust::HIR::Expr*)                                                                                                                                                               \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-expr.cc:41                                                                                                                                                            \r\n0x14f802a Rust::Resolver::TypeCheckImplItem::visit(Rust::HIR::Function&)                                                                                                                                                         \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-implitem.cc:311                                                                                                                                                       \r\n0x13882ab Rust::HIR::Function::accept_vis(Rust::HIR::HIRImplVisitor&)                                                                                                                                                            \r\n        ../../gccrs/gcc/rust/hir/tree/rust-hir.cc:5039                                                                                                                                                                           \r\n0x14f7571 Rust::Resolver::TypeCheckImplItem::Resolve(Rust::HIR::ImplBlock*, Rust::HIR::ImplItem*, Rust::TyTy::BaseType*, std::vector<Rust::TyTy::SubstitutionParamMapping, std::allocator<Rust::TyTy::SubstitutionParamMapping> >\r\n)                                                                                                                                                                                                                                \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-implitem.cc:180                                                                                                                                                       \r\n0x14d9860 Rust::Resolver::TypeCheckItem::resolve_impl_item(Rust::HIR::ImplBlock&, Rust::HIR::ImplItem&)                                                                                                                          \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-item.cc:363                                                                                                                                                           \r\n0x14d7686 Rust::Resolver::TypeCheckItem::ResolveImplItem(Rust::HIR::ImplBlock&, Rust::HIR::ImplItem&)                                                                                                                            \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-item.cc:57                                                                                                                                                            \r\n0x150633d Rust::Resolver::query_type(unsigned int, Rust::TyTy::BaseType**)                                                                                                                                                       \r\n        ../../gccrs/gcc/rust/typecheck/rust-type-util.cc:85                                                                                                                                                                      \r\n0x14fa523 operator()                                                                                                                                                                                                             \r\n        ../../gccrs/gcc/rust/typecheck/rust-hir-dot-operator.cc:186                                                                                                                                                              \r\n0x14fd5ed __invoke_impl<bool, Rust::Resolver::MethodResolver::select(Rust::TyTy::BaseType&)::<lambda(Rust::HirId, Rust::HIR::ImplBlock*)>&, unsigned int, Rust::HIR::ImplBlock*>                                                 \r\n        /usr/include/c++/12/bits/invoke.h:61                                                                                                                                                                                     \r\n0x14fd00e __invoke_r<bool, Rust::Resolver::MethodResolver::select(Rust::TyTy::BaseType&)::<lambda(Rust::HirId, Rust::HIR::ImplBlock*)>&, unsigned int, Rust::HIR::ImplBlock*>                                                    \r\n        /usr/include/c++/12/bits/invoke.h:114                                                                                                                                                                                    \r\n0x14fc76c _M_invoke                                                                                                                                                                                                              \r\n        /usr/include/c++/12/bits/std_function.h:290                                                                                                                                                                              \r\nPlease submit a full bug report, with preprocessed source (by using -freport-bug).                                                                                                                                               \r\nPlease include the complete backtrace with any bug report.                                                                                                                                                                       \r\nSee <https://gcc.gnu.org/bugs/> for instructions.                                                                                                                                                                                \r\n[Inferior 1 (process 922585) exited with code 04]\r\n  ```\r\n  \r\n  </p>\r\n</details>\r\n", "closed_by": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2019/timeline", "performed_via_github_app": null, "state_reason": "completed"}