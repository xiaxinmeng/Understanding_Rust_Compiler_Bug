{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1740", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1740/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1740/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1740/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1740", "id": 1533981436, "node_id": "I_kwDOANBUbM5bbrL8", "number": 1740, "title": "extra DW_TAG_typedef layer in DWARF", "user": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-01-15T20:12:01Z", "updated_at": "2023-01-16T15:35:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\npub struct Example {\r\n    value: i32\r\n}\r\nfn main() {\r\n    let x = Example {value: 97};\r\n}\r\n```\r\n\r\nThen I examined the DWARF using `readelf -wi`.\r\n\r\nI see this:\r\n```\r\n <1><5e>: Abbrev Number: 4 (DW_TAG_typedef)\r\n    <5f>   DW_AT_name        : (indirect string, offset: 0x85): str::Example\r\n    <63>   DW_AT_decl_file   : 1\r\n    <64>   DW_AT_decl_line   : 1\r\n    <65>   DW_AT_decl_column : 5\r\n    <66>   DW_AT_type        : <0x6f>\r\n```\r\nHowever, I don't think having an extra `DW_TAG_typedef` here is very useful -- it just bloats the debuginfo without providing any extra useful information.  Instead, I think the type itself ought to have a name.\r\n\r\nApplying a hack to rust-gcc.cc:\r\n```diff\r\ndiff --git a/gcc/rust/rust-gcc.cc b/gcc/rust/rust-gcc.cc\r\nindex f674fc8efb27..aa7e813167c3 100644\r\n--- a/gcc/rust/rust-gcc.cc\r\n+++ b/gcc/rust/rust-gcc.cc\r\n@@ -933,12 +933,12 @@ Gcc_backend::named_type (const std::string &name, tree type, Location location)\r\n       return type;\r\n     }\r\n \r\n-  tree copy = build_variant_type_copy (type);\r\n+  // tree copy = build_variant_type_copy (type);\r\n   tree decl = build_decl (location.gcc_location (), TYPE_DECL,\r\n-                         get_identifier_from_string (name), copy);\r\n-  DECL_ORIGINAL_TYPE (decl) = type;\r\n-  TYPE_NAME (copy) = decl;\r\n-  return copy;\r\n+                         get_identifier_from_string (name), type);\r\n+  // DECL_ORIGINAL_TYPE (decl) = type;\r\n+  TYPE_NAME (type) = decl;\r\n+  return type;\r\n }\r\n \r\n // Return the size of a type.\r\n```\r\n... makes it better:\r\n```\r\n <1><5e>: Abbrev Number: 4 (DW_TAG_structure_type)\r\n    <5f>   DW_AT_name        : (indirect string, offset: 0x85): str::Example\r\n    <63>   DW_AT_byte_size   : 4\r\n    <64>   DW_AT_sibling     : <0x73>\r\n...\r\n```\r\n\r\nNote that gdb's rust support currently only works with the latter.  While this could be fixed in gdb, I think there's not really a strong reason to.\r\n\r\nI'm using git gccrs, commit 2f9f77f9dd6330fe60554400133d7217f78afa43.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1740/timeline", "performed_via_github_app": null, "state_reason": null}