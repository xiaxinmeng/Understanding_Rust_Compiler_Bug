{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1000", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1000/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1000/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1000/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1000", "id": 1163431626, "node_id": "I_kwDOANBUbM5FWI7K", "number": 1000, "title": "Fix unsafe lex_string() implementation", "user": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2029873897, "node_id": "MDU6TGFiZWwyMDI5ODczODk3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/plan", "name": "plan", "color": "42ed5c", "default": false, "description": ""}, {"id": 2642482874, "node_id": "MDU6TGFiZWwyNjQyNDgyODc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/cleanup", "name": "cleanup", "color": "E22959", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-09T03:00:03Z", "updated_at": "2022-07-07T14:30:20Z", "closed_at": "2022-07-07T14:30:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As per comments committed in #988, the `lex_string`() function has memory safety issues due to its use of a reference to a C++ string, which can lead to problems if the string's lifetime is shorter than the lexer's.\r\n\r\nAs the lexer was originally designed only to work with files, the implementation of tokenising from a string currently works by using `fmemopen` to open the string as a file. This is then wrapped in a RAIIFile as required by the lexer's constructor. \r\n\r\nThe comments suggest one potential fix - allocating a new buffer with fmemopen and copying the string's data into it. \r\nHowever, they also seem to suggest that the current implementation of RAIIFile is not capable of doing so. The exact comment is:\r\n```\r\n// But sadly our RAIIFile does not support moving really well... And the\r\n// destructor, which calls fclose(), gets called, triggering a lack of a\r\n// buffer to parse :)\r\n```\r\nI don\u2019t believe that this should occur. The move constructor of RAIIFile copies the fields and then sets the original\u2019s FILE pointer to nullptr in the constructor body, so when the original is set to be destructed (which would be after the move constructor is called), the `fclose(`) is not called on the stream's actual FILE pointer. The move assignment operator does the same - the only potential issue arising if an RAIIFile is assigned to itself (which should not be able to occur).\r\n\r\nAn alternative solution that I believe would address the problem better conceptually would be to make the lexer into a template class that takes an \u201cInputSource\u201d type argument. \r\n`InputSource` is currently an internal wrapper inside the lexer that abstracts sourcing characters (`fgetc` for a FILE).\r\nInstead of wrapping a string to look like a file, there could simply be an alternative `StringInputSource` class that sources characters from a string in addition to the previous `FileInputSource` class. \r\n\r\nThe advantage of the template solution is that it is conceptually simple, robust and open to further extension, and would be easy to reason about in terms of lifetime, etc. The disadvantage is that it complicates the lexer somewhat and would require all lexer methods to be put in headers, potentially slowing compilation. ", "closed_by": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1000/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 1, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1000/timeline", "performed_via_github_app": null, "state_reason": "completed"}