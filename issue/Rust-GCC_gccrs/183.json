{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/183", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/183/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/183/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/183", "id": 794237281, "node_id": "MDU6SXNzdWU3OTQyMzcyODE=", "number": 183, "title": "Interior Mutability", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372777, "node_id": "MDU6TGFiZWw2MTM3Mjc3Nw==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-01-26T13:37:12Z", "updated_at": "2021-07-27T09:18:30Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This doesn't handle interior mutability, right? If you have multiple immutable references to an `UnsafeCell` you can derive a mutable reference to the contents of this `UnsafeCell` from any of these immutable references for as long as only one such mutable reference exists at any point. libcore implements `Freeze` for all types that don't contain an `UnsafeCell` to help the compiler with handling interior mutability.\r\n\r\n\r\n```rust\r\nlet foo = &UnsafeCell::new(Vec::new());\r\nlet bar = &*foo;\r\nunsafe { (*foo.get()).push(1); }\r\nunsafe { (*bar.get()).push(2); }\r\nunsafe { assert_eq!((*foo.get()).len(), 2); }\r\n```\r\n\r\nis not UB.\r\n\r\n_Originally posted by @bjorn3 in https://github.com/Rust-GCC/gccrs/issues/182#issuecomment-767512872_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/183/timeline", "performed_via_github_app": null, "state_reason": null}