{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/825", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/825/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/825/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/825/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/825", "id": 1074460528, "node_id": "I_kwDOANBUbM5ACvdw", "number": 825, "title": "HIR Visitor Refactoring", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2591793259, "node_id": "MDU6TGFiZWwyNTkxNzkzMjU5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/good-first-pr", "name": "good-first-pr", "color": "A9A76D", "default": false, "description": ""}, {"id": 2642482874, "node_id": "MDU6TGFiZWwyNjQyNDgyODc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/cleanup", "name": "cleanup", "color": "E22959", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2021-12-08T14:17:57Z", "updated_at": "2022-02-25T22:09:13Z", "closed_at": "2022-02-25T22:09:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "# Background\r\n\r\nOur HIR implementation is based off our AST slowly but surely we are cleaning this up to make the HIR much slimer such as no macros and methods are functions, all loops are loop expressions etc.\r\n\r\nAs part of this bootstrapping from our AST we only have a single Visitor interface that contains abstract methods for every type see: https://github.com/Rust-GCC/gccrs/blob/0024bc2f028369b871a65ceb11b2fddfb0f9c3aa/gcc/rust/hir/tree/rust-hir-visitor.h\r\n\r\nThe problem here is that when we are working with the full tree of the HIR we are forced to create visitor classes which contain all of the potential types even though the flow of the tree is always:\r\n\r\n  Crate -> Items / types -> Stmts/Items/types -> Expressions / types\r\n\r\nSo even though we have a fully and strongly typed Intermediate representation to work with, we are not getting the full advantages of this yet. The major issue we have is that to avoid having to create overblown classes implementing every node in the graph we have these base classes: https://github.com/Rust-GCC/gccrs/blob/0024bc2f028369b871a65ceb11b2fddfb0f9c3aa/gcc/rust/backend/rust-compile-base.h\r\n\r\nWhich are starting to make the code quite messy to work with, the other problem is that every method has an empty block default we have cases in the code that do not have implementation such as the recent issue with ReferenceTypes on ImplBlocks such as:\r\n\r\n```rust\r\nimpl<T> Foo for &T {}\r\n```\r\n\r\nThis was due to the fact that impl blocks act on any HIR::TypeNoBounds and this visitor was missing an implementation for reference types:\r\n\r\nhttps://github.com/Rust-GCC/gccrs/blob/0024bc2f028369b871a65ceb11b2fddfb0f9c3aa/gcc/rust/resolve/rust-ast-resolve-type.h#L125\r\n\r\nAlthough that example is in the AST it shows how this visitor was missing making it very easy to miss cases in the full IR graph. If we have many smaller visitors we can do away with these base classes and use the C++ compiler to enforce the missing methods through using visitor abstract base classes. This will make it less confusing what methods we need to implement.\r\n\r\nThen to take advantage of these new visitors let's focus this on the backend module (this should also be renamed to generic or something but that's a separate issue, backend is a bit of a weird name). If we focus usage of these new HIR visitors on the backend we limit the impact in finding regressions in the type-checking and lint passes until we are happy with this and the backend pass is a simpler case to start with.\r\n\r\nhttps://github.com/Rust-GCC/gccrs/blob/0024bc2f028369b871a65ceb11b2fddfb0f9c3aa/gcc/rust/hir/tree/rust-hir-item.h\r\n\r\nThis single issue is not the finished goal but the starting point in a journey to make gccrs easier to work with and debug.\r\n\r\n## Tasks\r\n\r\n- [x] Refactor the existing HIR Visitor to be called HIRFullVisitor as shown here https://github.com/Rust-GCC/gccrs/commit/eb6963324cd48fb4774ad38723562b98e2d9dd28\r\n\r\nThis visitor will be different to the following visitors in that it will contain a non-abstract base class so that you can choose which methods we wish to override.\r\n\r\n### HIRVisItemVisitor\r\n\r\nrust-hir-item.h\r\n- [ ] 697:class Module : public VisItem\r\n- [ ] 776:class ExternCrate : public VisItem\r\n- [ ] 1038:class UseDeclaration : public VisItem\r\n- [ ] 1098:class Function : public VisItem, public ImplItem\r\n- [ ] 1257:class TypeAlias : public VisItem, public ImplItem\r\n- [ ] 1371:class Struct : public VisItem\r\n- [ ] 1833:class Enum : public VisItem\r\n- [ ] 1941:class Union : public VisItem\r\n- [ ] 2028:class ConstantItem : public VisItem, public ImplItem\r\n- [ ] 2111:class StaticItem : public VisItem\r\n- [ ] 2503:class Trait : public VisItem\r\n- [ ] 2627:class ImplBlock : public VisItem\r\n- [ ] 3017:class ExternBlock : public VisItem\r\n\r\nEvery pass in the compiler starts with a top-level Item pass as these are the top-level constructs in the language\r\n\r\n###  HIRImplItemisitor\r\n\r\nThe next step is ImplItems since when walking the graph we end up hitting ImplBlocks early which contains a list of ImplItems so we need to be able to access those:\r\n\r\nrust-hir-item.h\r\n\r\n- [ ] 1098:class Function : public VisItem, public ImplItem\r\n- [ ] 1257:class TypeAlias : public VisItem, public ImplItem\r\n- [ ] 2028:class ConstantItem : public VisItem, public ImplItem\r\n\r\n### HIRTypeVisitor\r\n\r\nNext we need to be able to access types in Rust we really have two different kind of type HIR::Type the overall type base class or we have TypeNoBounds. For now as part of this cleanup lets just start with a simple class for all types\r\n\r\nrust-hir.h\r\n\r\n- [ ] 377:class TypeNoBounds : public Type          // I think these might just be base classes\r\n- [ ] 436:class Lifetime : public TypeParamBound // this is a types but we don't do anything with it\r\n\r\nrust-hir-path.h\r\n\r\n- [ ] 431:class TypePathSegmentGeneric : public TypePathSegment\r\n- [ ] 566:class TypePathSegmentFunction : public TypePathSegment\r\n- [ ] 611:class TypePath : public TypeNoBounds\r\n- [ ] 845:class QualifiedPathInType : public TypeNoBounds\r\n\r\nrust-hir-type.h\r\n\r\n- [ ] 33:class TraitBound : public TypeParamBound\r\n- [ ] 86:class ImplTraitType : public Type\r\n- [ ] 145:class TraitObjectType : public Type\r\n- [ ] 213:class ParenthesisedType : public TypeNoBounds\r\n- [ ] 281:class ImplTraitTypeOneBound : public TypeNoBounds // this can probably go away in a future pr by desugaring into ImplTraitType but that's a seperate issue\r\n- [ ] 320:class TupleType : public TypeNoBounds\r\n- [ ] 388:class NeverType : public TypeNoBounds\r\n- [ ] 417:class RawPointerType : public TypeNoBounds\r\n- [ ] 484:class ReferenceType : public TypeNoBounds\r\n- [ ] 559:class ArrayType : public TypeNoBounds\r\n- [ ] 623:class SliceType : public TypeNoBounds\r\n- [ ] 676:class InferredType : public TypeNoBounds\r\n- [ ] 785:class BareFunctionType : public TypeNoBounds\r\n\r\n\r\n### HIRStmtVisitor\r\n\r\nThis one is a bit more annoying since Stmts can also contain some Items but let's just handle it like the others\r\n\r\nrust-hir-stmt.h\r\n\r\n- [ ] 29:class EmptyStmt : public Stmt\r\n- [ ] 54:class LetStmt : public Stmt\r\n- [ ] 134:class ExprStmt : public Stmt\r\n- [ ] 153:class ExprStmtWithoutBlock : public ExprStmt\r\n- [ ] 197:class ExprStmtWithBlock : public ExprStmt\r\n\r\nrust-hir.h \r\n119:class Item : public Stmt\r\n\r\n// ^^ this hierarchy is a bit annoying at we may want to change it in the future because of enum-item making it confusing so let's just get it to contain the relevant VisItems for now\r\n\r\n- [ ] 697:class Module : public VisItem\r\n- [ ] 776:class ExternCrate : public VisItem\r\n- [ ] 1038:class UseDeclaration : public VisItem\r\n- [ ] 1098:class Function : public VisItem, public ImplItem\r\n- [ ] 1257:class TypeAlias : public VisItem, public ImplItem\r\n- [ ] 1371:class Struct : public VisItem\r\n- [ ] 1833:class Enum : public VisItem\r\n- [ ] 1941:class Union : public VisItem\r\n- [ ] 2028:class ConstantItem : public VisItem, public ImplItem\r\n- [ ] 2111:class StaticItem : public VisItem\r\n- [ ] 2503:class Trait : public VisItem\r\n- [ ] 2627:class ImplBlock : public VisItem\r\n- [ ] 3017:class ExternBlock : public VisItem\r\n\r\nThis is all because Rust allows for Blocks to contain items functions etc see: https://doc.rust-lang.org/reference/statements.html I wonder are there any limits on statements within blocks the reference does not mention any but maybe we will need someone to double-check this at some point we might be able to remove some things from this such as the extern block's maybe I have never seen those within a rust block expression.\r\n\r\n### HIRExpressionVisitor\r\n\r\nFinally lets finish this initial refactor with an expression visitor:\r\n\r\n- [ ] rust-hir.h\r\n- [ ] 225:class ExprWithoutBlock : public Expr\r\n- [ ] 266:class IdentifierExpr : public ExprWithoutBlock\r\n- [ ] 734:class PathExpr : public ExprWithoutBlock\r\n- [ ] rust-hir-expr.h\r\n- [ ] 32:class ExprWithBlock : public Expr // this is a base class\r\n- [ ] 61:class LiteralExpr : public ExprWithoutBlock\r\n- [ ] 125:class OperatorExpr : public ExprWithoutBlock\r\n- [ ] 744:class GroupedExpr : public ExprWithoutBlock\r\n- [ ] 933:class ArrayExpr : public ExprWithoutBlock\r\n- [ ] 1008:class ArrayIndexExpr : public ExprWithoutBlock\r\n- [ ] 1073:class TupleExpr : public ExprWithoutBlock\r\n- [ ] 1157:class TupleIndexExpr : public ExprWithoutBlock\r\n- [ ] 1228:class StructExpr : public ExprWithoutBlock\r\n- [ ] 1628:class CallExpr : public ExprWithoutBlock\r\n- [ ] 1708:class MethodCallExpr : public ExprWithoutBlock\r\n- [ ] 1796:class FieldAccessExpr : public ExprWithoutBlock\r\n- [ ] 1920:class ClosureExpr : public ExprWithoutBlock\r\n- [ ] 2002:class BlockExpr : public ExprWithBlock\r\n- [ ] 2181:class ContinueExpr : public ExprWithoutBlock\r\n- [ ] 2224:class BreakExpr : public ExprWithoutBlock\r\n- [ ] 2301:class RangeExpr : public ExprWithoutBlock\r\n- [ ] 2609:class ReturnExpr : public ExprWithoutBlock\r\n- [ ] 2677:class UnsafeBlockExpr : public ExprWithBlock\r\n- [ ] 2765:class BaseLoopExpr : public ExprWithBlock\r\n- [ ] 3053:class IfExpr : public ExprWithBlock\r\n- [ ] 3266:class IfLetExpr : public ExprWithBlock\r\n- [ ] 3840:class MatchExpr : public ExprWithBlock\r\n- [ ] 3919:class AwaitExpr : public ExprWithoutBlock\r\n- [ ] 3969:class AsyncBlockExpr : public ExprWithBlock\r\n\r\n\r\n## TLDR on Tasks:\r\n\r\nLet's focus the initial refactor on these 5 new visitors and use them to update the code within the Backend module for now.\r\n\r\n- HIRVisItemVisitor\r\n- HIRImplItemisitor\r\n- HIRTypeVisitor\r\n- HIRStmtVisitor\r\n- HIRExpressionVisitor", "closed_by": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/825/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/825/timeline", "performed_via_github_app": null, "state_reason": "completed"}