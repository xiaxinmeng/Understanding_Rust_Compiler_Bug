{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/330", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/330/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/330/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/330/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/330", "id": 848654127, "node_id": "MDU6SXNzdWU4NDg2NTQxMjc=", "number": 330, "title": "[WIP] Create liveness analysis for dead code detection.", "user": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2021-04-01T17:28:10Z", "updated_at": "2021-04-09T20:50:38Z", "closed_at": "2021-04-09T20:50:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a working issue for the 2021 GSoC. I'm little busy last two weeks, sorry about my late.\r\n\r\nI had checked the method from rustc: [https://github.com/rust-lang/rust/blob/master/compiler/rustc_passes/src/dead.rs#L569](https://github.com/rust-lang/rust/blob/master/compiler/rustc_passes/src/dead.rs#L569)\r\nThat implementation separates two phases to detect unused code.\r\n1. liveness analysis to get all reachable symbols.\r\n2. code called from live codes are live\uff0c otherwise dead.\r\n\r\nImplementation for our project.\r\n1. first of all, we need a test for warning features. But it seems like currently our new test system doesn't supports warnings?\r\n2. add an analysis dir which contains our Liveness class, and try to start after resolve.\r\n3. once obtain liveness variables, we can simply scan all dead codes which not belongs to the live variable.\r\n``` c++\r\n  // type resolve\r\n  Resolver::TypeResolution::Resolve (hir);\r\n  if (options.dump_option_enabled (CompileOptions::TYPE_RESOLUTION_DUMP))\r\n    {\r\n      dump_type_resolution (hir);\r\n    }\r\n\r\n  // liveness analysis\r\n  Analysis::LivenessAnalysis::liveness(hir);\r\n  if (options.dump_option_enabled (CompileOptions::ANALYSIS_DUMP))\r\n    {\r\n      // I have no idea about what should be dumped. Maybe some bit-vectors?\r\n    }\r\n\r\n  if (saw_errors ())\r\n    return;\r\n\r\n  // scan deadcode\r\n  Analysis::ScanDeadcode::scan();\r\n  if (options.dump_option_enabled (CompileOptions::DEADCODE_DUMP))\r\n    {\r\n      // what should be dumped?\r\n    }\r\n\r\n  if (saw_errors ())\r\n    return;\r\n\r\n  // scan unused has to be done after type resolution since methods are resolved\r\n  // at that point\r\n  Resolver::ScanUnused::Scan ();\r\n\r\n  if (saw_errors ())\r\n    return;\r\n```\r\n\r\nNow, this is just an entry point design. I will continuously update any details on design liveness analysis and dead-code detection.\r\nIf anyone has any suggestions, plz just comment on this issue directly or @ me in zulip, thank you!\r\n", "closed_by": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/330/timeline", "performed_via_github_app": null, "state_reason": "completed"}