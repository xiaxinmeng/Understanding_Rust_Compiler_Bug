{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/414", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/414/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/414/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/414", "id": 878885857, "node_id": "MDU6SXNzdWU4Nzg4ODU4NTc=", "number": 414, "title": "Multiple file parsing and the pipleine", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 61372777, "node_id": "MDU6TGFiZWw2MTM3Mjc3Nw==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 2029873897, "node_id": "MDU6TGFiZWwyMDI5ODczODk3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/plan", "name": "plan", "color": "42ed5c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/6", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/6", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/6/labels", "id": 6262846, "node_id": "MDk6TWlsZXN0b25lNjI2Mjg0Ng==", "number": 6, "title": "Imports and visibility", "description": "Multi file compilation and with use, extern and mod.", "creator": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 161, "state": "closed", "created_at": "2021-01-03T14:20:54Z", "updated_at": "2022-08-23T08:04:15Z", "due_on": "2022-05-30T07:00:00Z", "closed_at": "2022-08-03T10:02:38Z"}, "comments": 6, "created_at": "2021-05-07T12:12:23Z", "updated_at": "2021-10-18T09:28:12Z", "closed_at": "2021-10-18T09:28:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We need to support parsing multiple file's in Rust. Note crates in rust are a single compilation unit.\r\n\r\nThis change should break down into few tasks, some of which are already in progress. Heads up for @dkm and @CohenArthur \r\n\r\n## Unify ModuleBodied and ModuleNoBody\r\n\r\nChange the AST classes to have a single AST::Module with an enum to flag if the file has been loaded or not\r\n\r\n## Refactor parse_crate\r\n\r\nWe will need a parse_items which can be extracted from the parse_crate function inside rust_parse_impl.h\r\n\r\nhttps://github.com/Rust-GCC/gccrs/blob/c707190b29e1e5b2d20fa9d68dcd7f043659aed4/gcc/rust/parse/rust-parse-impl.h#L394\r\n\r\nThis new function should also respect the error's table. When we end up parsing multiple files we will need to be able to keep track of the errors which means this parse_items should also have an out variable to return the error_table which will then be appended to the parent caller's error table.\r\n\r\nSomething like:\r\n\r\n```c++\r\nemplate <typename ManagedTokenSource>\r\nstd::unique_ptr<AST::Item>\r\nParser<ManagedTokenSource>::parse_items (std::vector<Error>& errors) {\r\n\r\n  <loop of parse_items>\r\n\r\n  for (const auto &error : error_table)\r\n    errors.push_back(std::move(error));\r\n\r\n}\r\n```\r\n\r\nNote there is an existing unused parse_items which you might be able to just update. The loop should just be copied from the parse_crate function.\r\n\r\nhttps://github.com/Rust-GCC/gccrs/blob/c707190b29e1e5b2d20fa9d68dcd7f043659aed4/gcc/rust/parse/rust-parse-impl.h#L1001\r\n\r\n## Parse the files\r\n\r\nWithin our expand pass you should be able to intercept when to actually parse a file or not here:\r\n\r\nhttps://github.com/Rust-GCC/gccrs/blob/c707190b29e1e5b2d20fa9d68dcd7f043659aed4/gcc/rust/expand/rust-macro-expand.cc#L2018\r\n\r\nNote that if the module is marked for strip you should not parse the file. You will also need a way to track the relative path for the module you should be loading.\r\n\r\n## Update the HIR classes to reflect the new Module AST classes\r\n\r\nNow that the AST differs to the HIR we should unify them. I think you should be able to rename the HIR::ModuleBodied into a simple HIR::Module and get rid of the base class and the HIR::ModuleNoBody.\r\n\r\nThe HIR lowering code can also be copied from @dkm's branch. But the IR will be different.\r\n\r\n## Merge with @dkm's work\r\n\r\n@dkm has already done name/type resolution work for modules we should rebase this branch and investigate the missing pieces\r\n\r\n### name resolution\r\n\r\nTODO\r\n\r\n### hir lowering\r\n\r\nNow that the AST differs to the HIR we should unify them. I think you should be able to rename the HIR::ModuleBodied into a simple HIR::Module and get rid of the base class and the HIR::ModuleNoBody.\r\n\r\nThe HIR lowering code can also be copied from @dkm's branch. But the IR will be different.\r\n\r\n### type resolution\r\n\r\nTODO\r\n\r\n### backend generic code generation\r\n\r\nThis should be a simple new visitor for the https://github.com/Rust-GCC/gccrs/blob/master/gcc/rust/backend/rust-compile-item.h to iterate each of the items in the module and simply recursively call CompileItem::compile(module_item)\r\n\r\n## Tests\r\n\r\nI am unaware of other tests like this in GCC. Unlike other languages the multiple files being parsed is driven by the front-end this seems like we need some kind of dejagnu work which I don't know how to start.\r\n\r\n# Tasks\r\n\r\n- [x]  Unify AST module classes https://github.com/Rust-GCC/gccrs/pull/605\r\n- [x]  Refactor the parser parse_crate and parse_items  https://github.com/Rust-GCC/gccrs/pull/608\r\n- [x]  Intercept the point to actually parse the file within the expand pass https://github.com/Rust-GCC/gccrs/pull/613 https://github.com/Rust-GCC/gccrs/pull/639\r\n- [x]  Update the HIR module IR https://github.com/Rust-GCC/gccrs/pull/638\r\n- [x]  Name resolution\r\n- [x]  HIR Lowering\r\n- [x]  Type Resolution\r\n- [x]  Backend code generation\r\n- [x]  Dejagnu test cases https://github.com/Rust-GCC/gccrs/pull/663", "closed_by": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/414/timeline", "performed_via_github_app": null, "state_reason": "completed"}