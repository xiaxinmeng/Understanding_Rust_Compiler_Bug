{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2105", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2105/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2105/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2105/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/2105", "id": 1657766988, "node_id": "I_kwDOANBUbM5iz4RM", "number": 2105, "title": "ICE with closures in insert_autoderef_mappings", "user": {"login": "bugaevc", "id": 10091584, "node_id": "MDQ6VXNlcjEwMDkxNTg0", "avatar_url": "https://avatars.githubusercontent.com/u/10091584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugaevc", "html_url": "https://github.com/bugaevc", "followers_url": "https://api.github.com/users/bugaevc/followers", "following_url": "https://api.github.com/users/bugaevc/following{/other_user}", "gists_url": "https://api.github.com/users/bugaevc/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugaevc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugaevc/subscriptions", "organizations_url": "https://api.github.com/users/bugaevc/orgs", "repos_url": "https://api.github.com/users/bugaevc/repos", "events_url": "https://api.github.com/users/bugaevc/events{/privacy}", "received_events_url": "https://api.github.com/users/bugaevc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "open", "locked": false, "assignee": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/22", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/22", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/22/labels", "id": 9278274, "node_id": "MI_kwDOANBUbM4AjZNC", "number": 22, "title": "HIR Pipeline for libcore 1.49 Complete", "description": "Support all of the patterns and features used in libcore 1.49 at the HIR level: this includes, and isn't limited to, complex match patterns, inline assembly, some of the more complex type system features such as specialization, etc.", "creator": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "open_issues": 34, "closed_issues": 54, "state": "open", "created_at": "2023-04-13T08:17:13Z", "updated_at": "2023-06-20T19:14:22Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2023-04-06T17:01:36Z", "updated_at": "2023-04-17T09:05:29Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```rust\r\npub enum Option<T> {\r\n    Some(T),\r\n    None,\r\n}\r\n\r\npub use Option::{Some, None};\r\n\r\n#[lang = \"fn_once\"]\r\npub trait FnOnce<Args> {\r\n    #[lang = \"fn_once_output\"]\r\n    type Output;\r\n\r\n    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\r\n}\r\n\r\nimpl<T> Option<T> {\r\n    pub fn map<R, F: FnOnce(T) -> R>(self, f: F) -> Option<R> {\r\n        match self {\r\n            Some(value) => Some(f(value)),\r\n            None => None,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Meta\r\n\r\n- What version of Rust GCC were you using, git sha if possible. 92b137048583c2c22c585097119dba6a5fe06228\r\n\r\n### Error output\r\n\r\n```\r\ncrab1: internal compiler error: in insert_autoderef_mappings, at rust/typecheck/rust-typecheck-context.cc:342\r\n```\r\n\r\n<!--\r\nInclude a backtrace if available.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n  <p>\r\n  \r\n  ```\r\ncrab1: internal compiler error: in insert_autoderef_mappings, at rust/typecheck/rust-typecheck-context.cc:342\r\n0x76846b Rust::Resolver::TypeCheckContext::insert_autoderef_mappings(unsigned int, std::vector<Rust::Resolver::Adjustment, std::allocator<Rust::Resolver::Adjustment> >&&)\r\n        ../../gcc/rust/typecheck/rust-typecheck-context.cc:342\r\n0xbaf838 Rust::Resolver::coercion_site(unsigned int, Rust::TyTy::TyWithLocation, Rust::TyTy::TyWithLocation, Location)\r\n        ../../gcc/rust/typecheck/rust-type-util.cc:219\r\n0xb73077 Rust::TyTy::TypeCheckCallExpr::visit(Rust::TyTy::ADTType&)\r\n        ../../gcc/rust/typecheck/rust-tyty-call.cc:64\r\n0xb9ec00 Rust::TyTy::TypeCheckCallExpr::go(Rust::TyTy::BaseType*, Rust::HIR::CallExpr&, Rust::TyTy::VariantDef&, Rust::Resolver::TypeCheckContext*)\r\n        ../../gcc/rust/typecheck/rust-tyty-call.h:39\r\n0xb9ec00 Rust::Resolver::TypeCheckExpr::visit(Rust::HIR::CallExpr&)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-expr.cc:226\r\n0xb9b85e Rust::Resolver::TypeCheckExpr::Resolve(Rust::HIR::Expr*)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-expr.cc:41\r\n0xb9cfb5 Rust::Resolver::TypeCheckExpr::visit(Rust::HIR::MatchExpr&)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-expr.cc:1399\r\n0xb9b85e Rust::Resolver::TypeCheckExpr::Resolve(Rust::HIR::Expr*)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-expr.cc:41\r\n0xb9c886 Rust::Resolver::TypeCheckExpr::visit(Rust::HIR::BlockExpr&)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-expr.cc:537\r\n0xb9b85e Rust::Resolver::TypeCheckExpr::Resolve(Rust::HIR::Expr*)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-expr.cc:41\r\n0xba95b1 Rust::Resolver::TypeCheckImplItem::visit(Rust::HIR::Function&)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-implitem.cc:311\r\n0xba723b Rust::Resolver::TypeCheckImplItem::Resolve(Rust::HIR::ImplBlock*, Rust::HIR::ImplItem*, Rust::TyTy::BaseType*, std::vector<Rust::TyTy::SubstitutionParamMapping, std::allocator<Rust::TyTy::SubstitutionParamMapping> >)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-implitem.cc:180\r\n0xb90868 Rust::Resolver::TypeCheckItem::visit(Rust::HIR::ImplBlock&)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-item.cc:341\r\n0xb8b3ec Rust::Resolver::TypeCheckItem::Resolve(Rust::HIR::Item&)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-item.cc:49\r\n0xb8b3ec Rust::Resolver::TypeCheckItem::Resolve(Rust::HIR::Item&)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check-item.cc:35\r\n0xb572eb Rust::Resolver::TypeResolution::Resolve(Rust::HIR::Crate&)\r\n        ../../gcc/rust/typecheck/rust-hir-type-check.cc:37\r\n0xa3b3e1 Rust::Session::compile_crate(char const*)\r\n        ../../gcc/rust/rust-session-manager.cc:620\r\nPlease submit a full bug report, with preprocessed source (by using -freport-bug).\r\nPlease include the complete backtrace with any bug report.\r\nSee <https://gcc.gnu.org/bugs/> for instructions.\r\n  ```\r\n  \r\n  </p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2105/timeline", "performed_via_github_app": null, "state_reason": null}