{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2172", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2172/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2172/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2172/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/2172", "id": 1686814867, "node_id": "I_kwDOANBUbM5kisCT", "number": 2172, "title": "Tracking issue for builtin derive macros", "user": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372777, "node_id": "MDU6TGFiZWw2MTM3Mjc3Nw==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/21", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/21", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/21/labels", "id": 9278268, "node_id": "MI_kwDOANBUbM4AjZM8", "number": 21, "title": "AST Pipeline for libcore 1.49 Complete", "description": "This targets multiple parts of libcore 1.49:\r\n\r\n1. Macro expansion\r\n2. Builtin macro declarations\r\n3. Proper name resolution\r\n4. Proper handling of import statements", "creator": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "open_issues": 51, "closed_issues": 67, "state": "open", "created_at": "2023-04-13T08:16:15Z", "updated_at": "2023-06-20T09:03:23Z", "due_on": "2023-07-01T07:00:00Z", "closed_at": null}, "comments": 0, "created_at": "2023-04-27T13:05:20Z", "updated_at": "2023-05-30T17:13:03Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "- [ ] #2154\r\n- [ ] Validate `#[derive]` attribute and collect the attribute's inputs. `collect_derives` in `rustc/compiler/rustc_expand/proc_macro.rs`\r\n- [ ] Add new `DeriveMacroAccumulator` visitor to visit all required fields/variants of a `struct`/`enum`/`union` getting \"derived\"\r\n\r\nThis is different from custom derive macros, which will only receive a token stream - we have more information within the compiler and can make use of them\r\n\r\n- [ ] Handle all builtin derives (#927): `Clone`, `Copy`, `Debug`, `Default`, `Hash`, `{Partial}Eq`, `{Partial}Ord`)\r\n- [ ] Add good typechecking errors for when derive constraints are not met:\r\n\r\n```rust\r\nstruct S;\r\n#[derive(Clone)]\r\nstruct SuperS(S);\r\n```\r\nshould fail because `S` does not implement `Clone`. The code produced by the macro should be similar to this:\r\n\r\n```rust\r\nstruct S;\r\n\r\nstruct SuperS(S);\r\n\r\nimpl Clone for SuperS {\r\n    fn clone(&self) -> Self {\r\n        Self(self.0.clone())\r\n    }\r\n}     \r\n```\r\n\r\nWithout any derive-specific behavior, we'll get an error about how `self.0` does not implement clone, which is true but not helpful for users as the code responsible will have been generated by the compiler.\r\n\r\nDuring typechecking, we should check that the members of a type getting derived also implement the trait being derived, and produce errors more related to deriving (\"consider annotating `S` with `#[derive(Clone)]`\" etc)\r\n- [ ] Deriving `Clone` on a `union` requires that the `union` is `Copy`\r\n- [ ] Support deriving on statements inside a `BlockExpr`\r\n- [ ] Implement proper way to access a statement's outer attributes if that statement is an item\r\n- [ ] Ignore impls that were `#[automatically_derived]` in lints\r\n- [x] #2238\r\n- [ ] Decide when to add `#[inline]` to generated impl functions", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2172/timeline", "performed_via_github_app": null, "state_reason": null}