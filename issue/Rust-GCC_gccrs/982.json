{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/982", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/982/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/982/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/982/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/982", "id": 1150499501, "node_id": "I_kwDOANBUbM5Ekzqt", "number": 982, "title": "Internal compiler error on recursive repetition macro", "user": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/7", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/7", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/7/labels", "id": 6862692, "node_id": "MDk6TWlsZXN0b25lNjg2MjY5Mg==", "number": 7, "title": "Macro Expansion", "description": "The compiler needs to support macros which is likely 2-3 month effort", "creator": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 163, "state": "closed", "created_at": "2021-06-17T09:43:24Z", "updated_at": "2022-08-23T08:04:13Z", "due_on": "2022-03-28T07:00:00Z", "closed_at": "2022-03-31T10:49:54Z"}, "comments": 0, "created_at": "2022-02-25T14:23:16Z", "updated_at": "2022-03-06T21:51:28Z", "closed_at": "2022-03-06T21:51:27Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nmacro_rules! add {\r\n    () => {\r\n        0\r\n    };\r\n    ($e:literal) => {\r\n        0 + $e\r\n    };\r\n    ($e:literal $($es:literal)*) => {\r\n        $e + add!($($es)*)\r\n    };\r\n}\r\n\r\nextern \"C\" {\r\n    fn printf(fmt: *const i8, ...);\r\n}\r\n\r\nfn main() {\r\n    let a = add!(1 2 3 10); // 16\r\n\r\n    unsafe {\r\n        printf(\"%d\\n\\0\" as *const str as *const i8, a);\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: program prints 16 and exits\r\n\r\nInstead, this happened: \r\n```rust\r\nrust1: internal compiler error: Segmentation fault\r\n0x22612ef crash_signal\r\n\t../../gcc/toplev.cc:322\r\n0x10859b5 std::char_traits<char>::assign(char&, char const&)\r\n\t/usr/include/c++/11.2.0/bits/char_traits.h:329\r\n0x10859b5 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)\r\n\t/usr/include/c++/11.2.0/bits/basic_string.h:357\r\n0x10859b5 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)\r\n\t/usr/include/c++/11.2.0/bits/basic_string.h:401\r\n0x10859b5 void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)\r\n\t/usr/include/c++/11.2.0/bits/basic_string.tcc:225\r\n0x109bb8a void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type)\r\n\t/usr/include/c++/11.2.0/bits/basic_string.h:255\r\n0x109bb8a void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*)\r\n\t/usr/include/c++/11.2.0/bits/basic_string.h:274\r\n0x109bb8a std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\r\n\t/usr/include/c++/11.2.0/bits/basic_string.h:459\r\n0x109bb8a Rust::MatchedFragment::MatchedFragment(Rust::MatchedFragment const&)\r\n\t../../gcc/rust/expand/rust-macro-expand.h:52\r\n0x109bb8a void __gnu_cxx::new_allocator<Rust::MatchedFragment>::construct<Rust::MatchedFragment, Rust::MatchedFragment&>(Rust::MatchedFragment*, Rust::MatchedFragment&)\r\n\t/usr/include/c++/11.2.0/ext/new_allocator.h:162\r\n0x109bb8a void std::allocator_traits<std::allocator<Rust::MatchedFragment> >::construct<Rust::MatchedFragment, Rust::MatchedFragment&>(std::allocator<Rust::MatchedFragment>&, Rust::MatchedFragment*, Rust::MatchedFragment&)\r\n\t/usr/include/c++/11.2.0/bits/alloc_traits.h:512\r\n0x109bb8a void std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> >::_M_realloc_insert<Rust::MatchedFragment&>(__gnu_cxx::__normal_iterator<Rust::MatchedFragment*, std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> > >, Rust::MatchedFragment&)\r\n\t/usr/include/c++/11.2.0/bits/vector.tcc:449\r\n0x1087ab2 void std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> >::emplace_back<Rust::MatchedFragment&>(Rust::MatchedFragment&)\r\n\t/usr/include/c++/11.2.0/bits/vector.tcc:121\r\n0x1087ab2 Rust::MacroExpander::substitute_repetition(std::vector<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> >, std::allocator<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> > > >&, std::vector<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> >, std::allocator<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> > > >&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> > > > >&, unsigned long, unsigned long)\r\n\t../../gcc/rust/expand/rust-macro-expand.cc:4008\r\n0x1087fd9 Rust::MacroExpander::substitute_token(std::vector<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> >, std::allocator<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> > > >&, std::vector<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> >, std::allocator<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> > > >&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> > > > >&, unsigned long)\r\n\t../../gcc/rust/expand/rust-macro-expand.cc:4060\r\n0x1088199 Rust::MacroExpander::substitute_tokens(std::vector<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> >, std::allocator<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> > > >&, std::vector<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> >, std::allocator<std::unique_ptr<Rust::AST::Token, std::default_delete<Rust::AST::Token> > > >&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> > > > >&)\r\n\t../../gcc/rust/expand/rust-macro-expand.cc:4097\r\n0x108f27e Rust::MacroExpander::transcribe_rule(Rust::AST::MacroRule&, Rust::AST::DelimTokenTree&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<Rust::MatchedFragment, std::allocator<Rust::MatchedFragment> > > > >&, bool, Rust::MacroExpander::ContextType)\r\n\t../../gcc/rust/expand/rust-macro-expand.cc:3777\r\n0x1091054 Rust::MacroExpander::expand_decl_macro(Location, Rust::AST::MacroInvocData&, Rust::AST::MacroRulesDefinition&, bool)\r\n\t../../gcc/rust/expand/rust-macro-expand.cc:3148\r\n0x10913ff Rust::MacroExpander::expand_invoc(Rust::AST::MacroInvocation&)\r\n\t../../gcc/rust/expand/rust-macro-expand.cc:3204\r\n0x10e685c Rust::AttrVisitor::visit(Rust::AST::MacroInvocation&)\r\n\t../../gcc/rust/expand/rust-macro-expand.cc:2550\r\nPlease submit a full bug report,\r\nwith preprocessed source if appropriate.\r\nPlease include the complete backtrace with any bug report.\r\nSee <https://gcc.gnu.org/bugs/> for instructions.\r\n```\r\ngccrs: bf92a101226\r\n\r\n\r\n", "closed_by": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/982/timeline", "performed_via_github_app": null, "state_reason": "completed"}