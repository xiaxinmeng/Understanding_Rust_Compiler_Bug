{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/314", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/314/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/314/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/314", "id": 842584275, "node_id": "MDU6SXNzdWU4NDI1ODQyNzU=", "number": 314, "title": "Destructuring assignment for irrefutables", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-03-27T19:18:48Z", "updated_at": "2022-10-07T08:39:10Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Destructuring assignment without `let` is still unstable. With let (`let (x, y) = (1, 2);`) has been stable since before 1.0 as far as I know. It is supported for all irrefutable patterns: `let SingleVariantEnum::Variant(x) = SingleVariantEnum::Variant(1);`, once or-pattern syntax stabilizes `let Some(_) | None = Some(1);`, etc. In addition it is also supported for function arguments: `fn foo((a, b): (u8, u16)) {}`.\r\n\r\n_Originally posted by @bjorn3 in https://github.com/Rust-GCC/gccrs/issues/186#issuecomment-768218160_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/314/timeline", "performed_via_github_app": null, "state_reason": null}