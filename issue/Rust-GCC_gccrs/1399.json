{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1399", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1399/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1399/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1399/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1399", "id": 1309613273, "node_id": "I_kwDOANBUbM5ODxzZ", "number": 1399, "title": "Handle multiline strings", "user": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372777, "node_id": "MDU6TGFiZWw2MTM3Mjc3Nw==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/21", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/21", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/21/labels", "id": 9278268, "node_id": "MI_kwDOANBUbM4AjZM8", "number": 21, "title": "AST Pipeline for libcore 1.49 Complete", "description": "This targets multiple parts of libcore 1.49:\r\n\r\n1. Macro expansion\r\n2. Builtin macro declarations\r\n3. Proper name resolution\r\n4. Proper handling of import statements", "creator": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "open_issues": 51, "closed_issues": 67, "state": "open", "created_at": "2023-04-13T08:16:15Z", "updated_at": "2023-06-20T09:03:23Z", "due_on": "2023-07-01T07:00:00Z", "closed_at": null}, "comments": 3, "created_at": "2022-07-19T14:31:39Z", "updated_at": "2023-04-13T08:55:14Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Multiline strings are allowed in Rust ([playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20%22whaaaaaat%20up%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20who%20knows!%22%3B%0A%7D)), however we currently do not handle them correctly:\r\n\r\n```rust\r\ntest.rs:2:26: error: unended string literal\r\n    2 |     let a = \"whaaaaaat up\r\n      |                          ^\r\n\r\n```\r\n\r\n\r\nThis is the beginning of a patch to fix that, basically commenting the checks for a `\\n` character:\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/gcc/rust/lex/rust-lex.cc b/gcc/rust/lex/rust-lex.cc\r\nindex ecf151dc778..c51b00fb5fe 100644\r\n--- a/gcc/rust/lex/rust-lex.cc\r\n+++ b/gcc/rust/lex/rust-lex.cc\r\n@@ -1917,7 +1917,7 @@ Lexer::parse_string (Location loc)\r\n   int length = 1;\r\n   current_char32 = peek_codepoint_input ();\r\n \r\n-  while (current_char32.value != '\\n' && current_char32.value != '\"')\r\n+  while (/* current_char32.value != '\\n' && */ current_char32.value != '\"')\r\n     {\r\n       if (current_char32.value == '\\\\')\r\n \t{\r\n@@ -1949,14 +1949,15 @@ Lexer::parse_string (Location loc)\r\n \r\n   current_column += length;\r\n \r\n-  if (current_char32.value == '\\n')\r\n-    {\r\n-      rust_error_at (get_current_location (), \"unended string literal\");\r\n-      // by this point, the parser will stuck at this position due to\r\n-      // undetermined string termination. we now need to unstuck the parser\r\n-      skip_broken_string_input (current_char32.value);\r\n-    }\r\n-  else if (current_char32.value == '\"')\r\n+  // if (current_char32.value == '\\n')\r\n+  //   {\r\n+  //     rust_error_at (get_current_location (), \"unended string literal\");\r\n+  //     // by this point, the parser will stuck at this position due to\r\n+  //     // undetermined string termination. we now need to unstuck the parser\r\n+  //     skip_broken_string_input (current_char32.value);\r\n+  //   }\r\n+  if (current_char32.value == '\"')\r\n+    // else if (current_char32.value == '\"')\r\n     {\r\n       current_column++;\r\n \r\n```\r\n\r\n</details>\r\n\r\nHowever, that code is necessary for properly handling some documentation attributes, as pointed out by various test cases in our testsuite.\r\n\r\n`rustc` does this in a different pass rather than the lexer, which is what I think we should do as well. We could for example add that check after parsing a `doc_attr`.\r\n\r\nHere is the relevant rustc code which checks for certain characters:\r\n```rust\r\n                        if let Some(c) = doc_alias\r\n                            .chars()\r\n                            .find(|&c| c == '\"' || c == '\\'' || (c.is_whitespace() && c != ' '))\r\n                        {\r\n                            self.tcx\r\n                                .sess\r\n                                .struct_span_err(\r\n                                    meta.span(),\r\n                                    &format!(\r\n                                        \"{:?} character isn't allowed in `#[doc(alias = \\\"...\\\")]`\",\r\n                                        c,\r\n                                    ),\r\n                                )\r\n                                .emit();\r\n                            return false;\r\n                        }\r\n ``` \r\nThis issue is necessary for compiling certain versions of libcore properly, which do contain multiline strings.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1399/timeline", "performed_via_github_app": null, "state_reason": null}