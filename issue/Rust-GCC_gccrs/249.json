{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/249", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/249/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/249/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/249", "id": 815028383, "node_id": "MDU6SXNzdWU4MTUwMjgzODM=", "number": 249, "title": "Operator overloading", "user": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372777, "node_id": "MDU6TGFiZWw2MTM3Mjc3Nw==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 2029873897, "node_id": "MDU6TGFiZWwyMDI5ODczODk3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/plan", "name": "plan", "color": "42ed5c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/5", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/5", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/5/labels", "id": 6262844, "node_id": "MDk6TWlsZXN0b25lNjI2Mjg0NA==", "number": 5, "title": "Control Flow 2 ", "description": "- Enums\r\n- Pattern Matching\r\n- Bugs from previous milestone\r\n- Operator overloading\r\n- Lang-items\r\n", "creator": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 83, "state": "closed", "created_at": "2021-01-03T14:19:06Z", "updated_at": "2021-12-19T00:24:58Z", "due_on": "2021-11-29T08:00:00Z", "closed_at": "2021-12-19T00:24:58Z"}, "comments": 7, "created_at": "2021-02-24T02:45:26Z", "updated_at": "2021-11-16T15:45:53Z", "closed_at": "2021-11-16T15:41:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Rust supports overloading some operators using traits in `std::ops` or `std::cmp`, as mentioned in the [reference](https://doc.rust-lang.org/reference/expressions/operator-expr.html). \r\n\r\nThe operators that can be overloaded are:\r\n\r\n- DereferenceExpr (with `std::ops::Deref::deref(&x)` or `std::ops::DerefMut::deref_mut(&mut x)`)\r\n- NegationExpr (with `std::ops::Neg` or `std::ops::Not`)\r\n- ArithmeticOrLogicalExpr (with `std::ops::`x where x is `Add`, `Sub`, `Mul`, `Div`, `Rem`, `BitAnd`, `BitOr`, `BitXor`, `Shl`, or `Shr`)\r\n- ComparisonExpr (with `std::cmp::PartialEq::`x where x is `eq`, `ne`, `gt`, `lt`, `ge`, or `le`)\r\n- CompoundAssignmentExpr (with `std::ops::`x`Assign` where x is one of the values listed in ArithmeticOrLogicalExpr)\r\n\r\nCurrently, gccrs does not implement operator overloading and presumably just creates GENERIC/GIMPLE of the operator expression with a type that can't be handled.\r\n\r\nOne method of implementing operator overloading could be a pass that replaces certain OperatorExprs with function calls. This has some issues:\r\n\r\n- If this pass occurs after name resolution but before lowering to HIR, the types involved are not known. As such, there is no way to know which function calls to replace (as you can't overload the operators on integers, for instance). \r\n- If this pass occurs after type resolution (in HIR), then the extent to which the HIR can be simplified is limited. For example, currently the HIR has no representation for a CompoundAssignmentExpr - it converts one into an AssignmentExpr and an ArithmeticLogicalExpr. But it is possible to overload operator `+=`, for instance, without also overloading operator `+`. So the HIR would have to have a separate CompoundAssignmentExpr representation for this reason.\r\n\r\nAnother method of implementing operator overloading could simply be to convert every OperatorExpr to a function call at some point, even ones for primitive types. This would also lead to some issues:\r\n\r\n- Type resolution would be more difficult, as some type inference can conceivably be performed by knowing certain properties about an operator (e.g. that ComparisonExprs have a boolean output). Either type resolution would not be able to access this information or more complicated code would be required to allow it.\r\n- Additional code would be required to convert some of these function calls back to operators when converting to GENERIC/GIMPLE so that primitive types don't require a function call every time an operation is performed on them.\r\n\r\n---\r\n\r\n- [x] Implement a lang-item parsing and lookup at type-resolution level\r\n- [x] Revert the desugaring of the HIR CompoundAssignmentExpr into an assignment\r\n- [x] Refactor backend method call expression logic to be more reusable for operator overloading\r\n- [x] Let GCC inline the operator overloading and support the inline attribute\r\n- [x] Implement ArithmeticOrLogicalExpr logic\r\n- [x] Implement CompoundAssignmentExpr https://github.com/Rust-GCC/gccrs/issues/804\r\n- [x] Implement DereferenceExpr https://github.com/Rust-GCC/gccrs/issues/809\r\n- [x] Implement NegationExpr", "closed_by": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/249/timeline", "performed_via_github_app": null, "state_reason": "completed"}