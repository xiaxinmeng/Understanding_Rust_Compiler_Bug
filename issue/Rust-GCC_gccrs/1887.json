{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1887", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1887/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1887/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1887/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1887", "id": 1591799690, "node_id": "I_kwDOANBUbM5e4O-K", "number": 1887, "title": "Non-conforming `printf` prototypes in the GCC/Rust testsuite", "user": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372777, "node_id": "MDU6TGFiZWw2MTM3Mjc3Nw==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/19", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/19", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/19/labels", "id": 9278263, "node_id": "MI_kwDOANBUbM4AjZM3", "number": 19, "title": "GCC 13.2 release", "description": "This milestone concerns all of the issues we'd like to take care of before upstreaming code for the GCC 13.2 release. This milestone should be focused on compiling libcore in the hope to distribute it in GCC for the 13.2 release. Importantly, this is different from supporting libcore 1.49: libcore needs certain features to compile, such as for loops or inline assembly (as it uses some in a decimal to float algorithm), so to first compile libcore we must implement these features. A second milestone targets what libcore offers, such as all of the compiler intrinsic functions.", "creator": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "open_issues": 17, "closed_issues": 9, "state": "open", "created_at": "2023-04-13T08:14:54Z", "updated_at": "2023-06-19T08:31:03Z", "due_on": "2023-07-15T07:00:00Z", "closed_at": null}, "comments": 7, "created_at": "2023-02-20T12:44:23Z", "updated_at": "2023-05-10T08:25:17Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Just for fun, I tried enabling GCC/Rust in my GCC/nvptx target testing (see <https://gcc.gnu.org/wiki/nvptx>).\r\n\r\nAs you'd hope, it generally works.\r\n\r\n\r\nOne issue, however, is that in our hacked-up `printf` test cases, we use:\r\n\r\n    extern \"C\" {\r\n        fn printf(s: *const i8, ...);\r\n    }\r\n\r\n..., which GCC/nvptx turns into:\r\n\r\n    .extern .func printf (.param.u64 %in_ar0, .param.u64 %in_ar1);\r\n\r\nIn contrast, the libc one is declared/defined as:\r\n\r\n    .visible .func (.param .u32 %value_out) printf (.param .u64 %in_ar0, .param .u64 %in_ar1);\r\n\r\n(That is, with the expected `int` return type; don't ask me why unsigned `.u32` instead of signed `.s32`, but apparently that's OK.)\r\n\r\nTherefore, all those execution tests FAIL:\r\n\r\n    error   : Prototype doesn't match for 'printf' [...]\r\n    nvptx-run: cuLinkAddData failed: unknown error (CUDA_ERROR_UNKNOWN, 999)\r\n\r\nShould I fix all those up like (a):\r\n\r\n```diff\r\n extern \"C\" {\r\n-   fn printf(s: *const i8, ...);\r\n+   fn printf(s: *const i8, ...) -> i32;\r\n }\r\n```\r\n\r\n..., which should be correst most of all times, or (b):\r\n\r\n```diff\r\n+pub type c_int = i32;\r\n extern \"C\" {\r\n-   fn printf(s: *const i8, ...);\r\n+   fn printf(s: *const i8, ...) -> c_int;\r\n }\r\n```\r\n\r\n..., to make that more obvious, or (c) something else?\r\n\r\n(See <https://doc.rust-lang.org/stable/std/ffi/type.c_int.html>.)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1887/timeline", "performed_via_github_app": null, "state_reason": null}