{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1204", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1204/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1204/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1204/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1204", "id": 1223269838, "node_id": "I_kwDOANBUbM5I6Z3O", "number": 1204, "title": "Add custom rust tree's", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372777, "node_id": "MDU6TGFiZWw2MTM3Mjc3Nw==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 2551090364, "node_id": "MDU6TGFiZWwyNTUxMDkwMzY0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/GCC", "name": "GCC", "color": "d6d62c", "default": false, "description": ""}, {"id": 2642482874, "node_id": "MDU6TGFiZWwyNjQyNDgyODc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/cleanup", "name": "cleanup", "color": "E22959", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-05-02T19:38:16Z", "updated_at": "2022-05-25T12:50:48Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Would it make sense to add that as a flag to the `tree` structure? If I understand it correctly, the C++ frontend does something like that in `gcc/cp/cp-tree.h`?\r\n\r\n```c++\r\n1758   \u2502 enum cp_tree_node_structure_enum {\r\n1759   \u2502   TS_CP_GENERIC,\r\n1760   \u2502   TS_CP_IDENTIFIER,\r\n1761   \u2502   TS_CP_TPI,\r\n1762   \u2502   TS_CP_PTRMEM,\r\n1763   \u2502   TS_CP_OVERLOAD,\r\n1764   \u2502   TS_CP_BINDING_VECTOR,\r\n1765   \u2502   TS_CP_BASELINK,\r\n1766   \u2502   TS_CP_TEMPLATE_DECL,\r\n1767   \u2502   TS_CP_DEFERRED_PARSE,\r\n1768   \u2502   TS_CP_DEFERRED_NOEXCEPT,\r\n1769   \u2502   TS_CP_STATIC_ASSERT,\r\n1770   \u2502   TS_CP_ARGUMENT_PACK_SELECT,\r\n1771   \u2502   TS_CP_TRAIT_EXPR,\r\n1772   \u2502   TS_CP_LAMBDA_EXPR,\r\n1773   \u2502   TS_CP_TEMPLATE_INFO,\r\n1774   \u2502   TS_CP_CONSTRAINT_INFO,\r\n1775   \u2502   TS_CP_USERDEF_LITERAL\r\n1776   \u2502 };\r\n1777   \u2502\r\n1778   \u2502 /* The resulting tree type.  */\r\n1779   \u2502 union GTY((desc (\"cp_tree_node_structure (&%h)\"),\r\n1780   \u2502        chain_next (\"(union lang_tree_node *) c_tree_chain_next (&%h.generic)\"))) lang_tree_node {\r\n1781   \u2502   union tree_node GTY ((tag (\"TS_CP_GENERIC\"),\r\n1782   \u2502             desc (\"tree_node_structure (&%h)\"))) generic;\r\n1783   \u2502   struct template_parm_index GTY ((tag (\"TS_CP_TPI\"))) tpi;\r\n1784   \u2502   struct ptrmem_cst GTY ((tag (\"TS_CP_PTRMEM\"))) ptrmem;\r\n1785   \u2502   struct tree_overload GTY ((tag (\"TS_CP_OVERLOAD\"))) overload;\r\n1786   \u2502   struct tree_binding_vec GTY ((tag (\"TS_CP_BINDING_VECTOR\"))) binding_vec;\r\n1787   \u2502   struct tree_baselink GTY ((tag (\"TS_CP_BASELINK\"))) baselink;\r\n1788   \u2502   struct tree_template_decl GTY ((tag (\"TS_CP_TEMPLATE_DECL\"))) template_decl;\r\n1789   \u2502   struct tree_deferred_parse GTY ((tag (\"TS_CP_DEFERRED_PARSE\"))) deferred_parse;\r\n1790   \u2502   struct tree_deferred_noexcept GTY ((tag (\"TS_CP_DEFERRED_NOEXCEPT\"))) deferred_noexcept;\r\n1791   \u2502   struct lang_identifier GTY ((tag (\"TS_CP_IDENTIFIER\"))) identifier;\r\n1792   \u2502   struct tree_static_assert GTY ((tag (\"TS_CP_STATIC_ASSERT\")))\r\n1793   \u2502     static_assertion;\r\n1794   \u2502   struct tree_argument_pack_select GTY ((tag (\"TS_CP_ARGUMENT_PACK_SELECT\")))\r\n1795   \u2502     argument_pack_select;\r\n1796   \u2502   struct tree_trait_expr GTY ((tag (\"TS_CP_TRAIT_EXPR\")))\r\n1797   \u2502     trait_expression;\r\n1798   \u2502   struct tree_lambda_expr GTY ((tag (\"TS_CP_LAMBDA_EXPR\")))\r\n1799   \u2502     lambda_expression;\r\n1800   \u2502   struct tree_template_info GTY ((tag (\"TS_CP_TEMPLATE_INFO\")))\r\n1801   \u2502     template_info;\r\n1802   \u2502   struct tree_constraint_info GTY ((tag (\"TS_CP_CONSTRAINT_INFO\")))\r\n1803   \u2502     constraint_info;\r\n1804   \u2502   struct tree_userdef_literal GTY ((tag (\"TS_CP_USERDEF_LITERAL\")))\r\n1805   \u2502     userdef_literal;\r\n1806   \u2502 };\r\n```\r\n\r\n_Originally posted by @CohenArthur in https://github.com/Rust-GCC/gccrs/pull/1201#pullrequestreview-958914060_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1204/timeline", "performed_via_github_app": null, "state_reason": null}