{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1902", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1902/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1902/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1902/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1902", "id": 1593349867, "node_id": "I_kwDOANBUbM5e-Jbr", "number": 1902, "title": "Support move-val-init intrinsic", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/12", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/12", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/12/labels", "id": 8516486, "node_id": "MI_kwDOANBUbM4AgfOG", "number": 12, "title": "Final upstream patches", "description": "", "creator": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 241, "state": "closed", "created_at": "2022-10-07T08:38:31Z", "updated_at": "2023-06-14T11:12:35Z", "due_on": "2023-04-30T07:00:00Z", "closed_at": "2023-05-10T08:27:18Z"}, "comments": 0, "created_at": "2023-02-21T11:58:04Z", "updated_at": "2023-03-18T00:57:25Z", "closed_at": "2023-03-18T00:57:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nmod intrinsics {\r\n    extern \"rust-intrinsic\" {\r\n        pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\r\n        pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\r\n        pub fn move_val_init<T>(dst: *mut T, src: T);\r\n        pub fn uninit<T>() -> T;\r\n    }\r\n}\r\n\r\nmod ptr {\r\n    #[lang = \"const_ptr\"]\r\n    impl<T> *const T {\r\n        pub unsafe fn offset(self, count: isize) -> *const T {\r\n            intrinsics::offset(self, count)\r\n        }\r\n    }\r\n\r\n    #[lang = \"mut_ptr\"]\r\n    impl<T> *mut T {\r\n        pub unsafe fn offset(self, count: isize) -> *mut T {\r\n            intrinsics::offset(self, count) as *mut T\r\n        }\r\n    }\r\n\r\n    pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\r\n        let x = x as *mut T;\r\n        let y = y as *mut T;\r\n        let len = mem::size_of::<T>() * count;\r\n        swap_nonoverlapping_bytes(x, y, len)\r\n    }\r\n\r\n    pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\r\n        // For types smaller than the block optimization below,\r\n        // just swap directly to avoid pessimizing codegen.\r\n        if mem::size_of::<T>() < 32 {\r\n            let z = read(x);\r\n            intrinsics::copy_nonoverlapping(y, x, 1);\r\n            write(y, z);\r\n        } else {\r\n            swap_nonoverlapping(x, y, 1);\r\n        }\r\n    }\r\n\r\n    pub unsafe fn write<T>(dst: *mut T, src: T) {\r\n        intrinsics::move_val_init(&mut *dst, src)\r\n    }\r\n\r\n    pub unsafe fn read<T>(src: *const T) -> T {\r\n        let mut tmp: T = mem::uninitialized();\r\n        intrinsics::copy_nonoverlapping(src, &mut tmp, 1);\r\n        tmp\r\n    }\r\n\r\n    unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\r\n        struct Block(u64, u64, u64, u64);\r\n        struct UnalignedBlock(u64, u64, u64, u64);\r\n\r\n        let block_size = mem::size_of::<Block>();\r\n\r\n        // Loop through x & y, copying them `Block` at a time\r\n        // The optimizer should unroll the loop fully for most types\r\n        // N.B. We can't use a for loop as the `range` impl calls `mem::swap` recursively\r\n        let mut i = 0;\r\n        while i + block_size <= len {\r\n            // Create some uninitialized memory as scratch space\r\n            // Declaring `t` here avoids aligning the stack when this loop is unused\r\n            let mut t: Block = mem::uninitialized();\r\n            let t = &mut t as *mut _ as *mut u8;\r\n            let x = x.offset(i as isize);\r\n            let y = y.offset(i as isize);\r\n\r\n            // Swap a block of bytes of x & y, using t as a temporary buffer\r\n            // This should be optimized into efficient SIMD operations where available\r\n            intrinsics::copy_nonoverlapping(x, t, block_size);\r\n            intrinsics::copy_nonoverlapping(y, x, block_size);\r\n            intrinsics::copy_nonoverlapping(t, y, block_size);\r\n            i += block_size;\r\n        }\r\n\r\n        if i < len {\r\n            // Swap any remaining bytes\r\n            let mut t: UnalignedBlock = mem::uninitialized();\r\n            let rem = len - i;\r\n\r\n            let t = &mut t as *mut _ as *mut u8;\r\n            let x = x.offset(i as isize);\r\n            let y = y.offset(i as isize);\r\n\r\n            intrinsics::copy_nonoverlapping(x, t, rem);\r\n            intrinsics::copy_nonoverlapping(y, x, rem);\r\n            intrinsics::copy_nonoverlapping(t, y, rem);\r\n        }\r\n    }\r\n}\r\n\r\nmod mem {\r\n    extern \"rust-intrinsic\" {\r\n        pub fn transmute<T, U>(_: T) -> U;\r\n        pub fn size_of<T>() -> usize;\r\n    }\r\n\r\n    pub fn swap<T>(x: &mut T, y: &mut T) {\r\n        unsafe {\r\n            ptr::swap_nonoverlapping_one(x, y);\r\n        }\r\n    }\r\n\r\n    pub fn replace<T>(dest: &mut T, mut src: T) -> T {\r\n        swap(dest, &mut src);\r\n        src\r\n    }\r\n\r\n    pub unsafe fn uninitialized<T>() -> T {\r\n        intrinsics::uninit()\r\n    }\r\n}\r\n\r\ntrait Step {\r\n    fn replace_zero(&mut self) -> Self;\r\n}\r\n\r\nimpl Step for i32 {\r\n    fn replace_zero(&mut self) -> Self {\r\n        mem::replace(self, 0)\r\n    }\r\n}\r\n\r\nfn main() -> i32 {\r\n    let a = 123;\r\n    a.replace_zero();\r\n    a\r\n}\r\n\r\n\r\n```\r\n\r\nI expected to see this happen: compile without error\r\n\r\nInstead, this happened:\r\n\r\nThere are a few issues here to fix first before we can implement this intrinsic: see\r\n\r\n- [x] #1901 \r\n- [x] #1899 \r\n\r\n### Meta\r\n\r\n- What version of Rust GCC were you using, git sha if possible.\r\n\r\n\r\n", "closed_by": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1902/timeline", "performed_via_github_app": null, "state_reason": "completed"}