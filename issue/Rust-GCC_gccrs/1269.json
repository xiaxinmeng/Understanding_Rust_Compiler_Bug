{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1269", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1269/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1269/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1269/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1269", "id": 1245415834, "node_id": "I_kwDOANBUbM5KO4ma", "number": 1269, "title": "Rust makes all slice access an intrinsic", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-05-23T16:16:19Z", "updated_at": "2022-05-23T16:23:09Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nsee:  https://users.rust-lang.org/t/why-this-does-not-lead-to-recursion/50306/3\r\n\r\nI tried this code:\r\n\r\n```rust\r\nunsafe impl<T> SliceIndex<[T]> for usize {\r\n    type Output = T;\r\n\r\n    fn get(self, slice: &[T]) -> Option<&T> {\r\n        unsafe { Option::Some(&*self.get_unchecked(slice)) }\r\n    }\r\n\r\n    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {\r\n        // SAFETY: the caller guarantees that `slice` is not dangling, so it\r\n        // cannot be longer than `isize::MAX`. They also guarantee that\r\n        // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\r\n        // so the call to `add` is safe.\r\n        unsafe { slice.as_ptr().add(self) }\r\n    }\r\n\r\n    fn index(self, slice: &[T]) -> &T {    \r\n        // It works if you change this to unsafe { &*self.get_unchecked(slice) }\r\n        // N.B., use intrinsic indexing\r\n        &(*slice)[self]        \r\n    }\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: *explanation*\r\n\r\nInstead, this happened: \r\n\r\n```\r\ntest.rs: In function \u2018<T as test::Index>::index<i32, usize>\u2019:\r\ntest.rs:140:9: internal compiler error: in expand_expr_real_1, at expr.cc:10583\r\n  140 |         index.index(self)\r\n      |         ^\r\n0x1605b99 expand_expr_real_1(tree_node*, rtx_def*, machine_mode, expand_modifier, rtx_def**, bool)\r\n        ../../gccrs/gcc/expr.cc:10583\r\n0x15fd3e3 expand_expr_real(tree_node*, rtx_def*, machine_mode, expand_modifier, rtx_def**, bool)\r\n        ../../gccrs/gcc/expr.cc:8736\r\n0x140544f expand_normal\r\n        ../../gccrs/gcc/expr.h:307\r\n0x14079d0 precompute_register_parameters\r\n        ../../gccrs/gcc/calls.cc:985\r\n0x140f854 expand_call(tree_node*, rtx_def*, int)\r\n        ../../gccrs/gcc/calls.cc:3375\r\n0x160ab60 expand_expr_real_1(tree_node*, rtx_def*, machine_mode, expand_modifier, rtx_def**, bool)\r\n        ../../gccrs/gcc/expr.cc:11537\r\n0x15fd3e3 expand_expr_real(tree_node*, rtx_def*, machine_mode, expand_modifier, rtx_def**, bool)\r\n        ../../gccrs/gcc/expr.cc:8736\r\n0x15f2418 store_expr(tree_node*, rtx_def*, int, bool, bool)\r\n        ../../gccrs/gcc/expr.cc:6087\r\n0x15f0b6c expand_assignment(tree_node*, tree_node*, bool)\r\n        ../../gccrs/gcc/expr.cc:5819\r\n0x142e364 expand_call_stmt\r\n        ../../gccrs/gcc/cfgexpand.cc:2829\r\n0x1431fb8 expand_gimple_stmt_1\r\n        ../../gccrs/gcc/cfgexpand.cc:3864\r\n0x14325e6 expand_gimple_stmt\r\n        ../../gccrs/gcc/cfgexpand.cc:4028\r\n0x143ae02 expand_gimple_basic_block\r\n        ../../gccrs/gcc/cfgexpand.cc:6069\r\n0x143d424 execute\r\n        ../../gccrs/gcc/cfgexpand.cc:6795\r\n```\r\n\r\n### Meta\r\n\r\n- What version of Rust GCC were you using, git sha if possible. cd39861da5e1113207193bb8b3e6fb3dde92895f\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1269/timeline", "performed_via_github_app": null, "state_reason": null}