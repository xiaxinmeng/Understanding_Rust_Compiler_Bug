{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1133", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1133/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1133/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1133/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1133", "id": 1207238522, "node_id": "I_kwDOANBUbM5H9P96", "number": 1133, "title": "Bad type resolution for associated types", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/6", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/6", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/6/labels", "id": 6262846, "node_id": "MDk6TWlsZXN0b25lNjI2Mjg0Ng==", "number": 6, "title": "Imports and visibility", "description": "Multi file compilation and with use, extern and mod.", "creator": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 161, "state": "closed", "created_at": "2021-01-03T14:20:54Z", "updated_at": "2022-08-23T08:04:15Z", "due_on": "2022-05-30T07:00:00Z", "closed_at": "2022-08-03T10:02:38Z"}, "comments": 1, "created_at": "2022-04-18T16:59:39Z", "updated_at": "2022-05-09T11:09:39Z", "closed_at": "2022-05-09T11:09:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n// { dg-additional-options \"-w\" }\r\nextern \"rust-intrinsic\" {\r\n    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\r\n}\r\n\r\nstruct FatPtr<T> {\r\n    data: *const T,\r\n    len: usize,\r\n}\r\n\r\npub union Repr<T> {\r\n    rust: *const [T],\r\n    rust_mut: *mut [T],\r\n    raw: FatPtr<T>,\r\n}\r\n\r\npub enum Option<T> {\r\n    None,\r\n    Some(T),\r\n}\r\n\r\n#[lang = \"Range\"]\r\npub struct Range<Idx> {\r\n    pub start: Idx,\r\n    pub end: Idx,\r\n}\r\n\r\n#[lang = \"const_slice_ptr\"]\r\nimpl<T> *const [T] {\r\n    pub const fn len(self) -> usize {\r\n        let a = unsafe { Repr { rust: self }.raw };\r\n        a.len\r\n    }\r\n\r\n    pub const fn as_ptr(self) -> *const T {\r\n        self as *const T\r\n    }\r\n}\r\n\r\n#[lang = \"const_ptr\"]\r\nimpl<T> *const T {\r\n    pub const unsafe fn offset(self, count: isize) -> *const T {\r\n        unsafe { offset(self, count) }\r\n    }\r\n\r\n    pub const unsafe fn add(self, count: usize) -> Self {\r\n        unsafe { self.offset(count as isize) }\r\n    }\r\n\r\n    pub const fn as_ptr(self) -> *const T {\r\n        self as *const T\r\n    }\r\n}\r\n\r\nconst fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\r\n    unsafe {\r\n        Repr {\r\n            raw: FatPtr { data, len },\r\n        }\r\n        .rust\r\n    }\r\n}\r\n\r\n#[lang = \"index\"]\r\ntrait Index<Idx> {\r\n    type Output;\r\n\r\n    fn index(&self, index: Idx) -> &Self::Output;\r\n}\r\n\r\npub unsafe trait SliceIndex<T> {\r\n    type Output;\r\n\r\n    fn get(self, slice: &T) -> Option<&Self::Output>;\r\n\r\n    unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\r\n\r\n    fn index(self, slice: &T) -> &Self::Output;\r\n}\r\n\r\nunsafe impl<T> SliceIndex<[T]> for usize {\r\n    type Output = T;\r\n\r\n    fn get(self, slice: &[T]) -> Option<&T> {\r\n        unsafe { Option::Some(&*self.get_unchecked(slice)) }\r\n    }\r\n\r\n    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {\r\n        // SAFETY: the caller guarantees that `slice` is not dangling, so it\r\n        // cannot be longer than `isize::MAX`. They also guarantee that\r\n        // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\r\n        // so the call to `add` is safe.\r\n        unsafe { slice.as_ptr().add(self) }\r\n    }\r\n\r\n    fn index(self, slice: &[T]) -> &T {\r\n        // N.B., use intrinsic indexing\r\n        // &(*slice)[self]\r\n        unsafe { &*self.get_unchecked(slice) }\r\n    }\r\n}\r\n\r\nunsafe impl<T> SliceIndex<[T]> for Range<usize> {\r\n    type Output = [T];\r\n\r\n    fn get(self, slice: &[T]) -> Option<&[T]> {\r\n        if self.start > self.end\r\n        /* || self.end > slice.len() */\r\n        {\r\n            Option::None\r\n        } else {\r\n            unsafe { Option::Some(&*self.get_unchecked(slice)) }\r\n        }\r\n    }\r\n\r\n    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {\r\n        unsafe {\r\n            let a: *const T = slice.as_ptr();\r\n            let b: *const T = a.add(self.start);\r\n            slice_from_raw_parts(b, self.end - self.start)\r\n        }\r\n    }\r\n\r\n    fn index(self, slice: &[T]) -> &[T] {\r\n        unsafe { &*self.get_unchecked(slice) }\r\n    }\r\n}\r\n\r\nimpl<T, I> Index<I> for [T]\r\nwhere\r\n    I: SliceIndex<[T]>,\r\n{\r\n    type Output = I::Output;\r\n\r\n    fn index(&self, index: I) -> &I::Output {\r\n        index.index(self)\r\n    }\r\n}\r\n\r\nfn main() -> i32 {\r\n    let a/*: [i32; 5]*/ = [1, 2, 3, 4, 5];\r\n    let b/*: &[i32]*/ = &a[1..3];\r\n    let c = b[1];\r\n\r\n    0\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: *explanation*\r\n\r\nInstead, this happened: \r\n\r\n```\r\nrust1: error: expected [[T=i32]] got [i32]\r\ntest.rs:78:34: error: expected [& [T=i32]] got [& <placeholder:<Projection=<i32>::T=i32>>]\r\n   78 |     fn index(self, slice: &T) -> &Self::Output;\r\n      |                                  ^\r\n......\r\n  124 |     fn index(self, slice: &[T]) -> &[T] {\r\n      |                                    ~\r\n\r\n```\r\n\r\nThe code begin generated is correctly getting the slice access:\r\n\r\n```\r\ni32 test::main ()\r\n{\r\n  struct \r\n{\r\n  usize start;\r\n  usize end;\r\n} D.186;\r\n  struct \r\n{\r\n  i32 * data;\r\n  usize len;\r\n} D.187;\r\n  i32 D.188;\r\n  i32 a[5];\r\n  const i32 & const b;\r\n  const i32 c;\r\n\r\n  try\r\n    {\r\n      a[0] = 1;\r\n      a[1] = 2;\r\n      a[2] = 3;\r\n      a[3] = 4;\r\n      a[4] = 5;\r\n      D.186.start = 1;\r\n      D.186.end = 3;\r\n      D.187.data = &a;\r\n      D.187.len = 4;\r\n      b = <T as test::Index>::index<i32, Range<usize>> (&D.187, D.186);\r\n      _1 = <T as test::Index>::index<i32, usize> (b, 1);\r\n      c = *_1;\r\n      D.188 = 0;\r\n      return D.188;\r\n    }\r\n  finally\r\n    {\r\n      a = {CLOBBER};\r\n    }\r\n}\r\n\r\n```\r\n\r\nBut you can see the slice from the let binding 'b' has the wrong type here. So I think this is the known issue with one of our lookups for associated impl's.\r\n\r\n### Meta\r\n\r\n- What version of Rust GCC were you using, git sha if possible.\r\n\r\n\r\n", "closed_by": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1133/timeline", "performed_via_github_app": null, "state_reason": "completed"}