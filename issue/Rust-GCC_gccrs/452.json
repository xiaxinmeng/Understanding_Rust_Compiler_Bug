{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/452", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/452/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/452/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/452", "id": 901946997, "node_id": "MDU6SXNzdWU5MDE5NDY5OTc=", "number": 452, "title": "Const evaluation", "user": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372779, "node_id": "MDU6TGFiZWw2MTM3Mjc3OQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}, {"id": 2551090364, "node_id": "MDU6TGFiZWwyNTUxMDkwMzY0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/GCC", "name": "GCC", "color": "d6d62c", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/19", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/19", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/19/labels", "id": 9278263, "node_id": "MI_kwDOANBUbM4AjZM3", "number": 19, "title": "GCC 13.2 release", "description": "This milestone concerns all of the issues we'd like to take care of before upstreaming code for the GCC 13.2 release. This milestone should be focused on compiling libcore in the hope to distribute it in GCC for the 13.2 release. Importantly, this is different from supporting libcore 1.49: libcore needs certain features to compile, such as for loops or inline assembly (as it uses some in a decimal to float algorithm), so to first compile libcore we must implement these features. A second milestone targets what libcore offers, such as all of the compiler intrinsic functions.", "creator": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "open_issues": 17, "closed_issues": 9, "state": "open", "created_at": "2023-04-13T08:14:54Z", "updated_at": "2023-06-19T08:31:03Z", "due_on": "2023-07-15T07:00:00Z", "closed_at": null}, "comments": 3, "created_at": "2021-05-26T08:00:19Z", "updated_at": "2023-04-13T09:08:05Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "@philberty you are planning to use gcc's const folding for constant evaluation, right? How will this handle arbitrarily complex code like this:\r\n\r\n```rust\r\n// This feature gate is only used within from_bytes_with_nul_unchecked.\r\n// The same point stands with from_bytes_with_nul returning a unit and removing from_bytes_with_nul_unchecked.\r\n#![feature(const_raw_ptr_deref)]\r\n\r\nstruct CStr([u8]);\r\n\r\nenum CStrConvertError {\r\n    NotNulTerminated,\r\n    InteriorNul,\r\n}\r\n\r\nimpl CStr {\r\n    pub const fn from_bytes_with_nul(bytes: &[u8]) -> Result<&Self, CStrConvertError> {\r\n        if bytes.is_empty() {\r\n            return Err(CStrConvertError::NotNulTerminated);\r\n        }\r\n        if bytes[bytes.len() - 1] != 0 {\r\n            return Err(CStrConvertError::NotNulTerminated);\r\n        }\r\n        let mut i = 0;\r\n        // `i + 1 < bytes.len()` allows LLVM to optimize away bounds checking,\r\n        // while it couldn't optimize away bounds checks for `i < bytes.len() - 1`.\r\n        while i + 1 < bytes.len() {\r\n            if bytes[i] == 0 {\r\n                return Err(CStrConvertError::InteriorNul);\r\n            }\r\n            i += 1;\r\n        }\r\n        // SAFETY: We just checked that all properties hold.\r\n        Ok(unsafe { Self::from_bytes_with_nul_unchecked(bytes) })\r\n    }\r\n    \r\n    pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\r\n        // Note: This can be done using pointer deref (which requires\r\n        // `const_raw_ptr_deref` to be const) or `transmute` (which requires\r\n        // `const_transmute` to be const) or `ptr::from_raw_parts` (which\r\n        // requires `ptr_metadata`).\r\n        // While none of them are current stable, it is very likely that one of\r\n        // them will eventually be.\r\n        &*(bytes as *const [u8] as *const Self)\r\n    }\r\n}\r\n```\r\n\r\n(adapted from https://github.com/Rust-for-Linux/linux/pull/273)\r\n\r\nI would expect gcc's const folding to not be able to handle at least the while loop here.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/452/timeline", "performed_via_github_app": null, "state_reason": null}