{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1120", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1120/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1120/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1120/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/1120", "id": 1205505420, "node_id": "I_kwDOANBUbM5H2o2M", "number": 1120, "title": "Bad generic trait handling during trait impl block resolution", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372775, "node_id": "MDU6TGFiZWw2MTM3Mjc3NQ==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/6", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/6", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/6/labels", "id": 6262846, "node_id": "MDk6TWlsZXN0b25lNjI2Mjg0Ng==", "number": 6, "title": "Imports and visibility", "description": "Multi file compilation and with use, extern and mod.", "creator": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 161, "state": "closed", "created_at": "2021-01-03T14:20:54Z", "updated_at": "2022-08-23T08:04:15Z", "due_on": "2022-05-30T07:00:00Z", "closed_at": "2022-08-03T10:02:38Z"}, "comments": 0, "created_at": "2022-04-15T11:26:02Z", "updated_at": "2022-04-19T17:01:20Z", "closed_at": "2022-04-19T17:01:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code: https://godbolt.org/z/TGE95eWMd\r\n\r\n```rust\r\n// { dg-additional-options \"-w\" }\r\nextern \"rust-intrinsic\" {\r\n    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\r\n}\r\n\r\nstruct FatPtr<T> {\r\n    data: *const T,\r\n    len: usize,\r\n}\r\n\r\npub union Repr<T> {\r\n    rust: *const [T],\r\n    rust_mut: *mut [T],\r\n    raw: FatPtr<T>,\r\n}\r\n\r\npub enum Option<T> {\r\n    None,\r\n    Some(T),\r\n}\r\n\r\n#[lang = \"Range\"]\r\npub struct Range<Idx> {\r\n    pub start: Idx,\r\n    pub end: Idx,\r\n}\r\n\r\n#[lang = \"const_slice_ptr\"]\r\nimpl<T> *const [T] {\r\n    pub const fn len(self) -> usize {\r\n        let a = unsafe { Repr { rust: self }.raw };\r\n        a.len\r\n    }\r\n\r\n    pub const fn as_ptr(self) -> *const T {\r\n        self as *const T\r\n    }\r\n}\r\n\r\n#[lang = \"const_ptr\"]\r\nimpl<T> *const T {\r\n    pub const unsafe fn offset(self, count: isize) -> *const T {\r\n        unsafe { offset(self, count) }\r\n    }\r\n\r\n    pub const unsafe fn add(self, count: usize) -> Self {\r\n        unsafe { self.offset(count as isize) }\r\n    }\r\n\r\n    pub const fn as_ptr(self) -> *const T {\r\n        self as *const T\r\n    }\r\n}\r\n\r\nconst fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\r\n    unsafe {\r\n        Repr {\r\n            raw: FatPtr { data, len },\r\n        }\r\n        .rust\r\n    }\r\n}\r\n\r\n#[lang = \"index\"]\r\ntrait Index<Idx> {\r\n    type Output;\r\n\r\n    fn index(&self, index: Idx) -> &Self::Output;\r\n}\r\n\r\npub unsafe trait SliceIndex<T> {\r\n    type Output;\r\n\r\n    fn get(self, slice: &T) -> Option<&Self::Output>;\r\n\r\n    unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\r\n\r\n    fn index(self, slice: &T) -> &Self::Output;\r\n}\r\n\r\nunsafe impl<T> SliceIndex<[T]> for Range<usize> {\r\n    type Output = [T];\r\n\r\n    fn get(self, slice: &[T]) -> Option<&[T]> {\r\n        if self.start > self.end\r\n        /* || self.end > slice.len() */\r\n        {\r\n            Option::None\r\n        } else {\r\n            unsafe { Option::Some(&*self.get_unchecked(slice)) }\r\n        }\r\n    }\r\n\r\n    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {\r\n        unsafe {\r\n            let a: *const T = slice.as_ptr();\r\n            let b: *const T = a.add(self.start);\r\n            slice_from_raw_parts(b, self.end - self.start)\r\n        }\r\n    }\r\n\r\n    fn index(self, slice: &[T]) -> &[T] {\r\n        unsafe { &*self.get_unchecked(slice) }\r\n    }\r\n}\r\n\r\nimpl<T, I> Index<I> for [T]\r\nwhere\r\n    I: SliceIndex<[T]>,\r\n{\r\n    type Output = I::Output;\r\n\r\n    fn index(&self, index: I) -> &I::Output {\r\n        index.index(self)\r\n    }\r\n}\r\n\r\nfn main() -> i32 {\r\n    let a = [1, 2, 3, 4, 5];\r\n    let b = &a[1..3];\r\n\r\n    0\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: compile without error\r\n\r\nInstead, this happened: \r\n\r\n```\r\n<source>:81:13: error: expected [Range<usize>{Range {start:Usize:usize:(Ref: 68 TyRef: 14[14,253,]):bounds:[], end:Usize:usize:(Ref: 71 TyRef: 14[14,253,]):bounds:[]}}] got [T REF: 251]\r\n   81 | unsafe impl<T> SliceIndex<[T]> for Range<usize> {\r\n      |             ^                      ~\r\n<source>:84:42: error: expected [[T=Range<usize>{Range {start:Usize:usize:(Ref: 68 TyRef: 14[14,253,]):bounds:[], end:Usize:usize:(Ref: 71 TyRef: 14[14,253,]):bounds:[]}}]] got [[T=T REF: 251]]\r\n   82 |     type Output = [T];\r\n      |                   ~                       \r\n   83 | \r\n   84 |     fn get(self, slice: &[T]) -> Option<&[T]> {\r\n      |                                          ^\r\n<source>:19:10: error: expected [& <Projection=<Range<usize>>::[T=Range<usize>{Range {start:Usize:usize:(Ref: 68 TyRef: 14[14,253,]):bounds:[], end:Usize:usize:(Ref: 71 TyRef: 14[14,253,]):bounds:[]}}]>] got [& [T=T REF: 251]]\r\n   19 |     Some(T),\r\n      |          ^\r\n<source>:84:34: error: expected [Option<Range<usize>>{None = ( 0 ([C: 0 Nid: 46 Hid: 447 Lid: 32])), Some (0:REF:& <Projection=<Range<usize>>::[T=Range<usize>{Range {start:Usize:usize:(Ref: 68 TyRef: 14[14,253,]):bounds:[], end:Usize:usize:(Ref: 71 TyRef: 14[14,253,]):bounds:[]}}]>:(Ref: 63 TyRef: 520[215,]):bounds:[])}] got [Option<&[T=T REF: 251]>{None = ( 0 ([C: 0 Nid: 46 Hid: 447 Lid: 32])), Some (0:REF:& [T=T REF: 251]:(Ref: 63 TyRef: 271[271,]):bounds:[])}]\r\n   74 |     fn get(self, slice: &T) -> Option<&Self::Output>;\r\n      |                                ~  \r\n......\r\n   84 |     fn get(self, slice: &[T]) -> Option<&[T]> {\r\n      |                                  ^\r\n<source>:84:5: error: method 'get' has an incompatible type for trait 'SliceIndex'\r\n   74 |     fn get(self, slice: &T) -> Option<&Self::Output>;\r\n      |     ~\r\n......\r\n   84 |     fn get(self, slice: &[T]) -> Option<&[T]> {\r\n      |     ^\r\nCompiler returned: 1\r\n```\r\n\r\n### Meta\r\n\r\n- What version of Rust GCC were you using, git sha if possible. 60324125c3dbfd2f1551ec41dcfd4322ca80d6fa\r\n\r\n\r\n", "closed_by": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/1120/timeline", "performed_via_github_app": null, "state_reason": "completed"}