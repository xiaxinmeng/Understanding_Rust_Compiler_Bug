{"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/658", "repository_url": "https://api.github.com/repos/Rust-GCC/gccrs", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/658/labels{/name}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/658/comments", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/658/events", "html_url": "https://github.com/Rust-GCC/gccrs/issues/658", "id": 991136536, "node_id": "MDU6SXNzdWU5OTExMzY1MzY=", "number": 658, "title": "Compiler Intrinsics", "user": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 61372777, "node_id": "MDU6TGFiZWw2MTM3Mjc3Nw==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 2591793259, "node_id": "MDU6TGFiZWwyNTkxNzkzMjU5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/good-first-pr", "name": "good-first-pr", "color": "A9A76D", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/9", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/9", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/9/labels", "id": 6862698, "node_id": "MDk6TWlsZXN0b25lNjg2MjY5OA==", "number": 9, "title": "Compiler Intrinsics and Builtins", "description": "This will be an ongoing task", "creator": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "open_issues": 12, "closed_issues": 34, "state": "open", "created_at": "2021-06-17T09:45:25Z", "updated_at": "2023-04-07T11:33:12Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2021-09-08T13:24:40Z", "updated_at": "2023-03-02T14:40:24Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "We need to support the extern \"rust-intrinsics\" GCC seems to have something at least pretty similar to a lot of these not 100% about all of them, things like transmute look more custom to rust.\r\n\r\nhttps://github.com/rust-lang/rust/blob/master/library/core/src/intrinsics.rs\r\nhttps://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/intrinsic.rs\r\n\r\n- [ ] `atomic_cxchg_relaxed_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_relaxed_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_relaxed_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_acquire_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_acquire_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_acquire_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_release_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_release_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_release_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_acqrel_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_acqrel_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_acqrel_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_seqcst_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_seqcst_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchg_seqcst_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_relaxed_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_relaxed_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_relaxed_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_acquire_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_acquire_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_acquire_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_release_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_release_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_release_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_acqrel_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_acqrel_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_acqrel_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_seqcst_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_seqcst_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [ ] `atomic_cxchgweak_seqcst_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);`\r\n- [x] `atomic_load_seqcst<T: Copy>(src: *const T) -> T;`\r\n- [x] `atomic_load_acquire<T: Copy>(src: *const T) -> T;`\r\n- [x] `atomic_load_relaxed<T: Copy>(src: *const T) -> T;`\r\n- [x] `atomic_load_unordered<T: Copy>(src: *const T) -> T;`\r\n- [x] `atomic_store_seqcst<T: Copy>(dst: *mut T, val: T);`\r\n- [x] `atomic_store_release<T: Copy>(dst: *mut T, val: T);`\r\n- [x] `atomic_store_relaxed<T: Copy>(dst: *mut T, val: T);`\r\n- [x] `atomic_store_unordered<T: Copy>(dst: *mut T, val: T);`\r\n- [ ] `atomic_xchg_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xchg_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xchg_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xchg_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xchg_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xadd_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xadd_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xadd_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xadd_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xadd_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xsub_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xsub_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xsub_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xsub_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xsub_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_and_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_and_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_and_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_and_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_and_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_nand_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_nand_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_nand_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_nand_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_nand_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_or_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_or_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_or_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_or_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_or_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xor_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xor_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xor_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xor_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_xor_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_max_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_max_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_max_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_max_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_max_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_min_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_min_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_min_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_min_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_min_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_umin_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_umin_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_umin_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_umin_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_umin_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_umax_seqcst<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_umax_acquire<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_umax_release<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_umax_acqrel<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_umax_relaxed<T: Copy>(dst: *mut T, src: T) -> T;`\r\n- [ ] `atomic_fence_seqcst();`\r\n- [ ] `atomic_fence_acquire();`\r\n- [ ] `atomic_fence_release();`\r\n- [ ] `atomic_fence_acqrel();`\r\n- [ ] `atomic_singlethreadfence_seqcst();`\r\n- [ ] `atomic_singlethreadfence_acquire();`\r\n- [ ] `atomic_singlethreadfence_release();`\r\n- [ ] `atomic_singlethreadfence_acqrel();`\r\n- [ ] `prefetch_read_data<T>(data: *const T, locality: i32);`\r\n- [ ] `prefetch_write_data<T>(data: *const T, locality: i32);`\r\n- [ ] `prefetch_read_instruction<T>(data: *const T, locality: i32);`\r\n- [ ] `prefetch_write_instruction<T>(data: *const T, locality: i32);`\r\n- [ ] `rustc_peek<T>(_: T) -> T;`\r\n- [ ] `abort() -> !;`\r\n- [ ] `unreachable() -> !;`\r\n- [ ] `assume(b: bool);` #1561\r\n- [ ] `likely(b: bool) -> bool;`\r\n- [ ] `unlikely(b: bool) -> bool;`\r\n- [ ] `breakpoint();`\r\n- [x] `size_of<T>() -> usize;`\r\n- [ ] `min_align_of<T>() -> usize;`\r\n- [ ] `pref_align_of<T>() -> usize;`\r\n- [ ] `size_of_val<T: ?Sized>(_: *const T) -> usize;`\r\n- [ ] `min_align_of_val<T: ?Sized>(_: *const T) -> usize;`\r\n- [ ] `type_name<T: ?Sized>() -> &'static str;`\r\n- [ ] `type_id<T: ?Sized + 'static>() -> u64;`\r\n- [ ] `assert_inhabited<T>();`\r\n- [ ] `assert_zero_valid<T>();`\r\n- [ ] `assert_uninit_valid<T>();`\r\n- [ ] `caller_location() -> &'static crate::panic::Location<'static>;`\r\n- [ ] `forget<T: ?Sized>(_: T);`\r\n- [x] `transmute<T, U>(e: T) -> U;`\r\n- [ ] `needs_drop<T: ?Sized>() -> bool;`\r\n- [ ] `offset<T>(dst: *const T, offset: isize) -> *const T;`\r\n- [ ] `arith_offset<T>(dst: *const T, offset: isize) -> *const T;`\r\n- [ ] `volatile_copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: usize);`\r\n- [ ] `volatile_copy_memory<T>(dst: *mut T, src: *const T, count: usize);`\r\n- [ ] `volatile_set_memory<T>(dst: *mut T, val: u8, count: usize);`\r\n- [ ] `volatile_load<T>(src: *const T) -> T;`\r\n- [ ] `volatile_store<T>(dst: *mut T, val: T);`\r\n- [ ] `unaligned_volatile_load<T>(src: *const T) -> T;`\r\n- [ ] `unaligned_volatile_store<T>(dst: *mut T, val: T);`\r\n- [ ] `sqrtf32(x: f32) -> f32;`\r\n- [ ] `sqrtf64(x: f64) -> f64;`\r\n- [ ] `powif32(a: f32, x: i32) -> f32;`\r\n- [ ] `powif64(a: f64, x: i32) -> f64;`\r\n- [ ] `sinf32(x: f32) -> f32;`\r\n- [ ] `sinf64(x: f64) -> f64;`\r\n- [ ] `cosf32(x: f32) -> f32;`\r\n- [ ] `cosf64(x: f64) -> f64;`\r\n- [ ] `powf32(a: f32, x: f32) -> f32;`\r\n- [ ] `powf64(a: f64, x: f64) -> f64;`\r\n- [ ] `expf32(x: f32) -> f32;`\r\n- [ ] `expf64(x: f64) -> f64;`\r\n- [ ] `exp2f32(x: f32) -> f32;`\r\n- [ ] `exp2f64(x: f64) -> f64;`\r\n- [ ] `logf32(x: f32) -> f32;`\r\n- [ ] `logf64(x: f64) -> f64;`\r\n- [ ] `log10f32(x: f32) -> f32;`\r\n- [ ] `log10f64(x: f64) -> f64;`\r\n- [ ] `log2f32(x: f32) -> f32;`\r\n- [ ] `log2f64(x: f64) -> f64;`\r\n- [ ] `fmaf32(a: f32, b: f32, c: f32) -> f32;`\r\n- [ ] `fmaf64(a: f64, b: f64, c: f64) -> f64;`\r\n- [ ] `fabsf32(x: f32) -> f32;`\r\n- [ ] `fabsf64(x: f64) -> f64;`\r\n- [ ] `minnumf32(x: f32, y: f32) -> f32;`\r\n- [ ] `minnumf64(x: f64, y: f64) -> f64;`\r\n- [ ] `maxnumf32(x: f32, y: f32) -> f32;`\r\n- [ ] `maxnumf64(x: f64, y: f64) -> f64;`\r\n- [ ] `copysignf32(x: f32, y: f32) -> f32;`\r\n- [ ] `copysignf64(x: f64, y: f64) -> f64;`\r\n- [ ] `floorf32(x: f32) -> f32;`\r\n- [ ] `floorf64(x: f64) -> f64;`\r\n- [ ] `ceilf32(x: f32) -> f32;`\r\n- [ ] `ceilf64(x: f64) -> f64;`\r\n- [ ] `truncf32(x: f32) -> f32;`\r\n- [ ] `truncf64(x: f64) -> f64;`\r\n- [ ] `rintf32(x: f32) -> f32;`\r\n- [ ] `rintf64(x: f64) -> f64;`\r\n- [ ] `nearbyintf32(x: f32) -> f32;`\r\n- [ ] `nearbyintf64(x: f64) -> f64;`\r\n- [ ] `roundf32(x: f32) -> f32;`\r\n- [ ] `roundf64(x: f64) -> f64;`\r\n- [ ] `fadd_fast<T: Copy>(a: T, b: T) -> T;`\r\n- [ ] `fsub_fast<T: Copy>(a: T, b: T) -> T;`\r\n- [ ] `fmul_fast<T: Copy>(a: T, b: T) -> T;`\r\n- [ ] `fdiv_fast<T: Copy>(a: T, b: T) -> T;`\r\n- [ ] `frem_fast<T: Copy>(a: T, b: T) -> T;`\r\n- [ ] `float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;`\r\n- [ ] `ctpop<T: Copy>(x: T) -> T;`\r\n- [ ] `ctlz<T: Copy>(x: T) -> T;`\r\n- [ ] `ctlz_nonzero<T: Copy>(x: T) -> T;`\r\n- [ ] `cttz<T: Copy>(x: T) -> T;`\r\n- [ ] `cttz_nonzero<T: Copy>(x: T) -> T;`\r\n- [ ] `bswap<T: Copy>(x: T) -> T;`\r\n- [ ] `bitreverse<T: Copy>(x: T) -> T;`\r\n- [x] `add_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);`\r\n- [x] `sub_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);`\r\n- [x] `mul_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);`\r\n- [ ] `exact_div<T: Copy>(x: T, y: T) -> T;`\r\n- [x] `unchecked_div<T: Copy>(x: T, y: T) -> T;`\r\n- [x] `unchecked_rem<T: Copy>(x: T, y: T) -> T;`\r\n- [x] `unchecked_shl<T: Copy>(x: T, y: T) -> T;`\r\n- [x] `unchecked_shr<T: Copy>(x: T, y: T) -> T;`\r\n- [x] `unchecked_add<T: Copy>(x: T, y: T) -> T;`\r\n- [x] `unchecked_sub<T: Copy>(x: T, y: T) -> T;`\r\n- [x] `unchecked_mul<T: Copy>(x: T, y: T) -> T;`\r\n- [x] `rotate_left<T: Copy>(x: T, y: T) -> T;`\r\n- [x] `rotate_right<T: Copy>(x: T, y: T) -> T;`\r\n- [x] `wrapping_add<T: Copy>(a: T, b: T) -> T;`\r\n- [x] `wrapping_sub<T: Copy>(a: T, b: T) -> T;`\r\n- [x] `wrapping_mul<T: Copy>(a: T, b: T) -> T;`\r\n- [ ] `saturating_add<T: Copy>(a: T, b: T) -> T;`\r\n- [ ] `saturating_sub<T: Copy>(a: T, b: T) -> T;`\r\n- [ ] `discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;`\r\n- [ ] `variant_count<T>() -> usize;`\r\n- [ ] `r#try(try_fn: fn(*mut u8), data: *mut u8, catch_fn: fn(*mut u8, *mut u8)) -> i32;`\r\n- [ ] `nontemporal_store<T>(ptr: *mut T, val: T);`\r\n- [ ] `ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;`\r\n- [ ] `ptr_offset_from_unsigned<T>(ptr: *const T, base: *const T) -> usize;`\r\n- [ ] `ptr_guaranteed_eq<T>(ptr: *const T, other: *const T) -> bool;`\r\n- [ ] `ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;`\r\n- [ ] `const_allocate(size: usize, align: usize) -> *mut u8;`\r\n- [ ] `const_deallocate(ptr: *mut u8, size: usize, align: usize);`\r\n- [ ] `raw_eq<T>(a: &T, b: &T) -> bool;`\r\n- [ ] `black_box<T>(dummy: T) -> T;`\r\n- [ ] `vtable_size(ptr: *const ()) -> usize;`\r\n- [ ] `vtable_align(ptr: *const ()) -> usize;`\r\n- [x] `copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);`\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/658/timeline", "performed_via_github_app": null, "state_reason": null}